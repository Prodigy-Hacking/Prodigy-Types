export interface Player {
	_isFocusModeEnabled: boolean;
	_saveEnabled: boolean;
	appearanceChanged: boolean;
	earlyBirdLastChance: boolean;
	hasGrade: boolean;
	hasUsedTicket: boolean;
	immortal: boolean;
	inPVP: boolean;
	isClassCodeAttached: boolean;
	isFocusModeEnabled: boolean;
	isOpponent: boolean;
	justLeveled: boolean;
	memberPrompt: boolean;
	parentalLink: boolean;
	saveEnabled: boolean;
	showHealthBar: boolean;
	tt: boolean;
	tutorialCompletedThisSession: boolean;
	updated: boolean;
	aoaTier: number;
	broadcastId: number;
	catchAttempt: number;
	grade: number;
	pvpHP: number;
	spellStreak: number;
	starsEarned: number;
	starsReward: number;
	starsRewardBase: number;
	starsToProcess: number;
	userID: number;
	_locationSelectionType: string;
	_userDataPlatform: string;
	curriculumTreeID: string;
	locationSelectionType: string;
	parentEmail: string;
	type: string;
	userDataPlatform: string;
	username: string;
	_goalId: null;
	_playerContainer: null;
	chatID: null;
	coOpTeam: null;
	currentVideoSkillId: null;
	danceID: null;
	emoteID: null;
	goalId: null;
	lastVisited: null;
	memberShareDate: null;
	playerContainer: null;
	primaryParentID: null;
	source: null;
	transformID: null;
	world: null;
	memberEndDate: undefined;
	memberStartDate: undefined;
	team: undefined;
	addAsset(t: unknown): void;
	addAssets(t: unknown): void;
	addBattle(): void;
	addBountyScore(t: unknown): void;
	addLoss(): void;
	addSpell(t: unknown): void;
	addStars(i: unknown, n: unknown, e: unknown): unknown;
	addWin(): void;
	anyPetsAboveLevel(t: unknown): unknown;
	canCatch(): unknown;
	canSpin(t: unknown): unknown;
	castSpell(t: unknown): void;
	changeCurrentHearts(t: unknown, i: unknown): void;
	changeCurrentHeartsPercent(t: unknown): void;
	changeEnergy(t: unknown): void;
	changeGold(t: unknown, i: unknown): void;
	checkVersion(): unknown;
	completeDaily(t: unknown, i: unknown): void;
	completeTower(t: unknown): void;
	createDataClone(): unknown;
	createRandom(): void;
	diffAttackSlots(t: unknown): unknown;
	equip(t: unknown, i: unknown): unknown;
	evolve(t: unknown, i: unknown): void;
	forceSaveCharacter(): void;
	getAllAttacks(): unknown;
	getAllowsHouseVisitors(): unknown;
	getArenaPoints(): unknown;
	getAttacks(t: unknown): unknown;
	getAvailableEvolutions(): unknown;
	getBamSpells(t: unknown): unknown;
	getBaseMaxHearts(i: unknown): unknown;
	getBattles(): unknown;
	getBountyScore(): unknown;
	getColiseum(): unknown;
	getCurrentBamSpells(): unknown;
	getCurrentHearts(): unknown;
	getDailyQuestions(): unknown;
	getDamageBonus(): unknown;
	getDataAndClear(): unknown;
	getDrops(): unknown;
	getElement(): unknown;
	getEnergy(): unknown;
	getEquipmentSpell(t: unknown): unknown;
	getFirstName(): unknown;
	getGold(): unknown;
	getHeartBonus(): unknown;
	getID(): unknown;
	getLatestClassIDLegacy(): unknown;
	getLevel(): unknown;
	getLevelingCurve(t: unknown): unknown;
	getLosses(): unknown;
	getMaxHearts(t: unknown): unknown;
	getMaxTimeForCurrentMorphMarbleEffect(): unknown;
	getName(): unknown;
	getNameWithoutNickname(): unknown;
	getNativeSpell(t: unknown, i: unknown): unknown;
	getNumAttacks(): unknown;
	getNumRelics(): unknown;
	getPercentToLevel(): unknown;
	getPlayerClass(): unknown;
	getPlayerData(): unknown;
	getRegisterDate(): unknown;
	getSettings(): unknown;
	getSpellAssets(): unknown;
	getSpellStreak(): unknown;
	getStarReward(): unknown;
	getStarRewardByDamage(t: unknown): unknown;
	getStars(): unknown;
	getStarsToLevel(): unknown;
	getStatHealth(): unknown;
	getStatPower(): unknown;
	getTeamScore(): unknown;
	getTowerProgress(): unknown;
	getUpdatedData(t: unknown, i: unknown): unknown;
	getWins(): unknown;
	hasCompletedTowerTownTutorial(): unknown;
	hasCompletedTutorial(): unknown;
	hasHouseItem(t: unknown): unknown;
	hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
	hasMembership(): unknown;
	hasValidatedParentEmail(): unknown;
	hasValidatedTeacherEmail(): unknown;
	heal(): void;
	healTeam(t: unknown): void;
	healTeamMember(t: unknown, i: unknown, n: unknown): void;
	init(i: unknown): unknown;
	initEducation(): void;
	initFromProtobuf(t: unknown): void;
	isBlockedByDarkTowerMemberGate(): unknown;
	isItemOwned(t: unknown): unknown;
	isKnockedOut(): unknown;
	isPlayerTransformed(): unknown;
	isPlayingAtSchool(): unknown;
	onEducationLoaded(t: unknown): void;
	onTutorialComplete(): void;
	originalHasMembership(): unknown;
	processDeserter(): unknown;
	processStars(): void;
	registerIncomingAttack(t: unknown, i: unknown, n: unknown, e: unknown): void;
	removeTeam(): void;
	resetAccount(): unknown;
	resetModifiers(): void;
	rewardMembershipPrizes(t: unknown): unknown;
	sendInitialGTMEvents(): void;
	setAllowsHouseVisitors(i: unknown): void;
	setBGMVolume(t: unknown): void;
	setColiseum(t: unknown): void;
	setCurrentHearts(t: unknown, i: unknown): void;
	setData(t: unknown): void;
	setDefault(t: unknown, i: unknown): void;
	setEducation(t: unknown, i: unknown): void;
	setEnergy(i: unknown): void;
	setLocation(t: unknown): void;
	setMembership(t: unknown): void;
	setParentEmail(t: unknown): void;
	setPlayerClass(t: unknown): void;
	setSFXVolume(t: unknown): void;
	setSpinDate(t: unknown): void;
	setVoiceVolume(t: unknown): void;
	setZone(t: unknown): void;
	spinWheel(t: unknown): void;
	swapSpells(t: unknown, i: unknown): void;
	transformPlayer(i: unknown, n: unknown, e: unknown): void;
	unEquip(t: unknown): unknown;
	unlockMemberItems(): void;
	updateMembershipVideoAdData(): void;
	updateModifier(t: unknown, i: unknown): void;
	validateLevel(): void;
	registerDate: Date;
	_educationData: {
		chosenGrade: number;
		curriculumTreeID: number;
		grade: number;
		placementTestID: number;
		placementTestInstanceID: number;
		goalId: null;
		gradeOverride: null;
		homework: never[];
		placementTestData: {
			placementTestComposition: {
				1: unknown /* too deep */;
				2: unknown /* too deep */;
				3: unknown /* too deep */;
				4: unknown /* too deep */;
				5: unknown /* too deep */;
				6: unknown /* too deep */;
				7: unknown /* too deep */;
				8: unknown /* too deep */;
			};
			placementTestStats: {
				potentialPlacementGradeNum: null;
				currentStrandData: unknown /* too deep */;
				pastStrandData: unknown /* too deep */;
				placementTestSkillsEncountered: unknown /* too deep */;
			};
		};
		plans: never[];
		skills: never[];
	};
	_remoteLogger: {
		isLoggingEnabled(): unknown;
		logData(t: unknown, i: unknown): void;
		logStat(t: unknown, i: unknown): void;
		authProvider: {
			_renewalFailureWait: number;
			_renewalTimer: number;
			authenticateRequest(t: unknown): void;
			getToken(): unknown;
			handleErrorCallback(): void;
			isLoggedIn(): unknown;
			logout(): void;
			renewToken(): unknown;
			setToken(t: unknown): void;
			validate(t: unknown): unknown;
			_httpClient: {
				_baseURI: string;
				clearDefaultResponseHandler(t: unknown): void;
				getBaseURI(): unknown;
				getDefaultHeaders(): unknown;
				getRequestInitData(t: unknown): unknown;
				retryRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				sendFetchRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				sendRequest(t: unknown): unknown;
				setBaseURI(t: unknown): void;
				setDefaultHeader(t: unknown, i: unknown, n: unknown): void;
				setDefaultResponseHandler(t: unknown, i: unknown, n: unknown): void;
				_defaultHeaders: Map<never, never>;
				_defaultResponseHandler: Map<string, unknown /* too deep */>;
			};
			_sessionTokenAuth: {
				_userID: number;
				_token: string;
				authenticateRequest(t: unknown): void;
				getSessionToken(): unknown;
				getUserID(): unknown;
				isLoggedIn(): unknown;
				logout(): void;
				setSessionToken(t: unknown, i: unknown): void;
			};
			timeManager: {
				isServerDeltaSet: boolean;
				_timezoneOffset: number;
				serverTimeDeltaMs: number;
				getIsServerDeltaSet(): unknown;
				getLocalTimeMs(): unknown;
				getServerTimeDeltaMs(): unknown;
				getServerTimeMs(): unknown;
				getUTCOffset(): unknown;
				setServerTime(t: unknown): void;
			};
		};
		currentPlayer: {
			addStars(t: unknown): void;
			dispatchStatChange(t: unknown, i: unknown, n: unknown): void;
			getAppearance(): unknown;
			getBaseHearts(): unknown;
			getFirstName(): unknown;
			getLastName(): unknown;
			getLevel(): unknown;
			getMiddleName(): unknown;
			getNickname(): unknown;
			getPlayer(): unknown;
			getStars(): unknown;
			getUserID(): unknown;
			giveItem(t: unknown, i: unknown, n: unknown): void;
			hasParentLinkedEmail(): unknown;
			initialize(t: unknown): void;
			isMember(): unknown;
			logout(): void;
			setSavingEnabled(t: unknown): void;
			_player: {
				_isFocusModeEnabled: boolean;
				_saveEnabled: boolean;
				appearanceChanged: boolean;
				earlyBirdLastChance: boolean;
				hasGrade: boolean;
				hasUsedTicket: boolean;
				immortal: boolean;
				inPVP: boolean;
				isClassCodeAttached: boolean;
				isFocusModeEnabled: boolean;
				isOpponent: boolean;
				justLeveled: boolean;
				memberPrompt: boolean;
				parentalLink: boolean;
				saveEnabled: boolean;
				showHealthBar: boolean;
				tt: boolean;
				tutorialCompletedThisSession: boolean;
				updated: boolean;
				aoaTier: number;
				broadcastId: number;
				catchAttempt: number;
				grade: number;
				pvpHP: number;
				spellStreak: number;
				starsEarned: number;
				starsReward: number;
				starsRewardBase: number;
				starsToProcess: number;
				userID: number;
				_locationSelectionType: string;
				_userDataPlatform: string;
				curriculumTreeID: string;
				locationSelectionType: string;
				parentEmail: string;
				type: string;
				userDataPlatform: string;
				username: string;
				_goalId: null;
				_playerContainer: null;
				chatID: null;
				coOpTeam: null;
				currentVideoSkillId: null;
				danceID: null;
				emoteID: null;
				goalId: null;
				lastVisited: null;
				memberShareDate: null;
				playerContainer: null;
				primaryParentID: null;
				source: null;
				transformID: null;
				world: null;
				memberEndDate: undefined;
				memberStartDate: undefined;
				team: undefined;
				addAsset(t: unknown): void;
				addAssets(t: unknown): void;
				addBattle(): void;
				addBountyScore(t: unknown): void;
				addLoss(): void;
				addSpell(t: unknown): void;
				addStars(i: unknown, n: unknown, e: unknown): unknown;
				addWin(): void;
				anyPetsAboveLevel(t: unknown): unknown;
				canCatch(): unknown;
				canSpin(t: unknown): unknown;
				castSpell(t: unknown): void;
				changeCurrentHearts(t: unknown, i: unknown): void;
				changeCurrentHeartsPercent(t: unknown): void;
				changeEnergy(t: unknown): void;
				changeGold(t: unknown, i: unknown): void;
				checkVersion(): unknown;
				completeDaily(t: unknown, i: unknown): void;
				completeTower(t: unknown): void;
				createDataClone(): unknown;
				createRandom(): void;
				diffAttackSlots(t: unknown): unknown;
				equip(t: unknown, i: unknown): unknown;
				evolve(t: unknown, i: unknown): void;
				forceSaveCharacter(): void;
				getAllAttacks(): unknown;
				getAllowsHouseVisitors(): unknown;
				getArenaPoints(): unknown;
				getAttacks(t: unknown): unknown;
				getAvailableEvolutions(): unknown;
				getBamSpells(t: unknown): unknown;
				getBaseMaxHearts(i: unknown): unknown;
				getBattles(): unknown;
				getBountyScore(): unknown;
				getColiseum(): unknown;
				getCurrentBamSpells(): unknown;
				getCurrentHearts(): unknown;
				getDailyQuestions(): unknown;
				getDamageBonus(): unknown;
				getDataAndClear(): unknown;
				getDrops(): unknown;
				getElement(): unknown;
				getEnergy(): unknown;
				getEquipmentSpell(t: unknown): unknown;
				getFirstName(): unknown;
				getGold(): unknown;
				getHeartBonus(): unknown;
				getID(): unknown;
				getLatestClassIDLegacy(): unknown;
				getLevel(): unknown;
				getLevelingCurve(t: unknown): unknown;
				getLosses(): unknown;
				getMaxHearts(t: unknown): unknown;
				getMaxTimeForCurrentMorphMarbleEffect(): unknown;
				getName(): unknown;
				getNameWithoutNickname(): unknown;
				getNativeSpell(t: unknown, i: unknown): unknown;
				getNumAttacks(): unknown;
				getNumRelics(): unknown;
				getPercentToLevel(): unknown;
				getPlayerClass(): unknown;
				getPlayerData(): unknown;
				getRegisterDate(): unknown;
				getSettings(): unknown;
				getSpellAssets(): unknown;
				getSpellStreak(): unknown;
				getStarReward(): unknown;
				getStarRewardByDamage(t: unknown): unknown;
				getStars(): unknown;
				getStarsToLevel(): unknown;
				getStatHealth(): unknown;
				getStatPower(): unknown;
				getTeamScore(): unknown;
				getTowerProgress(): unknown;
				getUpdatedData(t: unknown, i: unknown): unknown;
				getWins(): unknown;
				hasCompletedTowerTownTutorial(): unknown;
				hasCompletedTutorial(): unknown;
				hasHouseItem(t: unknown): unknown;
				hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
				hasMembership(): unknown;
				hasValidatedParentEmail(): unknown;
				hasValidatedTeacherEmail(): unknown;
				heal(): void;
				healTeam(t: unknown): void;
				healTeamMember(t: unknown, i: unknown, n: unknown): void;
				init(i: unknown): unknown;
				initEducation(): void;
				initFromProtobuf(t: unknown): void;
				isBlockedByDarkTowerMemberGate(): unknown;
				isItemOwned(t: unknown): unknown;
				isKnockedOut(): unknown;
				isPlayerTransformed(): unknown;
				isPlayingAtSchool(): unknown;
				onEducationLoaded(t: unknown): void;
				onTutorialComplete(): void;
				originalHasMembership(): unknown;
				processDeserter(): unknown;
				processStars(): void;
				registerIncomingAttack(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeTeam(): void;
				resetAccount(): unknown;
				resetModifiers(): void;
				rewardMembershipPrizes(t: unknown): unknown;
				sendInitialGTMEvents(): void;
				setAllowsHouseVisitors(i: unknown): void;
				setBGMVolume(t: unknown): void;
				setColiseum(t: unknown): void;
				setCurrentHearts(t: unknown, i: unknown): void;
				setData(t: unknown): void;
				setDefault(t: unknown, i: unknown): void;
				setEducation(t: unknown, i: unknown): void;
				setEnergy(i: unknown): void;
				setLocation(t: unknown): void;
				setMembership(t: unknown): void;
				setParentEmail(t: unknown): void;
				setPlayerClass(t: unknown): void;
				setSFXVolume(t: unknown): void;
				setSpinDate(t: unknown): void;
				setVoiceVolume(t: unknown): void;
				setZone(t: unknown): void;
				spinWheel(t: unknown): void;
				swapSpells(t: unknown, i: unknown): void;
				transformPlayer(i: unknown, n: unknown, e: unknown): void;
				unEquip(t: unknown): unknown;
				unlockMemberItems(): void;
				updateMembershipVideoAdData(): void;
				updateModifier(t: unknown, i: unknown): void;
				validateLevel(): void;
				registerDate: Date;
				_educationData: unknown /* too deep */;
				_remoteLogger: unknown /* too deep */;
				achievements: unknown /* too deep */;
				appearance: unknown /* too deep */;
				backpack: unknown /* too deep */;
				classIDs: unknown /* too deep */;
				daily: unknown /* too deep */;
				dailyQuestions: unknown /* too deep */;
				data: unknown /* too deep */;
				educationData: unknown /* too deep */;
				encounters: unknown /* too deep */;
				equipment: unknown /* too deep */;
				game: unknown /* too deep */;
				house: unknown /* too deep */;
				kennel: unknown /* too deep */;
				modifiers: unknown /* too deep */;
				name: unknown /* too deep */;
				onHPChange: unknown /* too deep */;
				owners: unknown /* too deep */;
				playerParents: unknown /* too deep */;
				playerTeachers: unknown /* too deep */;
				quests: unknown /* too deep */;
				state: unknown /* too deep */;
				tutorial: unknown /* too deep */;
			};
			onStatChanged: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			OnStatChanged: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			player: {
				_isFocusModeEnabled: boolean;
				_saveEnabled: boolean;
				appearanceChanged: boolean;
				earlyBirdLastChance: boolean;
				hasGrade: boolean;
				hasUsedTicket: boolean;
				immortal: boolean;
				inPVP: boolean;
				isClassCodeAttached: boolean;
				isFocusModeEnabled: boolean;
				isOpponent: boolean;
				justLeveled: boolean;
				memberPrompt: boolean;
				parentalLink: boolean;
				saveEnabled: boolean;
				showHealthBar: boolean;
				tt: boolean;
				tutorialCompletedThisSession: boolean;
				updated: boolean;
				aoaTier: number;
				broadcastId: number;
				catchAttempt: number;
				grade: number;
				pvpHP: number;
				spellStreak: number;
				starsEarned: number;
				starsReward: number;
				starsRewardBase: number;
				starsToProcess: number;
				userID: number;
				_locationSelectionType: string;
				_userDataPlatform: string;
				curriculumTreeID: string;
				locationSelectionType: string;
				parentEmail: string;
				type: string;
				userDataPlatform: string;
				username: string;
				_goalId: null;
				_playerContainer: null;
				chatID: null;
				coOpTeam: null;
				currentVideoSkillId: null;
				danceID: null;
				emoteID: null;
				goalId: null;
				lastVisited: null;
				memberShareDate: null;
				playerContainer: null;
				primaryParentID: null;
				source: null;
				transformID: null;
				world: null;
				memberEndDate: undefined;
				memberStartDate: undefined;
				team: undefined;
				addAsset(t: unknown): void;
				addAssets(t: unknown): void;
				addBattle(): void;
				addBountyScore(t: unknown): void;
				addLoss(): void;
				addSpell(t: unknown): void;
				addStars(i: unknown, n: unknown, e: unknown): unknown;
				addWin(): void;
				anyPetsAboveLevel(t: unknown): unknown;
				canCatch(): unknown;
				canSpin(t: unknown): unknown;
				castSpell(t: unknown): void;
				changeCurrentHearts(t: unknown, i: unknown): void;
				changeCurrentHeartsPercent(t: unknown): void;
				changeEnergy(t: unknown): void;
				changeGold(t: unknown, i: unknown): void;
				checkVersion(): unknown;
				completeDaily(t: unknown, i: unknown): void;
				completeTower(t: unknown): void;
				createDataClone(): unknown;
				createRandom(): void;
				diffAttackSlots(t: unknown): unknown;
				equip(t: unknown, i: unknown): unknown;
				evolve(t: unknown, i: unknown): void;
				forceSaveCharacter(): void;
				getAllAttacks(): unknown;
				getAllowsHouseVisitors(): unknown;
				getArenaPoints(): unknown;
				getAttacks(t: unknown): unknown;
				getAvailableEvolutions(): unknown;
				getBamSpells(t: unknown): unknown;
				getBaseMaxHearts(i: unknown): unknown;
				getBattles(): unknown;
				getBountyScore(): unknown;
				getColiseum(): unknown;
				getCurrentBamSpells(): unknown;
				getCurrentHearts(): unknown;
				getDailyQuestions(): unknown;
				getDamageBonus(): unknown;
				getDataAndClear(): unknown;
				getDrops(): unknown;
				getElement(): unknown;
				getEnergy(): unknown;
				getEquipmentSpell(t: unknown): unknown;
				getFirstName(): unknown;
				getGold(): unknown;
				getHeartBonus(): unknown;
				getID(): unknown;
				getLatestClassIDLegacy(): unknown;
				getLevel(): unknown;
				getLevelingCurve(t: unknown): unknown;
				getLosses(): unknown;
				getMaxHearts(t: unknown): unknown;
				getMaxTimeForCurrentMorphMarbleEffect(): unknown;
				getName(): unknown;
				getNameWithoutNickname(): unknown;
				getNativeSpell(t: unknown, i: unknown): unknown;
				getNumAttacks(): unknown;
				getNumRelics(): unknown;
				getPercentToLevel(): unknown;
				getPlayerClass(): unknown;
				getPlayerData(): unknown;
				getRegisterDate(): unknown;
				getSettings(): unknown;
				getSpellAssets(): unknown;
				getSpellStreak(): unknown;
				getStarReward(): unknown;
				getStarRewardByDamage(t: unknown): unknown;
				getStars(): unknown;
				getStarsToLevel(): unknown;
				getStatHealth(): unknown;
				getStatPower(): unknown;
				getTeamScore(): unknown;
				getTowerProgress(): unknown;
				getUpdatedData(t: unknown, i: unknown): unknown;
				getWins(): unknown;
				hasCompletedTowerTownTutorial(): unknown;
				hasCompletedTutorial(): unknown;
				hasHouseItem(t: unknown): unknown;
				hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
				hasMembership(): unknown;
				hasValidatedParentEmail(): unknown;
				hasValidatedTeacherEmail(): unknown;
				heal(): void;
				healTeam(t: unknown): void;
				healTeamMember(t: unknown, i: unknown, n: unknown): void;
				init(i: unknown): unknown;
				initEducation(): void;
				initFromProtobuf(t: unknown): void;
				isBlockedByDarkTowerMemberGate(): unknown;
				isItemOwned(t: unknown): unknown;
				isKnockedOut(): unknown;
				isPlayerTransformed(): unknown;
				isPlayingAtSchool(): unknown;
				onEducationLoaded(t: unknown): void;
				onTutorialComplete(): void;
				originalHasMembership(): unknown;
				processDeserter(): unknown;
				processStars(): void;
				registerIncomingAttack(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeTeam(): void;
				resetAccount(): unknown;
				resetModifiers(): void;
				rewardMembershipPrizes(t: unknown): unknown;
				sendInitialGTMEvents(): void;
				setAllowsHouseVisitors(i: unknown): void;
				setBGMVolume(t: unknown): void;
				setColiseum(t: unknown): void;
				setCurrentHearts(t: unknown, i: unknown): void;
				setData(t: unknown): void;
				setDefault(t: unknown, i: unknown): void;
				setEducation(t: unknown, i: unknown): void;
				setEnergy(i: unknown): void;
				setLocation(t: unknown): void;
				setMembership(t: unknown): void;
				setParentEmail(t: unknown): void;
				setPlayerClass(t: unknown): void;
				setSFXVolume(t: unknown): void;
				setSpinDate(t: unknown): void;
				setVoiceVolume(t: unknown): void;
				setZone(t: unknown): void;
				spinWheel(t: unknown): void;
				swapSpells(t: unknown, i: unknown): void;
				transformPlayer(i: unknown, n: unknown, e: unknown): void;
				unEquip(t: unknown): unknown;
				unlockMemberItems(): void;
				updateMembershipVideoAdData(): void;
				updateModifier(t: unknown, i: unknown): void;
				validateLevel(): void;
				registerDate: Date;
				_educationData: unknown /* too deep */;
				_remoteLogger: unknown /* too deep */;
				achievements: unknown /* too deep */;
				appearance: unknown /* too deep */;
				backpack: unknown /* too deep */;
				classIDs: unknown /* too deep */;
				daily: unknown /* too deep */;
				dailyQuestions: unknown /* too deep */;
				data: unknown /* too deep */;
				educationData: unknown /* too deep */;
				encounters: unknown /* too deep */;
				equipment: unknown /* too deep */;
				game: unknown /* too deep */;
				house: unknown /* too deep */;
				kennel: unknown /* too deep */;
				modifiers: unknown /* too deep */;
				name: unknown /* too deep */;
				onHPChange: unknown /* too deep */;
				owners: unknown /* too deep */;
				playerParents: unknown /* too deep */;
				playerTeachers: unknown /* too deep */;
				quests: unknown /* too deep */;
				state: unknown /* too deep */;
				tutorial: unknown /* too deep */;
			};
		};
		featureFlags: {
			getClassCodePromptCurriculumBlacklist(): unknown;
			getDataURI(): unknown;
			getFeatureRevisionsURIs(): unknown;
			getMultiplayerClusterForWorld(t: unknown): unknown;
			getValue(t: unknown, i: unknown): unknown;
			getWorkerPath(t: unknown): unknown;
			initializeWithJson(t: unknown): void;
			isEventEnabled(t: unknown): unknown;
			isFeatureEnabled(t: unknown): unknown;
			environment: {
				getCurrentEnvironment(): unknown;
				getCurrentEnvironmentByHost(): unknown;
				getEnvironmentString(): unknown;
				getWindowHost(): unknown;
				getWindowQueryString(): unknown;
			};
			jsonData: {
				allOutAttackDisabled: boolean;
				autoAttackDisabled: boolean;
				coOpTitanDisabled: boolean;
				disableMembershipVideoAdDuringSchoolHours: boolean;
				disableParentAttach5: boolean;
				disableTrialMembership: boolean;
				enableMembershipVideoAd: boolean;
				enableVerboseAnalytics: boolean;
				enableVerboseGameServer: boolean;
				enableYouTubeAd: boolean;
				enableYouTubeTimeCheck: boolean;
				experimentLE2: boolean;
				experimentLE3LaneB: boolean;
				experimentLE3LaneC: boolean;
				"loader-allowedOverrideIps": boolean;
				"loader-gameClientOverride": boolean;
				"loader-phaserPIXI": boolean;
				maintenance: boolean;
				removeAssets: boolean;
				useServerTimeForVideoLockout: boolean;
				videoLessonInstantWin: boolean;
				gameDataVersion: number;
				gameServerRollout: number;
				"loader-gameDataVersionOverride": number;
				"loader-pixiCanary": number;
				"loader-pixiDataVersion": number;
				maintenanceMessage: number;
				sentrySampleRate: number;
				setFest: number;
				surveyCheckIntervalMinutes: number;
				debugPassword: string;
				gameClientVersion: string;
				gameCodePath: string;
				gameDataPath: string;
				gameLibPath: string;
				"loader-gameCodePathOverride": string;
				"loader-pixiClientVersion": string;
				ServerGameVersion: string;
				splashScreen: string;
				classCodePromptCurriculumBlacklist: unknown /* too deep */;
				enabledEvents: unknown /* too deep */;
				googleLoginSettings: unknown /* too deep */;
				"loader-allowedIps": unknown /* too deep */;
				"loader-windowVarBlacklist": unknown /* too deep */;
				lockoutTrial: unknown /* too deep */;
				multiplayerClusterLocations: unknown /* too deep */;
				parentAttachTrial: unknown /* too deep */;
				prodigyGameFlags: unknown /* too deep */;
				recordingFeatures: unknown /* too deep */;
			};
		};
		httpClient: {
			_baseURI: string;
			clearDefaultResponseHandler(t: unknown): void;
			getBaseURI(): unknown;
			getDefaultHeaders(): unknown;
			getRequestInitData(t: unknown): unknown;
			retryRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sendFetchRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sendRequest(t: unknown): unknown;
			setBaseURI(t: unknown): void;
			setDefaultHeader(t: unknown, i: unknown, n: unknown): void;
			setDefaultResponseHandler(t: unknown, i: unknown, n: unknown): void;
			_defaultHeaders: Map<never, never>;
			_defaultResponseHandler: Map<string, unknown /* too deep */>;
		};
	};
	achievements: {
		updated: boolean;
		complete(t: unknown): void;
		get(t: unknown): unknown;
		getDataAndClear(): unknown;
		getProgress(t: unknown): unknown;
		increment(t: unknown, i: unknown): void;
		init(t: unknown): void;
		set(t: unknown, i: unknown): void;
		data: {
			progress: {};
		};
	};
	appearance: {
		updated: boolean;
		eyeColor: number;
		face: number;
		hairColor: number;
		hairStyle: number;
		skinColor: number;
		gender: string;
		generateRandom(): void;
		getData(): unknown;
		getDataAndClear(): unknown;
		getEyeColor(): unknown;
		getFace(): unknown;
		getGender(): unknown;
		getHair(): unknown;
		getName(): unknown;
		getSkinColor(): unknown;
		init(i: unknown): void;
		randomize(): void;
		setEyeColor(i: unknown): void;
		setFace(i: unknown): void;
		setGender(i: unknown): void;
		setHair(i: unknown, n: unknown): void;
		setName(t: unknown): void;
		setSkinColor(i: unknown): void;
		_name: {
			firstName: number;
			lastName: number;
			middleName: number;
			nickname: null;
			getFirstName(): unknown;
			getLastName(): unknown;
			getMiddleName(): unknown;
			getNickname(): unknown;
			isValid(): unknown;
			setFirstName(t: unknown): void;
			setLastName(t: unknown): void;
			setMiddleName(t: unknown): void;
			setNickname(t: unknown): void;
		};
		name: {
			firstName: number;
			lastName: number;
			middleName: number;
			nickname: null;
			getFirstName(): unknown;
			getLastName(): unknown;
			getMiddleName(): unknown;
			getNickname(): unknown;
			isValid(): unknown;
			setFirstName(t: unknown): void;
			setLastName(t: unknown): void;
			setMiddleName(t: unknown): void;
			setNickname(t: unknown): void;
		};
		playerService: {
			getAppearance(t: unknown): unknown;
			getPlayer(t: unknown): unknown;
			factoriesContainer: {
				guid: string;
				_middleware: null;
				parent: null;
				_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
				_planAndResolve(): unknown;
				applyCustomMetadataReader(t: unknown): void;
				applyMiddleware(): unknown;
				bind(t: unknown): unknown;
				createChild(): unknown;
				get(t: unknown): unknown;
				getAll(t: unknown): unknown;
				getAllNamed(t: unknown, n: unknown): unknown;
				getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
				getNamed(t: unknown, n: unknown): unknown;
				getTagged(t: unknown, n: unknown, e: unknown): unknown;
				isBound(t: unknown): unknown;
				isBoundNamed(t: unknown, n: unknown): unknown;
				isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
				load(): unknown;
				rebind(t: unknown): unknown;
				resolve(n: unknown): unknown;
				restore(): void;
				snapshot(): void;
				unbind(t: unknown): void;
				unbindAll(): void;
				unload(): unknown;
				_bindingDictionary: unknown /* too deep */;
				_metadataReader: unknown /* too deep */;
				_snapshots: unknown /* too deep */;
				options: unknown /* too deep */;
			};
		};
	};
	backpack: {
		updated: boolean;
		add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		addBountyNote(t: unknown, i: unknown, n: unknown): void;
		addKeyItem(t: unknown, i: unknown, n: unknown): unknown;
		canCraft(t: unknown, i: unknown): unknown;
		consume(t: unknown, i: unknown, n: unknown): unknown;
		consumeLegacyBounties(): void;
		craft(t: unknown, i: unknown): void;
		getBackpackItemsByType(t: unknown): unknown;
		getBattleItems(t: unknown): unknown;
		getDataAndClear(): unknown;
		getItem(t: unknown, i: unknown): unknown;
		getItemCount(t: unknown): unknown;
		getItemData(t: unknown, i: unknown): unknown;
		getKeyItemData(t: unknown, i: unknown): unknown;
		getTotalUnique(): unknown;
		hasItem(t: unknown, i: unknown): unknown;
		hasItems(t: unknown): unknown;
		hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
		setItemData(t: unknown, i: unknown, n: unknown): void;
		setItems(t: unknown): void;
		setKeyItemData(t: unknown, i: unknown, n: unknown): void;
		unlockAllItems(): void;
		data: {
			boots: never[];
			currency: never[];
			follow: never[];
			fossil: never[];
			hat: never[];
			item: never[];
			key: never[];
			mount: never[];
			outfit: never[];
			relic: never[];
			spellRelic: never[];
			weapon: never[];
		};
	};
	classIDs: string[];
	daily: {
		_isComplete: boolean;
		_updated: boolean;
		isComplete: boolean;
		updated: boolean;
		_festivalName: undefined;
		_location: undefined;
		_monsterID: undefined;
		festivalName: undefined;
		location: undefined;
		monsterID: undefined;
		complete(): void;
		getData(): unknown;
		getDataAndClear(): unknown;
		init(t: unknown): void;
		isExpired(t: unknown): unknown;
		reset(): void;
		start(t: unknown, i: unknown, n: unknown): void;
		_lastStarted: Date;
		lastStarted: Date;
	};
	dailyQuestions: {
		currentDay: number;
		previousData: null;
		adjustNumAnswered(t: unknown): void;
		clearPreviousData(): void;
		createValidData(i: unknown): unknown;
		getCurrentDay(): unknown;
		getDataAndClear(t: unknown): unknown;
		getNumAnsweredToday(): unknown;
		getNumRequired(i: unknown): unknown;
		getNumRequiredToday(): unknown;
		getPreviousNumAnsweredToday(): unknown;
		getResetDayIndex(): unknown;
		getRewards(t: unknown, i: unknown): unknown;
		getStartedChallenge(): unknown;
		giveReward(t: unknown, i: unknown, n: unknown, e: unknown): void;
		hasPreviousData(): unknown;
		init(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): void;
		isCurrentDayComplete(): unknown;
		isDayComplete(t: unknown): unknown;
		onQuestonAnswered(t: unknown, i: unknown, n: unknown, r: unknown): void;
		postNotification(t: unknown): void;
		processDate(i: unknown, n: unknown): void;
		resetData(): void;
		setCurrentDay(t: unknown): void;
		setDayComplete(t: unknown, i: unknown): void;
		setNumQuestionsAnswered(t: unknown): void;
		setStartedChallenge(t: unknown): void;
		data: {
			startedChallenge: boolean;
			completedDays: number;
			numAnsweredToday: number;
		};
		onDataUpdated: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		rewards: {
			resetDayIndex: number;
			name: string;
			days: unknown /* too deep */[];
		};
	};
	data: {
		allowsHouseVisitors: boolean;
		hp: number;
		level: number;
		nm: number;
		stars: number;
		startDate: number;
		storedMemberStars: number;
		team: number;
		versionID: number;
		school: string;
		zone: string;
		daily: {
			isComplete: boolean;
			lastStarted: number;
		};
		settings: {
			bgmVolume: number;
			sfxVolume: number;
			voiceVolume: number;
		};
	};
	educationData: {
		chosenGrade: number;
		curriculumTreeID: number;
		grade: number;
		placementTestID: number;
		placementTestInstanceID: number;
		goalId: null;
		gradeOverride: null;
		homework: never[];
		placementTestData: {
			placementTestComposition: {
				1: unknown /* too deep */;
				2: unknown /* too deep */;
				3: unknown /* too deep */;
				4: unknown /* too deep */;
				5: unknown /* too deep */;
				6: unknown /* too deep */;
				7: unknown /* too deep */;
				8: unknown /* too deep */;
			};
			placementTestStats: {
				potentialPlacementGradeNum: null;
				currentStrandData: unknown /* too deep */;
				pastStrandData: unknown /* too deep */;
				placementTestSkillsEncountered: unknown /* too deep */;
			};
		};
		plans: never[];
		skills: never[];
	};
	encounters: {
		updated: boolean;
		addToPetTimesBattled(t: unknown, i: unknown): void;
		addToPetTimesRescued(t: unknown, i: unknown): void;
		clearAdData(): void;
		createNewPetEncounter(t: unknown): void;
		getAllTotalPetsRecused(): unknown;
		getDataAndClear(): unknown;
		getPetEncounterByID(t: unknown): unknown;
		getPetTimesBattled(t: unknown): unknown;
		getPetTimesRescued(t: unknown): unknown;
		hasPetBeenEncountered(t: unknown): unknown;
		hasSeenAd(t: unknown): unknown;
		markAdSeen(t: unknown): void;
		onPetEncountered(t: unknown): void;
		removeAd(t: unknown): unknown;
		setData(t: unknown): void;
		_data: {
			ads: never[];
			pets: unknown /* too deep */[];
		};
		_timeManager: {
			isServerDeltaSet: boolean;
			_timezoneOffset: number;
			serverTimeDeltaMs: number;
			getIsServerDeltaSet(): unknown;
			getLocalTimeMs(): unknown;
			getServerTimeDeltaMs(): unknown;
			getServerTimeMs(): unknown;
			getUTCOffset(): unknown;
			setServerTime(t: unknown): void;
		};
	};
	equipment: {
		updated: boolean;
		boots: number;
		follow: number;
		hat: number;
		outfit: number;
		weapon: number;
		mount: undefined;
		spellRelic: undefined;
		calculateAffixBonus(t: unknown): unknown;
		clearData(): void;
		getAffixes(t: unknown, i: unknown): unknown;
		getBoots(): unknown;
		getDamageBonuses(): unknown;
		getData(): unknown;
		getDataAndClear(): unknown;
		getEquipment(t: unknown): unknown;
		getFollow(): unknown;
		getHat(): unknown;
		getHeartBonuses(): unknown;
		getMount(): unknown;
		getOutfit(): unknown;
		getSpellRelic(): unknown;
		getWeapon(): unknown;
		handleItemEquip(t: unknown, i: unknown, n: unknown): void;
		handleItemUnequip(): void;
		init(t: unknown): void;
		randomize(): void;
		setBoots(i: unknown, n: unknown, e: unknown): void;
		setFollow(i: unknown): void;
		setHat(i: unknown, n: unknown, e: unknown): void;
		setMount(i: unknown, n: unknown, e: unknown): void;
		setOutfit(i: unknown, n: unknown, e: unknown): void;
		setSpellRelic(i: unknown, n: unknown, e: unknown): void;
		setWeapon(i: unknown, n: unknown, e: unknown): void;
		unequipLevelLockedItem(t: unknown, i: unknown): void;
		unequipLevelLockedItems(): void;
	};
	game: {
		_paused: boolean;
		_pausedByCode: boolean;
		isBooted: boolean;
		paused: boolean;
		pausedByCode: boolean;
		transparent: boolean;
		versioned: boolean;
		_height: number;
		_width: number;
		broadcastId: number;
		height: number;
		resolution: number;
		width: number;
		clientVersion: string;
		windowHeight: undefined;
		windowWidth: undefined;
		boot(): void;
		bootSystems(): void;
		createApp(i: unknown, n: unknown): unknown;
		createSystems(): void;
		destroy(): void;
		focusGain(t: unknown): void;
		focusLoss(t: unknown): void;
		gamePaused(t: unknown): void;
		gameResumed(t: unknown): void;
		init(): void;
		pauseGame(t: unknown): void;
		postUpdate(t: unknown): void;
		showDebugHeader(): void;
		toggleFpsGraph(): void;
		update(i: unknown): void;
		canvas: HTMLCanvasElement;
		parent: HTMLCanvasElement;
		_add: {
			audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			existing(t: unknown): unknown;
			graphics(t: unknown, i: unknown, n: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
			sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
			tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			tween(t: unknown, i: unknown, n: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		_app: {
			_resizeId: null;
			_resizeTo: null;
			resizeTo: null;
			cancelResize(): void;
			destroy(e: unknown, r: unknown): void;
			queueResize(): unknown;
			render(): void;
			resize(): void;
			start(): void;
			stop(): void;
			view: HTMLCanvasElement;
			_ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
		};
		_cache: {
			addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
			addImage(t: unknown, i: unknown, n: unknown): void;
			addItem(t: unknown, i: unknown, n: unknown): void;
			addJSON(t: unknown, i: unknown): void;
			addRenderTexture(t: unknown, i: unknown): void;
			addSound(t: unknown, i: unknown): void;
			addSpine(t: unknown, i: unknown): void;
			addText(t: unknown, i: unknown): void;
			addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			checkBitmapDataKey(t: unknown): unknown;
			checkFrameData(t: unknown): unknown;
			checkImageKey(t: unknown): unknown;
			checkJSONKey(t: unknown): unknown;
			checkRenderTextureKey(t: unknown): unknown;
			checkSoundKey(t: unknown): unknown;
			checkSpineKey(t: unknown): unknown;
			checkTextKey(t: unknown): unknown;
			deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			getBitmapData(t: unknown): unknown;
			getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
			getFrameData(t: unknown, i: unknown): unknown;
			getImage(t: unknown): unknown;
			getJSON(t: unknown): unknown;
			getKeys(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getRenderTexture(t: unknown): unknown;
			getSound(t: unknown): unknown;
			getSpine(t: unknown): unknown;
			getText(t: unknown): unknown;
			getTexture(t: unknown, i: unknown): unknown;
			hasMap(t: unknown): unknown;
			isSoundDecoded(t: unknown): unknown;
			removeAllItems(): void;
			removeAllItemsOfType(t: unknown): void;
			removeBitmapData(t: unknown): void;
			removeImage(t: unknown): void;
			removeItem(t: unknown, i: unknown): void;
			removeJSON(t: unknown): void;
			removeRenderTexture(t: unknown): void;
			removeSound(t: unknown): void;
			removeSpine(t: unknown): void;
			removeText(t: unknown): void;
			removeTextureAtlas(t: unknown): void;
			_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		_config: {
			failIfMajorPerformanceCaveat: boolean;
			roundPixels: boolean;
			height: number;
			width: number;
			parent: string;
		};
		_consoleLogger: {
			_shouldColorCodeLogs: boolean;
			_minimumLogLevel: number;
			_minimumStackTraceLogLevel: number;
			getLogStyle(t: unknown): unknown;
			getTextSytle(): unknown;
			log(t: unknown, i: unknown): void;
			setColoredLogsEnabled(t: unknown): void;
			setLogLevel(t: unknown): void;
		};
		_device: {
			android: boolean;
			fullscreenKeyboard: boolean;
			iOS: boolean;
			isFullScreenSupported: boolean;
			isInitialized: boolean;
			pointerLock: boolean;
			touch: boolean;
			webAudio: boolean;
			browser: number;
			deviceReadyAt: number;
			os: number;
			cancelFullscreen: string;
			requestFullscreen: string;
			wheelEvent: string;
			mspointer: undefined;
			checkFullScreen(): void;
			dispatchSignals(): void;
			isAndroidStockBrowser(): unknown;
			needsTouchUnlock(): unknown;
			readyCheck(): void;
			whenReady(t: unknown, i: unknown): void;
			callbacks: never[];
			onInitialized: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_input: {
			enabled: boolean;
			pollLocked: boolean;
			recordPointerHistory: boolean;
			resetLocked: boolean;
			_pollCounter: number;
			_x: number;
			_y: number;
			doubleTapRate: number;
			holdRate: number;
			justPressedRate: number;
			justReleasedRate: number;
			maxPointers: number;
			minPriorityID: number;
			multiInputOverride: number;
			pollRate: number;
			recordLimit: number;
			recordRate: number;
			tapRate: number;
			totalActivePointers: number;
			totalInactivePointers: number;
			worldX: number;
			worldY: number;
			x: number;
			y: number;
			customCandidateHandler: null;
			customCandidateHandlerContext: null;
			addMoveCallback(t: unknown, i: unknown): void;
			addPointer(): unknown;
			addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
			boot(t: unknown): void;
			clearEnterCallback(): void;
			countActivePointers(t: unknown): unknown;
			deleteMoveCallback(t: unknown, i: unknown): void;
			destroy(): void;
			executeTouchLockCallbacks(t: unknown, i: unknown): void;
			getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
			getPointer(t: unknown): unknown;
			getPointerFromId(t: unknown): unknown;
			getPointerFromIdentifier(t: unknown): unknown;
			hitTest(t: unknown, i: unknown): unknown;
			preUpdate(): void;
			removeTouchLockCallback(t: unknown, i: unknown): unknown;
			reset(t: unknown): void;
			resetSpeed(t: unknown, i: unknown): void;
			setEnterCallback(t: unknown): void;
			setInteractiveCandidateHandler(t: unknown, i: unknown): void;
			startPointer(t: unknown): unknown;
			stopPointer(t: unknown, i: unknown): unknown;
			update(): void;
			updateChildren(t: unknown): void;
			updateInteractiveItems(): void;
			updatePointer(t: unknown): unknown;
			hitCanvas: HTMLCanvasElement;
			hitContext: CanvasRenderingContext2D;
			_oldPosition: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			activePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			circle: {
				_diameter: number;
				_radius: number;
				circumference: number;
				diameter: number;
				radius: number;
				x: number;
				y: number;
				circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
				getBounds(): unknown;
				setTo(t: unknown, i: unknown, n: unknown): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			interactiveItems: {
				_cursor: number;
				total: number;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				first: unknown /* too deep */;
				list: unknown /* too deep */;
				next: unknown /* too deep */;
			};
			keyboard: {
				active: boolean;
				enabled: boolean;
				_i: number;
				_k: number;
				event: null;
				lastChar: null;
				pressEvent: null;
				lastKey: undefined;
				_onKeyDown(i: unknown): void;
				_onKeyPress(i: unknown): void;
				_onKeyUp(i: unknown): void;
				addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
				addKey(t: unknown): unknown;
				addKeyCapture(t: unknown): void;
				addKeys(t: unknown): unknown;
				clearCaptures(): void;
				createCursorKeys(): unknown;
				destroy(): void;
				downDuration(t: unknown, i: unknown): unknown;
				isDown(t: unknown): unknown;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				onDownCallback(arg0: unknown): void;
				onPressCallback(arg0: unknown): void;
				onUpCallback(arg0: unknown): void;
				processKeyDown(t: unknown): void;
				processKeyPress(t: unknown): void;
				processKeyUp(t: unknown): void;
				removeCallbacks(): void;
				removeKey(t: unknown): void;
				removeKeyCapture(t: unknown): void;
				reset(t: unknown): void;
				start(): unknown;
				stop(): void;
				update(): void;
				upDuration(t: unknown, i: unknown): unknown;
				_capture: unknown /* too deep */;
				_keys: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mouse: {
				active: boolean;
				capture: boolean;
				enabled: boolean;
				stopOnGameOut: boolean;
				wheelDelta: number;
				_onMouseDown(i: unknown): void;
				_onMouseMove(i: unknown): void;
				_onMouseOut(i: unknown): void;
				_onMouseOutGlobal(i: unknown): void;
				_onMouseOver(i: unknown): void;
				_onMouseUp(i: unknown): void;
				_onMouseUpGlobal(i: unknown): void;
				addMouseWheelCallback(t: unknown): unknown;
				onMouseDown(t: unknown): void;
				onMouseMove(t: unknown): void;
				onMouseOut(t: unknown): void;
				onMouseOutGlobal(t: unknown): void;
				onMouseOver(t: unknown): void;
				onMouseUp(t: unknown): void;
				onMouseUpGlobal(t: unknown): void;
				removeMouseWheelCallback(t: unknown): void;
				start(): unknown;
				stop(): void;
				event: MouseEvent;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			mousePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			mouseWheel: {
				active: boolean;
				preventDefault: boolean;
				delta: number;
				wheelEventName: string;
				boundOnWheelHandler(arg0: unknown): void;
				onWheelHandler(t: unknown): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				callbackContext: unknown /* too deep */;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mspointer: {
				active: boolean;
				pointerDownCallback: null;
				pointerMoveCallback: null;
				pointerUpCallback: null;
				onPointerDown(i: unknown): void;
				onPointerMove(i: unknown): void;
				onPointerOut(i: unknown): void;
				onPointerOver(i: unknown): void;
				onPointerUp(i: unknown): void;
				onPointerUpGlobal(i: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			onDown: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onHold: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onPointerMove: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTap: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchEndEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchStartEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUp: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			pointer1: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointer2: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointerLock: {
				active: boolean;
				locked: boolean;
				pointerlockchange: undefined;
				pointerLockElement: undefined;
				pointerlockerror: undefined;
				boundOnChangeHandler(arg0: unknown): void;
				boundOnErrorHandler(arg0: unknown): void;
				exit(): void;
				onChangeHandler(t: unknown): void;
				onErrorHandler(t: unknown): void;
				request(): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				game: unknown /* too deep */;
				onChange: unknown /* too deep */;
				onError: unknown /* too deep */;
			};
			pointers: unknown /* too deep */[];
			position: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scale: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			speed: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			touch: {
				active: boolean;
				enabled: boolean;
				consumeDocumentTouches(): void;
				onTouchCancel(t: unknown): void;
				onTouchEnd(t: unknown): void;
				onTouchEnter(t: unknown): void;
				onTouchLeave(t: unknown): void;
				onTouchMove(t: unknown): void;
				onTouchStart(t: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
		};
		_load: {
			isLoading: boolean;
			_crossOrigin: string;
			baseURL: string;
			crossOrigin: string;
			addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
			atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
			audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			fileCompleteCallback(t: unknown, i: unknown): void;
			fileStartCallback(t: unknown): void;
			getMaxParallelDownloads(): unknown;
			getNumLoadedFiles(): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown): void;
			json(t: unknown, i: unknown, n: unknown, e: unknown): void;
			processImage(t: unknown, i: unknown, n: unknown): void;
			processJSON(t: unknown, i: unknown, n: unknown): void;
			processScript(t: unknown, i: unknown): void;
			processSound(t: unknown, i: unknown, n: unknown): void;
			processSpine(t: unknown, i: unknown, n: unknown): void;
			processSpritesheet(t: unknown, i: unknown, n: unknown): void;
			processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			reset(t: unknown): void;
			script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			setupFileCallbacks(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
			spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			start(): void;
			totalQueuedFiles(): unknown;
			_loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			_onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onReset: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_onPause: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		_onResume: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		_rnd: {
			c: number;
			s0: number;
			s1: number;
			s2: number;
			angle(): unknown;
			frac(): unknown;
			hash(t: unknown): unknown;
			integer(): unknown;
			integerInRange(t: unknown, i: unknown): unknown;
			normal(): unknown;
			pick(t: unknown): unknown;
			real(): unknown;
			realInRange(t: unknown, i: unknown): unknown;
			rnd(): unknown;
			shuffle(t: unknown): unknown;
			sign(): unknown;
			sow(t: unknown): void;
			state(t: unknown): unknown;
			uuid(): unknown;
			weightedPick(t: unknown): unknown;
		};
		_scale: {
			_booted: boolean;
			_pageAlignHorizontally: boolean;
			_pageAlignVertically: boolean;
			forceLandscape: boolean;
			forcePortrait: boolean;
			incorrectOrientation: boolean;
			isFullScreen: boolean;
			isLandscape: boolean;
			isPortrait: boolean;
			pageAlignHorizontally: boolean;
			pageAlignVertically: boolean;
			parentIsWindow: boolean;
			_fullScreenScaleMode: number;
			_lastUpdate: number;
			_scaleMode: number;
			_updateThrottle: number;
			_updateThrottleReset: number;
			aspectRatio: number;
			currentScaleMode: number;
			fullScreenScaleMode: number;
			height: number;
			scaleMode: number;
			sourceAspectRatio: number;
			trackParentInterval: number;
			width: number;
			screenOrientation: string;
			_pendingScaleMode: null;
			onResizeContext: null;
			_fullScreenChange(i: unknown): void;
			_fullScreenError(i: unknown): void;
			_gameResumed(): void;
			_orientationChange(i: unknown): void;
			_windowResize(i: unknown): void;
			align(t: unknown, i: unknown): void;
			alignCanvas(t: unknown, i: unknown): void;
			boot(): void;
			cleanupCreatedTarget(): void;
			createFullScreenTarget(): unknown;
			destroy(): void;
			forceOrientation(t: unknown, i: unknown): void;
			fullScreenChange(t: unknown): void;
			fullScreenError(t: unknown): void;
			getParentBounds(t: unknown, i: unknown): unknown;
			orientationChange(t: unknown): void;
			parseConfig(t: unknown): void;
			pauseUpdate(): void;
			prepScreenMode(i: unknown): void;
			preUpdate(): void;
			queueUpdate(t: unknown): void;
			recalculateCanvasOffset(): void;
			reflowCanvas(): void;
			reflowGame(): void;
			refresh(): void;
			resetCanvas(t: unknown, i: unknown): void;
			setExactFit(): void;
			setGameSize(i: unknown, n: unknown): void;
			setMaximum(): void;
			setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setResizeCallback(t: unknown, i: unknown): void;
			setShowAll(t: unknown): void;
			setupScale(t: unknown, i: unknown): void;
			signalSizeChange(): void;
			startFullScreen(t: unknown, i: unknown): unknown;
			stopFullScreen(): unknown;
			updateDimensions(i: unknown, n: unknown, e: unknown): void;
			updateLayout(): void;
			updateOrientationState(): unknown;
			updateScalingAndBounds(): void;
			windowResize(t: unknown): void;
			boundingParent: HTMLDivElement;
			parentNode: HTMLCanvasElement;
			_gameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedCanvasSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedGameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_parentBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_tempBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			bounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			canvasOffset: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			dom: {
				scrollX: number;
				scrollY: number;
				getOffset(t: unknown, i: unknown): unknown;
				getScreenOrientation(): unknown;
				onDeviceReady(t: unknown): void;
				layoutBounds: unknown /* too deep */;
				visualBounds: unknown /* too deep */;
			};
			enterIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			leaveIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			margin: {
				bottom: number;
				left: number;
				right: number;
				top: number;
				x: number;
				y: number;
			};
			onFullScreenChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenError: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenInit: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onOrientationChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSizeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parentScaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactorInverted: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			windowConstraints: {
				bottom: string;
				right: string;
			};
		};
		_sound: {
			_codeMuted: boolean;
			_muted: boolean;
			_watching: boolean;
			connectToMaster: boolean;
			mute: boolean;
			muteOnPause: boolean;
			noAudio: boolean;
			touchLocked: boolean;
			baseLatency: number;
			channels: number;
			volume: number;
			_unlockSource: null;
			_watchCallback: null;
			_watchContext: null;
			_onResumeWebAudioOnClick(): void;
			_resumeWebAudioOnClick(): void;
			add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boot(): void;
			destroy(): void;
			pauseAll(): void;
			play(t: unknown, i: unknown, n: unknown): unknown;
			remove(t: unknown): unknown;
			removeAll(): void;
			removeByKey(t: unknown): unknown;
			resumeAll(): void;
			resumeWebAudio(): unknown;
			setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
			setMute(): void;
			setTouchLock(): void;
			setTouchUnlock(): void;
			stopAll(): void;
			unlock(): unknown;
			unsetMute(): void;
			update(): void;
			context: AudioContext;
			emptyBuffer: AudioBuffer;
			_sounds: never[];
			_watchList: {
				_cursor: number;
				total: number;
				first: null;
				next: null;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				list: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSoundDecode: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchUnlock: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUnMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onVolumeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			sounds: never[];
		};
		_stage: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
		_state: {
			_clearWorld: boolean;
			current: string;
			_pendingState: null;
			add(t: unknown, i: unknown, n: unknown): unknown;
			boot(): void;
			clearCurrentState(): void;
			destroy(): void;
			get(t: unknown): unknown;
			getCurrentState(): unknown;
			loadComplete(): void;
			pause(): void;
			preUpdate(): unknown;
			remove(t: unknown): void;
			resume(): void;
			setCurrentState(t: unknown): void;
			start(t: unknown, i: unknown): void;
			update(): void;
			_states: Map<string, unknown /* too deep */>;
			states: Map<string, unknown /* too deep */>;
			_current: {
				complete: boolean;
				fadeInSet: boolean;
				showMenu: boolean;
				_key: string;
				key: string;
				screenName: string;
				zoneName: string;
				_blockingOverlay: null;
				backButton: null;
				classCode: null;
				codeField: null;
				error: null;
				nextButton: null;
				spinner: null;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				chooseServer(t: unknown, i: unknown): void;
				classCodeComplete(): void;
				closeClassCode(): void;
				create(): void;
				createLoadingMetricEvent(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getCode(): void;
				init(): void;
				initListeners(): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClickElement(t: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				openWorlds(): void;
				paused(): void;
				preload(): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setCode(t: unknown): void;
				showClassCode(): void;
				showContentA(): unknown;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(): void;
				stopListeners(): void;
				submit(): unknown;
				triggerElementClick(t: unknown): void;
				update(): void;
				validationComplete(t: unknown): void;
				_background: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_localizer: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_metricsManager: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				add: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				content: unknown /* too deep */;
				contentA: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menus: unknown /* too deep */;
				off: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				screenData: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
			};
			_initArgs: never[];
			_onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_time: {
			_deltaMS: number;
			_pauseStarted: number;
			_prevTimeMS: number;
			_started: number;
			_timeMS: number;
			deltaMS: number;
			desiredFps: number;
			pauseDuration: number;
			prevTimeMS: number;
			timeMS: number;
			timeToCall: number;
			add(t: unknown): unknown;
			boot(): void;
			create(t: unknown): unknown;
			elapsedSecondsSince(t: unknown): unknown;
			elapsedSince(t: unknown): unknown;
			gamePaused(): void;
			gameResumed(): void;
			removeAll(): void;
			reset(): void;
			setTime(t: unknown): void;
			totalElapsedSeconds(): unknown;
			update(t: unknown): void;
			updateTimers(): void;
			_timers: never[];
			events: {
				autoDestroy: boolean;
				expired: boolean;
				paused: boolean;
				running: boolean;
				_i: number;
				_len: number;
				_marked: number;
				_newTick: number;
				_now: number;
				_pauseStarted: number;
				_pauseTotal: number;
				_started: number;
				duration: number;
				elapsed: number;
				length: number;
				ms: number;
				next: number;
				nextTick: number;
				seconds: number;
				timeCap: number;
				addTimer(t: unknown, i: unknown, n: unknown): unknown;
				adjustEvents(t: unknown): void;
				clearPendingEvents(): void;
				createTimer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				destroy(): void;
				loop(t: unknown, i: unknown, n: unknown): unknown;
				order(): void;
				pause(): void;
				remove(t: unknown): unknown;
				removeAll(): void;
				repeat(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				resume(): void;
				sortHandler(t: unknown, i: unknown): unknown;
				start(t: unknown): void;
				stop(t: unknown): void;
				update(t: unknown): unknown;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				onComplete: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		_tweens: {
			add(t: unknown, i: unknown, n: unknown): unknown;
			create(t: unknown, i: unknown, n: unknown): unknown;
			destroy(): void;
			findOwnerForTween(t: unknown): unknown;
			getAll(): unknown;
			pauseAll(): void;
			remove(t: unknown): void;
			removeAll(): void;
			removeAllFromOwner(t: unknown): void;
			removeFrom(t: unknown, i: unknown): void;
			removeTweenFromOwner(t: unknown): unknown;
			resumeAll(): void;
			update(): unknown;
			_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
			_tweens: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		add: {
			audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			existing(t: unknown): unknown;
			graphics(t: unknown, i: unknown, n: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
			sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
			tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			tween(t: unknown, i: unknown, n: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		app: {
			_resizeId: null;
			_resizeTo: null;
			resizeTo: null;
			cancelResize(): void;
			destroy(e: unknown, r: unknown): void;
			queueResize(): unknown;
			render(): void;
			resize(): void;
			start(): void;
			stop(): void;
			view: HTMLCanvasElement;
			_ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
		};
		broadcaster: {
			broadcastIdCount: number;
			addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			broadcast(t: unknown, i: unknown, n: unknown): unknown;
			clear(): void;
			hashContext(t: unknown): unknown;
			removeAppListener(t: unknown, i: unknown, n: unknown): void;
			callbacks: {
				bId0: unknown /* too deep */;
				bId2: unknown /* too deep */;
				Card: unknown /* too deep */;
				FriendsList: unknown /* too deep */;
				NetworkHandlers: unknown /* too deep */;
				ProdigyMailer: unknown /* too deep */;
				ProdigyMailerButton: unknown /* too deep */;
				ProdigyMailView: unknown /* too deep */;
				UI: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			listeners: {
				bId0: unknown /* too deep */;
				bId2: unknown /* too deep */;
				Card: unknown /* too deep */;
				FriendsList: unknown /* too deep */;
				NetworkHandlers: unknown /* too deep */;
				ProdigyMailer: unknown /* too deep */;
				ProdigyMailerButton: unknown /* too deep */;
				ProdigyMailView: unknown /* too deep */;
				UI: unknown /* too deep */;
			};
		};
		cache: {
			addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
			addImage(t: unknown, i: unknown, n: unknown): void;
			addItem(t: unknown, i: unknown, n: unknown): void;
			addJSON(t: unknown, i: unknown): void;
			addRenderTexture(t: unknown, i: unknown): void;
			addSound(t: unknown, i: unknown): void;
			addSpine(t: unknown, i: unknown): void;
			addText(t: unknown, i: unknown): void;
			addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			checkBitmapDataKey(t: unknown): unknown;
			checkFrameData(t: unknown): unknown;
			checkImageKey(t: unknown): unknown;
			checkJSONKey(t: unknown): unknown;
			checkRenderTextureKey(t: unknown): unknown;
			checkSoundKey(t: unknown): unknown;
			checkSpineKey(t: unknown): unknown;
			checkTextKey(t: unknown): unknown;
			deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			getBitmapData(t: unknown): unknown;
			getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
			getFrameData(t: unknown, i: unknown): unknown;
			getImage(t: unknown): unknown;
			getJSON(t: unknown): unknown;
			getKeys(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getRenderTexture(t: unknown): unknown;
			getSound(t: unknown): unknown;
			getSpine(t: unknown): unknown;
			getText(t: unknown): unknown;
			getTexture(t: unknown, i: unknown): unknown;
			hasMap(t: unknown): unknown;
			isSoundDecoded(t: unknown): unknown;
			removeAllItems(): void;
			removeAllItemsOfType(t: unknown): void;
			removeBitmapData(t: unknown): void;
			removeImage(t: unknown): void;
			removeItem(t: unknown, i: unknown): void;
			removeJSON(t: unknown): void;
			removeRenderTexture(t: unknown): void;
			removeSound(t: unknown): void;
			removeSpine(t: unknown): void;
			removeText(t: unknown): void;
			removeTextureAtlas(t: unknown): void;
			_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		config: {
			failIfMajorPerformanceCaveat: boolean;
			roundPixels: boolean;
			height: number;
			width: number;
			parent: string;
		};
		device: {
			android: boolean;
			fullscreenKeyboard: boolean;
			iOS: boolean;
			isFullScreenSupported: boolean;
			isInitialized: boolean;
			pointerLock: boolean;
			touch: boolean;
			webAudio: boolean;
			browser: number;
			deviceReadyAt: number;
			os: number;
			cancelFullscreen: string;
			requestFullscreen: string;
			wheelEvent: string;
			mspointer: undefined;
			checkFullScreen(): void;
			dispatchSignals(): void;
			isAndroidStockBrowser(): unknown;
			needsTouchUnlock(): unknown;
			readyCheck(): void;
			whenReady(t: unknown, i: unknown): void;
			callbacks: never[];
			onInitialized: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		fps: {
			_isPendingResumeRecordFPS: boolean;
			_record: boolean;
			record: boolean;
			_framerate: number;
			_frames: number;
			_prevTime: number;
			_rollingCount: number;
			_rollingSum: number;
			endFrame(): void;
			getAverageFramerate(): unknown;
			getFramerate(): unknown;
			timeNow(): unknown;
		};
		frameWorkManager: {
			_frameWorkDone: boolean;
			_frameStartTime: number;
			frameBudget: number;
			frameBudgetRemaining: number;
			frameTimeElapsed: number;
			_now(): void;
			awaitFreeTime(t: unknown, i: unknown): void;
			cancelWork(): unknown;
			flushWorkQueue(): void;
			markFrameEnd(): void;
			markFrameStart(): void;
			_workPromises: never[];
		};
		input: {
			enabled: boolean;
			pollLocked: boolean;
			recordPointerHistory: boolean;
			resetLocked: boolean;
			_pollCounter: number;
			_x: number;
			_y: number;
			doubleTapRate: number;
			holdRate: number;
			justPressedRate: number;
			justReleasedRate: number;
			maxPointers: number;
			minPriorityID: number;
			multiInputOverride: number;
			pollRate: number;
			recordLimit: number;
			recordRate: number;
			tapRate: number;
			totalActivePointers: number;
			totalInactivePointers: number;
			worldX: number;
			worldY: number;
			x: number;
			y: number;
			customCandidateHandler: null;
			customCandidateHandlerContext: null;
			addMoveCallback(t: unknown, i: unknown): void;
			addPointer(): unknown;
			addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
			boot(t: unknown): void;
			clearEnterCallback(): void;
			countActivePointers(t: unknown): unknown;
			deleteMoveCallback(t: unknown, i: unknown): void;
			destroy(): void;
			executeTouchLockCallbacks(t: unknown, i: unknown): void;
			getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
			getPointer(t: unknown): unknown;
			getPointerFromId(t: unknown): unknown;
			getPointerFromIdentifier(t: unknown): unknown;
			hitTest(t: unknown, i: unknown): unknown;
			preUpdate(): void;
			removeTouchLockCallback(t: unknown, i: unknown): unknown;
			reset(t: unknown): void;
			resetSpeed(t: unknown, i: unknown): void;
			setEnterCallback(t: unknown): void;
			setInteractiveCandidateHandler(t: unknown, i: unknown): void;
			startPointer(t: unknown): unknown;
			stopPointer(t: unknown, i: unknown): unknown;
			update(): void;
			updateChildren(t: unknown): void;
			updateInteractiveItems(): void;
			updatePointer(t: unknown): unknown;
			hitCanvas: HTMLCanvasElement;
			hitContext: CanvasRenderingContext2D;
			_oldPosition: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			activePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			circle: {
				_diameter: number;
				_radius: number;
				circumference: number;
				diameter: number;
				radius: number;
				x: number;
				y: number;
				circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
				getBounds(): unknown;
				setTo(t: unknown, i: unknown, n: unknown): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			interactiveItems: {
				_cursor: number;
				total: number;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				first: unknown /* too deep */;
				list: unknown /* too deep */;
				next: unknown /* too deep */;
			};
			keyboard: {
				active: boolean;
				enabled: boolean;
				_i: number;
				_k: number;
				event: null;
				lastChar: null;
				pressEvent: null;
				lastKey: undefined;
				_onKeyDown(i: unknown): void;
				_onKeyPress(i: unknown): void;
				_onKeyUp(i: unknown): void;
				addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
				addKey(t: unknown): unknown;
				addKeyCapture(t: unknown): void;
				addKeys(t: unknown): unknown;
				clearCaptures(): void;
				createCursorKeys(): unknown;
				destroy(): void;
				downDuration(t: unknown, i: unknown): unknown;
				isDown(t: unknown): unknown;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				onDownCallback(arg0: unknown): void;
				onPressCallback(arg0: unknown): void;
				onUpCallback(arg0: unknown): void;
				processKeyDown(t: unknown): void;
				processKeyPress(t: unknown): void;
				processKeyUp(t: unknown): void;
				removeCallbacks(): void;
				removeKey(t: unknown): void;
				removeKeyCapture(t: unknown): void;
				reset(t: unknown): void;
				start(): unknown;
				stop(): void;
				update(): void;
				upDuration(t: unknown, i: unknown): unknown;
				_capture: unknown /* too deep */;
				_keys: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mouse: {
				active: boolean;
				capture: boolean;
				enabled: boolean;
				stopOnGameOut: boolean;
				wheelDelta: number;
				_onMouseDown(i: unknown): void;
				_onMouseMove(i: unknown): void;
				_onMouseOut(i: unknown): void;
				_onMouseOutGlobal(i: unknown): void;
				_onMouseOver(i: unknown): void;
				_onMouseUp(i: unknown): void;
				_onMouseUpGlobal(i: unknown): void;
				addMouseWheelCallback(t: unknown): unknown;
				onMouseDown(t: unknown): void;
				onMouseMove(t: unknown): void;
				onMouseOut(t: unknown): void;
				onMouseOutGlobal(t: unknown): void;
				onMouseOver(t: unknown): void;
				onMouseUp(t: unknown): void;
				onMouseUpGlobal(t: unknown): void;
				removeMouseWheelCallback(t: unknown): void;
				start(): unknown;
				stop(): void;
				event: MouseEvent;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			mousePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			mouseWheel: {
				active: boolean;
				preventDefault: boolean;
				delta: number;
				wheelEventName: string;
				boundOnWheelHandler(arg0: unknown): void;
				onWheelHandler(t: unknown): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				callbackContext: unknown /* too deep */;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mspointer: {
				active: boolean;
				pointerDownCallback: null;
				pointerMoveCallback: null;
				pointerUpCallback: null;
				onPointerDown(i: unknown): void;
				onPointerMove(i: unknown): void;
				onPointerOut(i: unknown): void;
				onPointerOver(i: unknown): void;
				onPointerUp(i: unknown): void;
				onPointerUpGlobal(i: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			onDown: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onHold: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onPointerMove: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTap: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchEndEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchStartEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUp: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			pointer1: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointer2: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointerLock: {
				active: boolean;
				locked: boolean;
				pointerlockchange: undefined;
				pointerLockElement: undefined;
				pointerlockerror: undefined;
				boundOnChangeHandler(arg0: unknown): void;
				boundOnErrorHandler(arg0: unknown): void;
				exit(): void;
				onChangeHandler(t: unknown): void;
				onErrorHandler(t: unknown): void;
				request(): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				game: unknown /* too deep */;
				onChange: unknown /* too deep */;
				onError: unknown /* too deep */;
			};
			pointers: unknown /* too deep */[];
			position: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scale: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			speed: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			touch: {
				active: boolean;
				enabled: boolean;
				consumeDocumentTouches(): void;
				onTouchCancel(t: unknown): void;
				onTouchEnd(t: unknown): void;
				onTouchEnter(t: unknown): void;
				onTouchLeave(t: unknown): void;
				onTouchMove(t: unknown): void;
				onTouchStart(t: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
		};
		inputDispatcher: {
			dispatchKeyboardEvent(t: unknown, i: unknown): void;
			dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void;
			dispatchMouseEvent(t: unknown, i: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		load: {
			isLoading: boolean;
			_crossOrigin: string;
			baseURL: string;
			crossOrigin: string;
			addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
			atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
			audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			fileCompleteCallback(t: unknown, i: unknown): void;
			fileStartCallback(t: unknown): void;
			getMaxParallelDownloads(): unknown;
			getNumLoadedFiles(): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown): void;
			json(t: unknown, i: unknown, n: unknown, e: unknown): void;
			processImage(t: unknown, i: unknown, n: unknown): void;
			processJSON(t: unknown, i: unknown, n: unknown): void;
			processScript(t: unknown, i: unknown): void;
			processSound(t: unknown, i: unknown, n: unknown): void;
			processSpine(t: unknown, i: unknown, n: unknown): void;
			processSpritesheet(t: unknown, i: unknown, n: unknown): void;
			processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			reset(t: unknown): void;
			script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			setupFileCallbacks(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
			spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			start(): void;
			totalQueuedFiles(): unknown;
			_loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			_onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onReset: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		onPause: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		onResume: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		renderer: {
			autoDensity: boolean;
			autoResize: boolean;
			clearBeforeRender: boolean;
			preserveDrawingBuffer: boolean;
			renderingToScreen: boolean;
			transparent: boolean;
			_backgroundColor: number;
			_eventsCount: number;
			backgroundColor: number;
			CONTEXT_UID: number;
			height: number;
			resolution: number;
			type: number;
			width: number;
			_backgroundColorString: string;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			addSystem(t: unknown, e: unknown): unknown;
			clear(): void;
			destroy(t: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			initPlugins(t: unknown): void;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
			reset(): unknown;
			resize(t: unknown, r: unknown): void;
			gl: WebGL2RenderingContext;
			view: HTMLCanvasElement;
			_backgroundColorRgba: number[];
			_events: {
				prerender: unknown /* too deep */;
			};
			_lastObjectRendered: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			batch: {
				boundArray(t: unknown, e: unknown, r: unknown, i: unknown): void;
				copyBoundTextures(t: unknown, e: unknown): void;
				destroy(): void;
				flush(): void;
				reset(): void;
				setObjectRenderer(t: unknown): void;
				currentRenderer: unknown /* too deep */;
				emptyRenderer: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			context: {
				isLost: boolean;
				webGLVersion: number;
				contextChange(t: unknown): void;
				createContext(e: unknown, r: unknown): unknown;
				destroy(): void;
				getExtensions(): void;
				handleContextLost(arg0: unknown): void;
				handleContextRestored(): void;
				initFromContext(t: unknown): void;
				initFromOptions(t: unknown): void;
				postrender(): void;
				validateContext(t: unknown): void;
				gl: WebGL2RenderingContext;
				extensions: unknown /* too deep */;
				renderer: unknown /* too deep */;
				supports: unknown /* too deep */;
			};
			extract: {
				base64(t: unknown, e: unknown, r: unknown): unknown;
				canvas(e: unknown): unknown;
				destroy(): void;
				image(t: unknown, e: unknown, r: unknown): unknown;
				pixels(e: unknown): unknown;
				renderer: unknown /* too deep */;
			};
			filter: {
				forceClear: boolean;
				useMaxPadding: boolean;
				applyFilter(e: unknown, r: unknown, i: unknown, n: unknown): void;
				bindAndClear(e: unknown, r: unknown): void;
				calculateNormalizedScreenSpaceMatrix(t: unknown): unknown;
				calculateScreenSpaceMatrix(t: unknown): unknown;
				calculateSpriteMatrix(t: unknown, e: unknown): unknown;
				destroy(): void;
				emptyPool(): void;
				getFilterTexture(t: unknown, e: unknown): unknown;
				getOptimalFilterTexture(t: unknown, e: unknown, r: unknown): unknown;
				getRenderTarget(t: unknown, e: unknown): unknown;
				pop(): unknown;
				push(t: unknown, e: unknown): void;
				resize(): void;
				returnFilterTexture(t: unknown): unknown;
				returnRenderTarget(t: unknown): unknown;
				activeState: unknown /* too deep */;
				defaultFilterStack: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				quad: unknown /* too deep */;
				quadUv: unknown /* too deep */;
				renderer: unknown /* too deep */;
				statePool: unknown /* too deep */;
				tempRect: unknown /* too deep */;
				texturePool: unknown /* too deep */;
			};
			framebuffer: {
				hasMRT: boolean;
				writeDepthTexture: boolean;
				CONTEXT_UID: number;
				current: null;
				bind(t: unknown, e: unknown): void;
				blit(t: unknown, e: unknown, r: unknown): unknown;
				clear(e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				contextChange(): unknown;
				destroy(): void;
				detectSamples(e: unknown): unknown;
				disposeAll(t: unknown): void;
				disposeFramebuffer(t: unknown, e: unknown): void;
				forceStencil(): void;
				initFramebuffer(t: unknown): unknown;
				reset(): void;
				resizeFramebuffer(t: unknown): void;
				setViewport(t: unknown, e: unknown, r: unknown, i: unknown): void;
				updateFramebuffer(t: unknown): void;
				gl: WebGL2RenderingContext;
				msaaSamples: Int32Array;
				managedFramebuffers: unknown /* too deep */;
				renderer: unknown /* too deep */;
				size: unknown /* too deep */;
				unknownFramebuffer: unknown /* too deep */;
				viewport: unknown /* too deep */;
			};
			geometry: {
				canUseUInt32ElementIndex: boolean;
				hasInstance: boolean;
				hasVao: boolean;
				CONTEXT_UID: number;
				activateVao(t: unknown, e: unknown): void;
				bind(t: unknown, e: unknown): void;
				checkCompatibility(t: unknown, e: unknown): void;
				contextChange(): unknown;
				destroy(): void;
				disposeAll(t: unknown): void;
				disposeBuffer(t: unknown, e: unknown): void;
				disposeGeometry(t: unknown, e: unknown): void;
				draw(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				getSignature(t: unknown, e: unknown): unknown;
				initGeometryVao(t: unknown, e: unknown): unknown;
				reset(): void;
				unbind(): void;
				updateBuffers(): void;
				_activeVao: WebGLVertexArrayObject;
				gl: WebGL2RenderingContext;
				_activeGeometry: unknown /* too deep */;
				_boundBuffer: unknown /* too deep */;
				managedBuffers: unknown /* too deep */;
				managedGeometries: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			globalUniforms: {
				group: boolean;
				static: boolean;
				dirtyId: number;
				id: number;
				add(e: unknown, r: unknown, i: unknown): void;
				update(): void;
				syncUniforms: unknown /* too deep */;
				uniforms: unknown /* too deep */;
			};
			mask: {
				enableScissor: boolean;
				alphaMaskIndex: number;
				destroy(): void;
				detect(e: unknown): void;
				pop(e: unknown): void;
				popSpriteMask(): void;
				push(e: unknown, r: unknown): void;
				pushSpriteMask(t: unknown): void;
				setMaskStack(t: unknown): void;
				alphaMaskPool: unknown /* too deep */;
				maskDataPool: unknown /* too deep */;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			options: {
				antialias: boolean;
				autoDensity: boolean;
				autoStart: boolean;
				clearBeforeRender: boolean;
				forceCanvas: boolean;
				legacy: boolean;
				preserveDrawingBuffer: boolean;
				sharedTicker: boolean;
				transparent: boolean;
				height: number;
				resolution: number;
				width: number;
				backgroundColor: undefined;
				powerPreference: undefined;
				resizeTo: undefined;
				sharedLoader: undefined;
				view: HTMLCanvasElement;
			};
			plugins: {
				accessibility: unknown /* too deep */;
				batch: unknown /* too deep */;
				extract: unknown /* too deep */;
				interaction: unknown /* too deep */;
				particle: unknown /* too deep */;
				prepare: unknown /* too deep */;
				tilingSprite: unknown /* too deep */;
			};
			projection: {
				defaultFrame: null;
				transform: null;
				calculateProjection(t: unknown, e: unknown, r: unknown, i: unknown): void;
				destroy(): void;
				setTransform(t: unknown): void;
				update(t: unknown, e: unknown, r: unknown, i: unknown): void;
				destinationFrame: unknown /* too deep */;
				projectionMatrix: unknown /* too deep */;
				renderer: unknown /* too deep */;
				sourceFrame: unknown /* too deep */;
			};
			renderTexture: {
				current: null;
				bind(t: unknown, e: unknown, r: unknown): void;
				clear(t: unknown, e: unknown): void;
				destroy(): void;
				reset(): void;
				resize(): void;
				clearColor: unknown /* too deep */;
				defaultMaskStack: unknown /* too deep */;
				destinationFrame: unknown /* too deep */;
				renderer: unknown /* too deep */;
				sourceFrame: unknown /* too deep */;
			};
			runners: {
				contextChange: unknown /* too deep */;
				destroy: unknown /* too deep */;
				postrender: unknown /* too deep */;
				prerender: unknown /* too deep */;
				reset: unknown /* too deep */;
				resize: unknown /* too deep */;
				update: unknown /* too deep */;
			};
			scissor: {
				glConst: number;
				_useCurrent(): void;
				destroy(): void;
				getStackLength(): unknown;
				pop(): void;
				push(t: unknown): void;
				setMaskStack(t: unknown): void;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			shader: {
				destroyed: boolean;
				id: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(t: unknown): void;
				createSyncGroups(t: unknown): unknown;
				destroy(): void;
				generateShader(t: unknown): unknown;
				getglProgram(): unknown;
				getSignature(t: unknown, e: unknown): unknown;
				reset(): void;
				setUniforms(t: unknown): void;
				syncUniformGroup(t: unknown, e: unknown): void;
				syncUniforms(t: unknown, e: unknown, r: unknown): void;
				systemCheck(): unknown;
				gl: WebGL2RenderingContext;
				cache: unknown /* too deep */;
				program: unknown /* too deep */;
				renderer: unknown /* too deep */;
				shader: unknown /* too deep */;
			};
			state: {
				_blendEq: boolean;
				blendMode: number;
				polygonOffset: number;
				stateId: number;
				contextChange(e: unknown): unknown;
				destroy(): void;
				forceState(t: unknown): void;
				reset(): void;
				set(t: unknown): void;
				setBlend(t: unknown): void;
				setBlendMode(t: unknown): void;
				setCullFace(t: unknown): void;
				setDepthTest(t: unknown): void;
				setFrontFace(t: unknown): void;
				setOffset(t: unknown): void;
				setPolygonOffset(t: unknown, e: unknown): void;
				setState(t: unknown): unknown;
				updateCheck(t: unknown, e: unknown): void;
				gl: WebGL2RenderingContext;
				blendModes: unknown /* too deep */;
				checks: unknown /* too deep */;
				defaultState: unknown /* too deep */;
				map: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			stencil: {
				glConst: number;
				_getBitwiseMask(): unknown;
				_useCurrent(): void;
				destroy(): void;
				getStackLength(): unknown;
				pop(t: unknown): void;
				push(t: unknown): void;
				setMaskStack(t: unknown): void;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			texture: {
				_unknownBoundTextures: boolean;
				CONTEXT_UID: number;
				currentLocation: number;
				webGLVersion: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(): void;
				destroy(): void;
				destroyTexture(t: unknown, e: unknown): void;
				initTexture(t: unknown): unknown;
				initTextureType(e: unknown, r: unknown): void;
				reset(): void;
				setStyle(e: unknown, r: unknown): void;
				unbind(t: unknown): void;
				updateTexture(t: unknown): void;
				updateTextureStyle(e: unknown): void;
				gl: WebGL2RenderingContext;
				boundTextures: unknown /* too deep */;
				emptyTextures: unknown /* too deep */;
				managedTextures: unknown /* too deep */;
				renderer: unknown /* too deep */;
				unknownTexture: unknown /* too deep */;
			};
			textureGC: {
				checkCount: number;
				checkCountMax: number;
				count: number;
				maxIdle: number;
				mode: number;
				destroy(): void;
				postrender(): void;
				run(): void;
				unload(t: unknown): void;
				renderer: unknown /* too deep */;
			};
			textureManager: {
				_unknownBoundTextures: boolean;
				CONTEXT_UID: number;
				currentLocation: number;
				webGLVersion: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(): void;
				destroy(): void;
				destroyTexture(t: unknown, e: unknown): void;
				initTexture(t: unknown): unknown;
				initTextureType(e: unknown, r: unknown): void;
				reset(): void;
				setStyle(e: unknown, r: unknown): void;
				unbind(t: unknown): void;
				updateTexture(t: unknown): void;
				updateTextureStyle(e: unknown): void;
				gl: WebGL2RenderingContext;
				boundTextures: unknown /* too deep */;
				emptyTextures: unknown /* too deep */;
				managedTextures: unknown /* too deep */;
				renderer: unknown /* too deep */;
				unknownTexture: unknown /* too deep */;
			};
		};
		rnd: {
			c: number;
			s0: number;
			s1: number;
			s2: number;
			angle(): unknown;
			frac(): unknown;
			hash(t: unknown): unknown;
			integer(): unknown;
			integerInRange(t: unknown, i: unknown): unknown;
			normal(): unknown;
			pick(t: unknown): unknown;
			real(): unknown;
			realInRange(t: unknown, i: unknown): unknown;
			rnd(): unknown;
			shuffle(t: unknown): unknown;
			sign(): unknown;
			sow(t: unknown): void;
			state(t: unknown): unknown;
			uuid(): unknown;
			weightedPick(t: unknown): unknown;
		};
		scale: {
			_booted: boolean;
			_pageAlignHorizontally: boolean;
			_pageAlignVertically: boolean;
			forceLandscape: boolean;
			forcePortrait: boolean;
			incorrectOrientation: boolean;
			isFullScreen: boolean;
			isLandscape: boolean;
			isPortrait: boolean;
			pageAlignHorizontally: boolean;
			pageAlignVertically: boolean;
			parentIsWindow: boolean;
			_fullScreenScaleMode: number;
			_lastUpdate: number;
			_scaleMode: number;
			_updateThrottle: number;
			_updateThrottleReset: number;
			aspectRatio: number;
			currentScaleMode: number;
			fullScreenScaleMode: number;
			height: number;
			scaleMode: number;
			sourceAspectRatio: number;
			trackParentInterval: number;
			width: number;
			screenOrientation: string;
			_pendingScaleMode: null;
			onResizeContext: null;
			_fullScreenChange(i: unknown): void;
			_fullScreenError(i: unknown): void;
			_gameResumed(): void;
			_orientationChange(i: unknown): void;
			_windowResize(i: unknown): void;
			align(t: unknown, i: unknown): void;
			alignCanvas(t: unknown, i: unknown): void;
			boot(): void;
			cleanupCreatedTarget(): void;
			createFullScreenTarget(): unknown;
			destroy(): void;
			forceOrientation(t: unknown, i: unknown): void;
			fullScreenChange(t: unknown): void;
			fullScreenError(t: unknown): void;
			getParentBounds(t: unknown, i: unknown): unknown;
			orientationChange(t: unknown): void;
			parseConfig(t: unknown): void;
			pauseUpdate(): void;
			prepScreenMode(i: unknown): void;
			preUpdate(): void;
			queueUpdate(t: unknown): void;
			recalculateCanvasOffset(): void;
			reflowCanvas(): void;
			reflowGame(): void;
			refresh(): void;
			resetCanvas(t: unknown, i: unknown): void;
			setExactFit(): void;
			setGameSize(i: unknown, n: unknown): void;
			setMaximum(): void;
			setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setResizeCallback(t: unknown, i: unknown): void;
			setShowAll(t: unknown): void;
			setupScale(t: unknown, i: unknown): void;
			signalSizeChange(): void;
			startFullScreen(t: unknown, i: unknown): unknown;
			stopFullScreen(): unknown;
			updateDimensions(i: unknown, n: unknown, e: unknown): void;
			updateLayout(): void;
			updateOrientationState(): unknown;
			updateScalingAndBounds(): void;
			windowResize(t: unknown): void;
			boundingParent: HTMLDivElement;
			parentNode: HTMLCanvasElement;
			_gameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedCanvasSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedGameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_parentBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_tempBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			bounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			canvasOffset: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			dom: {
				scrollX: number;
				scrollY: number;
				getOffset(t: unknown, i: unknown): unknown;
				getScreenOrientation(): unknown;
				onDeviceReady(t: unknown): void;
				layoutBounds: unknown /* too deep */;
				visualBounds: unknown /* too deep */;
			};
			enterIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			leaveIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			margin: {
				bottom: number;
				left: number;
				right: number;
				top: number;
				x: number;
				y: number;
			};
			onFullScreenChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenError: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenInit: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onOrientationChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSizeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parentScaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactorInverted: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			windowConstraints: {
				bottom: string;
				right: string;
			};
		};
		seededRandom: {
			frac(t: unknown): unknown;
			pick(t: unknown, i: unknown): unknown;
			shuffleArray(t: unknown, i: unknown): unknown;
			randomDataGenerator: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
		};
		sound: {
			_codeMuted: boolean;
			_muted: boolean;
			_watching: boolean;
			connectToMaster: boolean;
			mute: boolean;
			muteOnPause: boolean;
			noAudio: boolean;
			touchLocked: boolean;
			baseLatency: number;
			channels: number;
			volume: number;
			_unlockSource: null;
			_watchCallback: null;
			_watchContext: null;
			_onResumeWebAudioOnClick(): void;
			_resumeWebAudioOnClick(): void;
			add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boot(): void;
			destroy(): void;
			pauseAll(): void;
			play(t: unknown, i: unknown, n: unknown): unknown;
			remove(t: unknown): unknown;
			removeAll(): void;
			removeByKey(t: unknown): unknown;
			resumeAll(): void;
			resumeWebAudio(): unknown;
			setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
			setMute(): void;
			setTouchLock(): void;
			setTouchUnlock(): void;
			stopAll(): void;
			unlock(): unknown;
			unsetMute(): void;
			update(): void;
			context: AudioContext;
			emptyBuffer: AudioBuffer;
			_sounds: never[];
			_watchList: {
				_cursor: number;
				total: number;
				first: null;
				next: null;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				list: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSoundDecode: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchUnlock: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUnMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onVolumeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			sounds: never[];
		};
		stage: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
		state: {
			_clearWorld: boolean;
			current: string;
			_pendingState: null;
			add(t: unknown, i: unknown, n: unknown): unknown;
			boot(): void;
			clearCurrentState(): void;
			destroy(): void;
			get(t: unknown): unknown;
			getCurrentState(): unknown;
			loadComplete(): void;
			pause(): void;
			preUpdate(): unknown;
			remove(t: unknown): void;
			resume(): void;
			setCurrentState(t: unknown): void;
			start(t: unknown, i: unknown): void;
			update(): void;
			_states: Map<string, unknown /* too deep */>;
			states: Map<string, unknown /* too deep */>;
			_current: {
				complete: boolean;
				fadeInSet: boolean;
				showMenu: boolean;
				_key: string;
				key: string;
				screenName: string;
				zoneName: string;
				_blockingOverlay: null;
				backButton: null;
				classCode: null;
				codeField: null;
				error: null;
				nextButton: null;
				spinner: null;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				chooseServer(t: unknown, i: unknown): void;
				classCodeComplete(): void;
				closeClassCode(): void;
				create(): void;
				createLoadingMetricEvent(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getCode(): void;
				init(): void;
				initListeners(): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClickElement(t: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				openWorlds(): void;
				paused(): void;
				preload(): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setCode(t: unknown): void;
				showClassCode(): void;
				showContentA(): unknown;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(): void;
				stopListeners(): void;
				submit(): unknown;
				triggerElementClick(t: unknown): void;
				update(): void;
				validationComplete(t: unknown): void;
				_background: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_localizer: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_metricsManager: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				add: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				content: unknown /* too deep */;
				contentA: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menus: unknown /* too deep */;
				off: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				screenData: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
			};
			_initArgs: never[];
			_onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		time: {
			_deltaMS: number;
			_pauseStarted: number;
			_prevTimeMS: number;
			_started: number;
			_timeMS: number;
			deltaMS: number;
			desiredFps: number;
			pauseDuration: number;
			prevTimeMS: number;
			timeMS: number;
			timeToCall: number;
			add(t: unknown): unknown;
			boot(): void;
			create(t: unknown): unknown;
			elapsedSecondsSince(t: unknown): unknown;
			elapsedSince(t: unknown): unknown;
			gamePaused(): void;
			gameResumed(): void;
			removeAll(): void;
			reset(): void;
			setTime(t: unknown): void;
			totalElapsedSeconds(): unknown;
			update(t: unknown): void;
			updateTimers(): void;
			_timers: never[];
			events: {
				autoDestroy: boolean;
				expired: boolean;
				paused: boolean;
				running: boolean;
				_i: number;
				_len: number;
				_marked: number;
				_newTick: number;
				_now: number;
				_pauseStarted: number;
				_pauseTotal: number;
				_started: number;
				duration: number;
				elapsed: number;
				length: number;
				ms: number;
				next: number;
				nextTick: number;
				seconds: number;
				timeCap: number;
				addTimer(t: unknown, i: unknown, n: unknown): unknown;
				adjustEvents(t: unknown): void;
				clearPendingEvents(): void;
				createTimer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				destroy(): void;
				loop(t: unknown, i: unknown, n: unknown): unknown;
				order(): void;
				pause(): void;
				remove(t: unknown): unknown;
				removeAll(): void;
				repeat(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				resume(): void;
				sortHandler(t: unknown, i: unknown): unknown;
				start(t: unknown): void;
				stop(t: unknown): void;
				update(t: unknown): unknown;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				onComplete: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		tweens: {
			add(t: unknown, i: unknown, n: unknown): unknown;
			create(t: unknown, i: unknown, n: unknown): unknown;
			destroy(): void;
			findOwnerForTween(t: unknown): unknown;
			getAll(): unknown;
			pauseAll(): void;
			remove(t: unknown): void;
			removeAll(): void;
			removeAllFromOwner(t: unknown): void;
			removeFrom(t: unknown, i: unknown): void;
			removeTweenFromOwner(t: unknown): unknown;
			resumeAll(): void;
			update(): unknown;
			_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
			_tweens: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		world: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
	};
	house: {
		updated: boolean;
		add(t: unknown): void;
		getActive(t: unknown): unknown;
		getActiveCount(): unknown;
		getBackground(): unknown;
		getCurrentHouseTag(): unknown;
		getDataAndClear(): unknown;
		getItemCount(): unknown;
		getItems(): unknown;
		getOwned(t: unknown): unknown;
		getSortedActive(): unknown;
		getUnplacedItems(): unknown;
		hasMaxQuantityOfItem(t: unknown): unknown;
		setActive(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
		setAllInactive(): void;
		setCurrentHouseTag(t: unknown): void;
		setInactive(t: unknown): void;
		setItems(t: unknown): void;
		updateActive(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown): void;
		data: {
			currentHouseTag: string;
			active: unknown /* too deep */[];
			bg: {
				active: number;
				own: unknown /* too deep */;
			};
			items: {
				1: unknown /* too deep */;
				13: unknown /* too deep */;
				14: unknown /* too deep */;
				17: unknown /* too deep */;
				18: unknown /* too deep */;
				3: unknown /* too deep */;
			};
		};
	};
	kennel: {
		updated: boolean;
		addPet(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
		amountOfPet(t: unknown): unknown;
		canSwapPositions(t: unknown, i: unknown): unknown;
		createNewPet(t: unknown): unknown;
		findEmptyTeamIndex(): unknown;
		findFirstFilledIndex(): unknown;
		getDataAndClear(): unknown;
		getNumPets(t: unknown): unknown;
		getPets(t: unknown): unknown;
		getPetTeamIDs(): unknown;
		getTeamPosition(t: unknown): unknown;
		hasMaxNonMemberPets(): unknown;
		hasPet(t: unknown): unknown;
		isCreatureCurrentPlayer(t: unknown): unknown;
		isFull(): unknown;
		populateKennel(t: unknown): void;
		removeAtTeamPosition(t: unknown): void;
		removePet(t: unknown): void;
		setTeamPosition(t: unknown, i: unknown): void;
		swapTeamPositions(t: unknown, i: unknown): void;
		_encounterInfo: {
			updated: boolean;
			addToPetTimesBattled(t: unknown, i: unknown): void;
			addToPetTimesRescued(t: unknown, i: unknown): void;
			clearAdData(): void;
			createNewPetEncounter(t: unknown): void;
			getAllTotalPetsRecused(): unknown;
			getDataAndClear(): unknown;
			getPetEncounterByID(t: unknown): unknown;
			getPetTimesBattled(t: unknown): unknown;
			getPetTimesRescued(t: unknown): unknown;
			hasPetBeenEncountered(t: unknown): unknown;
			hasSeenAd(t: unknown): unknown;
			markAdSeen(t: unknown): void;
			onPetEncountered(t: unknown): void;
			removeAd(t: unknown): unknown;
			setData(t: unknown): void;
			_data: {
				ads: unknown /* too deep */;
				pets: unknown /* too deep */;
			};
			_timeManager: {
				isServerDeltaSet: boolean;
				_timezoneOffset: number;
				serverTimeDeltaMs: number;
				getIsServerDeltaSet(): unknown;
				getLocalTimeMs(): unknown;
				getServerTimeDeltaMs(): unknown;
				getServerTimeMs(): unknown;
				getUTCOffset(): unknown;
				setServerTime(t: unknown): void;
			};
		};
		_petData: never[];
		_petTeam: null[];
		_timeManager: {
			isServerDeltaSet: boolean;
			_timezoneOffset: number;
			serverTimeDeltaMs: number;
			getIsServerDeltaSet(): unknown;
			getLocalTimeMs(): unknown;
			getServerTimeDeltaMs(): unknown;
			getServerTimeMs(): unknown;
			getUTCOffset(): unknown;
			setServerTime(t: unknown): void;
		};
		data: never[];
		petTeam: null[];
		player: {
			_isFocusModeEnabled: boolean;
			_saveEnabled: boolean;
			appearanceChanged: boolean;
			earlyBirdLastChance: boolean;
			hasGrade: boolean;
			hasUsedTicket: boolean;
			immortal: boolean;
			inPVP: boolean;
			isClassCodeAttached: boolean;
			isFocusModeEnabled: boolean;
			isOpponent: boolean;
			justLeveled: boolean;
			memberPrompt: boolean;
			parentalLink: boolean;
			saveEnabled: boolean;
			showHealthBar: boolean;
			tt: boolean;
			tutorialCompletedThisSession: boolean;
			updated: boolean;
			aoaTier: number;
			broadcastId: number;
			catchAttempt: number;
			grade: number;
			pvpHP: number;
			spellStreak: number;
			starsEarned: number;
			starsReward: number;
			starsRewardBase: number;
			starsToProcess: number;
			userID: number;
			_locationSelectionType: string;
			_userDataPlatform: string;
			curriculumTreeID: string;
			locationSelectionType: string;
			parentEmail: string;
			type: string;
			userDataPlatform: string;
			username: string;
			_goalId: null;
			_playerContainer: null;
			chatID: null;
			coOpTeam: null;
			currentVideoSkillId: null;
			danceID: null;
			emoteID: null;
			goalId: null;
			lastVisited: null;
			memberShareDate: null;
			playerContainer: null;
			primaryParentID: null;
			source: null;
			transformID: null;
			world: null;
			memberEndDate: undefined;
			memberStartDate: undefined;
			team: undefined;
			addAsset(t: unknown): void;
			addAssets(t: unknown): void;
			addBattle(): void;
			addBountyScore(t: unknown): void;
			addLoss(): void;
			addSpell(t: unknown): void;
			addStars(i: unknown, n: unknown, e: unknown): unknown;
			addWin(): void;
			anyPetsAboveLevel(t: unknown): unknown;
			canCatch(): unknown;
			canSpin(t: unknown): unknown;
			castSpell(t: unknown): void;
			changeCurrentHearts(t: unknown, i: unknown): void;
			changeCurrentHeartsPercent(t: unknown): void;
			changeEnergy(t: unknown): void;
			changeGold(t: unknown, i: unknown): void;
			checkVersion(): unknown;
			completeDaily(t: unknown, i: unknown): void;
			completeTower(t: unknown): void;
			createDataClone(): unknown;
			createRandom(): void;
			diffAttackSlots(t: unknown): unknown;
			equip(t: unknown, i: unknown): unknown;
			evolve(t: unknown, i: unknown): void;
			forceSaveCharacter(): void;
			getAllAttacks(): unknown;
			getAllowsHouseVisitors(): unknown;
			getArenaPoints(): unknown;
			getAttacks(t: unknown): unknown;
			getAvailableEvolutions(): unknown;
			getBamSpells(t: unknown): unknown;
			getBaseMaxHearts(i: unknown): unknown;
			getBattles(): unknown;
			getBountyScore(): unknown;
			getColiseum(): unknown;
			getCurrentBamSpells(): unknown;
			getCurrentHearts(): unknown;
			getDailyQuestions(): unknown;
			getDamageBonus(): unknown;
			getDataAndClear(): unknown;
			getDrops(): unknown;
			getElement(): unknown;
			getEnergy(): unknown;
			getEquipmentSpell(t: unknown): unknown;
			getFirstName(): unknown;
			getGold(): unknown;
			getHeartBonus(): unknown;
			getID(): unknown;
			getLatestClassIDLegacy(): unknown;
			getLevel(): unknown;
			getLevelingCurve(t: unknown): unknown;
			getLosses(): unknown;
			getMaxHearts(t: unknown): unknown;
			getMaxTimeForCurrentMorphMarbleEffect(): unknown;
			getName(): unknown;
			getNameWithoutNickname(): unknown;
			getNativeSpell(t: unknown, i: unknown): unknown;
			getNumAttacks(): unknown;
			getNumRelics(): unknown;
			getPercentToLevel(): unknown;
			getPlayerClass(): unknown;
			getPlayerData(): unknown;
			getRegisterDate(): unknown;
			getSettings(): unknown;
			getSpellAssets(): unknown;
			getSpellStreak(): unknown;
			getStarReward(): unknown;
			getStarRewardByDamage(t: unknown): unknown;
			getStars(): unknown;
			getStarsToLevel(): unknown;
			getStatHealth(): unknown;
			getStatPower(): unknown;
			getTeamScore(): unknown;
			getTowerProgress(): unknown;
			getUpdatedData(t: unknown, i: unknown): unknown;
			getWins(): unknown;
			hasCompletedTowerTownTutorial(): unknown;
			hasCompletedTutorial(): unknown;
			hasHouseItem(t: unknown): unknown;
			hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
			hasMembership(): unknown;
			hasValidatedParentEmail(): unknown;
			hasValidatedTeacherEmail(): unknown;
			heal(): void;
			healTeam(t: unknown): void;
			healTeamMember(t: unknown, i: unknown, n: unknown): void;
			init(i: unknown): unknown;
			initEducation(): void;
			initFromProtobuf(t: unknown): void;
			isBlockedByDarkTowerMemberGate(): unknown;
			isItemOwned(t: unknown): unknown;
			isKnockedOut(): unknown;
			isPlayerTransformed(): unknown;
			isPlayingAtSchool(): unknown;
			onEducationLoaded(t: unknown): void;
			onTutorialComplete(): void;
			originalHasMembership(): unknown;
			processDeserter(): unknown;
			processStars(): void;
			registerIncomingAttack(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeTeam(): void;
			resetAccount(): unknown;
			resetModifiers(): void;
			rewardMembershipPrizes(t: unknown): unknown;
			sendInitialGTMEvents(): void;
			setAllowsHouseVisitors(i: unknown): void;
			setBGMVolume(t: unknown): void;
			setColiseum(t: unknown): void;
			setCurrentHearts(t: unknown, i: unknown): void;
			setData(t: unknown): void;
			setDefault(t: unknown, i: unknown): void;
			setEducation(t: unknown, i: unknown): void;
			setEnergy(i: unknown): void;
			setLocation(t: unknown): void;
			setMembership(t: unknown): void;
			setParentEmail(t: unknown): void;
			setPlayerClass(t: unknown): void;
			setSFXVolume(t: unknown): void;
			setSpinDate(t: unknown): void;
			setVoiceVolume(t: unknown): void;
			setZone(t: unknown): void;
			spinWheel(t: unknown): void;
			swapSpells(t: unknown, i: unknown): void;
			transformPlayer(i: unknown, n: unknown, e: unknown): void;
			unEquip(t: unknown): unknown;
			unlockMemberItems(): void;
			updateMembershipVideoAdData(): void;
			updateModifier(t: unknown, i: unknown): void;
			validateLevel(): void;
			registerDate: Date;
			_educationData: {
				chosenGrade: number;
				curriculumTreeID: number;
				grade: number;
				placementTestID: number;
				placementTestInstanceID: number;
				goalId: null;
				gradeOverride: null;
				homework: unknown /* too deep */;
				placementTestData: unknown /* too deep */;
				plans: unknown /* too deep */;
				skills: unknown /* too deep */;
			};
			_remoteLogger: {
				isLoggingEnabled(): unknown;
				logData(t: unknown, i: unknown): void;
				logStat(t: unknown, i: unknown): void;
				authProvider: unknown /* too deep */;
				currentPlayer: unknown /* too deep */;
				featureFlags: unknown /* too deep */;
				httpClient: unknown /* too deep */;
			};
			achievements: {
				updated: boolean;
				complete(t: unknown): void;
				get(t: unknown): unknown;
				getDataAndClear(): unknown;
				getProgress(t: unknown): unknown;
				increment(t: unknown, i: unknown): void;
				init(t: unknown): void;
				set(t: unknown, i: unknown): void;
				data: unknown /* too deep */;
			};
			appearance: {
				updated: boolean;
				eyeColor: number;
				face: number;
				hairColor: number;
				hairStyle: number;
				skinColor: number;
				gender: string;
				generateRandom(): void;
				getData(): unknown;
				getDataAndClear(): unknown;
				getEyeColor(): unknown;
				getFace(): unknown;
				getGender(): unknown;
				getHair(): unknown;
				getName(): unknown;
				getSkinColor(): unknown;
				init(i: unknown): void;
				randomize(): void;
				setEyeColor(i: unknown): void;
				setFace(i: unknown): void;
				setGender(i: unknown): void;
				setHair(i: unknown, n: unknown): void;
				setName(t: unknown): void;
				setSkinColor(i: unknown): void;
				_name: unknown /* too deep */;
				name: unknown /* too deep */;
				playerService: unknown /* too deep */;
			};
			backpack: {
				updated: boolean;
				add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addBountyNote(t: unknown, i: unknown, n: unknown): void;
				addKeyItem(t: unknown, i: unknown, n: unknown): unknown;
				canCraft(t: unknown, i: unknown): unknown;
				consume(t: unknown, i: unknown, n: unknown): unknown;
				consumeLegacyBounties(): void;
				craft(t: unknown, i: unknown): void;
				getBackpackItemsByType(t: unknown): unknown;
				getBattleItems(t: unknown): unknown;
				getDataAndClear(): unknown;
				getItem(t: unknown, i: unknown): unknown;
				getItemCount(t: unknown): unknown;
				getItemData(t: unknown, i: unknown): unknown;
				getKeyItemData(t: unknown, i: unknown): unknown;
				getTotalUnique(): unknown;
				hasItem(t: unknown, i: unknown): unknown;
				hasItems(t: unknown): unknown;
				hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
				setItemData(t: unknown, i: unknown, n: unknown): void;
				setItems(t: unknown): void;
				setKeyItemData(t: unknown, i: unknown, n: unknown): void;
				unlockAllItems(): void;
				data: unknown /* too deep */;
			};
			classIDs: string[];
			daily: {
				_isComplete: boolean;
				_updated: boolean;
				isComplete: boolean;
				updated: boolean;
				_festivalName: undefined;
				_location: undefined;
				_monsterID: undefined;
				festivalName: undefined;
				location: undefined;
				monsterID: undefined;
				complete(): void;
				getData(): unknown;
				getDataAndClear(): unknown;
				init(t: unknown): void;
				isExpired(t: unknown): unknown;
				reset(): void;
				start(t: unknown, i: unknown, n: unknown): void;
				_lastStarted: Date;
				lastStarted: Date;
			};
			dailyQuestions: {
				currentDay: number;
				previousData: null;
				adjustNumAnswered(t: unknown): void;
				clearPreviousData(): void;
				createValidData(i: unknown): unknown;
				getCurrentDay(): unknown;
				getDataAndClear(t: unknown): unknown;
				getNumAnsweredToday(): unknown;
				getNumRequired(i: unknown): unknown;
				getNumRequiredToday(): unknown;
				getPreviousNumAnsweredToday(): unknown;
				getResetDayIndex(): unknown;
				getRewards(t: unknown, i: unknown): unknown;
				getStartedChallenge(): unknown;
				giveReward(t: unknown, i: unknown, n: unknown, e: unknown): void;
				hasPreviousData(): unknown;
				init(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): void;
				isCurrentDayComplete(): unknown;
				isDayComplete(t: unknown): unknown;
				onQuestonAnswered(t: unknown, i: unknown, n: unknown, r: unknown): void;
				postNotification(t: unknown): void;
				processDate(i: unknown, n: unknown): void;
				resetData(): void;
				setCurrentDay(t: unknown): void;
				setDayComplete(t: unknown, i: unknown): void;
				setNumQuestionsAnswered(t: unknown): void;
				setStartedChallenge(t: unknown): void;
				data: unknown /* too deep */;
				onDataUpdated: unknown /* too deep */;
				rewards: unknown /* too deep */;
			};
			data: {
				allowsHouseVisitors: boolean;
				hp: number;
				level: number;
				nm: number;
				stars: number;
				startDate: number;
				storedMemberStars: number;
				team: number;
				versionID: number;
				school: string;
				zone: string;
				daily: unknown /* too deep */;
				settings: unknown /* too deep */;
			};
			educationData: {
				chosenGrade: number;
				curriculumTreeID: number;
				grade: number;
				placementTestID: number;
				placementTestInstanceID: number;
				goalId: null;
				gradeOverride: null;
				homework: unknown /* too deep */;
				placementTestData: unknown /* too deep */;
				plans: unknown /* too deep */;
				skills: unknown /* too deep */;
			};
			encounters: {
				updated: boolean;
				addToPetTimesBattled(t: unknown, i: unknown): void;
				addToPetTimesRescued(t: unknown, i: unknown): void;
				clearAdData(): void;
				createNewPetEncounter(t: unknown): void;
				getAllTotalPetsRecused(): unknown;
				getDataAndClear(): unknown;
				getPetEncounterByID(t: unknown): unknown;
				getPetTimesBattled(t: unknown): unknown;
				getPetTimesRescued(t: unknown): unknown;
				hasPetBeenEncountered(t: unknown): unknown;
				hasSeenAd(t: unknown): unknown;
				markAdSeen(t: unknown): void;
				onPetEncountered(t: unknown): void;
				removeAd(t: unknown): unknown;
				setData(t: unknown): void;
				_data: unknown /* too deep */;
				_timeManager: unknown /* too deep */;
			};
			equipment: {
				updated: boolean;
				boots: number;
				follow: number;
				hat: number;
				outfit: number;
				weapon: number;
				mount: undefined;
				spellRelic: undefined;
				calculateAffixBonus(t: unknown): unknown;
				clearData(): void;
				getAffixes(t: unknown, i: unknown): unknown;
				getBoots(): unknown;
				getDamageBonuses(): unknown;
				getData(): unknown;
				getDataAndClear(): unknown;
				getEquipment(t: unknown): unknown;
				getFollow(): unknown;
				getHat(): unknown;
				getHeartBonuses(): unknown;
				getMount(): unknown;
				getOutfit(): unknown;
				getSpellRelic(): unknown;
				getWeapon(): unknown;
				handleItemEquip(t: unknown, i: unknown, n: unknown): void;
				handleItemUnequip(): void;
				init(t: unknown): void;
				randomize(): void;
				setBoots(i: unknown, n: unknown, e: unknown): void;
				setFollow(i: unknown): void;
				setHat(i: unknown, n: unknown, e: unknown): void;
				setMount(i: unknown, n: unknown, e: unknown): void;
				setOutfit(i: unknown, n: unknown, e: unknown): void;
				setSpellRelic(i: unknown, n: unknown, e: unknown): void;
				setWeapon(i: unknown, n: unknown, e: unknown): void;
				unequipLevelLockedItem(t: unknown, i: unknown): void;
				unequipLevelLockedItems(): void;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			house: {
				updated: boolean;
				add(t: unknown): void;
				getActive(t: unknown): unknown;
				getActiveCount(): unknown;
				getBackground(): unknown;
				getCurrentHouseTag(): unknown;
				getDataAndClear(): unknown;
				getItemCount(): unknown;
				getItems(): unknown;
				getOwned(t: unknown): unknown;
				getSortedActive(): unknown;
				getUnplacedItems(): unknown;
				hasMaxQuantityOfItem(t: unknown): unknown;
				setActive(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
				setAllInactive(): void;
				setCurrentHouseTag(t: unknown): void;
				setInactive(t: unknown): void;
				setItems(t: unknown): void;
				updateActive(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown): void;
				data: unknown /* too deep */;
			};
			kennel: {
				updated: boolean;
				addPet(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
				amountOfPet(t: unknown): unknown;
				canSwapPositions(t: unknown, i: unknown): unknown;
				createNewPet(t: unknown): unknown;
				findEmptyTeamIndex(): unknown;
				findFirstFilledIndex(): unknown;
				getDataAndClear(): unknown;
				getNumPets(t: unknown): unknown;
				getPets(t: unknown): unknown;
				getPetTeamIDs(): unknown;
				getTeamPosition(t: unknown): unknown;
				hasMaxNonMemberPets(): unknown;
				hasPet(t: unknown): unknown;
				isCreatureCurrentPlayer(t: unknown): unknown;
				isFull(): unknown;
				populateKennel(t: unknown): void;
				removeAtTeamPosition(t: unknown): void;
				removePet(t: unknown): void;
				setTeamPosition(t: unknown, i: unknown): void;
				swapTeamPositions(t: unknown, i: unknown): void;
				_encounterInfo: unknown /* too deep */;
				_petData: unknown /* too deep */;
				_petTeam: unknown /* too deep */;
				_timeManager: unknown /* too deep */;
				data: unknown /* too deep */;
				petTeam: unknown /* too deep */;
				player: unknown /* too deep */;
			};
			modifiers: {
				damage: number;
				ignoreElement: number;
				maxHearts: number;
				miss: number;
				barrier: null;
				potion: null;
			};
			name: {
				gender: string;
				generateRandomName(): void;
				getData(): unknown;
				getFirstName(): unknown;
				getFullName(): unknown;
				getName(): unknown;
				getNameWithoutNickname(): unknown;
				init(t: unknown, i: unknown): void;
				initFromProtobuf(t: unknown, i: unknown): void;
				validateNameData(): unknown;
				data: unknown /* too deep */;
				localizer: unknown /* too deep */;
			};
			onHPChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			owners: unknown /* too deep */[];
			playerParents: never[];
			playerTeachers: unknown /* too deep */[];
			quests: {
				updated: boolean;
				defeatBoss(t: unknown): void;
				defeatMonster(i: unknown, n: unknown, e: unknown): void;
				getDataAndClear(): unknown;
				setQuests(t: unknown): void;
				data: unknown /* too deep */;
			};
			state: {
				_updated: boolean;
				updated: boolean;
				get(t: unknown): unknown;
				getCompletedQuests(t: unknown): unknown;
				getDataAndClear(): unknown;
				getDungeonSchema(t: unknown): unknown;
				getDungeonState(t: unknown, i: unknown): unknown;
				getZoneVars(t: unknown, i: unknown, n: unknown): unknown;
				set(t: unknown, i: unknown): void;
				setData(t: unknown): void;
				_dungeonStates: unknown /* too deep */;
				data: unknown /* too deep */;
			};
			tutorial: {
				updated: boolean;
				getDataAndClear(): unknown;
				getMenuValue(t: unknown): unknown;
				getValue(t: unknown, i: unknown, n: unknown): unknown;
				setData(t: unknown): void;
				setMenuValue(t: unknown, i: unknown): void;
				setValue(t: unknown, i: unknown, n: unknown, e: unknown): void;
				data: unknown /* too deep */;
			};
		};
	};
	modifiers: {
		damage: number;
		ignoreElement: number;
		maxHearts: number;
		miss: number;
		barrier: null;
		potion: null;
	};
	name: {
		gender: string;
		generateRandomName(): void;
		getData(): unknown;
		getFirstName(): unknown;
		getFullName(): unknown;
		getName(): unknown;
		getNameWithoutNickname(): unknown;
		init(t: unknown, i: unknown): void;
		initFromProtobuf(t: unknown, i: unknown): void;
		validateNameData(): unknown;
		data: {
			firstName: number;
			lastName: number;
			middleName: number;
			nickname: null;
			getFirstName(): unknown;
			getLastName(): unknown;
			getMiddleName(): unknown;
			getNickname(): unknown;
			isValid(): unknown;
			setFirstName(t: unknown): void;
			setLastName(t: unknown): void;
			setMiddleName(t: unknown): void;
			setNickname(t: unknown): void;
		};
		localizer: {
			getText(t: unknown): unknown;
			setDataSource(t: unknown): void;
			dataSource: {
				getValue(t: unknown): unknown;
				loadDataFromURL(t: unknown, i: unknown): unknown;
				_httpClient: unknown /* too deep */;
				_languageData: unknown /* too deep */;
			};
		};
	};
	onHPChange: {
		_shouldPropagate: boolean;
		active: boolean;
		memorize: boolean;
		_addBinding(t: unknown): void;
		_boundDispatch(): unknown;
		_indexOfListener(t: unknown, i: unknown): unknown;
		add(t: unknown, i: unknown, n: unknown): unknown;
		addOnce(t: unknown, i: unknown, n: unknown): unknown;
		boundDispatch(): unknown;
		dispatch(): void;
		dispose(): void;
		forget(): void;
		getNumListeners(): unknown;
		halt(): void;
		has(t: unknown, i: unknown): unknown;
		registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		remove(t: unknown, i: unknown): unknown;
		removeAll(t: unknown): void;
		toString(): unknown;
		validateListener(t: unknown, i: unknown): void;
		_bindings: never[];
		bindings: never[];
	};
	owners: { id: string; ownerID: string; startDate: string; }[];
	playerParents: never[];
	playerTeachers: { id: string; startDate: string; type: string; }[];
	quests: {
		updated: boolean;
		defeatBoss(t: unknown): void;
		defeatMonster(i: unknown, n: unknown, e: unknown): void;
		getDataAndClear(): unknown;
		setQuests(t: unknown): void;
		data: {};
	};
	state: {
		_updated: boolean;
		updated: boolean;
		get(t: unknown): unknown;
		getCompletedQuests(t: unknown): unknown;
		getDataAndClear(): unknown;
		getDungeonSchema(t: unknown): unknown;
		getDungeonState(t: unknown, i: unknown): unknown;
		getZoneVars(t: unknown, i: unknown, n: unknown): unknown;
		set(t: unknown, i: unknown): void;
		setData(t: unknown): void;
		_dungeonStates: {};
		data: {
			breadcrumbs: {
				FEATURE_BADGES: number;
			};
			dungeons: {
				crystal_caverns: unknown /* too deep */;
			};
			towers: {
				earthtower: unknown /* too deep */;
			};
			tutorial: {
				0: number;
			};
			world: {
				bounties: unknown /* too deep */;
				dailyQuests: unknown /* too deep */;
			};
			zone: {
				academy: unknown /* too deep */;
				house: unknown /* too deep */;
				lamplight: unknown /* too deep */;
				shiverchill: unknown /* too deep */;
			};
		};
	};
	tutorial: {
		updated: boolean;
		getDataAndClear(): unknown;
		getMenuValue(t: unknown): unknown;
		getValue(t: unknown, i: unknown, n: unknown): unknown;
		setData(t: unknown): void;
		setMenuValue(t: unknown, i: unknown): void;
		setValue(t: unknown, i: unknown, n: unknown, e: unknown): void;
		data: {
			menus: {};
			zones: {};
		};
	};
}