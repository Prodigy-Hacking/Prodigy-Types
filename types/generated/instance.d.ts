export interface Instance {
	destroy(): void;
	_game: {
		_paused: boolean;
		_pausedByCode: boolean;
		isBooted: boolean;
		paused: boolean;
		pausedByCode: boolean;
		transparent: boolean;
		versioned: boolean;
		_height: number;
		_width: number;
		broadcastId: number;
		height: number;
		resolution: number;
		width: number;
		clientVersion: string;
		windowHeight: undefined;
		windowWidth: undefined;
		boot(): void;
		bootSystems(): void;
		createApp(i: unknown, n: unknown): unknown;
		createSystems(): void;
		destroy(): void;
		focusGain(t: unknown): void;
		focusLoss(t: unknown): void;
		gamePaused(t: unknown): void;
		gameResumed(t: unknown): void;
		init(): void;
		pauseGame(t: unknown): void;
		postUpdate(t: unknown): void;
		showDebugHeader(): void;
		toggleFpsGraph(): void;
		update(i: unknown): void;
		canvas: HTMLCanvasElement;
		parent: HTMLCanvasElement;
		_add: {
			audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			existing(t: unknown): unknown;
			graphics(t: unknown, i: unknown, n: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
			sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
			tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			tween(t: unknown, i: unknown, n: unknown): unknown;
			game: Instance["_game"];
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: {
					maxX: number;
					maxY: number;
					minX: number;
					minY: number;
					updateID: number;
					rect: null;
					addBounds(t: unknown): void;
					addBoundsArea(t: unknown, e: unknown): void;
					addBoundsMask(t: unknown, e: unknown): void;
					addBoundsMatrix(t: unknown, e: unknown): void;
					addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
					addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
					addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
					addPoint(t: unknown): void;
					addQuad(t: unknown): void;
					addVertexData(t: unknown, e: unknown, r: unknown): void;
					addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
					addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
					clear(): void;
					getRectangle(t: unknown): unknown;
					isEmpty(): unknown;
					pad(t: unknown, e: unknown): void;
				};
				_events: {};
				_game: Instance["_game"];
				_localBounds: {
					maxX: number;
					maxY: number;
					minX: number;
					minY: number;
					updateID: number;
					rect: null;
					addBounds(t: unknown): void;
					addBoundsArea(t: unknown, e: unknown): void;
					addBoundsMask(t: unknown, e: unknown): void;
					addBoundsMatrix(t: unknown, e: unknown): void;
					addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
					addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
					addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
					addPoint(t: unknown): void;
					addQuad(t: unknown): void;
					addVertexData(t: unknown, e: unknown, r: unknown): void;
					addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
					addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
					clear(): void;
					getRectangle(t: unknown): unknown;
					isEmpty(): unknown;
					pad(t: unknown, e: unknown): void;
				};
				_localBoundsRect: {
					bottom: number;
					height: number;
					left: number;
					right: number;
					top: number;
					type: number;
					width: number;
					x: number;
					y: number;
					ceil(t: unknown, e: unknown): unknown;
					clone(): unknown;
					contains(t: unknown, e: unknown): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					enlarge(t: unknown): unknown;
					fit(t: unknown): unknown;
					pad(t: unknown, e: unknown): unknown;
				};
				_tempDisplayObjectParent: {
					_accessibleActive: boolean;
					_cacheAsBitmap: boolean;
					_destroyed: boolean;
					accessible: boolean;
					accessibleChildren: boolean;
					buttonMode: boolean;
					cacheAsBitmap: boolean;
					interactive: boolean;
					interactiveChildren: boolean;
					isMask: boolean;
					isSprite: boolean;
					renderable: boolean;
					visible: boolean;
					worldVisible: boolean;
					_boundsID: number;
					_eventsCount: number;
					_lastSortedIndex: number;
					_zIndex: number;
					alpha: number;
					angle: number;
					renderId: number;
					rotation: number;
					tabIndex: number;
					worldAlpha: number;
					x: number;
					y: number;
					zIndex: number;
					accessiblePointerEvents: string;
					accessibleType: string;
					_accessibleDiv: null;
					_boundsRect: null;
					_cacheData: null;
					_enabledFilters: null;
					_localBounds: null;
					_localBoundsRect: null;
					_mask: null;
					accessibleHint: null;
					accessibleTitle: null;
					cursor: null;
					filterArea: null;
					filters: null;
					hitArea: null;
					mask: null;
					name: null;
					parent: null;
					sortDirty: null;
					_cacheAsBitmapDestroy(t: unknown): void;
					_calculateCachedBounds(): void;
					_destroyCachedDisplayObject(): void;
					_getCachedLocalBounds(): unknown;
					_initCachedDisplayObject(t: unknown): void;
					_initCachedDisplayObjectCanvas(t: unknown): void;
					_recursivePostUpdateTransform(): void;
					_renderCached(t: unknown): void;
					_renderCachedCanvas(t: unknown): void;
					addListener(t: unknown, e: unknown, r: unknown): unknown;
					destroy(t: unknown): void;
					disableTempParent(t: unknown): void;
					displayObjectUpdateTransform(): void;
					emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
					enableTempParent(): unknown;
					eventNames(): unknown;
					getBounds(t: unknown, e: unknown): unknown;
					getGlobalPosition(t: unknown, e: unknown): unknown;
					getLocalBounds(t: unknown): unknown;
					listenerCount(t: unknown): unknown;
					listeners(t: unknown): unknown;
					off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					on(t: unknown, e: unknown, r: unknown): unknown;
					once(t: unknown, e: unknown, r: unknown): unknown;
					removeAllListeners(t: unknown): unknown;
					removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					renderCanvas(t: unknown): void;
					renderWebGL(t: unknown): void;
					setParent(t: unknown): unknown;
					setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
					toGlobal(t: unknown, e: unknown, r: unknown): unknown;
					toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
					updateTransform(): void;
					_bounds: {
						maxX: number;
						maxY: number;
						minX: number;
						minY: number;
						updateID: number;
						rect: null;
						addBounds(t: unknown): void;
						addBoundsArea(t: unknown, e: unknown): void;
						addBoundsMask(t: unknown, e: unknown): void;
						addBoundsMatrix(t: unknown, e: unknown): void;
						addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						addPoint(t: unknown): void;
						addQuad(t: unknown): void;
						addVertexData(t: unknown, e: unknown, r: unknown): void;
						addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
						addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						clear(): void;
						getRectangle(t: unknown): unknown;
						isEmpty(): unknown;
						pad(t: unknown, e: unknown): void;
					};
					_events: {};
					_tempDisplayObjectParent: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						renderable: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_eventsCount: number;
						_lastSortedIndex: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						renderId: number;
						rotation: number;
						tabIndex: number;
						worldAlpha: number;
						x: number;
						y: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_localBoundsRect: null;
						_mask: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						name: null;
						parent: null;
						sortDirty: null;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_recursivePostUpdateTransform(): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						destroy(t: unknown): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						removeAllListeners(t: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						setParent(t: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						updateTransform(): void;
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_trackedPointers: {};
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						tempDisplayObjectParent: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
						trackedPointers: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["localTransform"];
							pivot: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["pivot"];
							position: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["position"];
							scale: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["scale"];
							skew: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					_trackedPointers: {};
					localTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
					pivot: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["localTransform"];
							pivot: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["pivot"];
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
					};
					position: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["pivot"]["scope"];
					};
					scale: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["pivot"]["scope"];
					};
					skew: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["pivot"]["scope"];
					};
					tempDisplayObjectParent: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
					trackedPointers: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_trackedPointers"];
					transform: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"]["pivot"]["scope"];
					worldTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
				};
				_trackedPointers: {};
				anchor: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bounds: {
					bottom: number;
					height: number;
					left: number;
					right: number;
					top: number;
					type: number;
					width: number;
					x: number;
					y: number;
					ceil(t: unknown, e: unknown): unknown;
					clone(): unknown;
					contains(t: unknown, e: unknown): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					enlarge(t: unknown): unknown;
					fit(t: unknown): unknown;
					pad(t: unknown, e: unknown): unknown;
				};
				children: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }[];
				events: {
					destroy(): void;
					onAddedToGroup: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onAddedToGroup"]["_bindings"];
					};
					onAnimationComplete: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onAnimationComplete"]["_bindings"];
					};
					onAnimationLoop: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onAnimationLoop"]["_bindings"];
					};
					onAnimationStart: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onAnimationStart"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onDestroy"]["_bindings"];
					};
					onDragStart: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onDragStart"]["_bindings"];
					};
					onDragStop: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onDragStop"]["_bindings"];
					};
					onDragUpdate: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onDragUpdate"]["_bindings"];
					};
					onEnterBounds: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onEnterBounds"]["_bindings"];
					};
					onInputDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onInputDown"]["_bindings"];
					};
					onInputOut: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onInputOut"]["_bindings"];
					};
					onInputOver: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onInputOver"]["_bindings"];
					};
					onInputUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onInputUp"]["_bindings"];
					};
					onOutOfBounds: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onOutOfBounds"]["_bindings"];
					};
					onRemovedFromGroup: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onRemovedFromGroup"]["_bindings"];
					};
					onRemovedFromWorld: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_add"]["stage"]["events"]["onRemovedFromWorld"]["_bindings"];
					};
					parent: Instance["_game"]["_add"]["stage"];
				};
				game: Instance["_game"];
				localTransform: {
					a: number;
					b: number;
					c: number;
					d: number;
					tx: number;
					ty: number;
					array: null;
					append(t: unknown): unknown;
					apply(t: unknown, e: unknown): unknown;
					applyInverse(t: unknown, e: unknown): unknown;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					decompose(t: unknown): unknown;
					fromArray(t: unknown): void;
					identity(): unknown;
					invert(): unknown;
					prepend(t: unknown): unknown;
					rotate(t: unknown): unknown;
					scale(t: unknown, e: unknown): unknown;
					set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
					setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
					toArray(t: unknown, e: unknown): unknown;
					translate(t: unknown, e: unknown): unknown;
				};
				onDestroy: {
					_shouldPropagate: boolean;
					active: boolean;
					memorize: boolean;
					_addBinding(t: unknown): void;
					_boundDispatch(): unknown;
					_indexOfListener(t: unknown, i: unknown): unknown;
					add(t: unknown, i: unknown, n: unknown): unknown;
					addOnce(t: unknown, i: unknown, n: unknown): unknown;
					boundDispatch(): unknown;
					dispatch(): void;
					dispose(): void;
					forget(): void;
					getNumListeners(): unknown;
					halt(): void;
					has(t: unknown, i: unknown): unknown;
					registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					toString(): unknown;
					validateListener(t: unknown, i: unknown): void;
					_bindings: never[];
					bindings: Instance["_game"]["_add"]["stage"]["onDestroy"]["_bindings"];
				};
				parent: {
					_accessibleActive: boolean;
					_cacheAsBitmap: boolean;
					_destroyed: boolean;
					accessible: boolean;
					accessibleChildren: boolean;
					buttonMode: boolean;
					cacheAsBitmap: boolean;
					interactive: boolean;
					interactiveChildren: boolean;
					isMask: boolean;
					isSprite: boolean;
					renderable: boolean;
					sortableChildren: boolean;
					sortDirty: boolean;
					visible: boolean;
					worldVisible: boolean;
					_boundsID: number;
					_eventsCount: number;
					_lastSortedIndex: number;
					_zIndex: number;
					alpha: number;
					angle: number;
					height: number;
					renderId: number;
					rotation: number;
					tabIndex: number;
					width: number;
					worldAlpha: number;
					x: number;
					y: number;
					zIndex: number;
					accessiblePointerEvents: string;
					accessibleType: string;
					_accessibleDiv: null;
					_boundsRect: null;
					_cacheData: null;
					_enabledFilters: null;
					_mask: null;
					accessibleHint: null;
					accessibleTitle: null;
					cursor: null;
					filterArea: null;
					filters: null;
					hitArea: null;
					mask: null;
					name: null;
					parent: null;
					_cacheAsBitmapDestroy(t: unknown): void;
					_calculateBounds(): void;
					_calculateCachedBounds(): void;
					_destroyCachedDisplayObject(): void;
					_getCachedLocalBounds(): unknown;
					_initCachedDisplayObject(t: unknown): void;
					_initCachedDisplayObjectCanvas(t: unknown): void;
					_recursivePostUpdateTransform(): void;
					_render(t: unknown): void;
					_renderCached(t: unknown): void;
					_renderCachedCanvas(t: unknown): void;
					_renderCanvas(t: unknown): void;
					_renderWebGL(t: unknown): void;
					addChild(): unknown;
					addChildAt(t: unknown, e: unknown): unknown;
					addListener(t: unknown, e: unknown, r: unknown): unknown;
					calculateBounds(): void;
					containerUpdateTransform(): void;
					destroy(e: unknown): void;
					disableTempParent(t: unknown): void;
					displayObjectUpdateTransform(): void;
					emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
					enableTempParent(): unknown;
					eventNames(): unknown;
					getBounds(t: unknown, e: unknown): unknown;
					getChildAt(t: unknown): unknown;
					getChildByName(t: unknown, e: unknown): unknown;
					getChildIndex(t: unknown): unknown;
					getGlobalPosition(t: unknown, e: unknown): unknown;
					getLocalBounds(e: unknown, r: unknown): unknown;
					listenerCount(t: unknown): unknown;
					listeners(t: unknown): unknown;
					off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					on(t: unknown, e: unknown, r: unknown): unknown;
					once(t: unknown, e: unknown, r: unknown): unknown;
					onChildrenChange(t: unknown): void;
					removeAllListeners(t: unknown): unknown;
					removeChild(): unknown;
					removeChildAt(t: unknown): unknown;
					removeChildren(t: unknown, e: unknown): unknown;
					removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					render(t: unknown): void;
					renderAdvanced(t: unknown): void;
					renderAdvancedWebGL(t: unknown): void;
					renderCanvas(t: unknown): void;
					renderWebGL(t: unknown): void;
					setChildIndex(t: unknown, e: unknown): void;
					setParent(t: unknown): unknown;
					setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
					sortChildren(): void;
					swapChildren(t: unknown, e: unknown): void;
					toGlobal(t: unknown, e: unknown, r: unknown): unknown;
					toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
					updateTransform(): void;
					_bounds: {
						maxX: number;
						maxY: number;
						minX: number;
						minY: number;
						updateID: number;
						rect: null;
						addBounds(t: unknown): void;
						addBoundsArea(t: unknown, e: unknown): void;
						addBoundsMask(t: unknown, e: unknown): void;
						addBoundsMatrix(t: unknown, e: unknown): void;
						addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						addPoint(t: unknown): void;
						addQuad(t: unknown): void;
						addVertexData(t: unknown, e: unknown, r: unknown): void;
						addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
						addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						clear(): void;
						getRectangle(t: unknown): unknown;
						isEmpty(): unknown;
						pad(t: unknown, e: unknown): void;
					};
					_events: {};
					_localBounds: {
						maxX: number;
						maxY: number;
						minX: number;
						minY: number;
						updateID: number;
						rect: null;
						addBounds(t: unknown): void;
						addBoundsArea(t: unknown, e: unknown): void;
						addBoundsMask(t: unknown, e: unknown): void;
						addBoundsMatrix(t: unknown, e: unknown): void;
						addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						addPoint(t: unknown): void;
						addQuad(t: unknown): void;
						addVertexData(t: unknown, e: unknown, r: unknown): void;
						addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
						addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						clear(): void;
						getRectangle(t: unknown): unknown;
						isEmpty(): unknown;
						pad(t: unknown, e: unknown): void;
					};
					_localBoundsRect: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					_tempDisplayObjectParent: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						renderable: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_eventsCount: number;
						_lastSortedIndex: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						renderId: number;
						rotation: number;
						tabIndex: number;
						worldAlpha: number;
						x: number;
						y: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_localBoundsRect: null;
						_mask: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						name: null;
						parent: null;
						sortDirty: null;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_recursivePostUpdateTransform(): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						destroy(t: unknown): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						removeAllListeners(t: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						setParent(t: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						updateTransform(): void;
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_trackedPointers: {};
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						tempDisplayObjectParent: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
						trackedPointers: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"]["localTransform"];
							pivot: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"]["pivot"];
							position: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"]["position"];
							scale: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"]["scale"];
							skew: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					_trackedPointers: {};
					children: Instance["_game"]["_add"]["stage"][];
					localTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
					pivot: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_add"]["stage"]["parent"]["localTransform"];
							pivot: Instance["_game"]["_add"]["stage"]["parent"]["pivot"];
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
					};
					position: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_add"]["stage"]["parent"]["pivot"]["scope"];
					};
					scale: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_add"]["stage"]["parent"]["pivot"]["scope"];
					};
					skew: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_add"]["stage"]["parent"]["pivot"]["scope"];
					};
					tempDisplayObjectParent: Instance["_game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"];
					trackedPointers: Instance["_game"]["_add"]["stage"]["parent"]["_trackedPointers"];
					transform: Instance["_game"]["_add"]["stage"]["parent"]["pivot"]["scope"];
					worldTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
				};
				pivot: {
					_x: number;
					_y: number;
					x: number;
					y: number;
					cb(): void;
					clone(e: unknown, r: unknown): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
					scope: {
						_currentLocalID: number;
						_cx: number;
						_cy: number;
						_localID: number;
						_parentID: number;
						_rotation: number;
						_sx: number;
						_sy: number;
						_worldID: number;
						rotation: number;
						onChange(): void;
						setFromMatrix(t: unknown): void;
						updateLocalTransform(): void;
						updateSkew(): void;
						updateTransform(t: unknown): void;
						localTransform: Instance["_game"]["_add"]["stage"]["localTransform"];
						pivot: Instance["_game"]["_add"]["stage"]["pivot"];
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Instance["_game"]["_add"]["stage"]["pivot"]["scope"];
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Instance["_game"]["_add"]["stage"]["pivot"]["scope"];
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Instance["_game"]["_add"]["stage"]["pivot"]["scope"];
						};
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
				};
				position: Instance["_game"]["_add"]["stage"]["pivot"]["scope"]["position"];
				scale: Instance["_game"]["_add"]["stage"]["pivot"]["scope"]["scale"];
				skew: Instance["_game"]["_add"]["stage"]["pivot"]["scope"]["skew"];
				stage: Instance["_game"]["_add"]["stage"];
				tempDisplayObjectParent: Instance["_game"]["_add"]["stage"]["_tempDisplayObjectParent"];
				trackedPointers: Instance["_game"]["_add"]["stage"]["_trackedPointers"];
				transform: Instance["_game"]["_add"]["stage"]["pivot"]["scope"];
				world: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				worldGamePosition: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				worldPosition: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				worldScale: Instance["_game"]["_add"]["stage"]["pivot"]["scope"]["scale"];
				worldTransform: Instance["_game"]["_add"]["stage"]["pivot"]["scope"]["worldTransform"];
			};
		};
		_app: {
			_resizeId: null;
			_resizeTo: null;
			cancelResize(): void;
			destroy(e: unknown, r: unknown): void;
			queueResize(): unknown;
			render(): void;
			resize(): void;
			start(): void;
			stop(): void;
			view: HTMLCanvasElement;
			_ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: {
					_destroyed: boolean;
					once: boolean;
					priority: number;
					context: null;
					fn: null;
					previous: null;
					connect(t: unknown): void;
					destroy(t: unknown): unknown;
					emit(t: unknown): unknown;
					match(t: unknown, e: unknown): unknown;
					next: {
						_destroyed: boolean;
						once: boolean;
						priority: number;
						connect(t: unknown): void;
						destroy(t: unknown): unknown;
						emit(t: unknown): unknown;
						fn(i: unknown): void;
						match(t: unknown, e: unknown): unknown;
						context: Instance["_game"];
						next: {
							_destroyed: boolean;
							once: boolean;
							priority: number;
							next: null;
							connect(t: unknown): void;
							destroy(t: unknown): unknown;
							emit(t: unknown): unknown;
							fn(): void;
							match(t: unknown, e: unknown): unknown;
							context: Instance["_game"]["_app"];
							previous: Instance["_game"]["_app"]["_ticker"]["_head"]["next"];
						};
						previous: Instance["_game"]["_app"]["_ticker"]["_head"];
					};
				};
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: (((t: unknown, e: unknown) => unknown) | ((t: unknown, e: unknown) => void) | ((e: unknown, r: unknown) => void) | ((e: unknown, n: unknown) => unknown))[];
				_beforeMiddleware: ((t: unknown, e: unknown) => void)[];
				_queue: {
					paused: boolean;
					started: boolean;
					buffer: number;
					concurrency: number;
					drain(): void;
					empty(): void;
					error(): void;
					idle(): unknown;
					kill(): void;
					length(): unknown;
					pause(): void;
					process(): void;
					push(t: unknown, e: unknown): void;
					resume(): void;
					running(): unknown;
					saturated(): void;
					unsaturated(): void;
					unshift(t: unknown, e: unknown): void;
					_tasks: never[];
				};
				_resourcesParsing: never[];
				onComplete: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onError: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onLoad: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onProgress: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onStart: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				resources: {};
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: number[];
				_events: {
					prerender: {
						once: boolean;
						fn(): void;
						context: {
							_aIndex: number;
							_bufferSize: number;
							_dcIndex: number;
							_flushId: number;
							_iIndex: number;
							_indexCount: number;
							_packedGeometryPoolSize: number;
							_vertexCount: number;
							MAX_TEXTURES: number;
							size: number;
							vertexSize: number;
							bindAndClearTexArray(t: unknown): void;
							buildDrawCalls(t: unknown, e: unknown, i: unknown): void;
							buildTexturesAndDrawCalls(): void;
							contextChange(): void;
							destroy(): void;
							drawBatches(): void;
							flush(): void;
							geometryClass(r: unknown): unknown;
							getAttributeBuffer(t: unknown): unknown;
							getIndexBuffer(t: unknown): unknown;
							initFlushBuffers(): void;
							onPrerender(): void;
							packInterleavedGeometry(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							render(t: unknown): void;
							start(): void;
							stop(): void;
							updateGeometry(): void;
							_indexBuffer: Uint16Array;
							_aBuffers: unknown /* too deep */;
							_attributeBuffer: unknown /* too deep */;
							_bufferedElements: unknown /* too deep */;
							_bufferedTextures: unknown /* too deep */;
							_iBuffers: unknown /* too deep */;
							_packedGeometries: unknown /* too deep */;
							_shader: unknown /* too deep */;
							_tempBoundTextures: unknown /* too deep */;
							renderer: Instance["_game"]["_app"]["renderer"];
							shaderGenerator: unknown /* too deep */;
							state: unknown /* too deep */;
						};
					};
				};
				_lastObjectRendered: Instance["_game"]["_add"]["stage"]["parent"];
				batch: {
					boundArray(t: unknown, e: unknown, r: unknown, i: unknown): void;
					copyBoundTextures(t: unknown, e: unknown): void;
					destroy(): void;
					flush(): void;
					reset(): void;
					setObjectRenderer(t: unknown): void;
					currentRenderer: Instance["_game"]["_app"]["renderer"]["_events"]["prerender"]["context"];
					emptyRenderer: {
						destroy(): void;
						flush(): void;
						render(t: unknown): void;
						start(): void;
						stop(): void;
						renderer: Instance["_game"]["_app"]["renderer"];
					};
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				context: {
					isLost: boolean;
					webGLVersion: number;
					contextChange(t: unknown): void;
					createContext(e: unknown, r: unknown): unknown;
					destroy(): void;
					getExtensions(): void;
					handleContextLost(arg0: unknown): void;
					handleContextRestored(): void;
					initFromContext(t: unknown): void;
					initFromOptions(t: unknown): void;
					postrender(): void;
					validateContext(t: unknown): void;
					gl: WebGL2RenderingContext;
					extensions: {
						anisotropicFiltering: {
							MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;
							TEXTURE_MAX_ANISOTROPY_EXT: number;
						};
						colorBufferFloat: {};
						floatTextureLinear: {};
					};
					renderer: Instance["_game"]["_app"]["renderer"];
					supports: {
						uint32Indices: boolean;
					};
				};
				extract: {
					base64(t: unknown, e: unknown, r: unknown): unknown;
					canvas(e: unknown): unknown;
					destroy(): void;
					image(t: unknown, e: unknown, r: unknown): unknown;
					pixels(e: unknown): unknown;
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				filter: {
					forceClear: boolean;
					useMaxPadding: boolean;
					applyFilter(e: unknown, r: unknown, i: unknown, n: unknown): void;
					bindAndClear(e: unknown, r: unknown): void;
					calculateNormalizedScreenSpaceMatrix(t: unknown): unknown;
					calculateScreenSpaceMatrix(t: unknown): unknown;
					calculateSpriteMatrix(t: unknown, e: unknown): unknown;
					destroy(): void;
					emptyPool(): void;
					getFilterTexture(t: unknown, e: unknown): unknown;
					getOptimalFilterTexture(t: unknown, e: unknown, r: unknown): unknown;
					getRenderTarget(t: unknown, e: unknown): unknown;
					pop(): unknown;
					push(t: unknown, e: unknown): void;
					resize(): void;
					returnFilterTexture(t: unknown): unknown;
					returnRenderTarget(t: unknown): unknown;
					activeState: {
						legacy: boolean;
						resolution: number;
						filters: null;
						renderTexture: null;
						target: null;
						clear(): void;
						destinationFrame: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						sourceFrame: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
					};
					defaultFilterStack: unknown /* too deep */[];
					globalUniforms: {
						group: boolean;
						static: boolean;
						dirtyId: number;
						id: number;
						add(e: unknown, r: unknown, i: unknown): void;
						update(): void;
						syncUniforms: {
							"0"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
							"1"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
							"2"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						};
						uniforms: {
							resolution: number;
							filterArea: Float32Array;
							filterClamp: Float32Array;
							inputClamp: Float32Array;
							inputPixel: Float32Array;
							inputSize: Float32Array;
							outputFrame: Instance["_game"]["_app"]["renderer"]["filter"]["activeState"]["sourceFrame"];
						};
					};
					quad: {
						instanced: boolean;
						id: number;
						instanceCount: number;
						refCount: number;
						addAttribute(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						addIndex(t: unknown): unknown;
						clone(): unknown;
						destroy(): void;
						dispose(): void;
						getAttribute(t: unknown): unknown;
						getBuffer(t: unknown): unknown;
						getIndex(): unknown;
						getSize(): unknown;
						interleave(): unknown;
						attributes: {
							aVertexPosition: unknown /* too deep */;
						};
						buffers: unknown /* too deep */[];
						disposeRunner: {
							empty: boolean;
							_aliasCount: number;
							_name: string;
							name: string;
							add(t: unknown): unknown;
							contains(t: unknown): unknown;
							destroy(): void;
							dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							ensureNonAliasedItems(): void;
							remove(t: unknown): unknown;
							removeAll(): unknown;
							run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							items: unknown /* too deep */;
						};
						glVertexArrayObjects: {};
						indexBuffer: {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Uint16Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
					};
					quadUv: {
						instanced: boolean;
						id: number;
						instanceCount: number;
						refCount: number;
						addAttribute(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						addIndex(t: unknown): unknown;
						clone(): unknown;
						destroy(): void;
						dispose(): void;
						getAttribute(t: unknown): unknown;
						getBuffer(t: unknown): unknown;
						getIndex(): unknown;
						getSize(): unknown;
						interleave(): unknown;
						invalidate(): unknown;
						map(t: unknown, e: unknown): unknown;
						uvs: Float32Array;
						vertices: Float32Array;
						attributes: {
							aTextureCoord: unknown /* too deep */;
							aVertexPosition: unknown /* too deep */;
						};
						buffers: unknown /* too deep */[];
						disposeRunner: {
							empty: boolean;
							_aliasCount: number;
							_name: string;
							name: string;
							add(t: unknown): unknown;
							contains(t: unknown): unknown;
							destroy(): void;
							dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							ensureNonAliasedItems(): void;
							remove(t: unknown): unknown;
							removeAll(): unknown;
							run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							items: unknown /* too deep */;
						};
						glVertexArrayObjects: {
							"1": unknown /* too deep */;
						};
						indexBuffer: {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Uint16Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
						uvBuffer: {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Float32Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
						vertexBuffer: {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Float32Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
					};
					renderer: Instance["_game"]["_app"]["renderer"];
					statePool: Instance["_game"]["_app"]["renderer"]["filter"]["activeState"][];
					tempRect: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					texturePool: {
						enableFullScreen: boolean;
						_pixelsHeight: number;
						_pixelsWidth: number;
						clear(t: unknown): void;
						createTexture(t: unknown, e: unknown): unknown;
						getFilterTexture(t: unknown, e: unknown): unknown;
						getOptimalTexture(e: unknown, r: unknown, i: unknown): unknown;
						returnFilterTexture(t: unknown): unknown;
						returnTexture(t: unknown): void;
						setScreenSize(e: unknown): void;
						textureOptions: {};
						texturePool: {
							"4194336": unknown /* too deep */;
							"4194368": unknown /* too deep */;
							"524304": unknown /* too deep */;
							"8388736": unknown /* too deep */;
							screen: unknown /* too deep */;
						};
					};
				};
				framebuffer: {
					hasMRT: boolean;
					writeDepthTexture: boolean;
					CONTEXT_UID: number;
					current: null;
					bind(t: unknown, e: unknown): void;
					blit(t: unknown, e: unknown, r: unknown): unknown;
					clear(e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
					contextChange(): unknown;
					destroy(): void;
					detectSamples(e: unknown): unknown;
					disposeAll(t: unknown): void;
					disposeFramebuffer(t: unknown, e: unknown): void;
					forceStencil(): void;
					initFramebuffer(t: unknown): unknown;
					reset(): void;
					resizeFramebuffer(t: unknown): void;
					setViewport(t: unknown, e: unknown, r: unknown, i: unknown): void;
					updateFramebuffer(t: unknown): void;
					gl: WebGL2RenderingContext;
					msaaSamples: Int32Array;
					managedFramebuffers: unknown /* too deep */[];
					renderer: Instance["_game"]["_app"]["renderer"];
					size: {
						height: number;
						width: number;
						x: number;
						y: number;
					};
					unknownFramebuffer: {
						depth: boolean;
						stencil: boolean;
						dirtyFormat: number;
						dirtyId: number;
						dirtySize: number;
						height: number;
						multisample: number;
						width: number;
						depthTexture: null;
						colorTexture: undefined;
						addColorTexture(e: unknown, r: unknown): unknown;
						addDepthTexture(e: unknown): unknown;
						destroyDepthTexture(): void;
						dispose(): void;
						enableDepth(): unknown;
						enableStencil(): unknown;
						resize(t: unknown, e: unknown): void;
						colorTextures: never[];
						disposeRunner: {
							empty: boolean;
							_aliasCount: number;
							_name: string;
							name: string;
							add(t: unknown): unknown;
							contains(t: unknown): unknown;
							destroy(): void;
							dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							ensureNonAliasedItems(): void;
							remove(t: unknown): unknown;
							removeAll(): unknown;
							run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							items: unknown /* too deep */;
						};
						glFramebuffers: {};
					};
					viewport: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
				};
				geometry: {
					canUseUInt32ElementIndex: boolean;
					hasInstance: boolean;
					hasVao: boolean;
					CONTEXT_UID: number;
					activateVao(t: unknown, e: unknown): void;
					bind(t: unknown, e: unknown): void;
					checkCompatibility(t: unknown, e: unknown): void;
					contextChange(): unknown;
					destroy(): void;
					disposeAll(t: unknown): void;
					disposeBuffer(t: unknown, e: unknown): void;
					disposeGeometry(t: unknown, e: unknown): void;
					draw(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
					getSignature(t: unknown, e: unknown): unknown;
					initGeometryVao(t: unknown, e: unknown): unknown;
					reset(): void;
					unbind(): void;
					updateBuffers(): void;
					_activeVao: WebGLVertexArrayObject;
					gl: WebGL2RenderingContext;
					_activeGeometry: {
						instanced: boolean;
						id: number;
						instanceCount: number;
						refCount: number;
						addAttribute(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						addIndex(t: unknown): unknown;
						clone(): unknown;
						destroy(): void;
						dispose(): void;
						getAttribute(t: unknown): unknown;
						getBuffer(t: unknown): unknown;
						getIndex(): unknown;
						getSize(): unknown;
						interleave(): unknown;
						_buffer: {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: ArrayBuffer;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
						_indexBuffer: {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Uint16Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
						attributes: {
							aColor: unknown /* too deep */;
							aTextureCoord: unknown /* too deep */;
							aTextureId: unknown /* too deep */;
							aVertexPosition: unknown /* too deep */;
						};
						buffers: (Instance["_game"]["_app"]["renderer"]["geometry"]["_activeGeometry"]["_buffer"] | Instance["_game"]["_app"]["renderer"]["geometry"]["_activeGeometry"]["_indexBuffer"])[];
						disposeRunner: {
							empty: boolean;
							_aliasCount: number;
							_name: string;
							name: string;
							add(t: unknown): unknown;
							contains(t: unknown): unknown;
							destroy(): void;
							dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							ensureNonAliasedItems(): void;
							remove(t: unknown): unknown;
							removeAll(): unknown;
							run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							items: unknown /* too deep */;
						};
						glVertexArrayObjects: {
							"1": unknown /* too deep */;
						};
						indexBuffer: Instance["_game"]["_app"]["renderer"]["geometry"]["_activeGeometry"]["_indexBuffer"];
					};
					_boundBuffer: {
						byteLength: number;
						refCount: number;
						updateID: number;
						buffer: WebGLBuffer;
					};
					managedBuffers: {
						"2": Instance["_game"]["_app"]["renderer"]["filter"]["quadUv"]["vertexBuffer"];
						"3": Instance["_game"]["_app"]["renderer"]["filter"]["quadUv"]["uvBuffer"];
						"4": Instance["_game"]["_app"]["renderer"]["filter"]["quadUv"]["indexBuffer"];
						"5": {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Float32Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
						"6": {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Float32Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
						"7": {
							index: boolean;
							static: boolean;
							_updateID: number;
							id: number;
							destroy(): void;
							dispose(): void;
							update(t: unknown): void;
							data: Uint16Array;
							_glBuffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
						};
						"8": Instance["_game"]["_app"]["renderer"]["geometry"]["_activeGeometry"]["_buffer"];
						"9": Instance["_game"]["_app"]["renderer"]["geometry"]["_activeGeometry"]["_indexBuffer"];
					};
					managedGeometries: {
						"1": Instance["_game"]["_app"]["renderer"]["filter"]["quadUv"];
						"2": {
							instanced: boolean;
							id: number;
							instanceCount: number;
							refCount: number;
							addAttribute(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
							addIndex(t: unknown): unknown;
							clone(): unknown;
							destroy(): void;
							dispose(): void;
							getAttribute(t: unknown): unknown;
							getBuffer(t: unknown): unknown;
							getIndex(): unknown;
							getSize(): unknown;
							interleave(): unknown;
							invalidate(): unknown;
							map(t: unknown, e: unknown): unknown;
							uvs: Float32Array;
							vertices: Float32Array;
							attributes: unknown /* too deep */;
							buffers: unknown /* too deep */;
							disposeRunner: unknown /* too deep */;
							glVertexArrayObjects: unknown /* too deep */;
							indexBuffer: Instance["_game"]["_app"]["renderer"]["geometry"]["managedBuffers"]["7"];
							uvBuffer: Instance["_game"]["_app"]["renderer"]["geometry"]["managedBuffers"]["6"];
							vertexBuffer: Instance["_game"]["_app"]["renderer"]["geometry"]["managedBuffers"]["5"];
						};
						"3": Instance["_game"]["_app"]["renderer"]["geometry"]["_activeGeometry"];
					};
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				globalUniforms: {
					group: boolean;
					static: boolean;
					dirtyId: number;
					id: number;
					add(e: unknown, r: unknown, i: unknown): void;
					update(): void;
					syncUniforms: {
						"0"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"1"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"2"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"3"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
					};
					uniforms: {
						projectionMatrix: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
							array: Float32Array;
						};
					};
				};
				mask: {
					enableScissor: boolean;
					alphaMaskIndex: number;
					destroy(): void;
					detect(e: unknown): void;
					pop(e: unknown): void;
					popSpriteMask(): void;
					push(e: unknown, r: unknown): void;
					pushSpriteMask(t: unknown): void;
					setMaskStack(t: unknown): void;
					alphaMaskPool: never[];
					maskDataPool: never[];
					maskStack: never[];
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				options: {
					antialias: boolean;
					autoDensity: boolean;
					autoStart: boolean;
					clearBeforeRender: boolean;
					forceCanvas: boolean;
					legacy: boolean;
					preserveDrawingBuffer: boolean;
					sharedTicker: boolean;
					transparent: boolean;
					height: number;
					resolution: number;
					width: number;
					backgroundColor: undefined;
					powerPreference: undefined;
					resizeTo: undefined;
					sharedLoader: undefined;
					view: HTMLCanvasElement;
				};
				plugins: {
					accessibility: {
						_isActive: boolean;
						_isMobileAccessibility: boolean;
						debug: boolean;
						isActive: boolean;
						isMobileAccessibility: boolean;
						androidUpdateCount: number;
						androidUpdateFrequency: number;
						renderId: number;
						_hookDiv: null;
						_onClick(t: unknown): void;
						_onFocus(t: unknown): void;
						_onFocusOut(t: unknown): void;
						_onKeyDown(arg0: unknown): void;
						_onMouseMove(arg0: unknown): void;
						activate(): void;
						addChild(t: unknown): void;
						capHitArea(t: unknown): void;
						createTouchHook(): void;
						deactivate(): void;
						destroy(): void;
						destroyTouchHook(): void;
						update(): void;
						updateAccessibleObjects(t: unknown): void;
						updateDebugHTML(t: unknown): void;
						div: HTMLDivElement;
						children: never[];
						pool: never[];
						renderer: Instance["_game"]["_app"]["renderer"];
					};
					batch: Instance["_game"]["_app"]["renderer"]["_events"]["prerender"]["context"];
					extract: Instance["_game"]["_app"]["renderer"]["extract"];
					interaction: never;
					particle: {
						_generateOneMoreBuffer(t: unknown): unknown;
						destroy(): void;
						flush(): void;
						generateBuffers(t: unknown): unknown;
						render(t: unknown): void;
						start(): void;
						stop(): void;
						uploadPosition(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						uploadRotation(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						uploadTint(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						uploadUvs(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						uploadVertices(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						properties: unknown /* too deep */[];
						renderer: Instance["_game"]["_app"]["renderer"];
						shader: {
							checkUniformExists(t: unknown, e: unknown): unknown;
							destroy(): void;
							program: unknown /* too deep */;
							uniformGroup: unknown /* too deep */;
							uniforms: unknown /* too deep */;
						};
						state: {
							blend: boolean;
							clockwiseFrontFace: boolean;
							culling: boolean;
							depthTest: boolean;
							offsets: boolean;
							_blendMode: number;
							_polygonOffset: number;
							blendMode: number;
							data: number;
							polygonOffset: number;
						};
						tempMatrix: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					prepare: {
						ticking: boolean;
						add(t: unknown): unknown;
						delayedTick(): void;
						destroy(): void;
						prepareItems(): void;
						registerFindHook(t: unknown): unknown;
						registerUploadHook(t: unknown): unknown;
						tick(): void;
						upload(e: unknown, r: unknown): void;
						addHooks: ((t: unknown, e: unknown) => unknown)[];
						completes: never[];
						limiter: {
							itemsLeft: number;
							maxItemsPerFrame: number;
							allowedToUpload(): unknown;
							beginFrame(): void;
						};
						queue: never[];
						renderer: Instance["_game"]["_app"]["renderer"];
						uploadHookHelper: Instance["_game"]["_app"]["renderer"];
						uploadHooks: ((t: unknown, e: unknown) => unknown)[];
					};
					tilingSprite: {
						destroy(): void;
						flush(): void;
						render(e: unknown): void;
						start(): void;
						stop(): void;
						quad: Instance["_game"]["_app"]["renderer"]["geometry"]["managedGeometries"]["2"];
						renderer: Instance["_game"]["_app"]["renderer"];
						shader: {
							checkUniformExists(t: unknown, e: unknown): unknown;
							destroy(): void;
							program: unknown /* too deep */;
							uniformGroup: unknown /* too deep */;
							uniforms: unknown /* too deep */;
						};
						simpleShader: {
							checkUniformExists(t: unknown, e: unknown): unknown;
							destroy(): void;
							program: unknown /* too deep */;
							uniformGroup: unknown /* too deep */;
							uniforms: unknown /* too deep */;
						};
						state: {
							blend: boolean;
							clockwiseFrontFace: boolean;
							culling: boolean;
							depthTest: boolean;
							offsets: boolean;
							_blendMode: number;
							_polygonOffset: number;
							blendMode: number;
							data: number;
							polygonOffset: number;
						};
					};
				};
				projection: {
					defaultFrame: null;
					transform: null;
					calculateProjection(t: unknown, e: unknown, r: unknown, i: unknown): void;
					destroy(): void;
					setTransform(t: unknown): void;
					update(t: unknown, e: unknown, r: unknown, i: unknown): void;
					destinationFrame: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					projectionMatrix: Instance["_game"]["_app"]["renderer"]["globalUniforms"]["uniforms"]["projectionMatrix"];
					renderer: Instance["_game"]["_app"]["renderer"];
					sourceFrame: Instance["_game"]["_app"]["renderer"]["projection"]["destinationFrame"];
				};
				renderTexture: {
					current: null;
					bind(t: unknown, e: unknown, r: unknown): void;
					clear(t: unknown, e: unknown): void;
					destroy(): void;
					reset(): void;
					resize(): void;
					clearColor: Instance["_game"]["_app"]["renderer"]["_backgroundColorRgba"];
					defaultMaskStack: Instance["_game"]["_app"]["renderer"]["mask"]["maskStack"];
					destinationFrame: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					renderer: Instance["_game"]["_app"]["renderer"];
					sourceFrame: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
				};
				runners: {
					contextChange: {
						empty: boolean;
						_aliasCount: number;
						_name: string;
						name: string;
						add(t: unknown): unknown;
						contains(t: unknown): unknown;
						destroy(): void;
						dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						ensureNonAliasedItems(): void;
						remove(t: unknown): unknown;
						removeAll(): unknown;
						run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						items: (Instance["_game"]["_app"]["renderer"]["context"] | unknown /* too deep */ | Instance["_game"]["_app"]["renderer"]["geometry"] | Instance["_game"]["_app"]["renderer"]["framebuffer"] | Instance["_game"]["_app"]["renderer"]["_events"]["prerender"]["context"])[];
					};
					destroy: {
						empty: boolean;
						_aliasCount: number;
						_name: string;
						name: string;
						add(t: unknown): unknown;
						contains(t: unknown): unknown;
						destroy(): void;
						dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						ensureNonAliasedItems(): void;
						remove(t: unknown): unknown;
						removeAll(): unknown;
						run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						items: (Instance["_game"]["_app"]["renderer"]["mask"] | Instance["_game"]["_app"]["renderer"]["context"] | unknown /* too deep */ | Instance["_game"]["_app"]["renderer"]["geometry"] | Instance["_game"]["_app"]["renderer"]["framebuffer"] | Instance["_game"]["_app"]["renderer"]["projection"] | Instance["_game"]["_app"]["renderer"]["filter"] | Instance["_game"]["_app"]["renderer"]["renderTexture"] | Instance["_game"]["_app"]["renderer"]["batch"])[];
					};
					postrender: {
						empty: boolean;
						_aliasCount: number;
						_name: string;
						name: string;
						add(t: unknown): unknown;
						contains(t: unknown): unknown;
						destroy(): void;
						dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						ensureNonAliasedItems(): void;
						remove(t: unknown): unknown;
						removeAll(): unknown;
						run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						items: (Instance["_game"]["_app"]["renderer"]["context"] | unknown /* too deep */)[];
					};
					prerender: {
						empty: boolean;
						_aliasCount: number;
						_name: string;
						name: string;
						add(t: unknown): unknown;
						contains(t: unknown): unknown;
						destroy(): void;
						dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						ensureNonAliasedItems(): void;
						remove(t: unknown): unknown;
						removeAll(): unknown;
						run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						items: never[];
					};
					reset: {
						empty: boolean;
						_aliasCount: number;
						_name: string;
						name: string;
						add(t: unknown): unknown;
						contains(t: unknown): unknown;
						destroy(): void;
						dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						ensureNonAliasedItems(): void;
						remove(t: unknown): unknown;
						removeAll(): unknown;
						run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						items: (unknown /* too deep */ | Instance["_game"]["_app"]["renderer"]["geometry"] | Instance["_game"]["_app"]["renderer"]["framebuffer"] | Instance["_game"]["_app"]["renderer"]["renderTexture"] | Instance["_game"]["_app"]["renderer"]["batch"])[];
					};
					resize: {
						empty: boolean;
						_aliasCount: number;
						_name: string;
						name: string;
						add(t: unknown): unknown;
						contains(t: unknown): unknown;
						destroy(): void;
						dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						ensureNonAliasedItems(): void;
						remove(t: unknown): unknown;
						removeAll(): unknown;
						run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						items: (Instance["_game"]["_app"]["renderer"]["filter"] | Instance["_game"]["_app"]["renderer"]["renderTexture"])[];
					};
					update: {
						empty: boolean;
						_aliasCount: number;
						_name: string;
						name: string;
						add(t: unknown): unknown;
						contains(t: unknown): unknown;
						destroy(): void;
						dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						ensureNonAliasedItems(): void;
						remove(t: unknown): unknown;
						removeAll(): unknown;
						run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
						items: Instance["_game"]["_app"]["renderer"]["projection"][];
					};
				};
				scissor: {
					glConst: number;
					_useCurrent(): void;
					destroy(): void;
					getStackLength(): unknown;
					pop(): void;
					push(t: unknown): void;
					setMaskStack(t: unknown): void;
					maskStack: Instance["_game"]["_app"]["renderer"]["mask"]["maskStack"];
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				screen: {
					bottom: number;
					height: number;
					left: number;
					right: number;
					top: number;
					type: number;
					width: number;
					x: number;
					y: number;
					ceil(t: unknown, e: unknown): unknown;
					clone(): unknown;
					contains(t: unknown, e: unknown): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					enlarge(t: unknown): unknown;
					fit(t: unknown): unknown;
					pad(t: unknown, e: unknown): unknown;
				};
				shader: {
					destroyed: boolean;
					id: number;
					bind(t: unknown, e: unknown): unknown;
					contextChange(t: unknown): void;
					createSyncGroups(t: unknown): unknown;
					destroy(): void;
					generateShader(t: unknown): unknown;
					getglProgram(): unknown;
					getSignature(t: unknown, e: unknown): unknown;
					reset(): void;
					setUniforms(t: unknown): void;
					syncUniformGroup(t: unknown, e: unknown): void;
					syncUniforms(t: unknown, e: unknown, r: unknown): void;
					systemCheck(): unknown;
					gl: WebGL2RenderingContext;
					cache: {
						"epsilon-float-originalColors-vec3-targetColors-vec3-uSampler-sampler2D-filterGlobals-globals"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"globals-uMapCoord-mat3-uClampFrame-vec4-uClampOffset-vec2-uTransform-mat3-uColor-vec4-translationMatrix-mat3-uSampler-sampler2D"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"outputFrame-inputSize-inputPixel-inputClamp-resolution-filterArea-filterClamp"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"projectionMatrix-mat3"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"tint-vec4-translationMatrix-mat3-default-globals"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
						"uSamplers-sampler2D"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
					};
					program: {
						id: number;
						fragmentSrc: string;
						vertexSrc: string;
						syncUniforms: null;
						extractData(t: unknown, e: unknown): void;
						getAttributeData(t: unknown, e: unknown): unknown;
						getUniformData(t: unknown, e: unknown): unknown;
						attributeData: {
							aColor: unknown /* too deep */;
							aTextureCoord: unknown /* too deep */;
							aTextureId: unknown /* too deep */;
							aVertexPosition: unknown /* too deep */;
						};
						glPrograms: {
							"1": unknown /* too deep */;
						};
						uniformData: {
							projectionMatrix: unknown /* too deep */;
							tint: unknown /* too deep */;
							translationMatrix: unknown /* too deep */;
							uSamplers: unknown /* too deep */;
						};
					};
					renderer: Instance["_game"]["_app"]["renderer"];
					shader: {
						checkUniformExists(t: unknown, e: unknown): unknown;
						destroy(): void;
						program: Instance["_game"]["_app"]["renderer"]["shader"]["program"];
						uniformGroup: {
							group: boolean;
							static: boolean;
							dirtyId: number;
							id: number;
							add(e: unknown, r: unknown, i: unknown): void;
							update(): void;
							syncUniforms: unknown /* too deep */;
							uniforms: unknown /* too deep */;
						};
						uniforms: {
							tint: Float32Array;
							default: unknown /* too deep */;
							globals: Instance["_game"]["_app"]["renderer"]["globalUniforms"];
							translationMatrix: unknown /* too deep */;
						};
					};
				};
				state: {
					_blendEq: boolean;
					blendMode: number;
					polygonOffset: number;
					stateId: number;
					contextChange(e: unknown): unknown;
					destroy(): void;
					forceState(t: unknown): void;
					reset(): void;
					set(t: unknown): void;
					setBlend(t: unknown): void;
					setBlendMode(t: unknown): void;
					setCullFace(t: unknown): void;
					setDepthTest(t: unknown): void;
					setFrontFace(t: unknown): void;
					setOffset(t: unknown): void;
					setPolygonOffset(t: unknown, e: unknown): void;
					setState(t: unknown): unknown;
					updateCheck(t: unknown, e: unknown): void;
					gl: WebGL2RenderingContext;
					blendModes: unknown /* too deep */[];
					checks: ((t: unknown, e: unknown) => void)[];
					defaultState: {
						blend: boolean;
						clockwiseFrontFace: boolean;
						culling: boolean;
						depthTest: boolean;
						offsets: boolean;
						_blendMode: number;
						_polygonOffset: number;
						blendMode: number;
						data: number;
						polygonOffset: number;
					};
					map: ((t: unknown) => void)[];
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				stencil: {
					glConst: number;
					_getBitwiseMask(): unknown;
					_useCurrent(): void;
					destroy(): void;
					getStackLength(): unknown;
					pop(t: unknown): void;
					push(t: unknown): void;
					setMaskStack(t: unknown): void;
					maskStack: Instance["_game"]["_app"]["renderer"]["mask"]["maskStack"];
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				texture: {
					_unknownBoundTextures: boolean;
					CONTEXT_UID: number;
					currentLocation: number;
					webGLVersion: number;
					bind(t: unknown, e: unknown): unknown;
					contextChange(): void;
					destroy(): void;
					destroyTexture(t: unknown, e: unknown): void;
					initTexture(t: unknown): unknown;
					initTextureType(e: unknown, r: unknown): void;
					reset(): void;
					setStyle(e: unknown, r: unknown): void;
					unbind(t: unknown): void;
					updateTexture(t: unknown): void;
					updateTextureStyle(e: unknown): void;
					gl: WebGL2RenderingContext;
					boundTextures: (unknown /* too deep */ | null)[];
					emptyTextures: {
						"34067": {
							mipmap: boolean;
							dirtyId: number;
							dirtyStyleId: number;
							height: number;
							internalFormat: number;
							type: number;
							width: number;
							wrapMode: number;
							texture: WebGLTexture;
						};
						"3553": {
							mipmap: boolean;
							dirtyId: number;
							dirtyStyleId: number;
							height: number;
							internalFormat: number;
							type: number;
							width: number;
							wrapMode: number;
							texture: WebGLTexture;
						};
					};
					managedTextures: unknown /* too deep */[];
					renderer: Instance["_game"]["_app"]["renderer"];
					unknownTexture: never;
				};
				textureGC: {
					checkCount: number;
					checkCountMax: number;
					count: number;
					maxIdle: number;
					mode: number;
					destroy(): void;
					postrender(): void;
					run(): void;
					unload(t: unknown): void;
					renderer: Instance["_game"]["_app"]["renderer"];
				};
				textureManager: Instance["_game"]["_app"]["renderer"]["texture"];
			};
			screen: Instance["_game"]["_app"]["renderer"]["screen"];
			stage: Instance["_game"]["_add"]["stage"]["parent"];
		};
		_cache: {
			addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
			addImage(t: unknown, i: unknown, n: unknown): void;
			addItem(t: unknown, i: unknown, n: unknown): void;
			addJSON(t: unknown, i: unknown): void;
			addRenderTexture(t: unknown, i: unknown): void;
			addSound(t: unknown, i: unknown): void;
			addSpine(t: unknown, i: unknown): void;
			addText(t: unknown, i: unknown): void;
			addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			checkBitmapDataKey(t: unknown): unknown;
			checkFrameData(t: unknown): unknown;
			checkImageKey(t: unknown): unknown;
			checkJSONKey(t: unknown): unknown;
			checkRenderTextureKey(t: unknown): unknown;
			checkSoundKey(t: unknown): unknown;
			checkSpineKey(t: unknown): unknown;
			checkTextKey(t: unknown): unknown;
			deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			getBitmapData(t: unknown): unknown;
			getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
			getFrameData(t: unknown, i: unknown): unknown;
			getImage(t: unknown): unknown;
			getJSON(t: unknown): unknown;
			getKeys(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getRenderTexture(t: unknown): unknown;
			getSound(t: unknown): unknown;
			getSpine(t: unknown): unknown;
			getText(t: unknown): unknown;
			getTexture(t: unknown, i: unknown): unknown;
			hasMap(t: unknown): unknown;
			isSoundDecoded(t: unknown): unknown;
			removeAllItems(): void;
			removeAllItemsOfType(t: unknown): void;
			removeBitmapData(t: unknown): void;
			removeImage(t: unknown): void;
			removeItem(t: unknown, i: unknown): void;
			removeJSON(t: unknown): void;
			removeRenderTexture(t: unknown): void;
			removeSound(t: unknown): void;
			removeSpine(t: unknown): void;
			removeText(t: unknown): void;
			removeTextureAtlas(t: unknown): void;
			_cacheMap: Map<number, (Map<string, ({ _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "area-pointer": unknown /* too deep */; "arrow-btn-back": unknown /* too deep */; "arrow-btn-next": unknown /* too deep */; "award-corner": unknown /* too deep */; "award-corner2": unknown /* too deep */; "award-corner3": unknown /* too deep */; "award-corner4": unknown /* too deep */; "award-frame": unknown /* too deep */; "award-mid": unknown /* too deep */; "award-ribbon": unknown /* too deep */; "award-side": unknown /* too deep */; "award-side2": unknown /* too deep */; "award-top": unknown /* too deep */; "award-top2": unknown /* too deep */; "backgroundwood-corner": unknown /* too deep */; "backgroundwood-corner2": unknown /* too deep */; "backgroundwood-corner3": unknown /* too deep */; "backgroundwood-corner4": unknown /* too deep */; "backgroundwood-mid": unknown /* too deep */; "backgroundwood-side": unknown /* too deep */; "backgroundwood-side2": unknown /* too deep */; "backgroundwood-top": unknown /* too deep */; "backgroundwood-top2": unknown /* too deep */; "banner-corner": unknown /* too deep */; "banner-corner2": unknown /* too deep */; "banner-corner3": unknown /* too deep */; "banner-corner4": unknown /* too deep */; "banner-mid": unknown /* too deep */; "banner-side": unknown /* too deep */; "banner-side2": unknown /* too deep */; "banner-top": unknown /* too deep */; "banner-top2": unknown /* too deep */; "bar-corner": unknown /* too deep */; "bar-corner2": unknown /* too deep */; "bar-fill": unknown /* too deep */; "bar-top": unknown /* too deep */; "bg-tile-brown": unknown /* too deep */; "bg-tile-white": unknown /* too deep */; "blue-corner": unknown /* too deep */; "blue-corner2": unknown /* too deep */; "blue-corner3": unknown /* too deep */; "blue-corner4": unknown /* too deep */; "blue-mid": unknown /* too deep */; "blue-side": unknown /* too deep */; "blue-side2": unknown /* too deep */; "blue-top": unknown /* too deep */; "blue-top2": unknown /* too deep */; "board-corner": unknown /* too deep */; "board-corner2": unknown /* too deep */; "board-panel-corner": unknown /* too deep */; "board-panel-corner2": unknown /* too deep */; "board-panel-corner3": unknown /* too deep */; "board-panel-corner4": unknown /* too deep */; "board-panel-mid": unknown /* too deep */; "board-panel-side": unknown /* too deep */; "board-panel-side2": unknown /* too deep */; "board-panel-top": unknown /* too deep */; "board-panel-top2": unknown /* too deep */; "board-top": unknown /* too deep */; "bounty-runner": unknown /* too deep */; "btn-core": unknown /* too deep */; "btn-grade": unknown /* too deep */; "btn-lg": unknown /* too deep */; "btn-med": unknown /* too deep */; "btn-med-confirm": unknown /* too deep */; "btn-mini": unknown /* too deep */; "btn-small": unknown /* too deep */; "btn-tall": unknown /* too deep */; "btn-tiny": unknown /* too deep */; "btn-white": unknown /* too deep */; "button-corner": unknown /* too deep */; "button-corner2": unknown /* too deep */; "button-corner3": unknown /* too deep */; "button-corner4": unknown /* too deep */; "button-mid": unknown /* too deep */; "button-side": unknown /* too deep */; "button-side2": unknown /* too deep */; "button-top": unknown /* too deep */; "button-top2": unknown /* too deep */; "card-bot-corner": unknown /* too deep */; "card-bot-corner2": unknown /* too deep */; "card-bot-corner3": unknown /* too deep */; "card-bot-corner4": unknown /* too deep */; "card-bot-mid": unknown /* too deep */; "card-bot-side": unknown /* too deep */; "card-bot-side2": unknown /* too deep */; "card-bot-top": unknown /* too deep */; "card-bot-top2": unknown /* too deep */; "card-corner": unknown /* too deep */; "card-corner2": unknown /* too deep */; "card-corner3": unknown /* too deep */; "card-corner4": unknown /* too deep */; "card-mid": unknown /* too deep */; "card-side": unknown /* too deep */; "card-side2": unknown /* too deep */; "card-top": unknown /* too deep */; "card-top-corner": unknown /* too deep */; "card-top-corner2": unknown /* too deep */; "card-top-corner3": unknown /* too deep */; "card-top-corner4": unknown /* too deep */; "card-top-top": unknown /* too deep */; "card-top-top2": unknown /* too deep */; "card-top2": unknown /* too deep */; "dark-corner": unknown /* too deep */; "dark-corner2": unknown /* too deep */; "dark-corner3": unknown /* too deep */; "dark-corner4": unknown /* too deep */; "dark-mid": unknown /* too deep */; "dark-side": unknown /* too deep */; "dark-side2": unknown /* too deep */; "dark-top": unknown /* too deep */; "dark-top2": unknown /* too deep */; dialogue: unknown /* too deep */; "emblem-bar": unknown /* too deep */; empty: unknown /* too deep */; "empty-bar": unknown /* too deep */; "empty-corner": unknown /* too deep */; "empty-corner2": unknown /* too deep */; "empty-corner3": unknown /* too deep */; "empty-corner4": unknown /* too deep */; "empty-icon": unknown /* too deep */; "empty-mid": unknown /* too deep */; "empty-side": unknown /* too deep */; "empty-side2": unknown /* too deep */; "empty-top": unknown /* too deep */; "empty-top2": unknown /* too deep */; "HUD-end": unknown /* too deep */; "HUD-mid": unknown /* too deep */; "icon-attackrange-off": unknown /* too deep */; "icon-attackrange-on": unknown /* too deep */; "icon-loading": unknown /* too deep */; "icon-lock-mini": unknown /* too deep */; "item-common-corner": unknown /* too deep */; "item-common-corner2": unknown /* too deep */; "item-common-corner3": unknown /* too deep */; "item-common-corner4": unknown /* too deep */; "item-common-mid": unknown /* too deep */; "item-common-side": unknown /* too deep */; "item-common-side2": unknown /* too deep */; "item-common-top": unknown /* too deep */; "item-common-top2": unknown /* too deep */; "item-currency-corner": unknown /* too deep */; "item-currency-corner2": unknown /* too deep */; "item-currency-corner3": unknown /* too deep */; "item-currency-corner4": unknown /* too deep */; "item-currency-mid": unknown /* too deep */; "item-currency-side": unknown /* too deep */; "item-currency-side2": unknown /* too deep */; "item-currency-top": unknown /* too deep */; "item-currency-top2": unknown /* too deep */; "item-dorm-corner": unknown /* too deep */; "item-dorm-corner2": unknown /* too deep */; "item-dorm-corner3": unknown /* too deep */; "item-dorm-corner4": unknown /* too deep */; "item-dorm-mid": unknown /* too deep */; "item-dorm-side": unknown /* too deep */; "item-dorm-side2": unknown /* too deep */; "item-dorm-top": unknown /* too deep */; "item-dorm-top2": unknown /* too deep */; "item-epic-corner": unknown /* too deep */; "item-epic-corner2": unknown /* too deep */; "item-epic-corner3": unknown /* too deep */; "item-epic-corner4": unknown /* too deep */; "item-epic-mid": unknown /* too deep */; "item-epic-side": unknown /* too deep */; "item-epic-side2": unknown /* too deep */; "item-epic-top": unknown /* too deep */; "item-epic-top2": unknown /* too deep */; "item-item-corner": unknown /* too deep */; "item-item-corner2": unknown /* too deep */; "item-item-corner3": unknown /* too deep */; "item-item-corner4": unknown /* too deep */; "item-item-mid": unknown /* too deep */; "item-item-side": unknown /* too deep */; "item-item-side2": unknown /* too deep */; "item-item-top": unknown /* too deep */; "item-item-top2": unknown /* too deep */; "item-legend-corner": unknown /* too deep */; "item-legend-corner2": unknown /* too deep */; "item-legend-corner3": unknown /* too deep */; "item-legend-corner4": unknown /* too deep */; "item-legend-mid": unknown /* too deep */; "item-legend-side": unknown /* too deep */; "item-legend-side2": unknown /* too deep */; "item-legend-top": unknown /* too deep */; "item-legend-top2": unknown /* too deep */; "item-pet-corner": unknown /* too deep */; "item-pet-corner2": unknown /* too deep */; "item-pet-corner3": unknown /* too deep */; "item-pet-corner4": unknown /* too deep */; "item-pet-mid": unknown /* too deep */; "item-pet-side": unknown /* too deep */; "item-pet-side2": unknown /* too deep */; "item-pet-top": unknown /* too deep */; "item-pet-top2": unknown /* too deep */; "item-rare-corner": unknown /* too deep */; "item-rare-corner2": unknown /* too deep */; "item-rare-corner3": unknown /* too deep */; "item-rare-corner4": unknown /* too deep */; "item-rare-mid": unknown /* too deep */; "item-rare-side": unknown /* too deep */; "item-rare-side2": unknown /* too deep */; "item-rare-top": unknown /* too deep */; "item-rare-top2": unknown /* too deep */; "item-spell-corner": unknown /* too deep */; "item-spell-corner2": unknown /* too deep */; "item-spell-corner3": unknown /* too deep */; "item-spell-corner4": unknown /* too deep */; "item-spell-mid": unknown /* too deep */; "item-spell-side": unknown /* too deep */; "item-spell-side2": unknown /* too deep */; "item-spell-top": unknown /* too deep */; "item-spell-top2": unknown /* too deep */; "item-uncommon-corner": unknown /* too deep */; "item-uncommon-corner2": unknown /* too deep */; "item-uncommon-corner3": unknown /* too deep */; "item-uncommon-corner4": unknown /* too deep */; "item-uncommon-mid": unknown /* too deep */; "item-uncommon-side": unknown /* too deep */; "item-uncommon-side2": unknown /* too deep */; "item-uncommon-top": unknown /* too deep */; "item-uncommon-top2": unknown /* too deep */; lantern: unknown /* too deep */; "lb-corner": unknown /* too deep */; "lb-corner2": unknown /* too deep */; "lb-green-corner": unknown /* too deep */; "lb-green-corner2": unknown /* too deep */; "lb-green-top": unknown /* too deep */; "lb-top": unknown /* too deep */; "light-corner": unknown /* too deep */; "light-corner2": unknown /* too deep */; "light-corner3": unknown /* too deep */; "light-corner4": unknown /* too deep */; "light-mid": unknown /* too deep */; "light-side": unknown /* too deep */; "light-side2": unknown /* too deep */; "light-top": unknown /* too deep */; "light-top2": unknown /* too deep */; load: unknown /* too deep */; loading: unknown /* too deep */; "mail-corner": unknown /* too deep */; "mail-corner2": unknown /* too deep */; "mail-corner3": unknown /* too deep */; "mail-corner4": unknown /* too deep */; "mail-mid": unknown /* too deep */; "mail-side": unknown /* too deep */; "mail-side2": unknown /* too deep */; "mail-top": unknown /* too deep */; "mail-top2": unknown /* too deep */; "member-corner": unknown /* too deep */; "member-corner2": unknown /* too deep */; "member-corner3": unknown /* too deep */; "member-corner4": unknown /* too deep */; "member-icon": unknown /* too deep */; "member-mid": unknown /* too deep */; "member-side": unknown /* too deep */; "member-side2": unknown /* too deep */; "member-top": unknown /* too deep */; "member-top2": unknown /* too deep */; "no-btn": unknown /* too deep */; "orange-corner": unknown /* too deep */; "orange-corner2": unknown /* too deep */; "orange-corner3": unknown /* too deep */; "orange-corner4": unknown /* too deep */; "orange-mid": unknown /* too deep */; "orange-side": unknown /* too deep */; "orange-side2": unknown /* too deep */; "orange-top": unknown /* too deep */; "orange-top2": unknown /* too deep */; "overlay-light": unknown /* too deep */; "overlay-small": unknown /* too deep */; "panel-corner": unknown /* too deep */; "panel-corner2": unknown /* too deep */; "panel-corner3": unknown /* too deep */; "panel-corner4": unknown /* too deep */; "panel-light-corner": unknown /* too deep */; "panel-light-corner2": unknown /* too deep */; "panel-light-corner3": unknown /* too deep */; "panel-light-corner4": unknown /* too deep */; "panel-light-mid": unknown /* too deep */; "panel-light-side": unknown /* too deep */; "panel-light-side2": unknown /* too deep */; "panel-light-top": unknown /* too deep */; "panel-light-top2": unknown /* too deep */; "panel-mid": unknown /* too deep */; "panel-pointer": unknown /* too deep */; "panel-side": unknown /* too deep */; "panel-side2": unknown /* too deep */; "panel-top": unknown /* too deep */; "panel-top2": unknown /* too deep */; "paper-bottom": unknown /* too deep */; "paper-bottomLeft": unknown /* too deep */; "paper-bottomRight": unknown /* too deep */; "paper-corner": unknown /* too deep */; "paper-corner2": unknown /* too deep */; "paper-corner3": unknown /* too deep */; "paper-corner4": unknown /* too deep */; "paper-left": unknown /* too deep */; "paper-mid": unknown /* too deep */; "paper-middle": unknown /* too deep */; "paper-right": unknown /* too deep */; "paper-side": unknown /* too deep */; "paper-side2": unknown /* too deep */; "paper-top": unknown /* too deep */; "paper-top2": unknown /* too deep */; "paper-topLeft": unknown /* too deep */; "paper-topRight": unknown /* too deep */; ribbon: unknown /* too deep */; "server-icon": unknown /* too deep */; "shine-corner": unknown /* too deep */; "shine-corner2": unknown /* too deep */; "shine-corner3": unknown /* too deep */; "shine-corner4": unknown /* too deep */; "shine-mid": unknown /* too deep */; "shine-side": unknown /* too deep */; "shine-side2": unknown /* too deep */; "shine-top": unknown /* too deep */; "shine-top2": unknown /* too deep */; "shine2-corner": unknown /* too deep */; "shine2-corner2": unknown /* too deep */; "shine2-corner3": unknown /* too deep */; "shine2-corner4": unknown /* too deep */; "shine2-mid": unknown /* too deep */; "shine2-side": unknown /* too deep */; "shine2-side2": unknown /* too deep */; "shine2-top": unknown /* too deep */; "shine2-top2": unknown /* too deep */; slider: unknown /* too deep */; "sparkle-yellow-1": unknown /* too deep */; "sparkle-yellow-2": unknown /* too deep */; "sparkle-yellow-3": unknown /* too deep */; "star-empty": unknown /* too deep */; "star-full": unknown /* too deep */; "stat-corner": unknown /* too deep */; "stat-corner2": unknown /* too deep */; "stat-corner3": unknown /* too deep */; "stat-corner4": unknown /* too deep */; "stat-mid": unknown /* too deep */; "stat-side": unknown /* too deep */; "stat-side2": unknown /* too deep */; "stat-top": unknown /* too deep */; "stat-top2": unknown /* too deep */; tooltip: unknown /* too deep */; "white-corner": unknown /* too deep */; "white-corner2": unknown /* too deep */; "white-corner3": unknown /* too deep */; "white-corner4": unknown /* too deep */; "white-icon": unknown /* too deep */; "white-mid": unknown /* too deep */; "white-side": unknown /* too deep */; "white-side2": unknown /* too deep */; "white-top": unknown /* too deep */; "white-top2": unknown /* too deep */; "xp-bar": unknown /* too deep */; "yes-btn": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "bar-fill": unknown /* too deep */; "bar-top": unknown /* too deep */; "beam-mid": unknown /* too deep */; "bg-tile-brown": unknown /* too deep */; "blue-mid": unknown /* too deep */; "blue-side": unknown /* too deep */; "blue-side2": unknown /* too deep */; "blue-top": unknown /* too deep */; "blue-top2": unknown /* too deep */; "bounty-runner": unknown /* too deep */; dialogue: unknown /* too deep */; "emblem-bar": unknown /* too deep */; "fillbar-yellow": unknown /* too deep */; load: unknown /* too deep */; "orange-mid": unknown /* too deep */; "orange-top": unknown /* too deep */; "orange-top2": unknown /* too deep */; "overlay-light": unknown /* too deep */; "overlay-small": unknown /* too deep */; "panel-mid": unknown /* too deep */; "panel-side": unknown /* too deep */; "panel-side2": unknown /* too deep */; "panel-top": unknown /* too deep */; "panel-top2": unknown /* too deep */; "pvp-top": unknown /* too deep */; "pvp-top2": unknown /* too deep */; "shine2-mid": unknown /* too deep */; slider: unknown /* too deep */; "water-rain": unknown /* too deep */; "xp-bar": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "banners/banner-red-left": unknown /* too deep */; "banners/banner-red-middle": unknown /* too deep */; "banners/banner-red-right": unknown /* too deep */; "banners/red-bottomLeft": unknown /* too deep */; "banners/red-bottomRight": unknown /* too deep */; "banners/red-left": unknown /* too deep */; "banners/red-middle": unknown /* too deep */; "banners/red-right": unknown /* too deep */; "banners/rope-horiz-left": unknown /* too deep */; "banners/rope-horiz-middle": unknown /* too deep */; "banners/rope-horiz-right": unknown /* too deep */; "banners/rope-vert-left": unknown /* too deep */; "banners/rope-vert-middle": unknown /* too deep */; "banners/rope-vert-right": unknown /* too deep */; "banners/stars-topleft": unknown /* too deep */; "banners/stars-topright": unknown /* too deep */; "banners/tag-left": unknown /* too deep */; "banners/tag-middle": unknown /* too deep */; "banners/tag-right": unknown /* too deep */; "banners/title-banner-left": unknown /* too deep */; "banners/title-banner-middle": unknown /* too deep */; "banners/title-banner-right": unknown /* too deep */; "bases/background-bottom": unknown /* too deep */; "bases/background-bottomLeft": unknown /* too deep */; "bases/background-bottomRight": unknown /* too deep */; "bases/background-left": unknown /* too deep */; "bases/background-middle": unknown /* too deep */; "bases/background-right": unknown /* too deep */; "bases/background-top": unknown /* too deep */; "bases/background-topLeft": unknown /* too deep */; "bases/background-topRight": unknown /* too deep */; "bases/backgroundwood-bottom": unknown /* too deep */; "bases/backgroundwood-bottomLeft": unknown /* too deep */; "bases/backgroundwood-bottomRight": unknown /* too deep */; "bases/backgroundwood-left": unknown /* too deep */; "bases/backgroundwood-middle": unknown /* too deep */; "bases/backgroundwood-right": unknown /* too deep */; "bases/backgroundwood-top": unknown /* too deep */; "bases/backgroundwood-topLeft": unknown /* too deep */; "bases/backgroundwood-topRight": unknown /* too deep */; "bases/beige-bottom": unknown /* too deep */; "bases/beige-bottomLeft": unknown /* too deep */; "bases/beige-bottomRight": unknown /* too deep */; "bases/beige-left": unknown /* too deep */; "bases/beige-middle": unknown /* too deep */; "bases/beige-right": unknown /* too deep */; "bases/beige-top": unknown /* too deep */; "bases/beige-topLeft": unknown /* too deep */; "bases/beige-topRight": unknown /* too deep */; "bases/blue-bottom": unknown /* too deep */; "bases/blue-bottomLeft": unknown /* too deep */; "bases/blue-bottomRight": unknown /* too deep */; "bases/blue-left": unknown /* too deep */; "bases/blue-middle": unknown /* too deep */; "bases/blue-right": unknown /* too deep */; "bases/blue-top": unknown /* too deep */; "bases/blue-topLeft": unknown /* too deep */; "bases/blue-topRight": unknown /* too deep */; "bases/darker-matte-bottom": unknown /* too deep */; "bases/darker-matte-bottomLeft": unknown /* too deep */; "bases/darker-matte-bottomRight": unknown /* too deep */; "bases/darker-matte-left": unknown /* too deep */; "bases/darker-matte-middle": unknown /* too deep */; "bases/darker-matte-right": unknown /* too deep */; "bases/darker-matte-top": unknown /* too deep */; "bases/darker-matte-topLeft": unknown /* too deep */; "bases/darker-matte-topRight": unknown /* too deep */; "bases/gold-background-bottom": unknown /* too deep */; "bases/gold-background-bottomLeft": unknown /* too deep */; "bases/gold-background-bottomRight": unknown /* too deep */; "bases/gold-background-left": unknown /* too deep */; "bases/gold-background-middle": unknown /* too deep */; "bases/gold-background-right": unknown /* too deep */; "bases/gold-background-top": unknown /* too deep */; "bases/gold-background-topLeft": unknown /* too deep */; "bases/gold-background-topRight": unknown /* too deep */; "bases/gold-matte-bottom": unknown /* too deep */; "bases/gold-matte-bottomLeft": unknown /* too deep */; "bases/gold-matte-bottomRight": unknown /* too deep */; "bases/gold-matte-left": unknown /* too deep */; "bases/gold-matte-middle": unknown /* too deep */; "bases/gold-matte-right": unknown /* too deep */; "bases/gold-matte-top": unknown /* too deep */; "bases/gold-matte-topLeft": unknown /* too deep */; "bases/gold-matte-topRight": unknown /* too deep */; "bases/matte-bottom": unknown /* too deep */; "bases/matte-bottomLeft": unknown /* too deep */; "bases/matte-bottomRight": unknown /* too deep */; "bases/matte-left": unknown /* too deep */; "bases/matte-middle": unknown /* too deep */; "bases/matte-right": unknown /* too deep */; "bases/matte-top": unknown /* too deep */; "bases/matte-topLeft": unknown /* too deep */; "bases/matte-topRight": unknown /* too deep */; "bases/member-mail-icon": unknown /* too deep */; "bases/member-matte-bottom": unknown /* too deep */; "bases/member-matte-bottomLeft": unknown /* too deep */; "bases/member-matte-bottomRight": unknown /* too deep */; "bases/member-matte-left": unknown /* too deep */; "bases/member-matte-middle": unknown /* too deep */; "bases/member-matte-right": unknown /* too deep */; "bases/member-matte-top": unknown /* too deep */; "bases/member-matte-topLeft": unknown /* too deep */; "bases/member-matte-topRight": unknown /* too deep */; "bases/pm-backgroundwood-bottom": unknown /* too deep */; "bases/pm-backgroundwood-bottomLeft": unknown /* too deep */; "bases/pm-backgroundwood-bottomRight": unknown /* too deep */; "bases/pm-backgroundwood-left": unknown /* too deep */; "bases/pm-backgroundwood-middle": unknown /* too deep */; "bases/pm-backgroundwood-right": unknown /* too deep */; "bases/pm-backgroundwood-top": unknown /* too deep */; "bases/pm-backgroundwood-topLeft": unknown /* too deep */; "bases/pm-backgroundwood-topRight": unknown /* too deep */; "bases/small-white-tag-left": unknown /* too deep */; "bases/small-white-tag-middle": unknown /* too deep */; "bases/small-white-tag-right": unknown /* too deep */; "bases/tile-bg-bottom": unknown /* too deep */; "bases/tile-bg-bottomLeft": unknown /* too deep */; "bases/tile-bg-bottomRight": unknown /* too deep */; "bases/tile-bg-left": unknown /* too deep */; "bases/tile-bg-middle": unknown /* too deep */; "bases/tile-bg-right": unknown /* too deep */; "bases/tile-bg-top": unknown /* too deep */; "bases/tile-bg-topLeft": unknown /* too deep */; "bases/tile-bg-topRight": unknown /* too deep */; "bases/white-bg-bar-bottom": unknown /* too deep */; "bases/white-bg-bar-bottomLeft": unknown /* too deep */; "bases/white-bg-bar-bottomRight": unknown /* too deep */; "bases/white-bg-bar-left": unknown /* too deep */; "bases/white-bg-bar-middle": unknown /* too deep */; "bases/white-bg-bar-right": unknown /* too deep */; "bases/white-bg-bar-top": unknown /* too deep */; "bases/white-bg-bar-topLeft": unknown /* too deep */; "bases/white-bg-bar-topRight": unknown /* too deep */; "bases/wood-bottom": unknown /* too deep */; "bases/wood-bottom-alt": unknown /* too deep */; "bases/wood-bottom-notch": unknown /* too deep */; "bases/wood-bottomLeft": unknown /* too deep */; "bases/wood-bottomRight": unknown /* too deep */; "bases/wood-left": unknown /* too deep */; "bases/wood-left-alt": unknown /* too deep */; "bases/wood-left-notch": unknown /* too deep */; "bases/wood-middle": unknown /* too deep */; "bases/wood-middle-alt": unknown /* too deep */; "bases/wood-middle-alt2": unknown /* too deep */; "bases/wood-middle-alt3": unknown /* too deep */; "bases/wood-right": unknown /* too deep */; "bases/wood-right-alt": unknown /* too deep */; "bases/wood-right-notch": unknown /* too deep */; "bases/wood-top": unknown /* too deep */; "bases/wood-top-alt": unknown /* too deep */; "bases/wood-top-notch": unknown /* too deep */; "bases/wood-topLeft": unknown /* too deep */; "bases/wood-topRight": unknown /* too deep */; "buttons/arrow-right": unknown /* too deep */; "buttons/blue-arrow-left": unknown /* too deep */; "buttons/blue-arrow-right": unknown /* too deep */; "buttons/blue-left": unknown /* too deep */; "buttons/blue-middle": unknown /* too deep */; "buttons/blue-right": unknown /* too deep */; "buttons/blueround-left": unknown /* too deep */; "buttons/blueround-middle": unknown /* too deep */; "buttons/blueround-right": unknown /* too deep */; "buttons/bluerounddown-left": unknown /* too deep */; "buttons/bluerounddown-middle": unknown /* too deep */; "buttons/bluerounddown-right": unknown /* too deep */; "buttons/close": unknown /* too deep */; "buttons/close-small": unknown /* too deep */; "buttons/green-left": unknown /* too deep */; "buttons/green-middle": unknown /* too deep */; "buttons/green-right": unknown /* too deep */; "buttons/greenround-left": unknown /* too deep */; "buttons/greenround-middle": unknown /* too deep */; "buttons/greenround-right": unknown /* too deep */; "buttons/greenrounddown-left": unknown /* too deep */; "buttons/greenrounddown-middle": unknown /* too deep */; "buttons/greenrounddown-right": unknown /* too deep */; "buttons/greyround-left": unknown /* too deep */; "buttons/greyround-middle": unknown /* too deep */; "buttons/greyround-right": unknown /* too deep */; "buttons/greyrounddown-left": unknown /* too deep */; "buttons/greyrounddown-middle": unknown /* too deep */; "buttons/greyrounddown-right": unknown /* too deep */; "buttons/icon-medium-account-grey": unknown /* too deep */; "buttons/icon-medium-account-white": unknown /* too deep */; "buttons/icon-medium-settings-grey": unknown /* too deep */; "buttons/icon-medium-settings-white": unknown /* too deep */; "buttons/icon-medium-world-grey": unknown /* too deep */; "buttons/icon-medium-world-white": unknown /* too deep */; "buttons/icon-mini-fullscreen": unknown /* too deep */; "buttons/icon-mini-minimize": unknown /* too deep */; "buttons/leaderboard-level-star": unknown /* too deep */; "buttons/member-icon": unknown /* too deep */; "buttons/mount-toggle-off": unknown /* too deep */; "buttons/mount-toggle-on": unknown /* too deep */; "buttons/notificationbox-blue-bottom": unknown /* too deep */; "buttons/notificationbox-blue-bottomLeft": unknown /* too deep */; "buttons/notificationbox-blue-bottomRight": unknown /* too deep */; "buttons/notificationbox-blue-left": unknown /* too deep */; "buttons/notificationbox-blue-middle": unknown /* too deep */; "buttons/notificationbox-blue-right": unknown /* too deep */; "buttons/notificationbox-blue-top": unknown /* too deep */; "buttons/notificationbox-blue-topLeft": unknown /* too deep */; "buttons/notificationbox-blue-topRight": unknown /* too deep */; "buttons/notificationbox-gray-bottom": unknown /* too deep */; "buttons/notificationbox-gray-bottomLeft": unknown /* too deep */; "buttons/notificationbox-gray-bottomRight": unknown /* too deep */; "buttons/notificationbox-gray-left": unknown /* too deep */; "buttons/notificationbox-gray-middle": unknown /* too deep */; "buttons/notificationbox-gray-right": unknown /* too deep */; "buttons/notificationbox-gray-top": unknown /* too deep */; "buttons/notificationbox-gray-topLeft": unknown /* too deep */; "buttons/notificationbox-gray-topRight": unknown /* too deep */; "buttons/notificationbox-green-bottom": unknown /* too deep */; "buttons/notificationbox-green-bottomLeft": unknown /* too deep */; "buttons/notificationbox-green-bottomRight": unknown /* too deep */; "buttons/notificationbox-green-left": unknown /* too deep */; "buttons/notificationbox-green-middle": unknown /* too deep */; "buttons/notificationbox-green-right": unknown /* too deep */; "buttons/notificationbox-green-top": unknown /* too deep */; "buttons/notificationbox-green-topLeft": unknown /* too deep */; "buttons/notificationbox-green-topRight": unknown /* too deep */; "buttons/orange-left": unknown /* too deep */; "buttons/orange-middle": unknown /* too deep */; "buttons/orange-right": unknown /* too deep */; "buttons/orange-thumb": unknown /* too deep */; "buttons/player-button": unknown /* too deep */; "buttons/player-button-flip": unknown /* too deep */; "buttons/red-left": unknown /* too deep */; "buttons/red-middle": unknown /* too deep */; "buttons/red-right": unknown /* too deep */; "buttons/redround-left": unknown /* too deep */; "buttons/redround-middle": unknown /* too deep */; "buttons/redround-right": unknown /* too deep */; "buttons/redrounddown-left": unknown /* too deep */; "buttons/redrounddown-middle": unknown /* too deep */; "buttons/redrounddown-right": unknown /* too deep */; "buttons/yellowround-left": unknown /* too deep */; "buttons/yellowround-middle": unknown /* too deep */; "buttons/yellowround-right": unknown /* too deep */; "buttons/yellowrounddown-left": unknown /* too deep */; "buttons/yellowrounddown-middle": unknown /* too deep */; "buttons/yellowrounddown-right": unknown /* too deep */; "endscreen/endscreen-sunburst-blue-c": unknown /* too deep */; "endscreen/endscreen-sunburst-gold-c": unknown /* too deep */; "endscreen/levelbacker-star": unknown /* too deep */; "endscreen/member-button-left": unknown /* too deep */; "endscreen/member-button-middle": unknown /* too deep */; "endscreen/member-button-right": unknown /* too deep */; "endscreen/membertag-left": unknown /* too deep */; "endscreen/membertag-middle": unknown /* too deep */; "endscreen/membertag-right": unknown /* too deep */; "endscreen/redcircle-biggest": unknown /* too deep */; "endscreen/xpmeter-fill-left": unknown /* too deep */; "endscreen/xpmeter-fill-middle": unknown /* too deep */; "endscreen/xpmeter-fill-right": unknown /* too deep */; "endscreen/xpmeter-track-left": unknown /* too deep */; "endscreen/xpmeter-track-middle": unknown /* too deep */; "endscreen/xpmeter-track-right": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-astral": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-earth": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-fire": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-ice": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-shadow": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-storm": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-water": unknown /* too deep */; "scroll-tracks/badge-large-track-left": unknown /* too deep */; "scroll-tracks/badge-large-track-middle": unknown /* too deep */; "scroll-tracks/badge-large-track-right": unknown /* too deep */; "scroll-tracks/blue-large-fill-left": unknown /* too deep */; "scroll-tracks/blue-large-fill-middle": unknown /* too deep */; "scroll-tracks/blue-large-fill-right": unknown /* too deep */; "scroll-tracks/blue-left": unknown /* too deep */; "scroll-tracks/blue-middle": unknown /* too deep */; "scroll-tracks/blue-right": unknown /* too deep */; "scroll-tracks/bronze-large-fill-left": unknown /* too deep */; "scroll-tracks/bronze-large-fill-middle": unknown /* too deep */; "scroll-tracks/bronze-large-fill-right": unknown /* too deep */; "scroll-tracks/gold-large-fill-left": unknown /* too deep */; "scroll-tracks/gold-large-fill-middle": unknown /* too deep */; "scroll-tracks/gold-large-fill-right": unknown /* too deep */; "scroll-tracks/gray-large-fill-left": unknown /* too deep */; "scroll-tracks/gray-large-fill-middle": unknown /* too deep */; "scroll-tracks/gray-large-fill-right": unknown /* too deep */; "scroll-tracks/green-large-fill-left": unknown /* too deep */; "scroll-tracks/green-large-fill-middle": unknown /* too deep */; "scroll-tracks/green-large-fill-right": unknown /* too deep */; "scroll-tracks/grey-left": unknown /* too deep */; "scroll-tracks/grey-middle": unknown /* too deep */; "scroll-tracks/grey-right": unknown /* too deep */; "scroll-tracks/meter-small-fill-left": unknown /* too deep */; "scroll-tracks/meter-small-fill-middle": unknown /* too deep */; "scroll-tracks/meter-small-fill-right": unknown /* too deep */; "scroll-tracks/meter-small-track-left": unknown /* too deep */; "scroll-tracks/meter-small-track-middle": unknown /* too deep */; "scroll-tracks/meter-small-track-right": unknown /* too deep */; "scroll-tracks/pink-large-fill-left": unknown /* too deep */; "scroll-tracks/pink-large-fill-middle": unknown /* too deep */; "scroll-tracks/pink-large-fill-right": unknown /* too deep */; "scroll-tracks/pink-large-track-left": unknown /* too deep */; "scroll-tracks/pink-large-track-middle": unknown /* too deep */; "scroll-tracks/pink-large-track-right": unknown /* too deep */; "scroll-tracks/purple-large-fill-left": unknown /* too deep */; "scroll-tracks/purple-large-fill-middle": unknown /* too deep */; "scroll-tracks/purple-large-fill-right": unknown /* too deep */; "scroll-tracks/red-large-fill-left": unknown /* too deep */; "scroll-tracks/red-large-fill-middle": unknown /* too deep */; "scroll-tracks/red-large-fill-right": unknown /* too deep */; "scroll-tracks/red-large-track-left": unknown /* too deep */; "scroll-tracks/red-large-track-middle": unknown /* too deep */; "scroll-tracks/red-large-track-right": unknown /* too deep */; "scroll-tracks/slider-button": unknown /* too deep */; "scroll-tracks/slider-knob": unknown /* too deep */; "scroll-tracks/slider-knob-bottom": unknown /* too deep */; "scroll-tracks/slider-knob-middle": unknown /* too deep */; "scroll-tracks/slider-knob-top": unknown /* too deep */; "scroll-tracks/slider-left": unknown /* too deep */; "scroll-tracks/slider-middle": unknown /* too deep */; "scroll-tracks/slider-right": unknown /* too deep */; "scroll-tracks/slider-track-left": unknown /* too deep */; "scroll-tracks/slider-track-middle": unknown /* too deep */; "scroll-tracks/slider-track-right": unknown /* too deep */; "scroll-tracks/yellow-large-fill-left": unknown /* too deep */; "scroll-tracks/yellow-large-fill-middle": unknown /* too deep */; "scroll-tracks/yellow-large-fill-right": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "check-box": unknown /* too deep */; "check-box-active": unknown /* too deep */; "emerald-large-active-left": unknown /* too deep */; "emerald-large-active-middle": unknown /* too deep */; "emerald-large-active-right": unknown /* too deep */; "emerald-large-default-left": unknown /* too deep */; "emerald-large-default-middle": unknown /* too deep */; "emerald-large-default-right": unknown /* too deep */; "emerald-large-hover-left": unknown /* too deep */; "emerald-large-hover-middle": unknown /* too deep */; "emerald-large-hover-right": unknown /* too deep */; "emerald-medium-active-left": unknown /* too deep */; "emerald-medium-active-middle": unknown /* too deep */; "emerald-medium-active-right": unknown /* too deep */; "emerald-medium-default-left": unknown /* too deep */; "emerald-medium-default-middle": unknown /* too deep */; "emerald-medium-default-right": unknown /* too deep */; "emerald-medium-hover-left": unknown /* too deep */; "emerald-medium-hover-middle": unknown /* too deep */; "emerald-medium-hover-right": unknown /* too deep */; "emerald-small-active-left": unknown /* too deep */; "emerald-small-active-middle": unknown /* too deep */; "emerald-small-active-right": unknown /* too deep */; "emerald-small-default-left": unknown /* too deep */; "emerald-small-default-middle": unknown /* too deep */; "emerald-small-default-right": unknown /* too deep */; "emerald-small-hover-left": unknown /* too deep */; "emerald-small-hover-middle": unknown /* too deep */; "emerald-small-hover-right": unknown /* too deep */; "gold-medium-active-left": unknown /* too deep */; "gold-medium-active-middle": unknown /* too deep */; "gold-medium-active-right": unknown /* too deep */; "gold-medium-default-left": unknown /* too deep */; "gold-medium-default-middle": unknown /* too deep */; "gold-medium-default-right": unknown /* too deep */; "gold-medium-hover-left": unknown /* too deep */; "gold-medium-hover-middle": unknown /* too deep */; "gold-medium-hover-right": unknown /* too deep */; "icons/arrow-grey": unknown /* too deep */; "icons/arrow-lightgrey": unknown /* too deep */; "icons/arrow-white": unknown /* too deep */; "icons/arrow32-grey-down": unknown /* too deep */; "icons/arrow32-grey-left": unknown /* too deep */; "icons/arrow32-grey-right": unknown /* too deep */; "icons/arrow32-grey-up": unknown /* too deep */; "icons/arrow32-lightgrey-down": unknown /* too deep */; "icons/arrow32-lightgrey-left": unknown /* too deep */; "icons/arrow32-lightgrey-right": unknown /* too deep */; "icons/arrow32-lightgrey-up": unknown /* too deep */; "icons/arrowdown-grey": unknown /* too deep */; "icons/arrowdown-lightgrey": unknown /* too deep */; "icons/arrowdown-white": unknown /* too deep */; "icons/arrowFlip-grey": unknown /* too deep */; "icons/arrowFlip-lightgrey": unknown /* too deep */; "icons/arrowFlip-white": unknown /* too deep */; "icons/arrowup-grey": unknown /* too deep */; "icons/arrowup-lightgrey": unknown /* too deep */; "icons/arrowup-white": unknown /* too deep */; "icons/build-grey": unknown /* too deep */; "icons/build-white": unknown /* too deep */; "icons/check-grey": unknown /* too deep */; "icons/check-lightgrey": unknown /* too deep */; "icons/check-white": unknown /* too deep */; "icons/close-grey": unknown /* too deep */; "icons/close-white": unknown /* too deep */; "icons/close-white-32": unknown /* too deep */; "icons/google-logo-small": unknown /* too deep */; "icons/icon-mini-play-grey": unknown /* too deep */; "icons/icon-mini-play-white": unknown /* too deep */; "icons/lock-grey": unknown /* too deep */; "icons/lock-white": unknown /* too deep */; "icons/replay": unknown /* too deep */; "icons/shop-grey": unknown /* too deep */; "icons/shop-white": unknown /* too deep */; "icons/speaker-icon": unknown /* too deep */; "icons/spin-grey": unknown /* too deep */; "icons/spin-white": unknown /* too deep */; "icons/unlock-grey": unknown /* too deep */; "icons/unlock-white": unknown /* too deep */; "marble-close-square": unknown /* too deep */; "marble-large-active-left": unknown /* too deep */; "marble-large-active-middle": unknown /* too deep */; "marble-large-active-right": unknown /* too deep */; "marble-large-default-left": unknown /* too deep */; "marble-large-default-middle": unknown /* too deep */; "marble-large-default-right": unknown /* too deep */; "marble-large-hover-left": unknown /* too deep */; "marble-large-hover-middle": unknown /* too deep */; "marble-large-hover-right": unknown /* too deep */; "marble-medium-active-left": unknown /* too deep */; "marble-medium-active-middle": unknown /* too deep */; "marble-medium-active-right": unknown /* too deep */; "marble-medium-default-left": unknown /* too deep */; "marble-medium-default-middle": unknown /* too deep */; "marble-medium-default-right": unknown /* too deep */; "marble-medium-hover-left": unknown /* too deep */; "marble-medium-hover-middle": unknown /* too deep */; "marble-medium-hover-right": unknown /* too deep */; "marble-small-active-left": unknown /* too deep */; "marble-small-active-middle": unknown /* too deep */; "marble-small-active-right": unknown /* too deep */; "marble-small-default-left": unknown /* too deep */; "marble-small-default-middle": unknown /* too deep */; "marble-small-default-right": unknown /* too deep */; "marble-small-hover-left": unknown /* too deep */; "marble-small-hover-middle": unknown /* too deep */; "marble-small-hover-right": unknown /* too deep */; "ruby-close-square": unknown /* too deep */; "ruby-large-active-left": unknown /* too deep */; "ruby-large-active-middle": unknown /* too deep */; "ruby-large-active-right": unknown /* too deep */; "ruby-large-default-left": unknown /* too deep */; "ruby-large-default-middle": unknown /* too deep */; "ruby-large-default-right": unknown /* too deep */; "ruby-large-hover-left": unknown /* too deep */; "ruby-large-hover-middle": unknown /* too deep */; "ruby-large-hover-right": unknown /* too deep */; "ruby-medium-active-left": unknown /* too deep */; "ruby-medium-active-middle": unknown /* too deep */; "ruby-medium-active-right": unknown /* too deep */; "ruby-medium-default-left": unknown /* too deep */; "ruby-medium-default-middle": unknown /* too deep */; "ruby-medium-default-right": unknown /* too deep */; "ruby-medium-hover-left": unknown /* too deep */; "ruby-medium-hover-middle": unknown /* too deep */; "ruby-medium-hover-right": unknown /* too deep */; "ruby-small-active-left": unknown /* too deep */; "ruby-small-active-middle": unknown /* too deep */; "ruby-small-active-right": unknown /* too deep */; "ruby-small-default-left": unknown /* too deep */; "ruby-small-default-middle": unknown /* too deep */; "ruby-small-default-right": unknown /* too deep */; "ruby-small-hover-left": unknown /* too deep */; "ruby-small-hover-middle": unknown /* too deep */; "ruby-small-hover-right": unknown /* too deep */; "sapphire-large-active-left": unknown /* too deep */; "sapphire-large-active-middle": unknown /* too deep */; "sapphire-large-active-right": unknown /* too deep */; "sapphire-large-default-left": unknown /* too deep */; "sapphire-large-default-middle": unknown /* too deep */; "sapphire-large-default-right": unknown /* too deep */; "sapphire-large-hover-left": unknown /* too deep */; "sapphire-large-hover-middle": unknown /* too deep */; "sapphire-large-hover-right": unknown /* too deep */; "sapphire-medium-active-left": unknown /* too deep */; "sapphire-medium-active-middle": unknown /* too deep */; "sapphire-medium-active-right": unknown /* too deep */; "sapphire-medium-default-left": unknown /* too deep */; "sapphire-medium-default-middle": unknown /* too deep */; "sapphire-medium-default-right": unknown /* too deep */; "sapphire-medium-hover-left": unknown /* too deep */; "sapphire-medium-hover-middle": unknown /* too deep */; "sapphire-medium-hover-right": unknown /* too deep */; "sapphire-small-active-left": unknown /* too deep */; "sapphire-small-active-middle": unknown /* too deep */; "sapphire-small-active-right": unknown /* too deep */; "sapphire-small-default-left": unknown /* too deep */; "sapphire-small-default-middle": unknown /* too deep */; "sapphire-small-default-right": unknown /* too deep */; "sapphire-small-hover-left": unknown /* too deep */; "sapphire-small-hover-middle": unknown /* too deep */; "sapphire-small-hover-right": unknown /* too deep */; "stone-large-disabled-left": unknown /* too deep */; "stone-large-disabled-middle": unknown /* too deep */; "stone-large-disabled-right": unknown /* too deep */; "stone-medium-disabled-left": unknown /* too deep */; "stone-medium-disabled-middle": unknown /* too deep */; "stone-medium-disabled-right": unknown /* too deep */; "stone-small-disabled-left": unknown /* too deep */; "stone-small-disabled-middle": unknown /* too deep */; "stone-small-disabled-right": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { canopy: unknown /* too deep */; chain: unknown /* too deep */; "chain-right": unknown /* too deep */; "clean-grey": unknown /* too deep */; "clean-white": unknown /* too deep */; "duel-attack-grey": unknown /* too deep */; "duel-attack-white": unknown /* too deep */; "icon-large-checkmark": unknown /* too deep */; "icon-large-exclamation": unknown /* too deep */; "icon-large-indicator": unknown /* too deep */; "icon-mini-arrow-off": unknown /* too deep */; "icon-mini-arrow-on": unknown /* too deep */; "icon-mini-heart-off": unknown /* too deep */; "icon-mini-heart-on": unknown /* too deep */; "icon-mini-membership": unknown /* too deep */; "icon-mini-rarity-common": unknown /* too deep */; "icon-mini-rarity-heroic": unknown /* too deep */; "icon-mini-rarity-legendary": unknown /* too deep */; "icon-mini-rarity-rare": unknown /* too deep */; "icon-mini-rarity-uncommon": unknown /* too deep */; "icon-mini-ticket": unknown /* too deep */; "icon-small-attackrange-off": unknown /* too deep */; "icon-small-attackrange-on": unknown /* too deep */; "icon-small-circle": unknown /* too deep */; "medium-icon-birds-grey": unknown /* too deep */; "medium-icon-birds-white": unknown /* too deep */; "medium-icon-boots-grey": unknown /* too deep */; "medium-icon-boots-white": unknown /* too deep */; "medium-icon-brawler-grey": unknown /* too deep */; "medium-icon-brawler-white": unknown /* too deep */; "medium-icon-buddies-grey": unknown /* too deep */; "medium-icon-buddies-white": unknown /* too deep */; "medium-icon-cats-grey": unknown /* too deep */; "medium-icon-cats-white": unknown /* too deep */; "medium-icon-checkmark": unknown /* too deep */; "medium-icon-decorations-grey": unknown /* too deep */; "medium-icon-decorations-white": unknown /* too deep */; "medium-icon-dogs-grey": unknown /* too deep */; "medium-icon-dogs-white": unknown /* too deep */; "medium-icon-frames-grey": unknown /* too deep */; "medium-icon-frames-white": unknown /* too deep */; "medium-icon-furniture-grey": unknown /* too deep */; "medium-icon-furniture-white": unknown /* too deep */; "medium-icon-hamsters-grey": unknown /* too deep */; "medium-icon-hamsters-white": unknown /* too deep */; "medium-icon-hats-grey": unknown /* too deep */; "medium-icon-hats-white": unknown /* too deep */; "medium-icon-hunter-grey": unknown /* too deep */; "medium-icon-hunter-white": unknown /* too deep */; "medium-icon-ice-grey": unknown /* too deep */; "medium-icon-ice-white": unknown /* too deep */; "medium-icon-items-grey": unknown /* too deep */; "medium-icon-items-white": unknown /* too deep */; "medium-icon-lock": unknown /* too deep */; "medium-icon-lock-simple": unknown /* too deep */; "medium-icon-marbles-grey": unknown /* too deep */; "medium-icon-marbles-white": unknown /* too deep */; "medium-icon-membership": unknown /* too deep */; "medium-icon-outfits-grey": unknown /* too deep */; "medium-icon-outfits-white": unknown /* too deep */; "medium-icon-pets-grey": unknown /* too deep */; "medium-icon-pets-white": unknown /* too deep */; "medium-icon-potions-grey": unknown /* too deep */; "medium-icon-potions-white": unknown /* too deep */; "medium-icon-power-grey": unknown /* too deep */; "medium-icon-power-white": unknown /* too deep */; "medium-icon-reptiles-grey": unknown /* too deep */; "medium-icon-reptiles-white": unknown /* too deep */; "medium-icon-rooms-grey": unknown /* too deep */; "medium-icon-rooms-white": unknown /* too deep */; "medium-icon-storm-grey": unknown /* too deep */; "medium-icon-storm-white": unknown /* too deep */; "medium-icon-tools-grey": unknown /* too deep */; "medium-icon-tools-white": unknown /* too deep */; "medium-icon-wands-grey": unknown /* too deep */; "medium-icon-wands-white": unknown /* too deep */; "paper-price-left": unknown /* too deep */; "paper-price-middle": unknown /* too deep */; "paper-price-right": unknown /* too deep */; "paper-small-arrow": unknown /* too deep */; "paper-small-arrow-shadowless": unknown /* too deep */; "paper-small-arrow-shadowless-rotated": unknown /* too deep */; "paper-small-bottom": unknown /* too deep */; "paper-small-bottom-left": unknown /* too deep */; "paper-small-bottom-right": unknown /* too deep */; "paper-small-left": unknown /* too deep */; "paper-small-middle": unknown /* too deep */; "paper-small-right": unknown /* too deep */; "paper-small-top": unknown /* too deep */; "paper-small-top-left": unknown /* too deep */; "paper-small-top-right": unknown /* too deep */; "paperbanner-left": unknown /* too deep */; "paperbanner-middle": unknown /* too deep */; "paperbanner-right": unknown /* too deep */; "paperscroll-grey-left": unknown /* too deep */; "paperscroll-grey-middle": unknown /* too deep */; "paperscroll-grey-right": unknown /* too deep */; "prodigy-logo": unknown /* too deep */; "rope-tie": unknown /* too deep */; "rope-tie-flip": unknown /* too deep */; "select-state-arrow": unknown /* too deep */; "select-state-arrow-shadow": unknown /* too deep */; "select-state-arrow-white": unknown /* too deep */; "select-state-arrow-white-sm": unknown /* too deep */; "shadow-medium": unknown /* too deep */; "shelf-left": unknown /* too deep */; "shelf-middle": unknown /* too deep */; "shelf-right": unknown /* too deep */; "stats-tab-bar": unknown /* too deep */; "store-header-left": unknown /* too deep */; "store-header-middle": unknown /* too deep */; "store-header-right": unknown /* too deep */; "storefront-bg-bottom": unknown /* too deep */; "storefront-bg-bottom-left": unknown /* too deep */; "storefront-bg-bottom-right": unknown /* too deep */; "storefront-bg-left": unknown /* too deep */; "storefront-bg-middle": unknown /* too deep */; "storefront-bg-right": unknown /* too deep */; "storefront-bg-top-left": unknown /* too deep */; "storefront-bg-top-middle": unknown /* too deep */; "storefront-bg-top-right": unknown /* too deep */; "tab-active-left": unknown /* too deep */; "tab-active-middle": unknown /* too deep */; "tab-active-right": unknown /* too deep */; "tab-default-left": unknown /* too deep */; "tab-default-middle": unknown /* too deep */; "tab-default-right": unknown /* too deep */; "tab-hover-left": unknown /* too deep */; "tab-hover-middle": unknown /* too deep */; "tab-hover-right": unknown /* too deep */; "view-panel-bottom": unknown /* too deep */; "view-panel-bottom-left": unknown /* too deep */; "view-panel-bottom-right": unknown /* too deep */; "view-panel-left": unknown /* too deep */; "view-panel-middle": unknown /* too deep */; "view-panel-right": unknown /* too deep */; "view-panel-top": unknown /* too deep */; "view-panel-top-left": unknown /* too deep */; "view-panel-top-right": unknown /* too deep */; "wood-large-left": unknown /* too deep */; "wood-large-middle": unknown /* too deep */; "wood-large-right": unknown /* too deep */; "wood-left": unknown /* too deep */; "wood-middle": unknown /* too deep */; "wood-panel-bottom": unknown /* too deep */; "wood-panel-bottom-left": unknown /* too deep */; "wood-panel-bottom-right": unknown /* too deep */; "wood-panel-left": unknown /* too deep */; "wood-panel-middle": unknown /* too deep */; "wood-panel-right": unknown /* too deep */; "wood-panel-top": unknown /* too deep */; "wood-panel-top-left": unknown /* too deep */; "wood-panel-top-right": unknown /* too deep */; "wood-right": unknown /* too deep */; "wood-small-hover-left": unknown /* too deep */; "wood-small-hover-middle": unknown /* too deep */; "wood-small-hover-right": unknown /* too deep */; "wood-small-left": unknown /* too deep */; "wood-small-middle": unknown /* too deep */; "wood-small-right": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "backing-loot-bottom": unknown /* too deep */; "backing-loot-bottom-left": unknown /* too deep */; "backing-loot-bottom-right": unknown /* too deep */; "backing-loot-left": unknown /* too deep */; "backing-loot-middle": unknown /* too deep */; "backing-loot-right": unknown /* too deep */; "backing-loot-top": unknown /* too deep */; "backing-loot-top-left": unknown /* too deep */; "backing-loot-top-right": unknown /* too deep */; "beige-bottom": unknown /* too deep */; "beige-bottom-left": unknown /* too deep */; "beige-bottom-right": unknown /* too deep */; "beige-left": unknown /* too deep */; "beige-middle": unknown /* too deep */; "beige-right": unknown /* too deep */; "beige-top": unknown /* too deep */; "beige-top-left": unknown /* too deep */; "beige-top-right": unknown /* too deep */; "Horizontal-Logo-White": unknown /* too deep */; "label-bottom": unknown /* too deep */; "label-bottom-left": unknown /* too deep */; "label-bottom-right": unknown /* too deep */; "label-left": unknown /* too deep */; "label-middle": unknown /* too deep */; "label-right": unknown /* too deep */; "label-top": unknown /* too deep */; "label-top-left": unknown /* too deep */; "label-top-right": unknown /* too deep */; "note-left": unknown /* too deep */; "note-middle": unknown /* too deep */; "note-right": unknown /* too deep */; "radio-active-bottom": unknown /* too deep */; "radio-active-bottom-left": unknown /* too deep */; "radio-active-bottom-right": unknown /* too deep */; "radio-active-left": unknown /* too deep */; "radio-active-middle": unknown /* too deep */; "radio-active-right": unknown /* too deep */; "radio-active-top": unknown /* too deep */; "radio-active-top-left": unknown /* too deep */; "radio-active-top-right": unknown /* too deep */; "radio-default-bottom": unknown /* too deep */; "radio-default-bottom-left": unknown /* too deep */; "radio-default-bottom-right": unknown /* too deep */; "radio-default-left": unknown /* too deep */; "radio-default-middle": unknown /* too deep */; "radio-default-right": unknown /* too deep */; "radio-default-top": unknown /* too deep */; "radio-default-top-left": unknown /* too deep */; "radio-default-top-right": unknown /* too deep */; "radio-hover-bottom": unknown /* too deep */; "radio-hover-bottom-left": unknown /* too deep */; "radio-hover-bottom-right": unknown /* too deep */; "radio-hover-left": unknown /* too deep */; "radio-hover-middle": unknown /* too deep */; "radio-hover-right": unknown /* too deep */; "radio-hover-top": unknown /* too deep */; "radio-hover-top-left": unknown /* too deep */; "radio-hover-top-right": unknown /* too deep */; "share-bottom": unknown /* too deep */; "share-bottom-left": unknown /* too deep */; "share-bottom-right": unknown /* too deep */; "share-left": unknown /* too deep */; "share-middle": unknown /* too deep */; "share-right": unknown /* too deep */; "share-top": unknown /* too deep */; "share-top-left": unknown /* too deep */; "share-top-right": unknown /* too deep */; "Sign-In Logo (White)-01": unknown /* too deep */; "slider-blue-bottom": unknown /* too deep */; "slider-blue-middle": unknown /* too deep */; "slider-blue-top": unknown /* too deep */; "track-blue-bottom": unknown /* too deep */; "track-blue-middle": unknown /* too deep */; "track-blue-top": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: {}; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { backpack: unknown /* too deep */; "bubble-1": unknown /* too deep */; "bubble-2": unknown /* too deep */; "bubble-3": unknown /* too deep */; "char-container": unknown /* too deep */; confetti1: unknown /* too deep */; confetti2: unknown /* too deep */; confetti3: unknown /* too deep */; confetti4: unknown /* too deep */; "emblem-bounty": unknown /* too deep */; feather: unknown /* too deep */; fireworks: unknown /* too deep */; "member-star": unknown /* too deep */; "menu-noot": unknown /* too deep */; merchant: unknown /* too deep */; namer: unknown /* too deep */; portal1: unknown /* too deep */; "portal1-b": unknown /* too deep */; portal10: unknown /* too deep */; portal2: unknown /* too deep */; "portal2-b": unknown /* too deep */; portal3: unknown /* too deep */; "portal3-b": unknown /* too deep */; portal4: unknown /* too deep */; "portal4-b": unknown /* too deep */; portal5: unknown /* too deep */; "portal5-b": unknown /* too deep */; portal6: unknown /* too deep */; "portal6-b": unknown /* too deep */; portal7: unknown /* too deep */; "portal7-b": unknown /* too deep */; portal8: unknown /* too deep */; "portal8-b": unknown /* too deep */; portal9: unknown /* too deep */; "portal9-b": unknown /* too deep */; rocket: unknown /* too deep */; smoke: unknown /* too deep */; "smoke-blue": unknown /* too deep */; "smoke-green": unknown /* too deep */; "smoke-red": unknown /* too deep */; "store-panel": unknown /* too deep */; "user-bar-base": unknown /* too deep */; "user-bar-fill-barrier": unknown /* too deep */; "user-bar-fill-heart": unknown /* too deep */; "user-bar-fill-star": unknown /* too deep */; "user-bar-flag-astral": unknown /* too deep */; "user-bar-flag-back": unknown /* too deep */; "user-bar-flag-earth": unknown /* too deep */; "user-bar-flag-fire": unknown /* too deep */; "user-bar-flag-ice": unknown /* too deep */; "user-bar-flag-ice & fire": unknown /* too deep */; "user-bar-flag-mech": unknown /* too deep */; "user-bar-flag-storm": unknown /* too deep */; "user-bar-flag-water": unknown /* too deep */; "user-bar-flag-wizard": unknown /* too deep */; "user-bar-heart": unknown /* too deep */; "user-bar-level": unknown /* too deep */; "user-bar-shield": unknown /* too deep */; "user-bar-star": unknown /* too deep */; "user-star": unknown /* too deep */; "water-balloon": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "100-16": unknown /* too deep */; "100-20": unknown /* too deep */; "101-16": unknown /* too deep */; "101-20": unknown /* too deep */; "102-16": unknown /* too deep */; "102-20": unknown /* too deep */; "103-16": unknown /* too deep */; "103-20": unknown /* too deep */; "104-16": unknown /* too deep */; "104-20": unknown /* too deep */; "105-16": unknown /* too deep */; "105-20": unknown /* too deep */; "106-16": unknown /* too deep */; "106-20": unknown /* too deep */; "107-16": unknown /* too deep */; "107-20": unknown /* too deep */; "108-16": unknown /* too deep */; "108-20": unknown /* too deep */; "109-16": unknown /* too deep */; "109-20": unknown /* too deep */; "110-16": unknown /* too deep */; "110-20": unknown /* too deep */; "111-16": unknown /* too deep */; "111-20": unknown /* too deep */; "112-16": unknown /* too deep */; "112-20": unknown /* too deep */; "113-16": unknown /* too deep */; "113-20": unknown /* too deep */; "114-16": unknown /* too deep */; "114-20": unknown /* too deep */; "115-16": unknown /* too deep */; "115-20": unknown /* too deep */; "116-16": unknown /* too deep */; "116-20": unknown /* too deep */; "117-16": unknown /* too deep */; "117-20": unknown /* too deep */; "118-16": unknown /* too deep */; "118-20": unknown /* too deep */; "119-16": unknown /* too deep */; "119-20": unknown /* too deep */; "120-16": unknown /* too deep */; "120-20": unknown /* too deep */; "121-16": unknown /* too deep */; "121-20": unknown /* too deep */; "122-16": unknown /* too deep */; "122-20": unknown /* too deep */; "123-16": unknown /* too deep */; "123-20": unknown /* too deep */; "124-16": unknown /* too deep */; "124-20": unknown /* too deep */; "125-16": unknown /* too deep */; "125-20": unknown /* too deep */; "126-16": unknown /* too deep */; "126-20": unknown /* too deep */; "32-16": unknown /* too deep */; "32-20": unknown /* too deep */; "33-16": unknown /* too deep */; "33-20": unknown /* too deep */; "34-16": unknown /* too deep */; "34-20": unknown /* too deep */; "35-16": unknown /* too deep */; "35-20": unknown /* too deep */; "36-16": unknown /* too deep */; "36-20": unknown /* too deep */; "37-16": unknown /* too deep */; "37-20": unknown /* too deep */; "38-16": unknown /* too deep */; "38-20": unknown /* too deep */; "39-16": unknown /* too deep */; "39-20": unknown /* too deep */; "40-16": unknown /* too deep */; "40-20": unknown /* too deep */; "41-16": unknown /* too deep */; "41-20": unknown /* too deep */; "42-16": unknown /* too deep */; "42-20": unknown /* too deep */; "43-16": unknown /* too deep */; "43-20": unknown /* too deep */; "44-16": unknown /* too deep */; "44-20": unknown /* too deep */; "45-16": unknown /* too deep */; "45-20": unknown /* too deep */; "46-16": unknown /* too deep */; "46-20": unknown /* too deep */; "47-16": unknown /* too deep */; "47-20": unknown /* too deep */; "48-16": unknown /* too deep */; "48-20": unknown /* too deep */; "49-16": unknown /* too deep */; "49-20": unknown /* too deep */; "50-16": unknown /* too deep */; "50-20": unknown /* too deep */; "51-16": unknown /* too deep */; "51-20": unknown /* too deep */; "52-16": unknown /* too deep */; "52-20": unknown /* too deep */; "53-16": unknown /* too deep */; "53-20": unknown /* too deep */; "54-16": unknown /* too deep */; "54-20": unknown /* too deep */; "55-16": unknown /* too deep */; "55-20": unknown /* too deep */; "56-16": unknown /* too deep */; "56-20": unknown /* too deep */; "57-16": unknown /* too deep */; "57-20": unknown /* too deep */; "58-16": unknown /* too deep */; "58-20": unknown /* too deep */; "59-16": unknown /* too deep */; "59-20": unknown /* too deep */; "60-16": unknown /* too deep */; "60-20": unknown /* too deep */; "61-16": unknown /* too deep */; "61-20": unknown /* too deep */; "62-16": unknown /* too deep */; "62-20": unknown /* too deep */; "63-16": unknown /* too deep */; "63-20": unknown /* too deep */; "64-16": unknown /* too deep */; "64-20": unknown /* too deep */; "65-16": unknown /* too deep */; "65-20": unknown /* too deep */; "66-16": unknown /* too deep */; "66-20": unknown /* too deep */; "67-16": unknown /* too deep */; "67-20": unknown /* too deep */; "68-16": unknown /* too deep */; "68-20": unknown /* too deep */; "69-16": unknown /* too deep */; "69-20": unknown /* too deep */; "70-16": unknown /* too deep */; "70-20": unknown /* too deep */; "71-16": unknown /* too deep */; "71-20": unknown /* too deep */; "72-16": unknown /* too deep */; "72-20": unknown /* too deep */; "73-16": unknown /* too deep */; "73-20": unknown /* too deep */; "74-16": unknown /* too deep */; "74-20": unknown /* too deep */; "75-16": unknown /* too deep */; "75-20": unknown /* too deep */; "76-16": unknown /* too deep */; "76-20": unknown /* too deep */; "77-16": unknown /* too deep */; "77-20": unknown /* too deep */; "78-16": unknown /* too deep */; "78-20": unknown /* too deep */; "79-16": unknown /* too deep */; "79-20": unknown /* too deep */; "80-16": unknown /* too deep */; "80-20": unknown /* too deep */; "81-16": unknown /* too deep */; "81-20": unknown /* too deep */; "82-16": unknown /* too deep */; "82-20": unknown /* too deep */; "83-16": unknown /* too deep */; "83-20": unknown /* too deep */; "84-16": unknown /* too deep */; "84-20": unknown /* too deep */; "85-16": unknown /* too deep */; "85-20": unknown /* too deep */; "86-16": unknown /* too deep */; "86-20": unknown /* too deep */; "87-16": unknown /* too deep */; "87-20": unknown /* too deep */; "88-16": unknown /* too deep */; "88-20": unknown /* too deep */; "89-16": unknown /* too deep */; "89-20": unknown /* too deep */; "90-16": unknown /* too deep */; "90-20": unknown /* too deep */; "91-16": unknown /* too deep */; "91-20": unknown /* too deep */; "92-16": unknown /* too deep */; "92-20": unknown /* too deep */; "93-16": unknown /* too deep */; "93-20": unknown /* too deep */; "94-16": unknown /* too deep */; "94-20": unknown /* too deep */; "95-16": unknown /* too deep */; "95-20": unknown /* too deep */; "96-16": unknown /* too deep */; "96-20": unknown /* too deep */; "97-16": unknown /* too deep */; "97-20": unknown /* too deep */; "98-16": unknown /* too deep */; "98-20": unknown /* too deep */; "99-16": unknown /* too deep */; "99-20": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { air: unknown /* too deep */; arena: unknown /* too deep */; arrow: unknown /* too deep */; award: unknown /* too deep */; back: unknown /* too deep */; badge: unknown /* too deep */; bag: unknown /* too deep */; "battle-request": unknown /* too deep */; "bonus-arrow": unknown /* too deep */; book: unknown /* too deep */; boss: unknown /* too deep */; bounty: unknown /* too deep */; buddy: unknown /* too deep */; canada: unknown /* too deep */; catalogue: unknown /* too deep */; catch: unknown /* too deep */; challenge: unknown /* too deep */; chat: unknown /* too deep */; "chat/apple": unknown /* too deep */; "chat/bubble": unknown /* too deep */; "chat/cake": unknown /* too deep */; "chat/clover": unknown /* too deep */; "chat/dot": unknown /* too deep */; "chat/exclamation": unknown /* too deep */; "chat/frustration": unknown /* too deep */; "chat/heart": unknown /* too deep */; "chat/idea": unknown /* too deep */; "chat/moon": unknown /* too deep */; "chat/music": unknown /* too deep */; "chat/question": unknown /* too deep */; "chat/star": unknown /* too deep */; "chat/sun": unknown /* too deep */; "chat/swear": unknown /* too deep */; "chat/tear": unknown /* too deep */; close: unknown /* too deep */; "Copper Coin": unknown /* too deep */; crystal: unknown /* too deep */; dice: unknown /* too deep */; "dorm-rotate": unknown /* too deep */; "dorm-trash": unknown /* too deep */; "dormbg/1": unknown /* too deep */; "dormbg/2": unknown /* too deep */; "dormbg/3": unknown /* too deep */; down: unknown /* too deep */; earth: unknown /* too deep */; edit: unknown /* too deep */; eggpile: unknown /* too deep */; "emblem-bounty": unknown /* too deep */; empty: unknown /* too deep */; "empty-boots": unknown /* too deep */; "empty-follow": unknown /* too deep */; "empty-hat": unknown /* too deep */; "empty-outfit": unknown /* too deep */; "empty-ring": unknown /* too deep */; "empty-spellRelic": unknown /* too deep */; "empty-weapon": unknown /* too deep */; exclamation: unknown /* too deep */; exclamationPoint: unknown /* too deep */; fire: unknown /* too deep */; gift: unknown /* too deep */; gold: unknown /* too deep */; "Golden Pages": unknown /* too deep */; heal: unknown /* too deep */; heart: unknown /* too deep */; "heart-small": unknown /* too deep */; help: unknown /* too deep */; ice: unknown /* too deep */; "icon-astral-mini": unknown /* too deep */; "icon-attackrange-off": unknown /* too deep */; "icon-attackrange-on": unknown /* too deep */; "icon-bar-astral": unknown /* too deep */; "icon-bar-earth": unknown /* too deep */; "icon-bar-fire": unknown /* too deep */; "icon-bar-ice": unknown /* too deep */; "icon-bar-ice & fire": unknown /* too deep */; "icon-bar-large-astral": unknown /* too deep */; "icon-bar-large-earth": unknown /* too deep */; "icon-bar-large-fire": unknown /* too deep */; "icon-bar-large-ice": unknown /* too deep */; "icon-bar-large-mech": unknown /* too deep */; "icon-bar-large-storm": unknown /* too deep */; "icon-bar-large-water": unknown /* too deep */; "icon-bar-large-wizard": unknown /* too deep */; "icon-bar-mech": unknown /* too deep */; "icon-bar-storm": unknown /* too deep */; "icon-bar-water": unknown /* too deep */; "icon-bar-wizard": unknown /* too deep */; "icon-base": unknown /* too deep */; "icon-base-active": unknown /* too deep */; "icon-base-pvp": unknown /* too deep */; "icon-base-pvp-indicator": unknown /* too deep */; "icon-fire-mini": unknown /* too deep */; "icon-ice-mini": unknown /* too deep */; "icon-keystone-lock": unknown /* too deep */; "icon-lock-mini": unknown /* too deep */; "icon-medium-lock": unknown /* too deep */; "icon-plant-mini": unknown /* too deep */; "icon-shadow-mini": unknown /* too deep */; "icon-storm-mini": unknown /* too deep */; "icon-water-mini": unknown /* too deep */; info: unknown /* too deep */; inspect: unknown /* too deep */; leaderboard: unknown /* too deep */; mail: unknown /* too deep */; "mail-aero": unknown /* too deep */; "mail-cc": unknown /* too deep */; "mail-challenge": unknown /* too deep */; "mail-dragonfly": unknown /* too deep */; "mail-empty": unknown /* too deep */; "mail-floran": unknown /* too deep */; "mail-gold": unknown /* too deep */; "mail-heart": unknown /* too deep */; "mail-hot-hot": unknown /* too deep */; "mail-leaf": unknown /* too deep */; "mail-lock": unknown /* too deep */; "mail-magicegg": unknown /* too deep */; "mail-member": unknown /* too deep */; "mail-page": unknown /* too deep */; "mail-researchpoint-fire": unknown /* too deep */; "mail-researchpoint-ice": unknown /* too deep */; "mail-researchpoint-plant": unknown /* too deep */; "mail-researchpoint-storm": unknown /* too deep */; "mail-researchpoint-water": unknown /* too deep */; "mail-sanddollar": unknown /* too deep */; "mail-sf": unknown /* too deep */; "mail-shiver": unknown /* too deep */; "mail-ss": unknown /* too deep */; "mail-star": unknown /* too deep */; "mail-tower": unknown /* too deep */; "mail-yar": unknown /* too deep */; mailCount: unknown /* too deep */; map: unknown /* too deep */; "map-all": unknown /* too deep */; "map-game": unknown /* too deep */; "map-quest": unknown /* too deep */; "map-store": unknown /* too deep */; mech: unknown /* too deep */; member: unknown /* too deep */; membership: unknown /* too deep */; "menu-crest": unknown /* too deep */; "monster-counter-large": unknown /* too deep */; "monster-counter-large-grey": unknown /* too deep */; "monster-counter-small": unknown /* too deep */; move: unknown /* too deep */; mystery: unknown /* too deep */; next: unknown /* too deep */; pet: unknown /* too deep */; play: unknown /* too deep */; player: unknown /* too deep */; "potion-buff-all": unknown /* too deep */; "potion-buff-critical": unknown /* too deep */; "potion-buff-damage": unknown /* too deep */; "potion-buff-earth": unknown /* too deep */; "potion-buff-fire": unknown /* too deep */; "potion-buff-ice": unknown /* too deep */; "potion-buff-storm": unknown /* too deep */; "potion-buff-water": unknown /* too deep */; quest: unknown /* too deep */; "quest-complete": unknown /* too deep */; question: unknown /* too deep */; settings: unknown /* too deep */; shovel: unknown /* too deep */; "small-icon-academypage": unknown /* too deep */; "small-icon-gold": unknown /* too deep */; smoke: unknown /* too deep */; "snowflake-small": unknown /* too deep */; star: unknown /* too deep */; "star-shard-small": unknown /* too deep */; "star-small": unknown /* too deep */; star2: unknown /* too deep */; store: unknown /* too deep */; storm: unknown /* too deep */; "survey/survey-box-icon": unknown /* too deep */; "survey/survey-box-square-icon": unknown /* too deep */; "survey/survey-check-icon": unknown /* too deep */; team: unknown /* too deep */; "team-pvp": unknown /* too deep */; titanShard: unknown /* too deep */; trophyBronze: unknown /* too deep */; trophyGold: unknown /* too deep */; trophySilver: unknown /* too deep */; type: unknown /* too deep */; up: unknown /* too deep */; us: unknown /* too deep */; water: unknown /* too deep */; wizard: unknown /* too deep */; x: unknown /* too deep */; yes: unknown /* too deep */; "zone-air": unknown /* too deep */; "zone-earth": unknown /* too deep */; "zone-fire": unknown /* too deep */; "zone-ice": unknown /* too deep */; "zone-water": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "background/wood-neutral-bottom": unknown /* too deep */; "background/wood-neutral-bottomLeft": unknown /* too deep */; "background/wood-neutral-bottomRight": unknown /* too deep */; "background/wood-neutral-left": unknown /* too deep */; "background/wood-neutral-middle": unknown /* too deep */; "background/wood-neutral-right": unknown /* too deep */; "background/wood-neutral-top": unknown /* too deep */; "background/wood-neutral-topLeft": unknown /* too deep */; "background/wood-neutral-topRight": unknown /* too deep */; "banner/banner-red-left": unknown /* too deep */; "banner/banner-red-middle": unknown /* too deep */; "banner/banner-red-right": unknown /* too deep */; "banner/title-gold-left": unknown /* too deep */; "banner/title-gold-middle": unknown /* too deep */; "banner/title-gold-right": unknown /* too deep */; "button/blueround-left": unknown /* too deep */; "button/blueround-middle": unknown /* too deep */; "button/blueround-right": unknown /* too deep */; "button/bluerounddown-left": unknown /* too deep */; "button/bluerounddown-middle": unknown /* too deep */; "button/bluerounddown-right": unknown /* too deep */; "button/greenround-left": unknown /* too deep */; "button/greenround-middle": unknown /* too deep */; "button/greenround-right": unknown /* too deep */; "button/greenrounddown-left": unknown /* too deep */; "button/greenrounddown-middle": unknown /* too deep */; "button/greenrounddown-right": unknown /* too deep */; "button/greyround-left": unknown /* too deep */; "button/greyround-middle": unknown /* too deep */; "button/greyround-right": unknown /* too deep */; "button/greyrounddown-left": unknown /* too deep */; "button/greyrounddown-middle": unknown /* too deep */; "button/greyrounddown-right": unknown /* too deep */; "button/pupleround-left": unknown /* too deep */; "button/pupleround-middle": unknown /* too deep */; "button/pupleround-right": unknown /* too deep */; "button/puplerounddown-left": unknown /* too deep */; "button/puplerounddown-middle": unknown /* too deep */; "button/puplerounddown-right": unknown /* too deep */; "button/redround-left": unknown /* too deep */; "button/redround-middle": unknown /* too deep */; "button/redround-right": unknown /* too deep */; "button/redrounddown-left": unknown /* too deep */; "button/redrounddown-middle": unknown /* too deep */; "button/redrounddown-right": unknown /* too deep */; "button/yellowround-left": unknown /* too deep */; "button/yellowround-middle": unknown /* too deep */; "button/yellowround-right": unknown /* too deep */; "button/yellowrounddown-left": unknown /* too deep */; "button/yellowrounddown-middle": unknown /* too deep */; "button/yellowrounddown-right": unknown /* too deep */; "matte/matte-member-bottom": unknown /* too deep */; "matte/matte-member-bottomLeft": unknown /* too deep */; "matte/matte-member-bottomRight": unknown /* too deep */; "matte/matte-member-left": unknown /* too deep */; "matte/matte-member-middle": unknown /* too deep */; "matte/matte-member-right": unknown /* too deep */; "matte/matte-member-top": unknown /* too deep */; "matte/matte-member-topLeft": unknown /* too deep */; "matte/matte-member-topRight": unknown /* too deep */; "matte/matte-neutral-bottom": unknown /* too deep */; "matte/matte-neutral-bottomLeft": unknown /* too deep */; "matte/matte-neutral-bottomRight": unknown /* too deep */; "matte/matte-neutral-left": unknown /* too deep */; "matte/matte-neutral-middle": unknown /* too deep */; "matte/matte-neutral-right": unknown /* too deep */; "matte/matte-neutral-top": unknown /* too deep */; "matte/matte-neutral-topLeft": unknown /* too deep */; "matte/matte-neutral-topRight": unknown /* too deep */; "misc/blue-arrow-left": unknown /* too deep */; "misc/blue-arrow-right": unknown /* too deep */; "misc/close": unknown /* too deep */; "misc/member-icon": unknown /* too deep */; "misc/membership-icon-small": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "100-36": unknown /* too deep */; "101-36": unknown /* too deep */; "102-36": unknown /* too deep */; "103-36": unknown /* too deep */; "104-36": unknown /* too deep */; "105-36": unknown /* too deep */; "106-36": unknown /* too deep */; "107-36": unknown /* too deep */; "108-36": unknown /* too deep */; "109-36": unknown /* too deep */; "110-36": unknown /* too deep */; "111-36": unknown /* too deep */; "112-36": unknown /* too deep */; "113-36": unknown /* too deep */; "114-36": unknown /* too deep */; "115-36": unknown /* too deep */; "116-36": unknown /* too deep */; "117-36": unknown /* too deep */; "118-36": unknown /* too deep */; "119-36": unknown /* too deep */; "120-36": unknown /* too deep */; "121-36": unknown /* too deep */; "122-36": unknown /* too deep */; "123-36": unknown /* too deep */; "124-36": unknown /* too deep */; "125-36": unknown /* too deep */; "126-36": unknown /* too deep */; "32-36": unknown /* too deep */; "33-36": unknown /* too deep */; "34-36": unknown /* too deep */; "35-36": unknown /* too deep */; "36-36": unknown /* too deep */; "37-36": unknown /* too deep */; "38-36": unknown /* too deep */; "39-36": unknown /* too deep */; "40-36": unknown /* too deep */; "41-36": unknown /* too deep */; "42-36": unknown /* too deep */; "43-36": unknown /* too deep */; "44-36": unknown /* too deep */; "45-36": unknown /* too deep */; "46-36": unknown /* too deep */; "47-36": unknown /* too deep */; "48-36": unknown /* too deep */; "49-36": unknown /* too deep */; "50-36": unknown /* too deep */; "51-36": unknown /* too deep */; "52-36": unknown /* too deep */; "53-36": unknown /* too deep */; "54-36": unknown /* too deep */; "55-36": unknown /* too deep */; "56-36": unknown /* too deep */; "57-36": unknown /* too deep */; "58-36": unknown /* too deep */; "59-36": unknown /* too deep */; "60-36": unknown /* too deep */; "61-36": unknown /* too deep */; "62-36": unknown /* too deep */; "63-36": unknown /* too deep */; "64-36": unknown /* too deep */; "65-36": unknown /* too deep */; "66-36": unknown /* too deep */; "67-36": unknown /* too deep */; "68-36": unknown /* too deep */; "69-36": unknown /* too deep */; "70-36": unknown /* too deep */; "71-36": unknown /* too deep */; "72-36": unknown /* too deep */; "73-36": unknown /* too deep */; "74-36": unknown /* too deep */; "75-36": unknown /* too deep */; "76-36": unknown /* too deep */; "77-36": unknown /* too deep */; "78-36": unknown /* too deep */; "79-36": unknown /* too deep */; "80-36": unknown /* too deep */; "81-36": unknown /* too deep */; "82-36": unknown /* too deep */; "83-36": unknown /* too deep */; "84-36": unknown /* too deep */; "85-36": unknown /* too deep */; "86-36": unknown /* too deep */; "87-36": unknown /* too deep */; "88-36": unknown /* too deep */; "89-36": unknown /* too deep */; "90-36": unknown /* too deep */; "91-36": unknown /* too deep */; "92-36": unknown /* too deep */; "93-36": unknown /* too deep */; "94-36": unknown /* too deep */; "95-36": unknown /* too deep */; "96-36": unknown /* too deep */; "97-36": unknown /* too deep */; "98-36": unknown /* too deep */; "99-36": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "100-16": unknown /* too deep */; "100-20": unknown /* too deep */; "100-30": unknown /* too deep */; "100-40": unknown /* too deep */; "100-80": unknown /* too deep */; "101-16": unknown /* too deep */; "101-20": unknown /* too deep */; "101-30": unknown /* too deep */; "101-40": unknown /* too deep */; "101-80": unknown /* too deep */; "102-16": unknown /* too deep */; "102-20": unknown /* too deep */; "102-30": unknown /* too deep */; "102-40": unknown /* too deep */; "102-80": unknown /* too deep */; "103-16": unknown /* too deep */; "103-20": unknown /* too deep */; "103-30": unknown /* too deep */; "103-40": unknown /* too deep */; "103-80": unknown /* too deep */; "104-16": unknown /* too deep */; "104-20": unknown /* too deep */; "104-30": unknown /* too deep */; "104-40": unknown /* too deep */; "104-80": unknown /* too deep */; "105-16": unknown /* too deep */; "105-20": unknown /* too deep */; "105-30": unknown /* too deep */; "105-40": unknown /* too deep */; "105-80": unknown /* too deep */; "106-16": unknown /* too deep */; "106-20": unknown /* too deep */; "106-30": unknown /* too deep */; "106-40": unknown /* too deep */; "106-80": unknown /* too deep */; "107-16": unknown /* too deep */; "107-20": unknown /* too deep */; "107-30": unknown /* too deep */; "107-40": unknown /* too deep */; "107-80": unknown /* too deep */; "108-16": unknown /* too deep */; "108-20": unknown /* too deep */; "108-30": unknown /* too deep */; "108-40": unknown /* too deep */; "108-80": unknown /* too deep */; "109-16": unknown /* too deep */; "109-20": unknown /* too deep */; "109-30": unknown /* too deep */; "109-40": unknown /* too deep */; "109-80": unknown /* too deep */; "110-16": unknown /* too deep */; "110-20": unknown /* too deep */; "110-30": unknown /* too deep */; "110-40": unknown /* too deep */; "110-80": unknown /* too deep */; "111-16": unknown /* too deep */; "111-20": unknown /* too deep */; "111-30": unknown /* too deep */; "111-40": unknown /* too deep */; "111-80": unknown /* too deep */; "112-16": unknown /* too deep */; "112-20": unknown /* too deep */; "112-30": unknown /* too deep */; "112-40": unknown /* too deep */; "112-80": unknown /* too deep */; "113-16": unknown /* too deep */; "113-20": unknown /* too deep */; "113-30": unknown /* too deep */; "113-40": unknown /* too deep */; "113-80": unknown /* too deep */; "114-16": unknown /* too deep */; "114-20": unknown /* too deep */; "114-30": unknown /* too deep */; "114-40": unknown /* too deep */; "114-80": unknown /* too deep */; "115-16": unknown /* too deep */; "115-20": unknown /* too deep */; "115-30": unknown /* too deep */; "115-40": unknown /* too deep */; "115-80": unknown /* too deep */; "116-16": unknown /* too deep */; "116-20": unknown /* too deep */; "116-30": unknown /* too deep */; "116-40": unknown /* too deep */; "116-80": unknown /* too deep */; "117-16": unknown /* too deep */; "117-20": unknown /* too deep */; "117-30": unknown /* too deep */; "117-40": unknown /* too deep */; "117-80": unknown /* too deep */; "118-16": unknown /* too deep */; "118-20": unknown /* too deep */; "118-30": unknown /* too deep */; "118-40": unknown /* too deep */; "118-80": unknown /* too deep */; "119-16": unknown /* too deep */; "119-20": unknown /* too deep */; "119-30": unknown /* too deep */; "119-40": unknown /* too deep */; "119-80": unknown /* too deep */; "120-16": unknown /* too deep */; "120-20": unknown /* too deep */; "120-30": unknown /* too deep */; "120-40": unknown /* too deep */; "120-80": unknown /* too deep */; "121-16": unknown /* too deep */; "121-20": unknown /* too deep */; "121-30": unknown /* too deep */; "121-40": unknown /* too deep */; "121-80": unknown /* too deep */; "122-16": unknown /* too deep */; "122-20": unknown /* too deep */; "122-30": unknown /* too deep */; "122-40": unknown /* too deep */; "122-80": unknown /* too deep */; "123-16": unknown /* too deep */; "123-20": unknown /* too deep */; "123-30": unknown /* too deep */; "123-40": unknown /* too deep */; "123-80": unknown /* too deep */; "124-16": unknown /* too deep */; "124-20": unknown /* too deep */; "124-30": unknown /* too deep */; "124-40": unknown /* too deep */; "124-80": unknown /* too deep */; "125-16": unknown /* too deep */; "125-20": unknown /* too deep */; "125-30": unknown /* too deep */; "125-40": unknown /* too deep */; "125-80": unknown /* too deep */; "126-16": unknown /* too deep */; "126-20": unknown /* too deep */; "126-30": unknown /* too deep */; "126-40": unknown /* too deep */; "126-80": unknown /* too deep */; "130-16": unknown /* too deep */; "130-20": unknown /* too deep */; "130-30": unknown /* too deep */; "130-40": unknown /* too deep */; "130-80": unknown /* too deep */; "144-16": unknown /* too deep */; "144-20": unknown /* too deep */; "144-30": unknown /* too deep */; "144-40": unknown /* too deep */; "144-80": unknown /* too deep */; "32-16": unknown /* too deep */; "32-20": unknown /* too deep */; "32-30": unknown /* too deep */; "32-40": unknown /* too deep */; "32-80": unknown /* too deep */; "33-16": unknown /* too deep */; "33-20": unknown /* too deep */; "33-30": unknown /* too deep */; "33-40": unknown /* too deep */; "33-80": unknown /* too deep */; "34-16": unknown /* too deep */; "34-20": unknown /* too deep */; "34-30": unknown /* too deep */; "34-40": unknown /* too deep */; "34-80": unknown /* too deep */; "35-16": unknown /* too deep */; "35-20": unknown /* too deep */; "35-30": unknown /* too deep */; "35-40": unknown /* too deep */; "35-80": unknown /* too deep */; "36-16": unknown /* too deep */; "36-20": unknown /* too deep */; "36-30": unknown /* too deep */; "36-40": unknown /* too deep */; "36-80": unknown /* too deep */; "37-16": unknown /* too deep */; "37-20": unknown /* too deep */; "37-30": unknown /* too deep */; "37-40": unknown /* too deep */; "37-80": unknown /* too deep */; "38-16": unknown /* too deep */; "38-20": unknown /* too deep */; "38-30": unknown /* too deep */; "38-40": unknown /* too deep */; "38-80": unknown /* too deep */; "39-16": unknown /* too deep */; "39-20": unknown /* too deep */; "39-30": unknown /* too deep */; "39-40": unknown /* too deep */; "39-80": unknown /* too deep */; "40-16": unknown /* too deep */; "40-20": unknown /* too deep */; "40-30": unknown /* too deep */; "40-40": unknown /* too deep */; "40-80": unknown /* too deep */; "41-16": unknown /* too deep */; "41-20": unknown /* too deep */; "41-30": unknown /* too deep */; "41-40": unknown /* too deep */; "41-80": unknown /* too deep */; "42-16": unknown /* too deep */; "42-20": unknown /* too deep */; "42-30": unknown /* too deep */; "42-40": unknown /* too deep */; "42-80": unknown /* too deep */; "43-16": unknown /* too deep */; "43-20": unknown /* too deep */; "43-30": unknown /* too deep */; "43-40": unknown /* too deep */; "43-80": unknown /* too deep */; "44-16": unknown /* too deep */; "44-20": unknown /* too deep */; "44-30": unknown /* too deep */; "44-40": unknown /* too deep */; "44-80": unknown /* too deep */; "45-16": unknown /* too deep */; "45-20": unknown /* too deep */; "45-30": unknown /* too deep */; "45-40": unknown /* too deep */; "45-80": unknown /* too deep */; "46-16": unknown /* too deep */; "46-20": unknown /* too deep */; "46-30": unknown /* too deep */; "46-40": unknown /* too deep */; "46-80": unknown /* too deep */; "47-16": unknown /* too deep */; "47-20": unknown /* too deep */; "47-30": unknown /* too deep */; "47-40": unknown /* too deep */; "47-80": unknown /* too deep */; "48-16": unknown /* too deep */; "48-20": unknown /* too deep */; "48-30": unknown /* too deep */; "48-40": unknown /* too deep */; "48-80": unknown /* too deep */; "49-16": unknown /* too deep */; "49-20": unknown /* too deep */; "49-30": unknown /* too deep */; "49-40": unknown /* too deep */; "49-80": unknown /* too deep */; "50-16": unknown /* too deep */; "50-20": unknown /* too deep */; "50-30": unknown /* too deep */; "50-40": unknown /* too deep */; "50-80": unknown /* too deep */; "51-16": unknown /* too deep */; "51-20": unknown /* too deep */; "51-30": unknown /* too deep */; "51-40": unknown /* too deep */; "51-80": unknown /* too deep */; "52-16": unknown /* too deep */; "52-20": unknown /* too deep */; "52-30": unknown /* too deep */; "52-40": unknown /* too deep */; "52-80": unknown /* too deep */; "53-16": unknown /* too deep */; "53-20": unknown /* too deep */; "53-30": unknown /* too deep */; "53-40": unknown /* too deep */; "53-80": unknown /* too deep */; "54-16": unknown /* too deep */; "54-20": unknown /* too deep */; "54-30": unknown /* too deep */; "54-40": unknown /* too deep */; "54-80": unknown /* too deep */; "55-16": unknown /* too deep */; "55-20": unknown /* too deep */; "55-30": unknown /* too deep */; "55-40": unknown /* too deep */; "55-80": unknown /* too deep */; "56-16": unknown /* too deep */; "56-20": unknown /* too deep */; "56-30": unknown /* too deep */; "56-40": unknown /* too deep */; "56-80": unknown /* too deep */; "57-16": unknown /* too deep */; "57-20": unknown /* too deep */; "57-30": unknown /* too deep */; "57-40": unknown /* too deep */; "57-80": unknown /* too deep */; "58-16": unknown /* too deep */; "58-20": unknown /* too deep */; "58-30": unknown /* too deep */; "58-40": unknown /* too deep */; "58-80": unknown /* too deep */; "59-16": unknown /* too deep */; "59-20": unknown /* too deep */; "59-30": unknown /* too deep */; "59-40": unknown /* too deep */; "59-80": unknown /* too deep */; "60-16": unknown /* too deep */; "60-20": unknown /* too deep */; "60-30": unknown /* too deep */; "60-40": unknown /* too deep */; "60-80": unknown /* too deep */; "61-16": unknown /* too deep */; "61-20": unknown /* too deep */; "61-30": unknown /* too deep */; "61-40": unknown /* too deep */; "61-80": unknown /* too deep */; "62-16": unknown /* too deep */; "62-20": unknown /* too deep */; "62-30": unknown /* too deep */; "62-40": unknown /* too deep */; "62-80": unknown /* too deep */; "63-16": unknown /* too deep */; "63-20": unknown /* too deep */; "63-30": unknown /* too deep */; "63-40": unknown /* too deep */; "63-80": unknown /* too deep */; "64-16": unknown /* too deep */; "64-20": unknown /* too deep */; "64-30": unknown /* too deep */; "64-40": unknown /* too deep */; "64-80": unknown /* too deep */; "65-16": unknown /* too deep */; "65-20": unknown /* too deep */; "65-30": unknown /* too deep */; "65-40": unknown /* too deep */; "65-80": unknown /* too deep */; "66-16": unknown /* too deep */; "66-20": unknown /* too deep */; "66-30": unknown /* too deep */; "66-40": unknown /* too deep */; "66-80": unknown /* too deep */; "67-16": unknown /* too deep */; "67-20": unknown /* too deep */; "67-30": unknown /* too deep */; "67-40": unknown /* too deep */; "67-80": unknown /* too deep */; "68-16": unknown /* too deep */; "68-20": unknown /* too deep */; "68-30": unknown /* too deep */; "68-40": unknown /* too deep */; "68-80": unknown /* too deep */; "69-16": unknown /* too deep */; "69-20": unknown /* too deep */; "69-30": unknown /* too deep */; "69-40": unknown /* too deep */; "69-80": unknown /* too deep */; "70-16": unknown /* too deep */; "70-20": unknown /* too deep */; "70-30": unknown /* too deep */; "70-40": unknown /* too deep */; "70-80": unknown /* too deep */; "71-16": unknown /* too deep */; "71-20": unknown /* too deep */; "71-30": unknown /* too deep */; "71-40": unknown /* too deep */; "71-80": unknown /* too deep */; "72-16": unknown /* too deep */; "72-20": unknown /* too deep */; "72-30": unknown /* too deep */; "72-40": unknown /* too deep */; "72-80": unknown /* too deep */; "73-16": unknown /* too deep */; "73-20": unknown /* too deep */; "73-30": unknown /* too deep */; "73-40": unknown /* too deep */; "73-80": unknown /* too deep */; "74-16": unknown /* too deep */; "74-20": unknown /* too deep */; "74-30": unknown /* too deep */; "74-40": unknown /* too deep */; "74-80": unknown /* too deep */; "75-16": unknown /* too deep */; "75-20": unknown /* too deep */; "75-30": unknown /* too deep */; "75-40": unknown /* too deep */; "75-80": unknown /* too deep */; "76-16": unknown /* too deep */; "76-20": unknown /* too deep */; "76-30": unknown /* too deep */; "76-40": unknown /* too deep */; "76-80": unknown /* too deep */; "77-16": unknown /* too deep */; "77-20": unknown /* too deep */; "77-30": unknown /* too deep */; "77-40": unknown /* too deep */; "77-80": unknown /* too deep */; "78-16": unknown /* too deep */; "78-20": unknown /* too deep */; "78-30": unknown /* too deep */; "78-40": unknown /* too deep */; "78-80": unknown /* too deep */; "79-16": unknown /* too deep */; "79-20": unknown /* too deep */; "79-30": unknown /* too deep */; "79-40": unknown /* too deep */; "79-80": unknown /* too deep */; "80-16": unknown /* too deep */; "80-20": unknown /* too deep */; "80-30": unknown /* too deep */; "80-40": unknown /* too deep */; "80-80": unknown /* too deep */; "81-16": unknown /* too deep */; "81-20": unknown /* too deep */; "81-30": unknown /* too deep */; "81-40": unknown /* too deep */; "81-80": unknown /* too deep */; "82-16": unknown /* too deep */; "82-20": unknown /* too deep */; "82-30": unknown /* too deep */; "82-40": unknown /* too deep */; "82-80": unknown /* too deep */; "83-16": unknown /* too deep */; "83-20": unknown /* too deep */; "83-30": unknown /* too deep */; "83-40": unknown /* too deep */; "83-80": unknown /* too deep */; "84-16": unknown /* too deep */; "84-20": unknown /* too deep */; "84-30": unknown /* too deep */; "84-40": unknown /* too deep */; "84-80": unknown /* too deep */; "85-16": unknown /* too deep */; "85-20": unknown /* too deep */; "85-30": unknown /* too deep */; "85-40": unknown /* too deep */; "85-80": unknown /* too deep */; "86-16": unknown /* too deep */; "86-20": unknown /* too deep */; "86-30": unknown /* too deep */; "86-40": unknown /* too deep */; "86-80": unknown /* too deep */; "87-16": unknown /* too deep */; "87-20": unknown /* too deep */; "87-30": unknown /* too deep */; "87-40": unknown /* too deep */; "87-80": unknown /* too deep */; "88-16": unknown /* too deep */; "88-20": unknown /* too deep */; "88-30": unknown /* too deep */; "88-40": unknown /* too deep */; "88-80": unknown /* too deep */; "89-16": unknown /* too deep */; "89-20": unknown /* too deep */; "89-30": unknown /* too deep */; "89-40": unknown /* too deep */; "89-80": unknown /* too deep */; "90-16": unknown /* too deep */; "90-20": unknown /* too deep */; "90-30": unknown /* too deep */; "90-40": unknown /* too deep */; "90-80": unknown /* too deep */; "91-16": unknown /* too deep */; "91-20": unknown /* too deep */; "91-30": unknown /* too deep */; "91-40": unknown /* too deep */; "91-80": unknown /* too deep */; "92-16": unknown /* too deep */; "92-20": unknown /* too deep */; "92-30": unknown /* too deep */; "92-40": unknown /* too deep */; "92-80": unknown /* too deep */; "93-16": unknown /* too deep */; "93-20": unknown /* too deep */; "93-30": unknown /* too deep */; "93-40": unknown /* too deep */; "93-80": unknown /* too deep */; "94-16": unknown /* too deep */; "94-20": unknown /* too deep */; "94-30": unknown /* too deep */; "94-40": unknown /* too deep */; "94-80": unknown /* too deep */; "95-16": unknown /* too deep */; "95-20": unknown /* too deep */; "95-30": unknown /* too deep */; "95-40": unknown /* too deep */; "95-80": unknown /* too deep */; "96-16": unknown /* too deep */; "96-20": unknown /* too deep */; "96-30": unknown /* too deep */; "96-40": unknown /* too deep */; "96-80": unknown /* too deep */; "97-16": unknown /* too deep */; "97-20": unknown /* too deep */; "97-30": unknown /* too deep */; "97-40": unknown /* too deep */; "97-80": unknown /* too deep */; "98-16": unknown /* too deep */; "98-20": unknown /* too deep */; "98-30": unknown /* too deep */; "98-40": unknown /* too deep */; "98-80": unknown /* too deep */; "99-16": unknown /* too deep */; "99-20": unknown /* too deep */; "99-30": unknown /* too deep */; "99-40": unknown /* too deep */; "99-80": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "chest-A-1": unknown /* too deep */; "chest-A-2": unknown /* too deep */; "chest-B-1": unknown /* too deep */; "chest-B-2": unknown /* too deep */; "chest-C-1": unknown /* too deep */; "chest-C-2": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { leftArm_0: unknown /* too deep */; legs_0: unknown /* too deep */; legs_1: unknown /* too deep */; legs_2: unknown /* too deep */; legs_3: unknown /* too deep */; legs_4: unknown /* too deep */; outfit: unknown /* too deep */; rightArm_0: unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; })> | Map<string, { _destroyed: boolean; destroyed: boolean; imageKey: string; key: string; destroy(): void; frameData: { _destroyed: boolean; destroyed: boolean; total: number; addFrame(t: unknown): unknown; checkFrameName(t: unknown): unknown; clone(): unknown; destroy(): void; getFrame(t: unknown): unknown; getFrameByName(t: unknown): unknown; getFrameIndexes(t: unknown, i: unknown, n: unknown): unknown; getFrameRange(t: unknown, i: unknown, n: unknown): unknown; getFrames(t: unknown, i: unknown, n: unknown): unknown; _frameNames: unknown /* too deep */; _frames: unknown /* too deep */; }; game: Instance["_game"]; }> | Map<never, never> | Map<string, { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; game: Instance["_game"]; sound: { _destroyed: boolean; autoPlay: boolean; isDecoding: boolean; isDestroyed: boolean; isLoaded: boolean; isPlayable: boolean; isPlaying: boolean; loop: boolean; preload: boolean; singleInstance: boolean; usingAudioTag: boolean; duration: number; speed: number; volume: number; key: string; url: string; filters: undefined; mute: undefined; muted: undefined; paused: undefined; addMarker(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown; addSprites(t: unknown, i: unknown): unknown; autoPlayStart(): unknown; destroy(): void; pause(): unknown; play(t: unknown, i: unknown): unknown; playMarker(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown, o: unknown): unknown; playWithOptions(t: unknown): unknown; refresh(): void; refreshPaused(): void; removeMarker(t: unknown): unknown; removeSprites(t: unknown): unknown; resume(): unknown; stop(): unknown; _onComplete: unknown /* too deep */; _onPause: unknown /* too deep */; _onPlay: unknown /* too deep */; _onResume: unknown /* too deep */; _onStop: unknown /* too deep */; context: unknown /* too deep */; game: Instance["_game"]; instances: unknown /* too deep */; media: unknown /* too deep */; onComplete: unknown /* too deep */; onPause: unknown /* too deep */; onPlay: unknown /* too deep */; onResume: unknown /* too deep */; onStop: unknown /* too deep */; options: unknown /* too deep */; sound: unknown /* too deep */; sprites: unknown /* too deep */; }; }>)>;
			cacheMap: Map<number, (Map<string, ({ _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "area-pointer": unknown /* too deep */; "arrow-btn-back": unknown /* too deep */; "arrow-btn-next": unknown /* too deep */; "award-corner": unknown /* too deep */; "award-corner2": unknown /* too deep */; "award-corner3": unknown /* too deep */; "award-corner4": unknown /* too deep */; "award-frame": unknown /* too deep */; "award-mid": unknown /* too deep */; "award-ribbon": unknown /* too deep */; "award-side": unknown /* too deep */; "award-side2": unknown /* too deep */; "award-top": unknown /* too deep */; "award-top2": unknown /* too deep */; "backgroundwood-corner": unknown /* too deep */; "backgroundwood-corner2": unknown /* too deep */; "backgroundwood-corner3": unknown /* too deep */; "backgroundwood-corner4": unknown /* too deep */; "backgroundwood-mid": unknown /* too deep */; "backgroundwood-side": unknown /* too deep */; "backgroundwood-side2": unknown /* too deep */; "backgroundwood-top": unknown /* too deep */; "backgroundwood-top2": unknown /* too deep */; "banner-corner": unknown /* too deep */; "banner-corner2": unknown /* too deep */; "banner-corner3": unknown /* too deep */; "banner-corner4": unknown /* too deep */; "banner-mid": unknown /* too deep */; "banner-side": unknown /* too deep */; "banner-side2": unknown /* too deep */; "banner-top": unknown /* too deep */; "banner-top2": unknown /* too deep */; "bar-corner": unknown /* too deep */; "bar-corner2": unknown /* too deep */; "bar-fill": unknown /* too deep */; "bar-top": unknown /* too deep */; "bg-tile-brown": unknown /* too deep */; "bg-tile-white": unknown /* too deep */; "blue-corner": unknown /* too deep */; "blue-corner2": unknown /* too deep */; "blue-corner3": unknown /* too deep */; "blue-corner4": unknown /* too deep */; "blue-mid": unknown /* too deep */; "blue-side": unknown /* too deep */; "blue-side2": unknown /* too deep */; "blue-top": unknown /* too deep */; "blue-top2": unknown /* too deep */; "board-corner": unknown /* too deep */; "board-corner2": unknown /* too deep */; "board-panel-corner": unknown /* too deep */; "board-panel-corner2": unknown /* too deep */; "board-panel-corner3": unknown /* too deep */; "board-panel-corner4": unknown /* too deep */; "board-panel-mid": unknown /* too deep */; "board-panel-side": unknown /* too deep */; "board-panel-side2": unknown /* too deep */; "board-panel-top": unknown /* too deep */; "board-panel-top2": unknown /* too deep */; "board-top": unknown /* too deep */; "bounty-runner": unknown /* too deep */; "btn-core": unknown /* too deep */; "btn-grade": unknown /* too deep */; "btn-lg": unknown /* too deep */; "btn-med": unknown /* too deep */; "btn-med-confirm": unknown /* too deep */; "btn-mini": unknown /* too deep */; "btn-small": unknown /* too deep */; "btn-tall": unknown /* too deep */; "btn-tiny": unknown /* too deep */; "btn-white": unknown /* too deep */; "button-corner": unknown /* too deep */; "button-corner2": unknown /* too deep */; "button-corner3": unknown /* too deep */; "button-corner4": unknown /* too deep */; "button-mid": unknown /* too deep */; "button-side": unknown /* too deep */; "button-side2": unknown /* too deep */; "button-top": unknown /* too deep */; "button-top2": unknown /* too deep */; "card-bot-corner": unknown /* too deep */; "card-bot-corner2": unknown /* too deep */; "card-bot-corner3": unknown /* too deep */; "card-bot-corner4": unknown /* too deep */; "card-bot-mid": unknown /* too deep */; "card-bot-side": unknown /* too deep */; "card-bot-side2": unknown /* too deep */; "card-bot-top": unknown /* too deep */; "card-bot-top2": unknown /* too deep */; "card-corner": unknown /* too deep */; "card-corner2": unknown /* too deep */; "card-corner3": unknown /* too deep */; "card-corner4": unknown /* too deep */; "card-mid": unknown /* too deep */; "card-side": unknown /* too deep */; "card-side2": unknown /* too deep */; "card-top": unknown /* too deep */; "card-top-corner": unknown /* too deep */; "card-top-corner2": unknown /* too deep */; "card-top-corner3": unknown /* too deep */; "card-top-corner4": unknown /* too deep */; "card-top-top": unknown /* too deep */; "card-top-top2": unknown /* too deep */; "card-top2": unknown /* too deep */; "dark-corner": unknown /* too deep */; "dark-corner2": unknown /* too deep */; "dark-corner3": unknown /* too deep */; "dark-corner4": unknown /* too deep */; "dark-mid": unknown /* too deep */; "dark-side": unknown /* too deep */; "dark-side2": unknown /* too deep */; "dark-top": unknown /* too deep */; "dark-top2": unknown /* too deep */; dialogue: unknown /* too deep */; "emblem-bar": unknown /* too deep */; empty: unknown /* too deep */; "empty-bar": unknown /* too deep */; "empty-corner": unknown /* too deep */; "empty-corner2": unknown /* too deep */; "empty-corner3": unknown /* too deep */; "empty-corner4": unknown /* too deep */; "empty-icon": unknown /* too deep */; "empty-mid": unknown /* too deep */; "empty-side": unknown /* too deep */; "empty-side2": unknown /* too deep */; "empty-top": unknown /* too deep */; "empty-top2": unknown /* too deep */; "HUD-end": unknown /* too deep */; "HUD-mid": unknown /* too deep */; "icon-attackrange-off": unknown /* too deep */; "icon-attackrange-on": unknown /* too deep */; "icon-loading": unknown /* too deep */; "icon-lock-mini": unknown /* too deep */; "item-common-corner": unknown /* too deep */; "item-common-corner2": unknown /* too deep */; "item-common-corner3": unknown /* too deep */; "item-common-corner4": unknown /* too deep */; "item-common-mid": unknown /* too deep */; "item-common-side": unknown /* too deep */; "item-common-side2": unknown /* too deep */; "item-common-top": unknown /* too deep */; "item-common-top2": unknown /* too deep */; "item-currency-corner": unknown /* too deep */; "item-currency-corner2": unknown /* too deep */; "item-currency-corner3": unknown /* too deep */; "item-currency-corner4": unknown /* too deep */; "item-currency-mid": unknown /* too deep */; "item-currency-side": unknown /* too deep */; "item-currency-side2": unknown /* too deep */; "item-currency-top": unknown /* too deep */; "item-currency-top2": unknown /* too deep */; "item-dorm-corner": unknown /* too deep */; "item-dorm-corner2": unknown /* too deep */; "item-dorm-corner3": unknown /* too deep */; "item-dorm-corner4": unknown /* too deep */; "item-dorm-mid": unknown /* too deep */; "item-dorm-side": unknown /* too deep */; "item-dorm-side2": unknown /* too deep */; "item-dorm-top": unknown /* too deep */; "item-dorm-top2": unknown /* too deep */; "item-epic-corner": unknown /* too deep */; "item-epic-corner2": unknown /* too deep */; "item-epic-corner3": unknown /* too deep */; "item-epic-corner4": unknown /* too deep */; "item-epic-mid": unknown /* too deep */; "item-epic-side": unknown /* too deep */; "item-epic-side2": unknown /* too deep */; "item-epic-top": unknown /* too deep */; "item-epic-top2": unknown /* too deep */; "item-item-corner": unknown /* too deep */; "item-item-corner2": unknown /* too deep */; "item-item-corner3": unknown /* too deep */; "item-item-corner4": unknown /* too deep */; "item-item-mid": unknown /* too deep */; "item-item-side": unknown /* too deep */; "item-item-side2": unknown /* too deep */; "item-item-top": unknown /* too deep */; "item-item-top2": unknown /* too deep */; "item-legend-corner": unknown /* too deep */; "item-legend-corner2": unknown /* too deep */; "item-legend-corner3": unknown /* too deep */; "item-legend-corner4": unknown /* too deep */; "item-legend-mid": unknown /* too deep */; "item-legend-side": unknown /* too deep */; "item-legend-side2": unknown /* too deep */; "item-legend-top": unknown /* too deep */; "item-legend-top2": unknown /* too deep */; "item-pet-corner": unknown /* too deep */; "item-pet-corner2": unknown /* too deep */; "item-pet-corner3": unknown /* too deep */; "item-pet-corner4": unknown /* too deep */; "item-pet-mid": unknown /* too deep */; "item-pet-side": unknown /* too deep */; "item-pet-side2": unknown /* too deep */; "item-pet-top": unknown /* too deep */; "item-pet-top2": unknown /* too deep */; "item-rare-corner": unknown /* too deep */; "item-rare-corner2": unknown /* too deep */; "item-rare-corner3": unknown /* too deep */; "item-rare-corner4": unknown /* too deep */; "item-rare-mid": unknown /* too deep */; "item-rare-side": unknown /* too deep */; "item-rare-side2": unknown /* too deep */; "item-rare-top": unknown /* too deep */; "item-rare-top2": unknown /* too deep */; "item-spell-corner": unknown /* too deep */; "item-spell-corner2": unknown /* too deep */; "item-spell-corner3": unknown /* too deep */; "item-spell-corner4": unknown /* too deep */; "item-spell-mid": unknown /* too deep */; "item-spell-side": unknown /* too deep */; "item-spell-side2": unknown /* too deep */; "item-spell-top": unknown /* too deep */; "item-spell-top2": unknown /* too deep */; "item-uncommon-corner": unknown /* too deep */; "item-uncommon-corner2": unknown /* too deep */; "item-uncommon-corner3": unknown /* too deep */; "item-uncommon-corner4": unknown /* too deep */; "item-uncommon-mid": unknown /* too deep */; "item-uncommon-side": unknown /* too deep */; "item-uncommon-side2": unknown /* too deep */; "item-uncommon-top": unknown /* too deep */; "item-uncommon-top2": unknown /* too deep */; lantern: unknown /* too deep */; "lb-corner": unknown /* too deep */; "lb-corner2": unknown /* too deep */; "lb-green-corner": unknown /* too deep */; "lb-green-corner2": unknown /* too deep */; "lb-green-top": unknown /* too deep */; "lb-top": unknown /* too deep */; "light-corner": unknown /* too deep */; "light-corner2": unknown /* too deep */; "light-corner3": unknown /* too deep */; "light-corner4": unknown /* too deep */; "light-mid": unknown /* too deep */; "light-side": unknown /* too deep */; "light-side2": unknown /* too deep */; "light-top": unknown /* too deep */; "light-top2": unknown /* too deep */; load: unknown /* too deep */; loading: unknown /* too deep */; "mail-corner": unknown /* too deep */; "mail-corner2": unknown /* too deep */; "mail-corner3": unknown /* too deep */; "mail-corner4": unknown /* too deep */; "mail-mid": unknown /* too deep */; "mail-side": unknown /* too deep */; "mail-side2": unknown /* too deep */; "mail-top": unknown /* too deep */; "mail-top2": unknown /* too deep */; "member-corner": unknown /* too deep */; "member-corner2": unknown /* too deep */; "member-corner3": unknown /* too deep */; "member-corner4": unknown /* too deep */; "member-icon": unknown /* too deep */; "member-mid": unknown /* too deep */; "member-side": unknown /* too deep */; "member-side2": unknown /* too deep */; "member-top": unknown /* too deep */; "member-top2": unknown /* too deep */; "no-btn": unknown /* too deep */; "orange-corner": unknown /* too deep */; "orange-corner2": unknown /* too deep */; "orange-corner3": unknown /* too deep */; "orange-corner4": unknown /* too deep */; "orange-mid": unknown /* too deep */; "orange-side": unknown /* too deep */; "orange-side2": unknown /* too deep */; "orange-top": unknown /* too deep */; "orange-top2": unknown /* too deep */; "overlay-light": unknown /* too deep */; "overlay-small": unknown /* too deep */; "panel-corner": unknown /* too deep */; "panel-corner2": unknown /* too deep */; "panel-corner3": unknown /* too deep */; "panel-corner4": unknown /* too deep */; "panel-light-corner": unknown /* too deep */; "panel-light-corner2": unknown /* too deep */; "panel-light-corner3": unknown /* too deep */; "panel-light-corner4": unknown /* too deep */; "panel-light-mid": unknown /* too deep */; "panel-light-side": unknown /* too deep */; "panel-light-side2": unknown /* too deep */; "panel-light-top": unknown /* too deep */; "panel-light-top2": unknown /* too deep */; "panel-mid": unknown /* too deep */; "panel-pointer": unknown /* too deep */; "panel-side": unknown /* too deep */; "panel-side2": unknown /* too deep */; "panel-top": unknown /* too deep */; "panel-top2": unknown /* too deep */; "paper-bottom": unknown /* too deep */; "paper-bottomLeft": unknown /* too deep */; "paper-bottomRight": unknown /* too deep */; "paper-corner": unknown /* too deep */; "paper-corner2": unknown /* too deep */; "paper-corner3": unknown /* too deep */; "paper-corner4": unknown /* too deep */; "paper-left": unknown /* too deep */; "paper-mid": unknown /* too deep */; "paper-middle": unknown /* too deep */; "paper-right": unknown /* too deep */; "paper-side": unknown /* too deep */; "paper-side2": unknown /* too deep */; "paper-top": unknown /* too deep */; "paper-top2": unknown /* too deep */; "paper-topLeft": unknown /* too deep */; "paper-topRight": unknown /* too deep */; ribbon: unknown /* too deep */; "server-icon": unknown /* too deep */; "shine-corner": unknown /* too deep */; "shine-corner2": unknown /* too deep */; "shine-corner3": unknown /* too deep */; "shine-corner4": unknown /* too deep */; "shine-mid": unknown /* too deep */; "shine-side": unknown /* too deep */; "shine-side2": unknown /* too deep */; "shine-top": unknown /* too deep */; "shine-top2": unknown /* too deep */; "shine2-corner": unknown /* too deep */; "shine2-corner2": unknown /* too deep */; "shine2-corner3": unknown /* too deep */; "shine2-corner4": unknown /* too deep */; "shine2-mid": unknown /* too deep */; "shine2-side": unknown /* too deep */; "shine2-side2": unknown /* too deep */; "shine2-top": unknown /* too deep */; "shine2-top2": unknown /* too deep */; slider: unknown /* too deep */; "sparkle-yellow-1": unknown /* too deep */; "sparkle-yellow-2": unknown /* too deep */; "sparkle-yellow-3": unknown /* too deep */; "star-empty": unknown /* too deep */; "star-full": unknown /* too deep */; "stat-corner": unknown /* too deep */; "stat-corner2": unknown /* too deep */; "stat-corner3": unknown /* too deep */; "stat-corner4": unknown /* too deep */; "stat-mid": unknown /* too deep */; "stat-side": unknown /* too deep */; "stat-side2": unknown /* too deep */; "stat-top": unknown /* too deep */; "stat-top2": unknown /* too deep */; tooltip: unknown /* too deep */; "white-corner": unknown /* too deep */; "white-corner2": unknown /* too deep */; "white-corner3": unknown /* too deep */; "white-corner4": unknown /* too deep */; "white-icon": unknown /* too deep */; "white-mid": unknown /* too deep */; "white-side": unknown /* too deep */; "white-side2": unknown /* too deep */; "white-top": unknown /* too deep */; "white-top2": unknown /* too deep */; "xp-bar": unknown /* too deep */; "yes-btn": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "bar-fill": unknown /* too deep */; "bar-top": unknown /* too deep */; "beam-mid": unknown /* too deep */; "bg-tile-brown": unknown /* too deep */; "blue-mid": unknown /* too deep */; "blue-side": unknown /* too deep */; "blue-side2": unknown /* too deep */; "blue-top": unknown /* too deep */; "blue-top2": unknown /* too deep */; "bounty-runner": unknown /* too deep */; dialogue: unknown /* too deep */; "emblem-bar": unknown /* too deep */; "fillbar-yellow": unknown /* too deep */; load: unknown /* too deep */; "orange-mid": unknown /* too deep */; "orange-top": unknown /* too deep */; "orange-top2": unknown /* too deep */; "overlay-light": unknown /* too deep */; "overlay-small": unknown /* too deep */; "panel-mid": unknown /* too deep */; "panel-side": unknown /* too deep */; "panel-side2": unknown /* too deep */; "panel-top": unknown /* too deep */; "panel-top2": unknown /* too deep */; "pvp-top": unknown /* too deep */; "pvp-top2": unknown /* too deep */; "shine2-mid": unknown /* too deep */; slider: unknown /* too deep */; "water-rain": unknown /* too deep */; "xp-bar": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "banners/banner-red-left": unknown /* too deep */; "banners/banner-red-middle": unknown /* too deep */; "banners/banner-red-right": unknown /* too deep */; "banners/red-bottomLeft": unknown /* too deep */; "banners/red-bottomRight": unknown /* too deep */; "banners/red-left": unknown /* too deep */; "banners/red-middle": unknown /* too deep */; "banners/red-right": unknown /* too deep */; "banners/rope-horiz-left": unknown /* too deep */; "banners/rope-horiz-middle": unknown /* too deep */; "banners/rope-horiz-right": unknown /* too deep */; "banners/rope-vert-left": unknown /* too deep */; "banners/rope-vert-middle": unknown /* too deep */; "banners/rope-vert-right": unknown /* too deep */; "banners/stars-topleft": unknown /* too deep */; "banners/stars-topright": unknown /* too deep */; "banners/tag-left": unknown /* too deep */; "banners/tag-middle": unknown /* too deep */; "banners/tag-right": unknown /* too deep */; "banners/title-banner-left": unknown /* too deep */; "banners/title-banner-middle": unknown /* too deep */; "banners/title-banner-right": unknown /* too deep */; "bases/background-bottom": unknown /* too deep */; "bases/background-bottomLeft": unknown /* too deep */; "bases/background-bottomRight": unknown /* too deep */; "bases/background-left": unknown /* too deep */; "bases/background-middle": unknown /* too deep */; "bases/background-right": unknown /* too deep */; "bases/background-top": unknown /* too deep */; "bases/background-topLeft": unknown /* too deep */; "bases/background-topRight": unknown /* too deep */; "bases/backgroundwood-bottom": unknown /* too deep */; "bases/backgroundwood-bottomLeft": unknown /* too deep */; "bases/backgroundwood-bottomRight": unknown /* too deep */; "bases/backgroundwood-left": unknown /* too deep */; "bases/backgroundwood-middle": unknown /* too deep */; "bases/backgroundwood-right": unknown /* too deep */; "bases/backgroundwood-top": unknown /* too deep */; "bases/backgroundwood-topLeft": unknown /* too deep */; "bases/backgroundwood-topRight": unknown /* too deep */; "bases/beige-bottom": unknown /* too deep */; "bases/beige-bottomLeft": unknown /* too deep */; "bases/beige-bottomRight": unknown /* too deep */; "bases/beige-left": unknown /* too deep */; "bases/beige-middle": unknown /* too deep */; "bases/beige-right": unknown /* too deep */; "bases/beige-top": unknown /* too deep */; "bases/beige-topLeft": unknown /* too deep */; "bases/beige-topRight": unknown /* too deep */; "bases/blue-bottom": unknown /* too deep */; "bases/blue-bottomLeft": unknown /* too deep */; "bases/blue-bottomRight": unknown /* too deep */; "bases/blue-left": unknown /* too deep */; "bases/blue-middle": unknown /* too deep */; "bases/blue-right": unknown /* too deep */; "bases/blue-top": unknown /* too deep */; "bases/blue-topLeft": unknown /* too deep */; "bases/blue-topRight": unknown /* too deep */; "bases/darker-matte-bottom": unknown /* too deep */; "bases/darker-matte-bottomLeft": unknown /* too deep */; "bases/darker-matte-bottomRight": unknown /* too deep */; "bases/darker-matte-left": unknown /* too deep */; "bases/darker-matte-middle": unknown /* too deep */; "bases/darker-matte-right": unknown /* too deep */; "bases/darker-matte-top": unknown /* too deep */; "bases/darker-matte-topLeft": unknown /* too deep */; "bases/darker-matte-topRight": unknown /* too deep */; "bases/gold-background-bottom": unknown /* too deep */; "bases/gold-background-bottomLeft": unknown /* too deep */; "bases/gold-background-bottomRight": unknown /* too deep */; "bases/gold-background-left": unknown /* too deep */; "bases/gold-background-middle": unknown /* too deep */; "bases/gold-background-right": unknown /* too deep */; "bases/gold-background-top": unknown /* too deep */; "bases/gold-background-topLeft": unknown /* too deep */; "bases/gold-background-topRight": unknown /* too deep */; "bases/gold-matte-bottom": unknown /* too deep */; "bases/gold-matte-bottomLeft": unknown /* too deep */; "bases/gold-matte-bottomRight": unknown /* too deep */; "bases/gold-matte-left": unknown /* too deep */; "bases/gold-matte-middle": unknown /* too deep */; "bases/gold-matte-right": unknown /* too deep */; "bases/gold-matte-top": unknown /* too deep */; "bases/gold-matte-topLeft": unknown /* too deep */; "bases/gold-matte-topRight": unknown /* too deep */; "bases/matte-bottom": unknown /* too deep */; "bases/matte-bottomLeft": unknown /* too deep */; "bases/matte-bottomRight": unknown /* too deep */; "bases/matte-left": unknown /* too deep */; "bases/matte-middle": unknown /* too deep */; "bases/matte-right": unknown /* too deep */; "bases/matte-top": unknown /* too deep */; "bases/matte-topLeft": unknown /* too deep */; "bases/matte-topRight": unknown /* too deep */; "bases/member-mail-icon": unknown /* too deep */; "bases/member-matte-bottom": unknown /* too deep */; "bases/member-matte-bottomLeft": unknown /* too deep */; "bases/member-matte-bottomRight": unknown /* too deep */; "bases/member-matte-left": unknown /* too deep */; "bases/member-matte-middle": unknown /* too deep */; "bases/member-matte-right": unknown /* too deep */; "bases/member-matte-top": unknown /* too deep */; "bases/member-matte-topLeft": unknown /* too deep */; "bases/member-matte-topRight": unknown /* too deep */; "bases/pm-backgroundwood-bottom": unknown /* too deep */; "bases/pm-backgroundwood-bottomLeft": unknown /* too deep */; "bases/pm-backgroundwood-bottomRight": unknown /* too deep */; "bases/pm-backgroundwood-left": unknown /* too deep */; "bases/pm-backgroundwood-middle": unknown /* too deep */; "bases/pm-backgroundwood-right": unknown /* too deep */; "bases/pm-backgroundwood-top": unknown /* too deep */; "bases/pm-backgroundwood-topLeft": unknown /* too deep */; "bases/pm-backgroundwood-topRight": unknown /* too deep */; "bases/small-white-tag-left": unknown /* too deep */; "bases/small-white-tag-middle": unknown /* too deep */; "bases/small-white-tag-right": unknown /* too deep */; "bases/tile-bg-bottom": unknown /* too deep */; "bases/tile-bg-bottomLeft": unknown /* too deep */; "bases/tile-bg-bottomRight": unknown /* too deep */; "bases/tile-bg-left": unknown /* too deep */; "bases/tile-bg-middle": unknown /* too deep */; "bases/tile-bg-right": unknown /* too deep */; "bases/tile-bg-top": unknown /* too deep */; "bases/tile-bg-topLeft": unknown /* too deep */; "bases/tile-bg-topRight": unknown /* too deep */; "bases/white-bg-bar-bottom": unknown /* too deep */; "bases/white-bg-bar-bottomLeft": unknown /* too deep */; "bases/white-bg-bar-bottomRight": unknown /* too deep */; "bases/white-bg-bar-left": unknown /* too deep */; "bases/white-bg-bar-middle": unknown /* too deep */; "bases/white-bg-bar-right": unknown /* too deep */; "bases/white-bg-bar-top": unknown /* too deep */; "bases/white-bg-bar-topLeft": unknown /* too deep */; "bases/white-bg-bar-topRight": unknown /* too deep */; "bases/wood-bottom": unknown /* too deep */; "bases/wood-bottom-alt": unknown /* too deep */; "bases/wood-bottom-notch": unknown /* too deep */; "bases/wood-bottomLeft": unknown /* too deep */; "bases/wood-bottomRight": unknown /* too deep */; "bases/wood-left": unknown /* too deep */; "bases/wood-left-alt": unknown /* too deep */; "bases/wood-left-notch": unknown /* too deep */; "bases/wood-middle": unknown /* too deep */; "bases/wood-middle-alt": unknown /* too deep */; "bases/wood-middle-alt2": unknown /* too deep */; "bases/wood-middle-alt3": unknown /* too deep */; "bases/wood-right": unknown /* too deep */; "bases/wood-right-alt": unknown /* too deep */; "bases/wood-right-notch": unknown /* too deep */; "bases/wood-top": unknown /* too deep */; "bases/wood-top-alt": unknown /* too deep */; "bases/wood-top-notch": unknown /* too deep */; "bases/wood-topLeft": unknown /* too deep */; "bases/wood-topRight": unknown /* too deep */; "buttons/arrow-right": unknown /* too deep */; "buttons/blue-arrow-left": unknown /* too deep */; "buttons/blue-arrow-right": unknown /* too deep */; "buttons/blue-left": unknown /* too deep */; "buttons/blue-middle": unknown /* too deep */; "buttons/blue-right": unknown /* too deep */; "buttons/blueround-left": unknown /* too deep */; "buttons/blueround-middle": unknown /* too deep */; "buttons/blueround-right": unknown /* too deep */; "buttons/bluerounddown-left": unknown /* too deep */; "buttons/bluerounddown-middle": unknown /* too deep */; "buttons/bluerounddown-right": unknown /* too deep */; "buttons/close": unknown /* too deep */; "buttons/close-small": unknown /* too deep */; "buttons/green-left": unknown /* too deep */; "buttons/green-middle": unknown /* too deep */; "buttons/green-right": unknown /* too deep */; "buttons/greenround-left": unknown /* too deep */; "buttons/greenround-middle": unknown /* too deep */; "buttons/greenround-right": unknown /* too deep */; "buttons/greenrounddown-left": unknown /* too deep */; "buttons/greenrounddown-middle": unknown /* too deep */; "buttons/greenrounddown-right": unknown /* too deep */; "buttons/greyround-left": unknown /* too deep */; "buttons/greyround-middle": unknown /* too deep */; "buttons/greyround-right": unknown /* too deep */; "buttons/greyrounddown-left": unknown /* too deep */; "buttons/greyrounddown-middle": unknown /* too deep */; "buttons/greyrounddown-right": unknown /* too deep */; "buttons/icon-medium-account-grey": unknown /* too deep */; "buttons/icon-medium-account-white": unknown /* too deep */; "buttons/icon-medium-settings-grey": unknown /* too deep */; "buttons/icon-medium-settings-white": unknown /* too deep */; "buttons/icon-medium-world-grey": unknown /* too deep */; "buttons/icon-medium-world-white": unknown /* too deep */; "buttons/icon-mini-fullscreen": unknown /* too deep */; "buttons/icon-mini-minimize": unknown /* too deep */; "buttons/leaderboard-level-star": unknown /* too deep */; "buttons/member-icon": unknown /* too deep */; "buttons/mount-toggle-off": unknown /* too deep */; "buttons/mount-toggle-on": unknown /* too deep */; "buttons/notificationbox-blue-bottom": unknown /* too deep */; "buttons/notificationbox-blue-bottomLeft": unknown /* too deep */; "buttons/notificationbox-blue-bottomRight": unknown /* too deep */; "buttons/notificationbox-blue-left": unknown /* too deep */; "buttons/notificationbox-blue-middle": unknown /* too deep */; "buttons/notificationbox-blue-right": unknown /* too deep */; "buttons/notificationbox-blue-top": unknown /* too deep */; "buttons/notificationbox-blue-topLeft": unknown /* too deep */; "buttons/notificationbox-blue-topRight": unknown /* too deep */; "buttons/notificationbox-gray-bottom": unknown /* too deep */; "buttons/notificationbox-gray-bottomLeft": unknown /* too deep */; "buttons/notificationbox-gray-bottomRight": unknown /* too deep */; "buttons/notificationbox-gray-left": unknown /* too deep */; "buttons/notificationbox-gray-middle": unknown /* too deep */; "buttons/notificationbox-gray-right": unknown /* too deep */; "buttons/notificationbox-gray-top": unknown /* too deep */; "buttons/notificationbox-gray-topLeft": unknown /* too deep */; "buttons/notificationbox-gray-topRight": unknown /* too deep */; "buttons/notificationbox-green-bottom": unknown /* too deep */; "buttons/notificationbox-green-bottomLeft": unknown /* too deep */; "buttons/notificationbox-green-bottomRight": unknown /* too deep */; "buttons/notificationbox-green-left": unknown /* too deep */; "buttons/notificationbox-green-middle": unknown /* too deep */; "buttons/notificationbox-green-right": unknown /* too deep */; "buttons/notificationbox-green-top": unknown /* too deep */; "buttons/notificationbox-green-topLeft": unknown /* too deep */; "buttons/notificationbox-green-topRight": unknown /* too deep */; "buttons/orange-left": unknown /* too deep */; "buttons/orange-middle": unknown /* too deep */; "buttons/orange-right": unknown /* too deep */; "buttons/orange-thumb": unknown /* too deep */; "buttons/player-button": unknown /* too deep */; "buttons/player-button-flip": unknown /* too deep */; "buttons/red-left": unknown /* too deep */; "buttons/red-middle": unknown /* too deep */; "buttons/red-right": unknown /* too deep */; "buttons/redround-left": unknown /* too deep */; "buttons/redround-middle": unknown /* too deep */; "buttons/redround-right": unknown /* too deep */; "buttons/redrounddown-left": unknown /* too deep */; "buttons/redrounddown-middle": unknown /* too deep */; "buttons/redrounddown-right": unknown /* too deep */; "buttons/yellowround-left": unknown /* too deep */; "buttons/yellowround-middle": unknown /* too deep */; "buttons/yellowround-right": unknown /* too deep */; "buttons/yellowrounddown-left": unknown /* too deep */; "buttons/yellowrounddown-middle": unknown /* too deep */; "buttons/yellowrounddown-right": unknown /* too deep */; "endscreen/endscreen-sunburst-blue-c": unknown /* too deep */; "endscreen/endscreen-sunburst-gold-c": unknown /* too deep */; "endscreen/levelbacker-star": unknown /* too deep */; "endscreen/member-button-left": unknown /* too deep */; "endscreen/member-button-middle": unknown /* too deep */; "endscreen/member-button-right": unknown /* too deep */; "endscreen/membertag-left": unknown /* too deep */; "endscreen/membertag-middle": unknown /* too deep */; "endscreen/membertag-right": unknown /* too deep */; "endscreen/redcircle-biggest": unknown /* too deep */; "endscreen/xpmeter-fill-left": unknown /* too deep */; "endscreen/xpmeter-fill-middle": unknown /* too deep */; "endscreen/xpmeter-fill-right": unknown /* too deep */; "endscreen/xpmeter-track-left": unknown /* too deep */; "endscreen/xpmeter-track-middle": unknown /* too deep */; "endscreen/xpmeter-track-right": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-astral": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-earth": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-fire": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-ice": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-shadow": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-storm": unknown /* too deep */; "pet-icon-backers/pet-icon-backers-water": unknown /* too deep */; "scroll-tracks/badge-large-track-left": unknown /* too deep */; "scroll-tracks/badge-large-track-middle": unknown /* too deep */; "scroll-tracks/badge-large-track-right": unknown /* too deep */; "scroll-tracks/blue-large-fill-left": unknown /* too deep */; "scroll-tracks/blue-large-fill-middle": unknown /* too deep */; "scroll-tracks/blue-large-fill-right": unknown /* too deep */; "scroll-tracks/blue-left": unknown /* too deep */; "scroll-tracks/blue-middle": unknown /* too deep */; "scroll-tracks/blue-right": unknown /* too deep */; "scroll-tracks/bronze-large-fill-left": unknown /* too deep */; "scroll-tracks/bronze-large-fill-middle": unknown /* too deep */; "scroll-tracks/bronze-large-fill-right": unknown /* too deep */; "scroll-tracks/gold-large-fill-left": unknown /* too deep */; "scroll-tracks/gold-large-fill-middle": unknown /* too deep */; "scroll-tracks/gold-large-fill-right": unknown /* too deep */; "scroll-tracks/gray-large-fill-left": unknown /* too deep */; "scroll-tracks/gray-large-fill-middle": unknown /* too deep */; "scroll-tracks/gray-large-fill-right": unknown /* too deep */; "scroll-tracks/green-large-fill-left": unknown /* too deep */; "scroll-tracks/green-large-fill-middle": unknown /* too deep */; "scroll-tracks/green-large-fill-right": unknown /* too deep */; "scroll-tracks/grey-left": unknown /* too deep */; "scroll-tracks/grey-middle": unknown /* too deep */; "scroll-tracks/grey-right": unknown /* too deep */; "scroll-tracks/meter-small-fill-left": unknown /* too deep */; "scroll-tracks/meter-small-fill-middle": unknown /* too deep */; "scroll-tracks/meter-small-fill-right": unknown /* too deep */; "scroll-tracks/meter-small-track-left": unknown /* too deep */; "scroll-tracks/meter-small-track-middle": unknown /* too deep */; "scroll-tracks/meter-small-track-right": unknown /* too deep */; "scroll-tracks/pink-large-fill-left": unknown /* too deep */; "scroll-tracks/pink-large-fill-middle": unknown /* too deep */; "scroll-tracks/pink-large-fill-right": unknown /* too deep */; "scroll-tracks/pink-large-track-left": unknown /* too deep */; "scroll-tracks/pink-large-track-middle": unknown /* too deep */; "scroll-tracks/pink-large-track-right": unknown /* too deep */; "scroll-tracks/purple-large-fill-left": unknown /* too deep */; "scroll-tracks/purple-large-fill-middle": unknown /* too deep */; "scroll-tracks/purple-large-fill-right": unknown /* too deep */; "scroll-tracks/red-large-fill-left": unknown /* too deep */; "scroll-tracks/red-large-fill-middle": unknown /* too deep */; "scroll-tracks/red-large-fill-right": unknown /* too deep */; "scroll-tracks/red-large-track-left": unknown /* too deep */; "scroll-tracks/red-large-track-middle": unknown /* too deep */; "scroll-tracks/red-large-track-right": unknown /* too deep */; "scroll-tracks/slider-button": unknown /* too deep */; "scroll-tracks/slider-knob": unknown /* too deep */; "scroll-tracks/slider-knob-bottom": unknown /* too deep */; "scroll-tracks/slider-knob-middle": unknown /* too deep */; "scroll-tracks/slider-knob-top": unknown /* too deep */; "scroll-tracks/slider-left": unknown /* too deep */; "scroll-tracks/slider-middle": unknown /* too deep */; "scroll-tracks/slider-right": unknown /* too deep */; "scroll-tracks/slider-track-left": unknown /* too deep */; "scroll-tracks/slider-track-middle": unknown /* too deep */; "scroll-tracks/slider-track-right": unknown /* too deep */; "scroll-tracks/yellow-large-fill-left": unknown /* too deep */; "scroll-tracks/yellow-large-fill-middle": unknown /* too deep */; "scroll-tracks/yellow-large-fill-right": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "check-box": unknown /* too deep */; "check-box-active": unknown /* too deep */; "emerald-large-active-left": unknown /* too deep */; "emerald-large-active-middle": unknown /* too deep */; "emerald-large-active-right": unknown /* too deep */; "emerald-large-default-left": unknown /* too deep */; "emerald-large-default-middle": unknown /* too deep */; "emerald-large-default-right": unknown /* too deep */; "emerald-large-hover-left": unknown /* too deep */; "emerald-large-hover-middle": unknown /* too deep */; "emerald-large-hover-right": unknown /* too deep */; "emerald-medium-active-left": unknown /* too deep */; "emerald-medium-active-middle": unknown /* too deep */; "emerald-medium-active-right": unknown /* too deep */; "emerald-medium-default-left": unknown /* too deep */; "emerald-medium-default-middle": unknown /* too deep */; "emerald-medium-default-right": unknown /* too deep */; "emerald-medium-hover-left": unknown /* too deep */; "emerald-medium-hover-middle": unknown /* too deep */; "emerald-medium-hover-right": unknown /* too deep */; "emerald-small-active-left": unknown /* too deep */; "emerald-small-active-middle": unknown /* too deep */; "emerald-small-active-right": unknown /* too deep */; "emerald-small-default-left": unknown /* too deep */; "emerald-small-default-middle": unknown /* too deep */; "emerald-small-default-right": unknown /* too deep */; "emerald-small-hover-left": unknown /* too deep */; "emerald-small-hover-middle": unknown /* too deep */; "emerald-small-hover-right": unknown /* too deep */; "gold-medium-active-left": unknown /* too deep */; "gold-medium-active-middle": unknown /* too deep */; "gold-medium-active-right": unknown /* too deep */; "gold-medium-default-left": unknown /* too deep */; "gold-medium-default-middle": unknown /* too deep */; "gold-medium-default-right": unknown /* too deep */; "gold-medium-hover-left": unknown /* too deep */; "gold-medium-hover-middle": unknown /* too deep */; "gold-medium-hover-right": unknown /* too deep */; "icons/arrow-grey": unknown /* too deep */; "icons/arrow-lightgrey": unknown /* too deep */; "icons/arrow-white": unknown /* too deep */; "icons/arrow32-grey-down": unknown /* too deep */; "icons/arrow32-grey-left": unknown /* too deep */; "icons/arrow32-grey-right": unknown /* too deep */; "icons/arrow32-grey-up": unknown /* too deep */; "icons/arrow32-lightgrey-down": unknown /* too deep */; "icons/arrow32-lightgrey-left": unknown /* too deep */; "icons/arrow32-lightgrey-right": unknown /* too deep */; "icons/arrow32-lightgrey-up": unknown /* too deep */; "icons/arrowdown-grey": unknown /* too deep */; "icons/arrowdown-lightgrey": unknown /* too deep */; "icons/arrowdown-white": unknown /* too deep */; "icons/arrowFlip-grey": unknown /* too deep */; "icons/arrowFlip-lightgrey": unknown /* too deep */; "icons/arrowFlip-white": unknown /* too deep */; "icons/arrowup-grey": unknown /* too deep */; "icons/arrowup-lightgrey": unknown /* too deep */; "icons/arrowup-white": unknown /* too deep */; "icons/build-grey": unknown /* too deep */; "icons/build-white": unknown /* too deep */; "icons/check-grey": unknown /* too deep */; "icons/check-lightgrey": unknown /* too deep */; "icons/check-white": unknown /* too deep */; "icons/close-grey": unknown /* too deep */; "icons/close-white": unknown /* too deep */; "icons/close-white-32": unknown /* too deep */; "icons/google-logo-small": unknown /* too deep */; "icons/icon-mini-play-grey": unknown /* too deep */; "icons/icon-mini-play-white": unknown /* too deep */; "icons/lock-grey": unknown /* too deep */; "icons/lock-white": unknown /* too deep */; "icons/replay": unknown /* too deep */; "icons/shop-grey": unknown /* too deep */; "icons/shop-white": unknown /* too deep */; "icons/speaker-icon": unknown /* too deep */; "icons/spin-grey": unknown /* too deep */; "icons/spin-white": unknown /* too deep */; "icons/unlock-grey": unknown /* too deep */; "icons/unlock-white": unknown /* too deep */; "marble-close-square": unknown /* too deep */; "marble-large-active-left": unknown /* too deep */; "marble-large-active-middle": unknown /* too deep */; "marble-large-active-right": unknown /* too deep */; "marble-large-default-left": unknown /* too deep */; "marble-large-default-middle": unknown /* too deep */; "marble-large-default-right": unknown /* too deep */; "marble-large-hover-left": unknown /* too deep */; "marble-large-hover-middle": unknown /* too deep */; "marble-large-hover-right": unknown /* too deep */; "marble-medium-active-left": unknown /* too deep */; "marble-medium-active-middle": unknown /* too deep */; "marble-medium-active-right": unknown /* too deep */; "marble-medium-default-left": unknown /* too deep */; "marble-medium-default-middle": unknown /* too deep */; "marble-medium-default-right": unknown /* too deep */; "marble-medium-hover-left": unknown /* too deep */; "marble-medium-hover-middle": unknown /* too deep */; "marble-medium-hover-right": unknown /* too deep */; "marble-small-active-left": unknown /* too deep */; "marble-small-active-middle": unknown /* too deep */; "marble-small-active-right": unknown /* too deep */; "marble-small-default-left": unknown /* too deep */; "marble-small-default-middle": unknown /* too deep */; "marble-small-default-right": unknown /* too deep */; "marble-small-hover-left": unknown /* too deep */; "marble-small-hover-middle": unknown /* too deep */; "marble-small-hover-right": unknown /* too deep */; "ruby-close-square": unknown /* too deep */; "ruby-large-active-left": unknown /* too deep */; "ruby-large-active-middle": unknown /* too deep */; "ruby-large-active-right": unknown /* too deep */; "ruby-large-default-left": unknown /* too deep */; "ruby-large-default-middle": unknown /* too deep */; "ruby-large-default-right": unknown /* too deep */; "ruby-large-hover-left": unknown /* too deep */; "ruby-large-hover-middle": unknown /* too deep */; "ruby-large-hover-right": unknown /* too deep */; "ruby-medium-active-left": unknown /* too deep */; "ruby-medium-active-middle": unknown /* too deep */; "ruby-medium-active-right": unknown /* too deep */; "ruby-medium-default-left": unknown /* too deep */; "ruby-medium-default-middle": unknown /* too deep */; "ruby-medium-default-right": unknown /* too deep */; "ruby-medium-hover-left": unknown /* too deep */; "ruby-medium-hover-middle": unknown /* too deep */; "ruby-medium-hover-right": unknown /* too deep */; "ruby-small-active-left": unknown /* too deep */; "ruby-small-active-middle": unknown /* too deep */; "ruby-small-active-right": unknown /* too deep */; "ruby-small-default-left": unknown /* too deep */; "ruby-small-default-middle": unknown /* too deep */; "ruby-small-default-right": unknown /* too deep */; "ruby-small-hover-left": unknown /* too deep */; "ruby-small-hover-middle": unknown /* too deep */; "ruby-small-hover-right": unknown /* too deep */; "sapphire-large-active-left": unknown /* too deep */; "sapphire-large-active-middle": unknown /* too deep */; "sapphire-large-active-right": unknown /* too deep */; "sapphire-large-default-left": unknown /* too deep */; "sapphire-large-default-middle": unknown /* too deep */; "sapphire-large-default-right": unknown /* too deep */; "sapphire-large-hover-left": unknown /* too deep */; "sapphire-large-hover-middle": unknown /* too deep */; "sapphire-large-hover-right": unknown /* too deep */; "sapphire-medium-active-left": unknown /* too deep */; "sapphire-medium-active-middle": unknown /* too deep */; "sapphire-medium-active-right": unknown /* too deep */; "sapphire-medium-default-left": unknown /* too deep */; "sapphire-medium-default-middle": unknown /* too deep */; "sapphire-medium-default-right": unknown /* too deep */; "sapphire-medium-hover-left": unknown /* too deep */; "sapphire-medium-hover-middle": unknown /* too deep */; "sapphire-medium-hover-right": unknown /* too deep */; "sapphire-small-active-left": unknown /* too deep */; "sapphire-small-active-middle": unknown /* too deep */; "sapphire-small-active-right": unknown /* too deep */; "sapphire-small-default-left": unknown /* too deep */; "sapphire-small-default-middle": unknown /* too deep */; "sapphire-small-default-right": unknown /* too deep */; "sapphire-small-hover-left": unknown /* too deep */; "sapphire-small-hover-middle": unknown /* too deep */; "sapphire-small-hover-right": unknown /* too deep */; "stone-large-disabled-left": unknown /* too deep */; "stone-large-disabled-middle": unknown /* too deep */; "stone-large-disabled-right": unknown /* too deep */; "stone-medium-disabled-left": unknown /* too deep */; "stone-medium-disabled-middle": unknown /* too deep */; "stone-medium-disabled-right": unknown /* too deep */; "stone-small-disabled-left": unknown /* too deep */; "stone-small-disabled-middle": unknown /* too deep */; "stone-small-disabled-right": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { canopy: unknown /* too deep */; chain: unknown /* too deep */; "chain-right": unknown /* too deep */; "clean-grey": unknown /* too deep */; "clean-white": unknown /* too deep */; "duel-attack-grey": unknown /* too deep */; "duel-attack-white": unknown /* too deep */; "icon-large-checkmark": unknown /* too deep */; "icon-large-exclamation": unknown /* too deep */; "icon-large-indicator": unknown /* too deep */; "icon-mini-arrow-off": unknown /* too deep */; "icon-mini-arrow-on": unknown /* too deep */; "icon-mini-heart-off": unknown /* too deep */; "icon-mini-heart-on": unknown /* too deep */; "icon-mini-membership": unknown /* too deep */; "icon-mini-rarity-common": unknown /* too deep */; "icon-mini-rarity-heroic": unknown /* too deep */; "icon-mini-rarity-legendary": unknown /* too deep */; "icon-mini-rarity-rare": unknown /* too deep */; "icon-mini-rarity-uncommon": unknown /* too deep */; "icon-mini-ticket": unknown /* too deep */; "icon-small-attackrange-off": unknown /* too deep */; "icon-small-attackrange-on": unknown /* too deep */; "icon-small-circle": unknown /* too deep */; "medium-icon-birds-grey": unknown /* too deep */; "medium-icon-birds-white": unknown /* too deep */; "medium-icon-boots-grey": unknown /* too deep */; "medium-icon-boots-white": unknown /* too deep */; "medium-icon-brawler-grey": unknown /* too deep */; "medium-icon-brawler-white": unknown /* too deep */; "medium-icon-buddies-grey": unknown /* too deep */; "medium-icon-buddies-white": unknown /* too deep */; "medium-icon-cats-grey": unknown /* too deep */; "medium-icon-cats-white": unknown /* too deep */; "medium-icon-checkmark": unknown /* too deep */; "medium-icon-decorations-grey": unknown /* too deep */; "medium-icon-decorations-white": unknown /* too deep */; "medium-icon-dogs-grey": unknown /* too deep */; "medium-icon-dogs-white": unknown /* too deep */; "medium-icon-frames-grey": unknown /* too deep */; "medium-icon-frames-white": unknown /* too deep */; "medium-icon-furniture-grey": unknown /* too deep */; "medium-icon-furniture-white": unknown /* too deep */; "medium-icon-hamsters-grey": unknown /* too deep */; "medium-icon-hamsters-white": unknown /* too deep */; "medium-icon-hats-grey": unknown /* too deep */; "medium-icon-hats-white": unknown /* too deep */; "medium-icon-hunter-grey": unknown /* too deep */; "medium-icon-hunter-white": unknown /* too deep */; "medium-icon-ice-grey": unknown /* too deep */; "medium-icon-ice-white": unknown /* too deep */; "medium-icon-items-grey": unknown /* too deep */; "medium-icon-items-white": unknown /* too deep */; "medium-icon-lock": unknown /* too deep */; "medium-icon-lock-simple": unknown /* too deep */; "medium-icon-marbles-grey": unknown /* too deep */; "medium-icon-marbles-white": unknown /* too deep */; "medium-icon-membership": unknown /* too deep */; "medium-icon-outfits-grey": unknown /* too deep */; "medium-icon-outfits-white": unknown /* too deep */; "medium-icon-pets-grey": unknown /* too deep */; "medium-icon-pets-white": unknown /* too deep */; "medium-icon-potions-grey": unknown /* too deep */; "medium-icon-potions-white": unknown /* too deep */; "medium-icon-power-grey": unknown /* too deep */; "medium-icon-power-white": unknown /* too deep */; "medium-icon-reptiles-grey": unknown /* too deep */; "medium-icon-reptiles-white": unknown /* too deep */; "medium-icon-rooms-grey": unknown /* too deep */; "medium-icon-rooms-white": unknown /* too deep */; "medium-icon-storm-grey": unknown /* too deep */; "medium-icon-storm-white": unknown /* too deep */; "medium-icon-tools-grey": unknown /* too deep */; "medium-icon-tools-white": unknown /* too deep */; "medium-icon-wands-grey": unknown /* too deep */; "medium-icon-wands-white": unknown /* too deep */; "paper-price-left": unknown /* too deep */; "paper-price-middle": unknown /* too deep */; "paper-price-right": unknown /* too deep */; "paper-small-arrow": unknown /* too deep */; "paper-small-arrow-shadowless": unknown /* too deep */; "paper-small-arrow-shadowless-rotated": unknown /* too deep */; "paper-small-bottom": unknown /* too deep */; "paper-small-bottom-left": unknown /* too deep */; "paper-small-bottom-right": unknown /* too deep */; "paper-small-left": unknown /* too deep */; "paper-small-middle": unknown /* too deep */; "paper-small-right": unknown /* too deep */; "paper-small-top": unknown /* too deep */; "paper-small-top-left": unknown /* too deep */; "paper-small-top-right": unknown /* too deep */; "paperbanner-left": unknown /* too deep */; "paperbanner-middle": unknown /* too deep */; "paperbanner-right": unknown /* too deep */; "paperscroll-grey-left": unknown /* too deep */; "paperscroll-grey-middle": unknown /* too deep */; "paperscroll-grey-right": unknown /* too deep */; "prodigy-logo": unknown /* too deep */; "rope-tie": unknown /* too deep */; "rope-tie-flip": unknown /* too deep */; "select-state-arrow": unknown /* too deep */; "select-state-arrow-shadow": unknown /* too deep */; "select-state-arrow-white": unknown /* too deep */; "select-state-arrow-white-sm": unknown /* too deep */; "shadow-medium": unknown /* too deep */; "shelf-left": unknown /* too deep */; "shelf-middle": unknown /* too deep */; "shelf-right": unknown /* too deep */; "stats-tab-bar": unknown /* too deep */; "store-header-left": unknown /* too deep */; "store-header-middle": unknown /* too deep */; "store-header-right": unknown /* too deep */; "storefront-bg-bottom": unknown /* too deep */; "storefront-bg-bottom-left": unknown /* too deep */; "storefront-bg-bottom-right": unknown /* too deep */; "storefront-bg-left": unknown /* too deep */; "storefront-bg-middle": unknown /* too deep */; "storefront-bg-right": unknown /* too deep */; "storefront-bg-top-left": unknown /* too deep */; "storefront-bg-top-middle": unknown /* too deep */; "storefront-bg-top-right": unknown /* too deep */; "tab-active-left": unknown /* too deep */; "tab-active-middle": unknown /* too deep */; "tab-active-right": unknown /* too deep */; "tab-default-left": unknown /* too deep */; "tab-default-middle": unknown /* too deep */; "tab-default-right": unknown /* too deep */; "tab-hover-left": unknown /* too deep */; "tab-hover-middle": unknown /* too deep */; "tab-hover-right": unknown /* too deep */; "view-panel-bottom": unknown /* too deep */; "view-panel-bottom-left": unknown /* too deep */; "view-panel-bottom-right": unknown /* too deep */; "view-panel-left": unknown /* too deep */; "view-panel-middle": unknown /* too deep */; "view-panel-right": unknown /* too deep */; "view-panel-top": unknown /* too deep */; "view-panel-top-left": unknown /* too deep */; "view-panel-top-right": unknown /* too deep */; "wood-large-left": unknown /* too deep */; "wood-large-middle": unknown /* too deep */; "wood-large-right": unknown /* too deep */; "wood-left": unknown /* too deep */; "wood-middle": unknown /* too deep */; "wood-panel-bottom": unknown /* too deep */; "wood-panel-bottom-left": unknown /* too deep */; "wood-panel-bottom-right": unknown /* too deep */; "wood-panel-left": unknown /* too deep */; "wood-panel-middle": unknown /* too deep */; "wood-panel-right": unknown /* too deep */; "wood-panel-top": unknown /* too deep */; "wood-panel-top-left": unknown /* too deep */; "wood-panel-top-right": unknown /* too deep */; "wood-right": unknown /* too deep */; "wood-small-hover-left": unknown /* too deep */; "wood-small-hover-middle": unknown /* too deep */; "wood-small-hover-right": unknown /* too deep */; "wood-small-left": unknown /* too deep */; "wood-small-middle": unknown /* too deep */; "wood-small-right": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "backing-loot-bottom": unknown /* too deep */; "backing-loot-bottom-left": unknown /* too deep */; "backing-loot-bottom-right": unknown /* too deep */; "backing-loot-left": unknown /* too deep */; "backing-loot-middle": unknown /* too deep */; "backing-loot-right": unknown /* too deep */; "backing-loot-top": unknown /* too deep */; "backing-loot-top-left": unknown /* too deep */; "backing-loot-top-right": unknown /* too deep */; "beige-bottom": unknown /* too deep */; "beige-bottom-left": unknown /* too deep */; "beige-bottom-right": unknown /* too deep */; "beige-left": unknown /* too deep */; "beige-middle": unknown /* too deep */; "beige-right": unknown /* too deep */; "beige-top": unknown /* too deep */; "beige-top-left": unknown /* too deep */; "beige-top-right": unknown /* too deep */; "Horizontal-Logo-White": unknown /* too deep */; "label-bottom": unknown /* too deep */; "label-bottom-left": unknown /* too deep */; "label-bottom-right": unknown /* too deep */; "label-left": unknown /* too deep */; "label-middle": unknown /* too deep */; "label-right": unknown /* too deep */; "label-top": unknown /* too deep */; "label-top-left": unknown /* too deep */; "label-top-right": unknown /* too deep */; "note-left": unknown /* too deep */; "note-middle": unknown /* too deep */; "note-right": unknown /* too deep */; "radio-active-bottom": unknown /* too deep */; "radio-active-bottom-left": unknown /* too deep */; "radio-active-bottom-right": unknown /* too deep */; "radio-active-left": unknown /* too deep */; "radio-active-middle": unknown /* too deep */; "radio-active-right": unknown /* too deep */; "radio-active-top": unknown /* too deep */; "radio-active-top-left": unknown /* too deep */; "radio-active-top-right": unknown /* too deep */; "radio-default-bottom": unknown /* too deep */; "radio-default-bottom-left": unknown /* too deep */; "radio-default-bottom-right": unknown /* too deep */; "radio-default-left": unknown /* too deep */; "radio-default-middle": unknown /* too deep */; "radio-default-right": unknown /* too deep */; "radio-default-top": unknown /* too deep */; "radio-default-top-left": unknown /* too deep */; "radio-default-top-right": unknown /* too deep */; "radio-hover-bottom": unknown /* too deep */; "radio-hover-bottom-left": unknown /* too deep */; "radio-hover-bottom-right": unknown /* too deep */; "radio-hover-left": unknown /* too deep */; "radio-hover-middle": unknown /* too deep */; "radio-hover-right": unknown /* too deep */; "radio-hover-top": unknown /* too deep */; "radio-hover-top-left": unknown /* too deep */; "radio-hover-top-right": unknown /* too deep */; "share-bottom": unknown /* too deep */; "share-bottom-left": unknown /* too deep */; "share-bottom-right": unknown /* too deep */; "share-left": unknown /* too deep */; "share-middle": unknown /* too deep */; "share-right": unknown /* too deep */; "share-top": unknown /* too deep */; "share-top-left": unknown /* too deep */; "share-top-right": unknown /* too deep */; "Sign-In Logo (White)-01": unknown /* too deep */; "slider-blue-bottom": unknown /* too deep */; "slider-blue-middle": unknown /* too deep */; "slider-blue-top": unknown /* too deep */; "track-blue-bottom": unknown /* too deep */; "track-blue-middle": unknown /* too deep */; "track-blue-top": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: {}; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { backpack: unknown /* too deep */; "bubble-1": unknown /* too deep */; "bubble-2": unknown /* too deep */; "bubble-3": unknown /* too deep */; "char-container": unknown /* too deep */; confetti1: unknown /* too deep */; confetti2: unknown /* too deep */; confetti3: unknown /* too deep */; confetti4: unknown /* too deep */; "emblem-bounty": unknown /* too deep */; feather: unknown /* too deep */; fireworks: unknown /* too deep */; "member-star": unknown /* too deep */; "menu-noot": unknown /* too deep */; merchant: unknown /* too deep */; namer: unknown /* too deep */; portal1: unknown /* too deep */; "portal1-b": unknown /* too deep */; portal10: unknown /* too deep */; portal2: unknown /* too deep */; "portal2-b": unknown /* too deep */; portal3: unknown /* too deep */; "portal3-b": unknown /* too deep */; portal4: unknown /* too deep */; "portal4-b": unknown /* too deep */; portal5: unknown /* too deep */; "portal5-b": unknown /* too deep */; portal6: unknown /* too deep */; "portal6-b": unknown /* too deep */; portal7: unknown /* too deep */; "portal7-b": unknown /* too deep */; portal8: unknown /* too deep */; "portal8-b": unknown /* too deep */; portal9: unknown /* too deep */; "portal9-b": unknown /* too deep */; rocket: unknown /* too deep */; smoke: unknown /* too deep */; "smoke-blue": unknown /* too deep */; "smoke-green": unknown /* too deep */; "smoke-red": unknown /* too deep */; "store-panel": unknown /* too deep */; "user-bar-base": unknown /* too deep */; "user-bar-fill-barrier": unknown /* too deep */; "user-bar-fill-heart": unknown /* too deep */; "user-bar-fill-star": unknown /* too deep */; "user-bar-flag-astral": unknown /* too deep */; "user-bar-flag-back": unknown /* too deep */; "user-bar-flag-earth": unknown /* too deep */; "user-bar-flag-fire": unknown /* too deep */; "user-bar-flag-ice": unknown /* too deep */; "user-bar-flag-ice & fire": unknown /* too deep */; "user-bar-flag-mech": unknown /* too deep */; "user-bar-flag-storm": unknown /* too deep */; "user-bar-flag-water": unknown /* too deep */; "user-bar-flag-wizard": unknown /* too deep */; "user-bar-heart": unknown /* too deep */; "user-bar-level": unknown /* too deep */; "user-bar-shield": unknown /* too deep */; "user-bar-star": unknown /* too deep */; "user-star": unknown /* too deep */; "water-balloon": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "100-16": unknown /* too deep */; "100-20": unknown /* too deep */; "101-16": unknown /* too deep */; "101-20": unknown /* too deep */; "102-16": unknown /* too deep */; "102-20": unknown /* too deep */; "103-16": unknown /* too deep */; "103-20": unknown /* too deep */; "104-16": unknown /* too deep */; "104-20": unknown /* too deep */; "105-16": unknown /* too deep */; "105-20": unknown /* too deep */; "106-16": unknown /* too deep */; "106-20": unknown /* too deep */; "107-16": unknown /* too deep */; "107-20": unknown /* too deep */; "108-16": unknown /* too deep */; "108-20": unknown /* too deep */; "109-16": unknown /* too deep */; "109-20": unknown /* too deep */; "110-16": unknown /* too deep */; "110-20": unknown /* too deep */; "111-16": unknown /* too deep */; "111-20": unknown /* too deep */; "112-16": unknown /* too deep */; "112-20": unknown /* too deep */; "113-16": unknown /* too deep */; "113-20": unknown /* too deep */; "114-16": unknown /* too deep */; "114-20": unknown /* too deep */; "115-16": unknown /* too deep */; "115-20": unknown /* too deep */; "116-16": unknown /* too deep */; "116-20": unknown /* too deep */; "117-16": unknown /* too deep */; "117-20": unknown /* too deep */; "118-16": unknown /* too deep */; "118-20": unknown /* too deep */; "119-16": unknown /* too deep */; "119-20": unknown /* too deep */; "120-16": unknown /* too deep */; "120-20": unknown /* too deep */; "121-16": unknown /* too deep */; "121-20": unknown /* too deep */; "122-16": unknown /* too deep */; "122-20": unknown /* too deep */; "123-16": unknown /* too deep */; "123-20": unknown /* too deep */; "124-16": unknown /* too deep */; "124-20": unknown /* too deep */; "125-16": unknown /* too deep */; "125-20": unknown /* too deep */; "126-16": unknown /* too deep */; "126-20": unknown /* too deep */; "32-16": unknown /* too deep */; "32-20": unknown /* too deep */; "33-16": unknown /* too deep */; "33-20": unknown /* too deep */; "34-16": unknown /* too deep */; "34-20": unknown /* too deep */; "35-16": unknown /* too deep */; "35-20": unknown /* too deep */; "36-16": unknown /* too deep */; "36-20": unknown /* too deep */; "37-16": unknown /* too deep */; "37-20": unknown /* too deep */; "38-16": unknown /* too deep */; "38-20": unknown /* too deep */; "39-16": unknown /* too deep */; "39-20": unknown /* too deep */; "40-16": unknown /* too deep */; "40-20": unknown /* too deep */; "41-16": unknown /* too deep */; "41-20": unknown /* too deep */; "42-16": unknown /* too deep */; "42-20": unknown /* too deep */; "43-16": unknown /* too deep */; "43-20": unknown /* too deep */; "44-16": unknown /* too deep */; "44-20": unknown /* too deep */; "45-16": unknown /* too deep */; "45-20": unknown /* too deep */; "46-16": unknown /* too deep */; "46-20": unknown /* too deep */; "47-16": unknown /* too deep */; "47-20": unknown /* too deep */; "48-16": unknown /* too deep */; "48-20": unknown /* too deep */; "49-16": unknown /* too deep */; "49-20": unknown /* too deep */; "50-16": unknown /* too deep */; "50-20": unknown /* too deep */; "51-16": unknown /* too deep */; "51-20": unknown /* too deep */; "52-16": unknown /* too deep */; "52-20": unknown /* too deep */; "53-16": unknown /* too deep */; "53-20": unknown /* too deep */; "54-16": unknown /* too deep */; "54-20": unknown /* too deep */; "55-16": unknown /* too deep */; "55-20": unknown /* too deep */; "56-16": unknown /* too deep */; "56-20": unknown /* too deep */; "57-16": unknown /* too deep */; "57-20": unknown /* too deep */; "58-16": unknown /* too deep */; "58-20": unknown /* too deep */; "59-16": unknown /* too deep */; "59-20": unknown /* too deep */; "60-16": unknown /* too deep */; "60-20": unknown /* too deep */; "61-16": unknown /* too deep */; "61-20": unknown /* too deep */; "62-16": unknown /* too deep */; "62-20": unknown /* too deep */; "63-16": unknown /* too deep */; "63-20": unknown /* too deep */; "64-16": unknown /* too deep */; "64-20": unknown /* too deep */; "65-16": unknown /* too deep */; "65-20": unknown /* too deep */; "66-16": unknown /* too deep */; "66-20": unknown /* too deep */; "67-16": unknown /* too deep */; "67-20": unknown /* too deep */; "68-16": unknown /* too deep */; "68-20": unknown /* too deep */; "69-16": unknown /* too deep */; "69-20": unknown /* too deep */; "70-16": unknown /* too deep */; "70-20": unknown /* too deep */; "71-16": unknown /* too deep */; "71-20": unknown /* too deep */; "72-16": unknown /* too deep */; "72-20": unknown /* too deep */; "73-16": unknown /* too deep */; "73-20": unknown /* too deep */; "74-16": unknown /* too deep */; "74-20": unknown /* too deep */; "75-16": unknown /* too deep */; "75-20": unknown /* too deep */; "76-16": unknown /* too deep */; "76-20": unknown /* too deep */; "77-16": unknown /* too deep */; "77-20": unknown /* too deep */; "78-16": unknown /* too deep */; "78-20": unknown /* too deep */; "79-16": unknown /* too deep */; "79-20": unknown /* too deep */; "80-16": unknown /* too deep */; "80-20": unknown /* too deep */; "81-16": unknown /* too deep */; "81-20": unknown /* too deep */; "82-16": unknown /* too deep */; "82-20": unknown /* too deep */; "83-16": unknown /* too deep */; "83-20": unknown /* too deep */; "84-16": unknown /* too deep */; "84-20": unknown /* too deep */; "85-16": unknown /* too deep */; "85-20": unknown /* too deep */; "86-16": unknown /* too deep */; "86-20": unknown /* too deep */; "87-16": unknown /* too deep */; "87-20": unknown /* too deep */; "88-16": unknown /* too deep */; "88-20": unknown /* too deep */; "89-16": unknown /* too deep */; "89-20": unknown /* too deep */; "90-16": unknown /* too deep */; "90-20": unknown /* too deep */; "91-16": unknown /* too deep */; "91-20": unknown /* too deep */; "92-16": unknown /* too deep */; "92-20": unknown /* too deep */; "93-16": unknown /* too deep */; "93-20": unknown /* too deep */; "94-16": unknown /* too deep */; "94-20": unknown /* too deep */; "95-16": unknown /* too deep */; "95-20": unknown /* too deep */; "96-16": unknown /* too deep */; "96-20": unknown /* too deep */; "97-16": unknown /* too deep */; "97-20": unknown /* too deep */; "98-16": unknown /* too deep */; "98-20": unknown /* too deep */; "99-16": unknown /* too deep */; "99-20": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { air: unknown /* too deep */; arena: unknown /* too deep */; arrow: unknown /* too deep */; award: unknown /* too deep */; back: unknown /* too deep */; badge: unknown /* too deep */; bag: unknown /* too deep */; "battle-request": unknown /* too deep */; "bonus-arrow": unknown /* too deep */; book: unknown /* too deep */; boss: unknown /* too deep */; bounty: unknown /* too deep */; buddy: unknown /* too deep */; canada: unknown /* too deep */; catalogue: unknown /* too deep */; catch: unknown /* too deep */; challenge: unknown /* too deep */; chat: unknown /* too deep */; "chat/apple": unknown /* too deep */; "chat/bubble": unknown /* too deep */; "chat/cake": unknown /* too deep */; "chat/clover": unknown /* too deep */; "chat/dot": unknown /* too deep */; "chat/exclamation": unknown /* too deep */; "chat/frustration": unknown /* too deep */; "chat/heart": unknown /* too deep */; "chat/idea": unknown /* too deep */; "chat/moon": unknown /* too deep */; "chat/music": unknown /* too deep */; "chat/question": unknown /* too deep */; "chat/star": unknown /* too deep */; "chat/sun": unknown /* too deep */; "chat/swear": unknown /* too deep */; "chat/tear": unknown /* too deep */; close: unknown /* too deep */; "Copper Coin": unknown /* too deep */; crystal: unknown /* too deep */; dice: unknown /* too deep */; "dorm-rotate": unknown /* too deep */; "dorm-trash": unknown /* too deep */; "dormbg/1": unknown /* too deep */; "dormbg/2": unknown /* too deep */; "dormbg/3": unknown /* too deep */; down: unknown /* too deep */; earth: unknown /* too deep */; edit: unknown /* too deep */; eggpile: unknown /* too deep */; "emblem-bounty": unknown /* too deep */; empty: unknown /* too deep */; "empty-boots": unknown /* too deep */; "empty-follow": unknown /* too deep */; "empty-hat": unknown /* too deep */; "empty-outfit": unknown /* too deep */; "empty-ring": unknown /* too deep */; "empty-spellRelic": unknown /* too deep */; "empty-weapon": unknown /* too deep */; exclamation: unknown /* too deep */; exclamationPoint: unknown /* too deep */; fire: unknown /* too deep */; gift: unknown /* too deep */; gold: unknown /* too deep */; "Golden Pages": unknown /* too deep */; heal: unknown /* too deep */; heart: unknown /* too deep */; "heart-small": unknown /* too deep */; help: unknown /* too deep */; ice: unknown /* too deep */; "icon-astral-mini": unknown /* too deep */; "icon-attackrange-off": unknown /* too deep */; "icon-attackrange-on": unknown /* too deep */; "icon-bar-astral": unknown /* too deep */; "icon-bar-earth": unknown /* too deep */; "icon-bar-fire": unknown /* too deep */; "icon-bar-ice": unknown /* too deep */; "icon-bar-ice & fire": unknown /* too deep */; "icon-bar-large-astral": unknown /* too deep */; "icon-bar-large-earth": unknown /* too deep */; "icon-bar-large-fire": unknown /* too deep */; "icon-bar-large-ice": unknown /* too deep */; "icon-bar-large-mech": unknown /* too deep */; "icon-bar-large-storm": unknown /* too deep */; "icon-bar-large-water": unknown /* too deep */; "icon-bar-large-wizard": unknown /* too deep */; "icon-bar-mech": unknown /* too deep */; "icon-bar-storm": unknown /* too deep */; "icon-bar-water": unknown /* too deep */; "icon-bar-wizard": unknown /* too deep */; "icon-base": unknown /* too deep */; "icon-base-active": unknown /* too deep */; "icon-base-pvp": unknown /* too deep */; "icon-base-pvp-indicator": unknown /* too deep */; "icon-fire-mini": unknown /* too deep */; "icon-ice-mini": unknown /* too deep */; "icon-keystone-lock": unknown /* too deep */; "icon-lock-mini": unknown /* too deep */; "icon-medium-lock": unknown /* too deep */; "icon-plant-mini": unknown /* too deep */; "icon-shadow-mini": unknown /* too deep */; "icon-storm-mini": unknown /* too deep */; "icon-water-mini": unknown /* too deep */; info: unknown /* too deep */; inspect: unknown /* too deep */; leaderboard: unknown /* too deep */; mail: unknown /* too deep */; "mail-aero": unknown /* too deep */; "mail-cc": unknown /* too deep */; "mail-challenge": unknown /* too deep */; "mail-dragonfly": unknown /* too deep */; "mail-empty": unknown /* too deep */; "mail-floran": unknown /* too deep */; "mail-gold": unknown /* too deep */; "mail-heart": unknown /* too deep */; "mail-hot-hot": unknown /* too deep */; "mail-leaf": unknown /* too deep */; "mail-lock": unknown /* too deep */; "mail-magicegg": unknown /* too deep */; "mail-member": unknown /* too deep */; "mail-page": unknown /* too deep */; "mail-researchpoint-fire": unknown /* too deep */; "mail-researchpoint-ice": unknown /* too deep */; "mail-researchpoint-plant": unknown /* too deep */; "mail-researchpoint-storm": unknown /* too deep */; "mail-researchpoint-water": unknown /* too deep */; "mail-sanddollar": unknown /* too deep */; "mail-sf": unknown /* too deep */; "mail-shiver": unknown /* too deep */; "mail-ss": unknown /* too deep */; "mail-star": unknown /* too deep */; "mail-tower": unknown /* too deep */; "mail-yar": unknown /* too deep */; mailCount: unknown /* too deep */; map: unknown /* too deep */; "map-all": unknown /* too deep */; "map-game": unknown /* too deep */; "map-quest": unknown /* too deep */; "map-store": unknown /* too deep */; mech: unknown /* too deep */; member: unknown /* too deep */; membership: unknown /* too deep */; "menu-crest": unknown /* too deep */; "monster-counter-large": unknown /* too deep */; "monster-counter-large-grey": unknown /* too deep */; "monster-counter-small": unknown /* too deep */; move: unknown /* too deep */; mystery: unknown /* too deep */; next: unknown /* too deep */; pet: unknown /* too deep */; play: unknown /* too deep */; player: unknown /* too deep */; "potion-buff-all": unknown /* too deep */; "potion-buff-critical": unknown /* too deep */; "potion-buff-damage": unknown /* too deep */; "potion-buff-earth": unknown /* too deep */; "potion-buff-fire": unknown /* too deep */; "potion-buff-ice": unknown /* too deep */; "potion-buff-storm": unknown /* too deep */; "potion-buff-water": unknown /* too deep */; quest: unknown /* too deep */; "quest-complete": unknown /* too deep */; question: unknown /* too deep */; settings: unknown /* too deep */; shovel: unknown /* too deep */; "small-icon-academypage": unknown /* too deep */; "small-icon-gold": unknown /* too deep */; smoke: unknown /* too deep */; "snowflake-small": unknown /* too deep */; star: unknown /* too deep */; "star-shard-small": unknown /* too deep */; "star-small": unknown /* too deep */; star2: unknown /* too deep */; store: unknown /* too deep */; storm: unknown /* too deep */; "survey/survey-box-icon": unknown /* too deep */; "survey/survey-box-square-icon": unknown /* too deep */; "survey/survey-check-icon": unknown /* too deep */; team: unknown /* too deep */; "team-pvp": unknown /* too deep */; titanShard: unknown /* too deep */; trophyBronze: unknown /* too deep */; trophyGold: unknown /* too deep */; trophySilver: unknown /* too deep */; type: unknown /* too deep */; up: unknown /* too deep */; us: unknown /* too deep */; water: unknown /* too deep */; wizard: unknown /* too deep */; x: unknown /* too deep */; yes: unknown /* too deep */; "zone-air": unknown /* too deep */; "zone-earth": unknown /* too deep */; "zone-fire": unknown /* too deep */; "zone-ice": unknown /* too deep */; "zone-water": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "background/wood-neutral-bottom": unknown /* too deep */; "background/wood-neutral-bottomLeft": unknown /* too deep */; "background/wood-neutral-bottomRight": unknown /* too deep */; "background/wood-neutral-left": unknown /* too deep */; "background/wood-neutral-middle": unknown /* too deep */; "background/wood-neutral-right": unknown /* too deep */; "background/wood-neutral-top": unknown /* too deep */; "background/wood-neutral-topLeft": unknown /* too deep */; "background/wood-neutral-topRight": unknown /* too deep */; "banner/banner-red-left": unknown /* too deep */; "banner/banner-red-middle": unknown /* too deep */; "banner/banner-red-right": unknown /* too deep */; "banner/title-gold-left": unknown /* too deep */; "banner/title-gold-middle": unknown /* too deep */; "banner/title-gold-right": unknown /* too deep */; "button/blueround-left": unknown /* too deep */; "button/blueround-middle": unknown /* too deep */; "button/blueround-right": unknown /* too deep */; "button/bluerounddown-left": unknown /* too deep */; "button/bluerounddown-middle": unknown /* too deep */; "button/bluerounddown-right": unknown /* too deep */; "button/greenround-left": unknown /* too deep */; "button/greenround-middle": unknown /* too deep */; "button/greenround-right": unknown /* too deep */; "button/greenrounddown-left": unknown /* too deep */; "button/greenrounddown-middle": unknown /* too deep */; "button/greenrounddown-right": unknown /* too deep */; "button/greyround-left": unknown /* too deep */; "button/greyround-middle": unknown /* too deep */; "button/greyround-right": unknown /* too deep */; "button/greyrounddown-left": unknown /* too deep */; "button/greyrounddown-middle": unknown /* too deep */; "button/greyrounddown-right": unknown /* too deep */; "button/pupleround-left": unknown /* too deep */; "button/pupleround-middle": unknown /* too deep */; "button/pupleround-right": unknown /* too deep */; "button/puplerounddown-left": unknown /* too deep */; "button/puplerounddown-middle": unknown /* too deep */; "button/puplerounddown-right": unknown /* too deep */; "button/redround-left": unknown /* too deep */; "button/redround-middle": unknown /* too deep */; "button/redround-right": unknown /* too deep */; "button/redrounddown-left": unknown /* too deep */; "button/redrounddown-middle": unknown /* too deep */; "button/redrounddown-right": unknown /* too deep */; "button/yellowround-left": unknown /* too deep */; "button/yellowround-middle": unknown /* too deep */; "button/yellowround-right": unknown /* too deep */; "button/yellowrounddown-left": unknown /* too deep */; "button/yellowrounddown-middle": unknown /* too deep */; "button/yellowrounddown-right": unknown /* too deep */; "matte/matte-member-bottom": unknown /* too deep */; "matte/matte-member-bottomLeft": unknown /* too deep */; "matte/matte-member-bottomRight": unknown /* too deep */; "matte/matte-member-left": unknown /* too deep */; "matte/matte-member-middle": unknown /* too deep */; "matte/matte-member-right": unknown /* too deep */; "matte/matte-member-top": unknown /* too deep */; "matte/matte-member-topLeft": unknown /* too deep */; "matte/matte-member-topRight": unknown /* too deep */; "matte/matte-neutral-bottom": unknown /* too deep */; "matte/matte-neutral-bottomLeft": unknown /* too deep */; "matte/matte-neutral-bottomRight": unknown /* too deep */; "matte/matte-neutral-left": unknown /* too deep */; "matte/matte-neutral-middle": unknown /* too deep */; "matte/matte-neutral-right": unknown /* too deep */; "matte/matte-neutral-top": unknown /* too deep */; "matte/matte-neutral-topLeft": unknown /* too deep */; "matte/matte-neutral-topRight": unknown /* too deep */; "misc/blue-arrow-left": unknown /* too deep */; "misc/blue-arrow-right": unknown /* too deep */; "misc/close": unknown /* too deep */; "misc/member-icon": unknown /* too deep */; "misc/membership-icon-small": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "100-36": unknown /* too deep */; "101-36": unknown /* too deep */; "102-36": unknown /* too deep */; "103-36": unknown /* too deep */; "104-36": unknown /* too deep */; "105-36": unknown /* too deep */; "106-36": unknown /* too deep */; "107-36": unknown /* too deep */; "108-36": unknown /* too deep */; "109-36": unknown /* too deep */; "110-36": unknown /* too deep */; "111-36": unknown /* too deep */; "112-36": unknown /* too deep */; "113-36": unknown /* too deep */; "114-36": unknown /* too deep */; "115-36": unknown /* too deep */; "116-36": unknown /* too deep */; "117-36": unknown /* too deep */; "118-36": unknown /* too deep */; "119-36": unknown /* too deep */; "120-36": unknown /* too deep */; "121-36": unknown /* too deep */; "122-36": unknown /* too deep */; "123-36": unknown /* too deep */; "124-36": unknown /* too deep */; "125-36": unknown /* too deep */; "126-36": unknown /* too deep */; "32-36": unknown /* too deep */; "33-36": unknown /* too deep */; "34-36": unknown /* too deep */; "35-36": unknown /* too deep */; "36-36": unknown /* too deep */; "37-36": unknown /* too deep */; "38-36": unknown /* too deep */; "39-36": unknown /* too deep */; "40-36": unknown /* too deep */; "41-36": unknown /* too deep */; "42-36": unknown /* too deep */; "43-36": unknown /* too deep */; "44-36": unknown /* too deep */; "45-36": unknown /* too deep */; "46-36": unknown /* too deep */; "47-36": unknown /* too deep */; "48-36": unknown /* too deep */; "49-36": unknown /* too deep */; "50-36": unknown /* too deep */; "51-36": unknown /* too deep */; "52-36": unknown /* too deep */; "53-36": unknown /* too deep */; "54-36": unknown /* too deep */; "55-36": unknown /* too deep */; "56-36": unknown /* too deep */; "57-36": unknown /* too deep */; "58-36": unknown /* too deep */; "59-36": unknown /* too deep */; "60-36": unknown /* too deep */; "61-36": unknown /* too deep */; "62-36": unknown /* too deep */; "63-36": unknown /* too deep */; "64-36": unknown /* too deep */; "65-36": unknown /* too deep */; "66-36": unknown /* too deep */; "67-36": unknown /* too deep */; "68-36": unknown /* too deep */; "69-36": unknown /* too deep */; "70-36": unknown /* too deep */; "71-36": unknown /* too deep */; "72-36": unknown /* too deep */; "73-36": unknown /* too deep */; "74-36": unknown /* too deep */; "75-36": unknown /* too deep */; "76-36": unknown /* too deep */; "77-36": unknown /* too deep */; "78-36": unknown /* too deep */; "79-36": unknown /* too deep */; "80-36": unknown /* too deep */; "81-36": unknown /* too deep */; "82-36": unknown /* too deep */; "83-36": unknown /* too deep */; "84-36": unknown /* too deep */; "85-36": unknown /* too deep */; "86-36": unknown /* too deep */; "87-36": unknown /* too deep */; "88-36": unknown /* too deep */; "89-36": unknown /* too deep */; "90-36": unknown /* too deep */; "91-36": unknown /* too deep */; "92-36": unknown /* too deep */; "93-36": unknown /* too deep */; "94-36": unknown /* too deep */; "95-36": unknown /* too deep */; "96-36": unknown /* too deep */; "97-36": unknown /* too deep */; "98-36": unknown /* too deep */; "99-36": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "100-16": unknown /* too deep */; "100-20": unknown /* too deep */; "100-30": unknown /* too deep */; "100-40": unknown /* too deep */; "100-80": unknown /* too deep */; "101-16": unknown /* too deep */; "101-20": unknown /* too deep */; "101-30": unknown /* too deep */; "101-40": unknown /* too deep */; "101-80": unknown /* too deep */; "102-16": unknown /* too deep */; "102-20": unknown /* too deep */; "102-30": unknown /* too deep */; "102-40": unknown /* too deep */; "102-80": unknown /* too deep */; "103-16": unknown /* too deep */; "103-20": unknown /* too deep */; "103-30": unknown /* too deep */; "103-40": unknown /* too deep */; "103-80": unknown /* too deep */; "104-16": unknown /* too deep */; "104-20": unknown /* too deep */; "104-30": unknown /* too deep */; "104-40": unknown /* too deep */; "104-80": unknown /* too deep */; "105-16": unknown /* too deep */; "105-20": unknown /* too deep */; "105-30": unknown /* too deep */; "105-40": unknown /* too deep */; "105-80": unknown /* too deep */; "106-16": unknown /* too deep */; "106-20": unknown /* too deep */; "106-30": unknown /* too deep */; "106-40": unknown /* too deep */; "106-80": unknown /* too deep */; "107-16": unknown /* too deep */; "107-20": unknown /* too deep */; "107-30": unknown /* too deep */; "107-40": unknown /* too deep */; "107-80": unknown /* too deep */; "108-16": unknown /* too deep */; "108-20": unknown /* too deep */; "108-30": unknown /* too deep */; "108-40": unknown /* too deep */; "108-80": unknown /* too deep */; "109-16": unknown /* too deep */; "109-20": unknown /* too deep */; "109-30": unknown /* too deep */; "109-40": unknown /* too deep */; "109-80": unknown /* too deep */; "110-16": unknown /* too deep */; "110-20": unknown /* too deep */; "110-30": unknown /* too deep */; "110-40": unknown /* too deep */; "110-80": unknown /* too deep */; "111-16": unknown /* too deep */; "111-20": unknown /* too deep */; "111-30": unknown /* too deep */; "111-40": unknown /* too deep */; "111-80": unknown /* too deep */; "112-16": unknown /* too deep */; "112-20": unknown /* too deep */; "112-30": unknown /* too deep */; "112-40": unknown /* too deep */; "112-80": unknown /* too deep */; "113-16": unknown /* too deep */; "113-20": unknown /* too deep */; "113-30": unknown /* too deep */; "113-40": unknown /* too deep */; "113-80": unknown /* too deep */; "114-16": unknown /* too deep */; "114-20": unknown /* too deep */; "114-30": unknown /* too deep */; "114-40": unknown /* too deep */; "114-80": unknown /* too deep */; "115-16": unknown /* too deep */; "115-20": unknown /* too deep */; "115-30": unknown /* too deep */; "115-40": unknown /* too deep */; "115-80": unknown /* too deep */; "116-16": unknown /* too deep */; "116-20": unknown /* too deep */; "116-30": unknown /* too deep */; "116-40": unknown /* too deep */; "116-80": unknown /* too deep */; "117-16": unknown /* too deep */; "117-20": unknown /* too deep */; "117-30": unknown /* too deep */; "117-40": unknown /* too deep */; "117-80": unknown /* too deep */; "118-16": unknown /* too deep */; "118-20": unknown /* too deep */; "118-30": unknown /* too deep */; "118-40": unknown /* too deep */; "118-80": unknown /* too deep */; "119-16": unknown /* too deep */; "119-20": unknown /* too deep */; "119-30": unknown /* too deep */; "119-40": unknown /* too deep */; "119-80": unknown /* too deep */; "120-16": unknown /* too deep */; "120-20": unknown /* too deep */; "120-30": unknown /* too deep */; "120-40": unknown /* too deep */; "120-80": unknown /* too deep */; "121-16": unknown /* too deep */; "121-20": unknown /* too deep */; "121-30": unknown /* too deep */; "121-40": unknown /* too deep */; "121-80": unknown /* too deep */; "122-16": unknown /* too deep */; "122-20": unknown /* too deep */; "122-30": unknown /* too deep */; "122-40": unknown /* too deep */; "122-80": unknown /* too deep */; "123-16": unknown /* too deep */; "123-20": unknown /* too deep */; "123-30": unknown /* too deep */; "123-40": unknown /* too deep */; "123-80": unknown /* too deep */; "124-16": unknown /* too deep */; "124-20": unknown /* too deep */; "124-30": unknown /* too deep */; "124-40": unknown /* too deep */; "124-80": unknown /* too deep */; "125-16": unknown /* too deep */; "125-20": unknown /* too deep */; "125-30": unknown /* too deep */; "125-40": unknown /* too deep */; "125-80": unknown /* too deep */; "126-16": unknown /* too deep */; "126-20": unknown /* too deep */; "126-30": unknown /* too deep */; "126-40": unknown /* too deep */; "126-80": unknown /* too deep */; "130-16": unknown /* too deep */; "130-20": unknown /* too deep */; "130-30": unknown /* too deep */; "130-40": unknown /* too deep */; "130-80": unknown /* too deep */; "144-16": unknown /* too deep */; "144-20": unknown /* too deep */; "144-30": unknown /* too deep */; "144-40": unknown /* too deep */; "144-80": unknown /* too deep */; "32-16": unknown /* too deep */; "32-20": unknown /* too deep */; "32-30": unknown /* too deep */; "32-40": unknown /* too deep */; "32-80": unknown /* too deep */; "33-16": unknown /* too deep */; "33-20": unknown /* too deep */; "33-30": unknown /* too deep */; "33-40": unknown /* too deep */; "33-80": unknown /* too deep */; "34-16": unknown /* too deep */; "34-20": unknown /* too deep */; "34-30": unknown /* too deep */; "34-40": unknown /* too deep */; "34-80": unknown /* too deep */; "35-16": unknown /* too deep */; "35-20": unknown /* too deep */; "35-30": unknown /* too deep */; "35-40": unknown /* too deep */; "35-80": unknown /* too deep */; "36-16": unknown /* too deep */; "36-20": unknown /* too deep */; "36-30": unknown /* too deep */; "36-40": unknown /* too deep */; "36-80": unknown /* too deep */; "37-16": unknown /* too deep */; "37-20": unknown /* too deep */; "37-30": unknown /* too deep */; "37-40": unknown /* too deep */; "37-80": unknown /* too deep */; "38-16": unknown /* too deep */; "38-20": unknown /* too deep */; "38-30": unknown /* too deep */; "38-40": unknown /* too deep */; "38-80": unknown /* too deep */; "39-16": unknown /* too deep */; "39-20": unknown /* too deep */; "39-30": unknown /* too deep */; "39-40": unknown /* too deep */; "39-80": unknown /* too deep */; "40-16": unknown /* too deep */; "40-20": unknown /* too deep */; "40-30": unknown /* too deep */; "40-40": unknown /* too deep */; "40-80": unknown /* too deep */; "41-16": unknown /* too deep */; "41-20": unknown /* too deep */; "41-30": unknown /* too deep */; "41-40": unknown /* too deep */; "41-80": unknown /* too deep */; "42-16": unknown /* too deep */; "42-20": unknown /* too deep */; "42-30": unknown /* too deep */; "42-40": unknown /* too deep */; "42-80": unknown /* too deep */; "43-16": unknown /* too deep */; "43-20": unknown /* too deep */; "43-30": unknown /* too deep */; "43-40": unknown /* too deep */; "43-80": unknown /* too deep */; "44-16": unknown /* too deep */; "44-20": unknown /* too deep */; "44-30": unknown /* too deep */; "44-40": unknown /* too deep */; "44-80": unknown /* too deep */; "45-16": unknown /* too deep */; "45-20": unknown /* too deep */; "45-30": unknown /* too deep */; "45-40": unknown /* too deep */; "45-80": unknown /* too deep */; "46-16": unknown /* too deep */; "46-20": unknown /* too deep */; "46-30": unknown /* too deep */; "46-40": unknown /* too deep */; "46-80": unknown /* too deep */; "47-16": unknown /* too deep */; "47-20": unknown /* too deep */; "47-30": unknown /* too deep */; "47-40": unknown /* too deep */; "47-80": unknown /* too deep */; "48-16": unknown /* too deep */; "48-20": unknown /* too deep */; "48-30": unknown /* too deep */; "48-40": unknown /* too deep */; "48-80": unknown /* too deep */; "49-16": unknown /* too deep */; "49-20": unknown /* too deep */; "49-30": unknown /* too deep */; "49-40": unknown /* too deep */; "49-80": unknown /* too deep */; "50-16": unknown /* too deep */; "50-20": unknown /* too deep */; "50-30": unknown /* too deep */; "50-40": unknown /* too deep */; "50-80": unknown /* too deep */; "51-16": unknown /* too deep */; "51-20": unknown /* too deep */; "51-30": unknown /* too deep */; "51-40": unknown /* too deep */; "51-80": unknown /* too deep */; "52-16": unknown /* too deep */; "52-20": unknown /* too deep */; "52-30": unknown /* too deep */; "52-40": unknown /* too deep */; "52-80": unknown /* too deep */; "53-16": unknown /* too deep */; "53-20": unknown /* too deep */; "53-30": unknown /* too deep */; "53-40": unknown /* too deep */; "53-80": unknown /* too deep */; "54-16": unknown /* too deep */; "54-20": unknown /* too deep */; "54-30": unknown /* too deep */; "54-40": unknown /* too deep */; "54-80": unknown /* too deep */; "55-16": unknown /* too deep */; "55-20": unknown /* too deep */; "55-30": unknown /* too deep */; "55-40": unknown /* too deep */; "55-80": unknown /* too deep */; "56-16": unknown /* too deep */; "56-20": unknown /* too deep */; "56-30": unknown /* too deep */; "56-40": unknown /* too deep */; "56-80": unknown /* too deep */; "57-16": unknown /* too deep */; "57-20": unknown /* too deep */; "57-30": unknown /* too deep */; "57-40": unknown /* too deep */; "57-80": unknown /* too deep */; "58-16": unknown /* too deep */; "58-20": unknown /* too deep */; "58-30": unknown /* too deep */; "58-40": unknown /* too deep */; "58-80": unknown /* too deep */; "59-16": unknown /* too deep */; "59-20": unknown /* too deep */; "59-30": unknown /* too deep */; "59-40": unknown /* too deep */; "59-80": unknown /* too deep */; "60-16": unknown /* too deep */; "60-20": unknown /* too deep */; "60-30": unknown /* too deep */; "60-40": unknown /* too deep */; "60-80": unknown /* too deep */; "61-16": unknown /* too deep */; "61-20": unknown /* too deep */; "61-30": unknown /* too deep */; "61-40": unknown /* too deep */; "61-80": unknown /* too deep */; "62-16": unknown /* too deep */; "62-20": unknown /* too deep */; "62-30": unknown /* too deep */; "62-40": unknown /* too deep */; "62-80": unknown /* too deep */; "63-16": unknown /* too deep */; "63-20": unknown /* too deep */; "63-30": unknown /* too deep */; "63-40": unknown /* too deep */; "63-80": unknown /* too deep */; "64-16": unknown /* too deep */; "64-20": unknown /* too deep */; "64-30": unknown /* too deep */; "64-40": unknown /* too deep */; "64-80": unknown /* too deep */; "65-16": unknown /* too deep */; "65-20": unknown /* too deep */; "65-30": unknown /* too deep */; "65-40": unknown /* too deep */; "65-80": unknown /* too deep */; "66-16": unknown /* too deep */; "66-20": unknown /* too deep */; "66-30": unknown /* too deep */; "66-40": unknown /* too deep */; "66-80": unknown /* too deep */; "67-16": unknown /* too deep */; "67-20": unknown /* too deep */; "67-30": unknown /* too deep */; "67-40": unknown /* too deep */; "67-80": unknown /* too deep */; "68-16": unknown /* too deep */; "68-20": unknown /* too deep */; "68-30": unknown /* too deep */; "68-40": unknown /* too deep */; "68-80": unknown /* too deep */; "69-16": unknown /* too deep */; "69-20": unknown /* too deep */; "69-30": unknown /* too deep */; "69-40": unknown /* too deep */; "69-80": unknown /* too deep */; "70-16": unknown /* too deep */; "70-20": unknown /* too deep */; "70-30": unknown /* too deep */; "70-40": unknown /* too deep */; "70-80": unknown /* too deep */; "71-16": unknown /* too deep */; "71-20": unknown /* too deep */; "71-30": unknown /* too deep */; "71-40": unknown /* too deep */; "71-80": unknown /* too deep */; "72-16": unknown /* too deep */; "72-20": unknown /* too deep */; "72-30": unknown /* too deep */; "72-40": unknown /* too deep */; "72-80": unknown /* too deep */; "73-16": unknown /* too deep */; "73-20": unknown /* too deep */; "73-30": unknown /* too deep */; "73-40": unknown /* too deep */; "73-80": unknown /* too deep */; "74-16": unknown /* too deep */; "74-20": unknown /* too deep */; "74-30": unknown /* too deep */; "74-40": unknown /* too deep */; "74-80": unknown /* too deep */; "75-16": unknown /* too deep */; "75-20": unknown /* too deep */; "75-30": unknown /* too deep */; "75-40": unknown /* too deep */; "75-80": unknown /* too deep */; "76-16": unknown /* too deep */; "76-20": unknown /* too deep */; "76-30": unknown /* too deep */; "76-40": unknown /* too deep */; "76-80": unknown /* too deep */; "77-16": unknown /* too deep */; "77-20": unknown /* too deep */; "77-30": unknown /* too deep */; "77-40": unknown /* too deep */; "77-80": unknown /* too deep */; "78-16": unknown /* too deep */; "78-20": unknown /* too deep */; "78-30": unknown /* too deep */; "78-40": unknown /* too deep */; "78-80": unknown /* too deep */; "79-16": unknown /* too deep */; "79-20": unknown /* too deep */; "79-30": unknown /* too deep */; "79-40": unknown /* too deep */; "79-80": unknown /* too deep */; "80-16": unknown /* too deep */; "80-20": unknown /* too deep */; "80-30": unknown /* too deep */; "80-40": unknown /* too deep */; "80-80": unknown /* too deep */; "81-16": unknown /* too deep */; "81-20": unknown /* too deep */; "81-30": unknown /* too deep */; "81-40": unknown /* too deep */; "81-80": unknown /* too deep */; "82-16": unknown /* too deep */; "82-20": unknown /* too deep */; "82-30": unknown /* too deep */; "82-40": unknown /* too deep */; "82-80": unknown /* too deep */; "83-16": unknown /* too deep */; "83-20": unknown /* too deep */; "83-30": unknown /* too deep */; "83-40": unknown /* too deep */; "83-80": unknown /* too deep */; "84-16": unknown /* too deep */; "84-20": unknown /* too deep */; "84-30": unknown /* too deep */; "84-40": unknown /* too deep */; "84-80": unknown /* too deep */; "85-16": unknown /* too deep */; "85-20": unknown /* too deep */; "85-30": unknown /* too deep */; "85-40": unknown /* too deep */; "85-80": unknown /* too deep */; "86-16": unknown /* too deep */; "86-20": unknown /* too deep */; "86-30": unknown /* too deep */; "86-40": unknown /* too deep */; "86-80": unknown /* too deep */; "87-16": unknown /* too deep */; "87-20": unknown /* too deep */; "87-30": unknown /* too deep */; "87-40": unknown /* too deep */; "87-80": unknown /* too deep */; "88-16": unknown /* too deep */; "88-20": unknown /* too deep */; "88-30": unknown /* too deep */; "88-40": unknown /* too deep */; "88-80": unknown /* too deep */; "89-16": unknown /* too deep */; "89-20": unknown /* too deep */; "89-30": unknown /* too deep */; "89-40": unknown /* too deep */; "89-80": unknown /* too deep */; "90-16": unknown /* too deep */; "90-20": unknown /* too deep */; "90-30": unknown /* too deep */; "90-40": unknown /* too deep */; "90-80": unknown /* too deep */; "91-16": unknown /* too deep */; "91-20": unknown /* too deep */; "91-30": unknown /* too deep */; "91-40": unknown /* too deep */; "91-80": unknown /* too deep */; "92-16": unknown /* too deep */; "92-20": unknown /* too deep */; "92-30": unknown /* too deep */; "92-40": unknown /* too deep */; "92-80": unknown /* too deep */; "93-16": unknown /* too deep */; "93-20": unknown /* too deep */; "93-30": unknown /* too deep */; "93-40": unknown /* too deep */; "93-80": unknown /* too deep */; "94-16": unknown /* too deep */; "94-20": unknown /* too deep */; "94-30": unknown /* too deep */; "94-40": unknown /* too deep */; "94-80": unknown /* too deep */; "95-16": unknown /* too deep */; "95-20": unknown /* too deep */; "95-30": unknown /* too deep */; "95-40": unknown /* too deep */; "95-80": unknown /* too deep */; "96-16": unknown /* too deep */; "96-20": unknown /* too deep */; "96-30": unknown /* too deep */; "96-40": unknown /* too deep */; "96-80": unknown /* too deep */; "97-16": unknown /* too deep */; "97-20": unknown /* too deep */; "97-30": unknown /* too deep */; "97-40": unknown /* too deep */; "97-80": unknown /* too deep */; "98-16": unknown /* too deep */; "98-20": unknown /* too deep */; "98-30": unknown /* too deep */; "98-40": unknown /* too deep */; "98-80": unknown /* too deep */; "99-16": unknown /* too deep */; "99-20": unknown /* too deep */; "99-30": unknown /* too deep */; "99-40": unknown /* too deep */; "99-80": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { "chest-A-1": unknown /* too deep */; "chest-A-2": unknown /* too deep */; "chest-B-1": unknown /* too deep */; "chest-B-2": unknown /* too deep */; "chest-C-1": unknown /* too deep */; "chest-C-2": unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; } | { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Instance["_game"]; subTextures: { leftArm_0: unknown /* too deep */; legs_0: unknown /* too deep */; legs_1: unknown /* too deep */; legs_2: unknown /* too deep */; legs_3: unknown /* too deep */; legs_4: unknown /* too deep */; outfit: unknown /* too deep */; rightArm_0: unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; tintCache: null; uvMatrix: null; trim: undefined; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; }; })> | Map<string, { _destroyed: boolean; destroyed: boolean; imageKey: string; key: string; destroy(): void; frameData: { _destroyed: boolean; destroyed: boolean; total: number; addFrame(t: unknown): unknown; checkFrameName(t: unknown): unknown; clone(): unknown; destroy(): void; getFrame(t: unknown): unknown; getFrameByName(t: unknown): unknown; getFrameIndexes(t: unknown, i: unknown, n: unknown): unknown; getFrameRange(t: unknown, i: unknown, n: unknown): unknown; getFrames(t: unknown, i: unknown, n: unknown): unknown; _frameNames: unknown /* too deep */; _frames: unknown /* too deep */; }; game: Instance["_game"]; }> | Map<never, never> | Map<string, { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; game: Instance["_game"]; sound: { _destroyed: boolean; autoPlay: boolean; isDecoding: boolean; isDestroyed: boolean; isLoaded: boolean; isPlayable: boolean; isPlaying: boolean; loop: boolean; preload: boolean; singleInstance: boolean; usingAudioTag: boolean; duration: number; speed: number; volume: number; key: string; url: string; filters: undefined; mute: undefined; muted: undefined; paused: undefined; addMarker(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown; addSprites(t: unknown, i: unknown): unknown; autoPlayStart(): unknown; destroy(): void; pause(): unknown; play(t: unknown, i: unknown): unknown; playMarker(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown, o: unknown): unknown; playWithOptions(t: unknown): unknown; refresh(): void; refreshPaused(): void; removeMarker(t: unknown): unknown; removeSprites(t: unknown): unknown; resume(): unknown; stop(): unknown; _onComplete: unknown /* too deep */; _onPause: unknown /* too deep */; _onPlay: unknown /* too deep */; _onResume: unknown /* too deep */; _onStop: unknown /* too deep */; context: unknown /* too deep */; game: Instance["_game"]; instances: unknown /* too deep */; media: unknown /* too deep */; onComplete: unknown /* too deep */; onPause: unknown /* too deep */; onPlay: unknown /* too deep */; onResume: unknown /* too deep */; onStop: unknown /* too deep */; options: unknown /* too deep */; sound: unknown /* too deep */; sprites: unknown /* too deep */; }; }>)>;
			_game: Instance["_game"];
			game: Instance["_game"];
		};
		_config: {
			failIfMajorPerformanceCaveat: boolean;
			roundPixels: boolean;
			height: number;
			width: number;
			parent: string;
		};
		_consoleLogger: {
			_shouldColorCodeLogs: boolean;
			_minimumLogLevel: number;
			_minimumStackTraceLogLevel: number;
			getLogStyle(t: unknown): unknown;
			getTextSytle(): unknown;
			log(t: unknown, i: unknown): void;
			setColoredLogsEnabled(t: unknown): void;
			setLogLevel(t: unknown): void;
		};
		_device: {
			android: boolean;
			fullscreenKeyboard: boolean;
			iOS: boolean;
			isFullScreenSupported: boolean;
			isInitialized: boolean;
			pointerLock: boolean;
			touch: boolean;
			webAudio: boolean;
			browser: number;
			deviceReadyAt: number;
			os: number;
			cancelFullscreen: string;
			requestFullscreen: string;
			wheelEvent: string;
			mspointer: undefined;
			checkFullScreen(): void;
			dispatchSignals(): void;
			isAndroidStockBrowser(): unknown;
			needsTouchUnlock(): unknown;
			readyCheck(): void;
			whenReady(t: unknown, i: unknown): void;
			callbacks: never[];
			onInitialized: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_device"]["onInitialized"]["_bindings"];
			};
		};
		_input: {
			enabled: boolean;
			pollLocked: boolean;
			recordPointerHistory: boolean;
			resetLocked: boolean;
			_pollCounter: number;
			_x: number;
			_y: number;
			doubleTapRate: number;
			holdRate: number;
			justPressedRate: number;
			justReleasedRate: number;
			maxPointers: number;
			minPriorityID: number;
			multiInputOverride: number;
			pollRate: number;
			recordLimit: number;
			recordRate: number;
			tapRate: number;
			totalActivePointers: number;
			totalInactivePointers: number;
			worldX: number;
			worldY: number;
			x: number;
			y: number;
			customCandidateHandler: null;
			customCandidateHandlerContext: null;
			addMoveCallback(t: unknown, i: unknown): void;
			addPointer(): unknown;
			addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
			boot(t: unknown): void;
			clearEnterCallback(): void;
			countActivePointers(t: unknown): unknown;
			deleteMoveCallback(t: unknown, i: unknown): void;
			destroy(): void;
			executeTouchLockCallbacks(t: unknown, i: unknown): void;
			getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
			getPointer(t: unknown): unknown;
			getPointerFromId(t: unknown): unknown;
			getPointerFromIdentifier(t: unknown): unknown;
			hitTest(t: unknown, i: unknown): unknown;
			preUpdate(): void;
			removeTouchLockCallback(t: unknown, i: unknown): unknown;
			reset(t: unknown): void;
			resetSpeed(t: unknown, i: unknown): void;
			setEnterCallback(t: unknown): void;
			setInteractiveCandidateHandler(t: unknown, i: unknown): void;
			startPointer(t: unknown): unknown;
			stopPointer(t: unknown, i: unknown): unknown;
			update(): void;
			updateChildren(t: unknown): void;
			updateInteractiveItems(): void;
			updatePointer(t: unknown): unknown;
			hitCanvas: HTMLCanvasElement;
			hitContext: CanvasRenderingContext2D;
			_oldPosition: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			activePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: never[];
				backButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["backButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["backButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["activePointer"];
					time: {
						_deltaMS: number;
						_pauseStarted: number;
						_prevTimeMS: number;
						_started: number;
						_timeMS: number;
						deltaMS: number;
						desiredFps: number;
						pauseDuration: number;
						prevTimeMS: number;
						timeMS: number;
						timeToCall: number;
						add(t: unknown): unknown;
						boot(): void;
						create(t: unknown): unknown;
						elapsedSecondsSince(t: unknown): unknown;
						elapsedSince(t: unknown): unknown;
						gamePaused(): void;
						gameResumed(): void;
						removeAll(): void;
						reset(): void;
						setTime(t: unknown): void;
						totalElapsedSeconds(): unknown;
						update(t: unknown): void;
						updateTimers(): void;
						_timers: never[];
						events: {
							autoDestroy: boolean;
							expired: boolean;
							paused: boolean;
							running: boolean;
							_i: number;
							_len: number;
							_marked: number;
							_newTick: number;
							_now: number;
							_pauseStarted: number;
							_pauseTotal: number;
							_started: number;
							duration: number;
							elapsed: number;
							length: number;
							ms: number;
							next: number;
							nextTick: number;
							seconds: number;
							timeCap: number;
							addTimer(t: unknown, i: unknown, n: unknown): unknown;
							adjustEvents(t: unknown): void;
							clearPendingEvents(): void;
							createTimer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							destroy(): void;
							loop(t: unknown, i: unknown, n: unknown): unknown;
							order(): void;
							pause(): void;
							remove(t: unknown): unknown;
							removeAll(): void;
							repeat(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							resume(): void;
							sortHandler(t: unknown, i: unknown): unknown;
							start(t: unknown): void;
							stop(t: unknown): void;
							update(t: unknown): unknown;
							events: unknown /* too deep */;
							game: Instance["_game"];
							onComplete: unknown /* too deep */;
						};
						game: Instance["_game"];
					};
				};
				circle: {
					_diameter: number;
					_radius: number;
					circumference: number;
					diameter: number;
					radius: number;
					x: number;
					y: number;
					circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
					getBounds(): unknown;
					setTo(t: unknown, i: unknown, n: unknown): unknown;
				};
				eraserButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["eraserButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["eraserButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["activePointer"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				forwardButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["forwardButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["forwardButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["activePointer"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				game: Instance["_game"];
				interactiveCandidates: never[];
				leftButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["leftButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["leftButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["activePointer"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				middleButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["middleButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["middleButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["activePointer"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				position: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				positionDown: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				positionUp: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				rightButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["rightButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["activePointer"]["rightButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["activePointer"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
			};
			circle: {
				_diameter: number;
				_radius: number;
				circumference: number;
				diameter: number;
				radius: number;
				x: number;
				y: number;
				circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
				getBounds(): unknown;
				setTo(t: unknown, i: unknown, n: unknown): unknown;
			};
			game: Instance["_game"];
			interactiveItems: {
				_cursor: number;
				total: number;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: { _dragDistancePass: boolean; _dragPhase: boolean; _dragTimePass: boolean; _pendingDrag: boolean; _setHandCursor: boolean; _wasEnabled: boolean; allowHorizontalDrag: boolean; allowVerticalDrag: boolean; bringToTop: boolean; checked: boolean; dragFromCenter: boolean; draggable: boolean; dragStopBlocksInputUp: boolean; enabled: boolean; isDragged: boolean; snapOnDrag: boolean; snapOnRelease: boolean; useHandCursor: boolean; dragDistanceThreshold: number; dragTimeThreshold: number; priorityID: number; snapOffsetX: number; snapOffsetY: number; snapX: number; snapY: number; boundsRect: null; boundsSprite: null; _pointerOutHandler(t: unknown, i: unknown): void; _pointerOverHandler(t: unknown, i: unknown): void; _releasedHandler(t: unknown): void; _touchedHandler(t: unknown): unknown; addedToGroup(): void; checkBoundsRect(): void; checkBoundsSprite(): void; checkPointerDown(t: unknown): unknown; checkPointerOver(t: unknown, i: unknown): unknown; destroy(): void; disableDrag(): void; disableSnap(): void; downDuration(t: unknown): unknown; dragTimeElapsed(t: unknown): void; enableDrag(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; enableSnap(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void; globalToLocal(t: unknown): unknown; justOut(t: unknown, i: unknown): unknown; justOver(t: unknown, i: unknown): unknown; justPressed(t: unknown, i: unknown): unknown; justReleased(t: unknown, i: unknown): unknown; overDuration(t: unknown): unknown; pointerDown(t: unknown): unknown; pointerDragged(t: unknown): unknown; pointerOut(t: unknown): unknown; pointerOver(t: unknown): unknown; pointerTimeDown(t: unknown): unknown; pointerTimeOut(t: unknown): unknown; pointerTimeOver(t: unknown): unknown; pointerTimeUp(t: unknown): unknown; pointerUp(t: unknown): unknown; pointerX(t: unknown): unknown; pointerY(t: unknown): unknown; removedFromGroup(): void; reset(): void; setDragLock(t: unknown, i: unknown): void; start(t: unknown, i: unknown): unknown; startDrag(t: unknown): void; stop(): void; stopDrag(t: unknown): void; update(t: unknown): unknown; updateDrag(t: unknown, i: unknown): unknown; validForInput(t: unknown): unknown; _dragPoint: unknown /* too deep */; _pointerData: unknown /* too deep */; _tempPoint: unknown /* too deep */; downPoint: unknown /* too deep */; dragOffset: unknown /* too deep */; dragStartPoint: unknown /* too deep */; game: Instance["_game"]; snapOffset: unknown /* too deep */; snapPoint: unknown /* too deep */; sprite: unknown /* too deep */; }[];
				first: {
					_dragDistancePass: boolean;
					_dragPhase: boolean;
					_dragTimePass: boolean;
					_pendingDrag: boolean;
					_setHandCursor: boolean;
					_wasEnabled: boolean;
					allowHorizontalDrag: boolean;
					allowVerticalDrag: boolean;
					bringToTop: boolean;
					checked: boolean;
					dragFromCenter: boolean;
					draggable: boolean;
					dragStopBlocksInputUp: boolean;
					enabled: boolean;
					isDragged: boolean;
					snapOnDrag: boolean;
					snapOnRelease: boolean;
					useHandCursor: boolean;
					dragDistanceThreshold: number;
					dragTimeThreshold: number;
					priorityID: number;
					snapOffsetX: number;
					snapOffsetY: number;
					snapX: number;
					snapY: number;
					boundsRect: null;
					boundsSprite: null;
					_pointerOutHandler(t: unknown, i: unknown): void;
					_pointerOverHandler(t: unknown, i: unknown): void;
					_releasedHandler(t: unknown): void;
					_touchedHandler(t: unknown): unknown;
					addedToGroup(): void;
					checkBoundsRect(): void;
					checkBoundsSprite(): void;
					checkPointerDown(t: unknown): unknown;
					checkPointerOver(t: unknown, i: unknown): unknown;
					destroy(): void;
					disableDrag(): void;
					disableSnap(): void;
					downDuration(t: unknown): unknown;
					dragTimeElapsed(t: unknown): void;
					enableDrag(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
					enableSnap(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					globalToLocal(t: unknown): unknown;
					justOut(t: unknown, i: unknown): unknown;
					justOver(t: unknown, i: unknown): unknown;
					justPressed(t: unknown, i: unknown): unknown;
					justReleased(t: unknown, i: unknown): unknown;
					overDuration(t: unknown): unknown;
					pointerDown(t: unknown): unknown;
					pointerDragged(t: unknown): unknown;
					pointerOut(t: unknown): unknown;
					pointerOver(t: unknown): unknown;
					pointerTimeDown(t: unknown): unknown;
					pointerTimeOut(t: unknown): unknown;
					pointerTimeOver(t: unknown): unknown;
					pointerTimeUp(t: unknown): unknown;
					pointerUp(t: unknown): unknown;
					pointerX(t: unknown): unknown;
					pointerY(t: unknown): unknown;
					removedFromGroup(): void;
					reset(): void;
					setDragLock(t: unknown, i: unknown): void;
					start(t: unknown, i: unknown): unknown;
					startDrag(t: unknown): void;
					stop(): void;
					stopDrag(t: unknown): void;
					update(t: unknown): unknown;
					updateDrag(t: unknown, i: unknown): unknown;
					validForInput(t: unknown): unknown;
					_dragPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					_pointerData: unknown /* too deep */[];
					_tempPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					downPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					dragOffset: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					dragStartPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					game: Instance["_game"];
					snapOffset: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					snapPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					sprite: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						_roundPixels: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						exists: boolean;
						fixedToCamera: boolean;
						inputEnabled: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						pendingDestroy: boolean;
						renderable: boolean;
						roundPixels: boolean;
						smoothed: boolean;
						sortableChildren: boolean;
						sortDirty: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_cachedTint: number;
						_eventsCount: number;
						_height: number;
						_lastSortedIndex: number;
						_textureID: number;
						_textureTrimmedID: number;
						_tint: number;
						_tintRGB: number;
						_transformID: number;
						_transformTrimmedID: number;
						_width: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						blendMode: number;
						bottom: number;
						cachedTint: number;
						centerX: number;
						centerY: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						renderId: number;
						right: number;
						rotation: number;
						tabIndex: number;
						tint: number;
						top: number;
						width: number;
						worldAlpha: number;
						worldRotation: number;
						x: number;
						y: number;
						z: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						frameName: string;
						key: string;
						pluginName: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_mask: null;
						_tintedCanvas: null;
						_tintedTexture: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						name: null;
						scaleMax: null;
						scaleMin: null;
						tintedTexture: null;
						transformCallbackContext: null;
						vertexTrimmedData: null;
						frame: undefined;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateBounds(): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_onAnchorUpdate(): void;
						_onTextureUpdate(): void;
						_recursivePostUpdateTransform(): void;
						_render(t: unknown): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						_renderCanvas(t: unknown): void;
						_renderWebGL(t: unknown): void;
						addChild(): unknown;
						addChildAt(t: unknown, e: unknown): unknown;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						bringChildToTop(t: unknown): void;
						calculateBounds(): void;
						calculateTrimmedVertices(): unknown;
						calculateVertices(): void;
						containerUpdateTransform(): void;
						containsPoint(t: unknown): unknown;
						destroy(i: unknown): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getChildAt(t: unknown): unknown;
						getChildByName(t: unknown, e: unknown): unknown;
						getChildIndex(t: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						loadTexture(t: unknown, i: unknown): void;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						onChildrenChange(t: unknown): void;
						removeAllListeners(t: unknown): unknown;
						removeChild(): unknown;
						removeChildAt(t: unknown): unknown;
						removeChildren(t: unknown, e: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						render(t: unknown): void;
						renderAdvanced(t: unknown): void;
						renderAdvancedWebGL(t: unknown): void;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						sendChildToBack(t: unknown): void;
						setChildIndex(t: unknown, e: unknown): void;
						setFrame(t: unknown): void;
						setParent(t: unknown): unknown;
						setTexture(t: unknown, i: unknown): void;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						sortChildren(): void;
						swapChildren(t: unknown, e: unknown): void;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						update(): void;
						updateFrame(t: unknown): void;
						updateTexture(t: unknown): void;
						updateTransform(): void;
						indices: Uint16Array;
						uvs: Float32Array;
						vertexData: Float32Array;
						_anchor: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"];
						};
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_localBoundsRect: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_texture: {
							noFrame: boolean;
							valid: boolean;
							_eventsCount: number;
							_rotate: number;
							_updateID: number;
							height: number;
							resolution: number;
							rotate: number;
							width: number;
							patternCache: null;
							trim: null;
							uvMatrix: null;
							_updateUvs(): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							castToBaseTexture(): unknown;
							clone(): unknown;
							destroy(t: unknown): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							eventNames(): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							onBaseTextureUpdated(t: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							update(): void;
							updateUvs(): void;
							_events: unknown /* too deep */;
							_frame: unknown /* too deep */;
							_uvs: unknown /* too deep */;
							baseTexture: unknown /* too deep */;
							defaultAnchor: unknown /* too deep */;
							frame: unknown /* too deep */;
							orig: unknown /* too deep */;
							textureCacheIds: unknown /* too deep */;
							tintCache: unknown /* too deep */;
						};
						_trackedPointers: {};
						anchor: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["_anchor"];
						animations: never;
						bounds: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						cameraOffset: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						children: never[];
						events: {
							destroy(): void;
							onAddedToGroup: unknown /* too deep */;
							onAnimationComplete: unknown /* too deep */;
							onAnimationLoop: unknown /* too deep */;
							onAnimationStart: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							onDragStart: unknown /* too deep */;
							onDragStop: unknown /* too deep */;
							onDragUpdate: unknown /* too deep */;
							onEnterBounds: unknown /* too deep */;
							onInputDown: unknown /* too deep */;
							onInputOut: unknown /* too deep */;
							onInputOver: unknown /* too deep */;
							onInputUp: unknown /* too deep */;
							onOutOfBounds: unknown /* too deep */;
							onRemovedFromGroup: unknown /* too deep */;
							onRemovedFromWorld: unknown /* too deep */;
							parent: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"];
						};
						game: Instance["_game"];
						input: Instance["_game"]["_input"]["interactiveItems"]["first"];
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						parent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							totalHeight: number;
							totalWidth: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_element: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							onDown: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addElementClass(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							changePanel(t: unknown): void;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getAutomationSignature(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildElements(): unknown;
							getChildIndex(t: unknown): unknown;
							getClassName(): unknown;
							getElement(): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							hasTooltip(): unknown;
							highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
							isHighlighted(): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							onGetUIElement(t: unknown): unknown;
							registerGetElementListener(): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setClickable(t: unknown, i: unknown, n: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setRenderState(t: unknown, i: unknown): void;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							shouldCreateAndStageElement(): unknown;
							showTooltip(t: unknown, i: unknown): void;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							unregisterGetElementListener(): void;
							update(): void;
							updateElementAttribute(t: unknown, i: unknown): void;
							updateElementAttributes(t: unknown): void;
							updateElementPosition(t: unknown, i: unknown): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							game: Instance["_game"];
							images: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							metricsManager: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						previousPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						stage: Instance["_game"]["_add"]["stage"];
						tempDisplayObjectParent: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["_tempDisplayObjectParent"];
						texture: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["_texture"];
						trackedPointers: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["localTransform"];
							pivot: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["pivot"];
							position: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["position"];
							scale: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["scale"];
							skew: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						world: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldScale: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["scale"];
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
				};
				list: Instance["_game"]["_input"]["interactiveItems"]["_list"];
				next: {
					_dragDistancePass: boolean;
					_dragPhase: boolean;
					_dragTimePass: boolean;
					_pendingDrag: boolean;
					_setHandCursor: boolean;
					_wasEnabled: boolean;
					allowHorizontalDrag: boolean;
					allowVerticalDrag: boolean;
					bringToTop: boolean;
					checked: boolean;
					dragFromCenter: boolean;
					draggable: boolean;
					dragStopBlocksInputUp: boolean;
					enabled: boolean;
					isDragged: boolean;
					snapOnDrag: boolean;
					snapOnRelease: boolean;
					useHandCursor: boolean;
					dragDistanceThreshold: number;
					dragTimeThreshold: number;
					priorityID: number;
					snapOffsetX: number;
					snapOffsetY: number;
					snapX: number;
					snapY: number;
					boundsRect: null;
					boundsSprite: null;
					_pointerOutHandler(t: unknown, i: unknown): void;
					_pointerOverHandler(t: unknown, i: unknown): void;
					_releasedHandler(t: unknown): void;
					_touchedHandler(t: unknown): unknown;
					addedToGroup(): void;
					checkBoundsRect(): void;
					checkBoundsSprite(): void;
					checkPointerDown(t: unknown): unknown;
					checkPointerOver(t: unknown, i: unknown): unknown;
					destroy(): void;
					disableDrag(): void;
					disableSnap(): void;
					downDuration(t: unknown): unknown;
					dragTimeElapsed(t: unknown): void;
					enableDrag(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
					enableSnap(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					globalToLocal(t: unknown): unknown;
					justOut(t: unknown, i: unknown): unknown;
					justOver(t: unknown, i: unknown): unknown;
					justPressed(t: unknown, i: unknown): unknown;
					justReleased(t: unknown, i: unknown): unknown;
					overDuration(t: unknown): unknown;
					pointerDown(t: unknown): unknown;
					pointerDragged(t: unknown): unknown;
					pointerOut(t: unknown): unknown;
					pointerOver(t: unknown): unknown;
					pointerTimeDown(t: unknown): unknown;
					pointerTimeOut(t: unknown): unknown;
					pointerTimeOver(t: unknown): unknown;
					pointerTimeUp(t: unknown): unknown;
					pointerUp(t: unknown): unknown;
					pointerX(t: unknown): unknown;
					pointerY(t: unknown): unknown;
					removedFromGroup(): void;
					reset(): void;
					setDragLock(t: unknown, i: unknown): void;
					start(t: unknown, i: unknown): unknown;
					startDrag(t: unknown): void;
					stop(): void;
					stopDrag(t: unknown): void;
					update(t: unknown): unknown;
					updateDrag(t: unknown, i: unknown): unknown;
					validForInput(t: unknown): unknown;
					_dragPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					_pointerData: unknown /* too deep */[];
					_tempPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					downPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					dragOffset: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					dragStartPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					game: Instance["_game"];
					snapOffset: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					snapPoint: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					sprite: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						_roundPixels: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						exists: boolean;
						fixedToCamera: boolean;
						inputEnabled: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						pendingDestroy: boolean;
						renderable: boolean;
						roundPixels: boolean;
						smoothed: boolean;
						sortableChildren: boolean;
						sortDirty: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_cachedTint: number;
						_eventsCount: number;
						_height: number;
						_lastSortedIndex: number;
						_textureID: number;
						_textureTrimmedID: number;
						_tint: number;
						_tintRGB: number;
						_transformID: number;
						_transformTrimmedID: number;
						_width: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						blendMode: number;
						bottom: number;
						cachedTint: number;
						centerX: number;
						centerY: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						renderId: number;
						right: number;
						rotation: number;
						tabIndex: number;
						tint: number;
						top: number;
						width: number;
						worldAlpha: number;
						worldRotation: number;
						x: number;
						y: number;
						z: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						frameName: string;
						key: string;
						pluginName: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_mask: null;
						_tintedCanvas: null;
						_tintedTexture: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						name: null;
						scaleMax: null;
						scaleMin: null;
						tintedTexture: null;
						transformCallbackContext: null;
						vertexTrimmedData: null;
						frame: undefined;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateBounds(): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_onAnchorUpdate(): void;
						_onTextureUpdate(): void;
						_recursivePostUpdateTransform(): void;
						_render(t: unknown): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						_renderCanvas(t: unknown): void;
						_renderWebGL(t: unknown): void;
						addChild(): unknown;
						addChildAt(t: unknown, e: unknown): unknown;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						bringChildToTop(t: unknown): void;
						calculateBounds(): void;
						calculateTrimmedVertices(): unknown;
						calculateVertices(): void;
						containerUpdateTransform(): void;
						containsPoint(t: unknown): unknown;
						destroy(i: unknown): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getChildAt(t: unknown): unknown;
						getChildByName(t: unknown, e: unknown): unknown;
						getChildIndex(t: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						loadTexture(t: unknown, i: unknown): void;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						onChildrenChange(t: unknown): void;
						removeAllListeners(t: unknown): unknown;
						removeChild(): unknown;
						removeChildAt(t: unknown): unknown;
						removeChildren(t: unknown, e: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						render(t: unknown): void;
						renderAdvanced(t: unknown): void;
						renderAdvancedWebGL(t: unknown): void;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						sendChildToBack(t: unknown): void;
						setChildIndex(t: unknown, e: unknown): void;
						setFrame(t: unknown): void;
						setParent(t: unknown): unknown;
						setTexture(t: unknown, i: unknown): void;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						sortChildren(): void;
						swapChildren(t: unknown, e: unknown): void;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						update(): void;
						updateFrame(t: unknown): void;
						updateTexture(t: unknown): void;
						updateTransform(): void;
						indices: Uint16Array;
						uvs: Float32Array;
						vertexData: Float32Array;
						_anchor: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"];
						};
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_localBoundsRect: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_texture: {
							noFrame: boolean;
							valid: boolean;
							_eventsCount: number;
							_rotate: number;
							_updateID: number;
							height: number;
							resolution: number;
							rotate: number;
							width: number;
							patternCache: null;
							trim: null;
							uvMatrix: null;
							_updateUvs(): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							castToBaseTexture(): unknown;
							clone(): unknown;
							destroy(t: unknown): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							eventNames(): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							onBaseTextureUpdated(t: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							update(): void;
							updateUvs(): void;
							_events: unknown /* too deep */;
							_frame: unknown /* too deep */;
							_uvs: unknown /* too deep */;
							baseTexture: unknown /* too deep */;
							defaultAnchor: unknown /* too deep */;
							frame: unknown /* too deep */;
							orig: unknown /* too deep */;
							textureCacheIds: unknown /* too deep */;
							tintCache: unknown /* too deep */;
						};
						_trackedPointers: {};
						anchor: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["_anchor"];
						animations: never;
						bounds: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						cameraOffset: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						children: never[];
						events: {
							destroy(): void;
							onAddedToGroup: unknown /* too deep */;
							onAnimationComplete: unknown /* too deep */;
							onAnimationLoop: unknown /* too deep */;
							onAnimationStart: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							onDragStart: unknown /* too deep */;
							onDragStop: unknown /* too deep */;
							onDragUpdate: unknown /* too deep */;
							onEnterBounds: unknown /* too deep */;
							onInputDown: unknown /* too deep */;
							onInputOut: unknown /* too deep */;
							onInputOver: unknown /* too deep */;
							onInputUp: unknown /* too deep */;
							onOutOfBounds: unknown /* too deep */;
							onRemovedFromGroup: unknown /* too deep */;
							onRemovedFromWorld: unknown /* too deep */;
							parent: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"];
						};
						game: Instance["_game"];
						input: Instance["_game"]["_input"]["interactiveItems"]["next"];
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						parent: Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["parent"];
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						previousPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						stage: Instance["_game"]["_add"]["stage"];
						tempDisplayObjectParent: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["_tempDisplayObjectParent"];
						texture: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["_texture"];
						trackedPointers: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["localTransform"];
							pivot: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["pivot"];
							position: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["position"];
							scale: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["scale"];
							skew: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						world: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldScale: Instance["_game"]["_input"]["interactiveItems"]["next"]["sprite"]["scale"];
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
				};
			};
			keyboard: {
				active: boolean;
				enabled: boolean;
				_i: number;
				_k: number;
				event: null;
				lastChar: null;
				pressEvent: null;
				lastKey: undefined;
				_onKeyDown(i: unknown): void;
				_onKeyPress(i: unknown): void;
				_onKeyUp(i: unknown): void;
				addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
				addKey(t: unknown): unknown;
				addKeyCapture(t: unknown): void;
				addKeys(t: unknown): unknown;
				clearCaptures(): void;
				createCursorKeys(): unknown;
				destroy(): void;
				downDuration(t: unknown, i: unknown): unknown;
				isDown(t: unknown): unknown;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				onDownCallback(arg0: unknown): void;
				onPressCallback(arg0: unknown): void;
				onUpCallback(arg0: unknown): void;
				processKeyDown(t: unknown): void;
				processKeyPress(t: unknown): void;
				processKeyUp(t: unknown): void;
				removeCallbacks(): void;
				removeKey(t: unknown): void;
				removeKeyCapture(t: unknown): void;
				reset(t: unknown): void;
				start(): unknown;
				stop(): void;
				update(): void;
				upDuration(t: unknown, i: unknown): unknown;
				_capture: boolean[];
				_keys: never[];
				callbackContext: Instance["_game"]["_input"]["keyboard"];
				game: Instance["_game"];
			};
			mouse: {
				active: boolean;
				capture: boolean;
				enabled: boolean;
				stopOnGameOut: boolean;
				wheelDelta: number;
				_onMouseDown(i: unknown): void;
				_onMouseMove(i: unknown): void;
				_onMouseOut(i: unknown): void;
				_onMouseOutGlobal(i: unknown): void;
				_onMouseOver(i: unknown): void;
				_onMouseUp(i: unknown): void;
				_onMouseUpGlobal(i: unknown): void;
				addMouseWheelCallback(t: unknown): unknown;
				onMouseDown(t: unknown): void;
				onMouseMove(t: unknown): void;
				onMouseOut(t: unknown): void;
				onMouseOutGlobal(t: unknown): void;
				onMouseOver(t: unknown): void;
				onMouseUp(t: unknown): void;
				onMouseUpGlobal(t: unknown): void;
				removeMouseWheelCallback(t: unknown): void;
				start(): unknown;
				stop(): void;
				event: MouseEvent;
				callbackContext: Instance["_game"];
				game: Instance["_game"];
				input: Instance["_game"]["_input"];
			};
			mousePointer: Instance["_game"]["_input"]["activePointer"];
			mouseWheel: {
				active: boolean;
				preventDefault: boolean;
				delta: number;
				wheelEventName: string;
				boundOnWheelHandler(arg0: unknown): void;
				onWheelHandler(t: unknown): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				callbackContext: Instance["_game"];
				callbacks: ((arg0: unknown) => void)[];
				game: Instance["_game"];
			};
			mspointer: {
				active: boolean;
				pointerDownCallback: null;
				pointerMoveCallback: null;
				pointerUpCallback: null;
				onPointerDown(i: unknown): void;
				onPointerMove(i: unknown): void;
				onPointerOut(i: unknown): void;
				onPointerOver(i: unknown): void;
				onPointerUp(i: unknown): void;
				onPointerUpGlobal(i: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: Instance["_game"];
				game: Instance["_game"];
				input: Instance["_game"]["_input"];
			};
			onDown: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Instance["_game"]["_input"]["onDown"]; context: unknown /* too deep */; }[];
				bindings: Instance["_game"]["_input"]["onDown"]["_bindings"];
			};
			onHold: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_input"]["onHold"]["_bindings"];
			};
			onPointerMove: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_input"]["onPointerMove"]["_bindings"];
			};
			onTap: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_input"]["onTap"]["_bindings"];
			};
			onTouchEndEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_input"]["onTouchEndEvent"]["_bindings"];
			};
			onTouchStartEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_input"]["onTouchStartEvent"]["_bindings"];
			};
			onUp: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Instance["_game"]["_input"]["onUp"]; context: unknown /* too deep */; }[];
				bindings: Instance["_game"]["_input"]["onUp"]["_bindings"];
			};
			pointer1: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: never[];
				backButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["backButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["backButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer1"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				circle: {
					_diameter: number;
					_radius: number;
					circumference: number;
					diameter: number;
					radius: number;
					x: number;
					y: number;
					circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
					getBounds(): unknown;
					setTo(t: unknown, i: unknown, n: unknown): unknown;
				};
				eraserButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["eraserButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["eraserButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer1"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				forwardButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["forwardButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["forwardButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer1"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				game: Instance["_game"];
				interactiveCandidates: never[];
				leftButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["leftButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["leftButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer1"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				middleButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["middleButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["middleButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer1"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				position: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				positionDown: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				positionUp: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				rightButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["rightButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer1"]["rightButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer1"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
			};
			pointer2: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: never[];
				backButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["backButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["backButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer2"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				circle: {
					_diameter: number;
					_radius: number;
					circumference: number;
					diameter: number;
					radius: number;
					x: number;
					y: number;
					circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
					getBounds(): unknown;
					setTo(t: unknown, i: unknown, n: unknown): unknown;
				};
				eraserButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["eraserButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["eraserButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer2"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				forwardButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["forwardButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["forwardButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer2"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				game: Instance["_game"];
				interactiveCandidates: never[];
				leftButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["leftButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["leftButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer2"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				middleButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["middleButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["middleButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer2"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
				position: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				positionDown: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				positionUp: {
					_recalculateMagnitude: boolean;
					_recalculateMagnitudeSq: boolean;
					_magnitude: number;
					_magnitudeSq: number;
					_x: number;
					_y: number;
					x: number;
					y: number;
					add(t: unknown): void;
					angle(t: unknown): unknown;
					ceil(): void;
					clamp(t: unknown, i: unknown, n: unknown): void;
					clip(t: unknown): void;
					copyFrom(t: unknown): unknown;
					copyTo(i: unknown): unknown;
					cross(t: unknown): unknown;
					divide(t: unknown): void;
					dot(t: unknown): unknown;
					equals(t: unknown): unknown;
					floor(): void;
					getDistance(t: unknown): unknown;
					getDistanceSq(t: unknown): unknown;
					getMagnitude(): unknown;
					getMagnitudeSq(): unknown;
					interpolate(t: unknown, i: unknown): void;
					invert(): void;
					isNearlyEqual(t: unknown, i: unknown): unknown;
					isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
					isZero(): unknown;
					multiply(t: unknown): void;
					negate(): void;
					normalize(): void;
					normalRightHand(): void;
					perpendicular(t: unknown): void;
					print(t: unknown): void;
					project(t: unknown, i: unknown): void;
					recalculateMagnitude(): void;
					recalculateMagnitudeSq(): void;
					rotate(t: unknown, i: unknown, n: unknown): void;
					round(): void;
					set(t: unknown, i: unknown): void;
					setTo(t: unknown, i: unknown): void;
					setToPolar(t: unknown, i: unknown): void;
					subtract(t: unknown): void;
					toString(): unknown;
					trunc(): void;
				};
				rightButton: {
					altKey: boolean;
					ctrlKey: boolean;
					isDown: boolean;
					isUp: boolean;
					shiftKey: boolean;
					buttonCode: number;
					duration: number;
					timeDown: number;
					timeUp: number;
					value: number;
					event: null;
					destroy(): void;
					justPressed(t: unknown): unknown;
					justReleased(t: unknown): unknown;
					reset(): void;
					start(t: unknown, i: unknown): void;
					startStop(t: unknown, i: unknown, n: unknown): void;
					stop(t: unknown, i: unknown): void;
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["rightButton"]["onDown"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_input"]["pointer2"]["rightButton"]["onUp"]["_bindings"];
					};
					parent: Instance["_game"]["_input"]["pointer2"];
					time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
				};
			};
			pointerLock: {
				active: boolean;
				locked: boolean;
				pointerlockchange: undefined;
				pointerLockElement: undefined;
				pointerlockerror: undefined;
				boundOnChangeHandler(arg0: unknown): void;
				boundOnErrorHandler(arg0: unknown): void;
				exit(): void;
				onChangeHandler(t: unknown): void;
				onErrorHandler(t: unknown): void;
				request(): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				game: Instance["_game"];
				onChange: {
					_shouldPropagate: boolean;
					active: boolean;
					memorize: boolean;
					_addBinding(t: unknown): void;
					_boundDispatch(): unknown;
					_indexOfListener(t: unknown, i: unknown): unknown;
					add(t: unknown, i: unknown, n: unknown): unknown;
					addOnce(t: unknown, i: unknown, n: unknown): unknown;
					boundDispatch(): unknown;
					dispatch(): void;
					dispose(): void;
					forget(): void;
					getNumListeners(): unknown;
					halt(): void;
					has(t: unknown, i: unknown): unknown;
					registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					toString(): unknown;
					validateListener(t: unknown, i: unknown): void;
					_bindings: never[];
					bindings: Instance["_game"]["_input"]["pointerLock"]["onChange"]["_bindings"];
				};
				onError: {
					_shouldPropagate: boolean;
					active: boolean;
					memorize: boolean;
					_addBinding(t: unknown): void;
					_boundDispatch(): unknown;
					_indexOfListener(t: unknown, i: unknown): unknown;
					add(t: unknown, i: unknown, n: unknown): unknown;
					addOnce(t: unknown, i: unknown, n: unknown): unknown;
					boundDispatch(): unknown;
					dispatch(): void;
					dispose(): void;
					forget(): void;
					getNumListeners(): unknown;
					halt(): void;
					has(t: unknown, i: unknown): unknown;
					registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					toString(): unknown;
					validateListener(t: unknown, i: unknown): void;
					_bindings: never[];
					bindings: Instance["_game"]["_input"]["pointerLock"]["onError"]["_bindings"];
				};
			};
			pointers: (Instance["_game"]["_input"]["pointer1"] | Instance["_game"]["_input"]["pointer2"])[];
			position: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scale: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			speed: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			touch: {
				active: boolean;
				enabled: boolean;
				consumeDocumentTouches(): void;
				onTouchCancel(t: unknown): void;
				onTouchEnd(t: unknown): void;
				onTouchEnter(t: unknown): void;
				onTouchLeave(t: unknown): void;
				onTouchMove(t: unknown): void;
				onTouchStart(t: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: Instance["_game"];
				game: Instance["_game"];
			};
		};
		_load: {
			isLoading: boolean;
			_crossOrigin: string;
			baseURL: string;
			crossOrigin: string;
			addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
			atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
			audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			fileCompleteCallback(t: unknown, i: unknown): void;
			fileStartCallback(t: unknown): void;
			getMaxParallelDownloads(): unknown;
			getNumLoadedFiles(): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown): void;
			json(t: unknown, i: unknown, n: unknown, e: unknown): void;
			processImage(t: unknown, i: unknown, n: unknown): void;
			processJSON(t: unknown, i: unknown, n: unknown): void;
			processScript(t: unknown, i: unknown): void;
			processSound(t: unknown, i: unknown, n: unknown): void;
			processSpine(t: unknown, i: unknown, n: unknown): void;
			processSpritesheet(t: unknown, i: unknown, n: unknown): void;
			processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			reset(t: unknown): void;
			script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			setupFileCallbacks(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
			spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			start(): void;
			totalQueuedFiles(): unknown;
			_loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: (((t: unknown, e: unknown) => unknown) | ((t: unknown, e: unknown) => void) | ((e: unknown, r: unknown) => void) | ((e: unknown, n: unknown) => unknown))[];
				_beforeMiddleware: ((t: unknown, e: unknown) => void)[];
				_queue: {
					paused: boolean;
					started: boolean;
					buffer: number;
					concurrency: number;
					drain(): void;
					empty(): void;
					error(): void;
					idle(): unknown;
					kill(): void;
					length(): unknown;
					pause(): void;
					process(): void;
					push(t: unknown, e: unknown): void;
					resume(): void;
					running(): unknown;
					saturated(): void;
					unsaturated(): void;
					unshift(t: unknown, e: unknown): void;
					_tasks: never[];
				};
				_resourcesParsing: never[];
				onComplete: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onError: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onLoad: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onProgress: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				onStart: {
					_head: undefined;
					_tail: undefined;
					add(t: unknown): unknown;
					detach(t: unknown): unknown;
					detachAll(): unknown;
					dispatch(): unknown;
					handlers(): unknown;
					has(t: unknown): unknown;
					once(t: unknown): unknown;
				};
				resources: {};
			};
			_onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(t: unknown, i: unknown, n: unknown, e: unknown): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Instance["_game"]["_load"]["_onFileComplete"]; context: unknown /* too deep */; }[];
				bindings: Instance["_game"]["_load"]["_onFileComplete"]["_bindings"];
			};
			_onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(t: unknown, i: unknown, n: unknown): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Instance["_game"]["_load"]["_onFileStart"]; context: unknown /* too deep */; }[];
				bindings: Instance["_game"]["_load"]["_onFileStart"]["_bindings"];
			};
			_onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(arg0: unknown): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Instance["_game"]["_load"]["_onLoadComplete"]; context: unknown /* too deep */; }[];
				bindings: Instance["_game"]["_load"]["_onLoadComplete"]["_bindings"];
			};
			loader: Instance["_game"]["_load"]["_loader"];
			onFileComplete: Instance["_game"]["_load"]["_onFileComplete"];
			onFileStart: Instance["_game"]["_load"]["_onFileStart"];
			onLoadComplete: Instance["_game"]["_load"]["_onLoadComplete"];
			onReset: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; context: null; _destroy(): void; _listener(arg0: unknown): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Instance["_game"]["_load"]["onReset"]; }[];
				bindings: Instance["_game"]["_load"]["onReset"]["_bindings"];
			};
		};
		_onPause: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: never[]; _signal: Instance["_game"]["_onPause"]; context: { add(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown): unknown; destroy(): void; findOwnerForTween(t: unknown): unknown; getAll(): unknown; pauseAll(): void; remove(t: unknown): void; removeAll(): void; removeAllFromOwner(t: unknown): void; removeFrom(t: unknown, i: unknown): void; removeTweenFromOwner(t: unknown): unknown; resumeAll(): void; update(): unknown; _owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>; _tweens: unknown /* too deep */; game: Instance["_game"]; }; }[];
			bindings: Instance["_game"]["_onPause"]["_bindings"];
		};
		_onResume: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: ({ _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: never[]; _signal: Instance["_game"]["_onResume"]; context: { _booted: boolean; _pageAlignHorizontally: boolean; _pageAlignVertically: boolean; forceLandscape: boolean; forcePortrait: boolean; incorrectOrientation: boolean; isFullScreen: boolean; isLandscape: boolean; isPortrait: boolean; pageAlignHorizontally: boolean; pageAlignVertically: boolean; parentIsWindow: boolean; _fullScreenScaleMode: number; _lastUpdate: number; _scaleMode: number; _updateThrottle: number; _updateThrottleReset: number; aspectRatio: number; currentScaleMode: number; fullScreenScaleMode: number; height: number; scaleMode: number; sourceAspectRatio: number; trackParentInterval: number; width: number; screenOrientation: string; _pendingScaleMode: null; onResizeContext: null; _fullScreenChange(i: unknown): void; _fullScreenError(i: unknown): void; _gameResumed(): void; _orientationChange(i: unknown): void; _windowResize(i: unknown): void; align(t: unknown, i: unknown): void; alignCanvas(t: unknown, i: unknown): void; boot(): void; cleanupCreatedTarget(): void; createFullScreenTarget(): unknown; destroy(): void; forceOrientation(t: unknown, i: unknown): void; fullScreenChange(t: unknown): void; fullScreenError(t: unknown): void; getParentBounds(t: unknown, i: unknown): unknown; orientationChange(t: unknown): void; parseConfig(t: unknown): void; pauseUpdate(): void; prepScreenMode(i: unknown): void; preUpdate(): void; queueUpdate(t: unknown): void; recalculateCanvasOffset(): void; reflowCanvas(): void; reflowGame(): void; refresh(): void; resetCanvas(t: unknown, i: unknown): void; setExactFit(): void; setGameSize(i: unknown, n: unknown): void; setMaximum(): void; setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void; setResizeCallback(t: unknown, i: unknown): void; setShowAll(t: unknown): void; setupScale(t: unknown, i: unknown): void; signalSizeChange(): void; startFullScreen(t: unknown, i: unknown): unknown; stopFullScreen(): unknown; updateDimensions(i: unknown, n: unknown, e: unknown): void; updateLayout(): void; updateOrientationState(): unknown; updateScalingAndBounds(): void; windowResize(t: unknown): void; boundingParent: HTMLDivElement; parentNode: HTMLCanvasElement; _gameSize: unknown /* too deep */; _lastReportedCanvasSize: unknown /* too deep */; _lastReportedGameSize: unknown /* too deep */; _parentBounds: unknown /* too deep */; _tempBounds: unknown /* too deep */; bounds: unknown /* too deep */; canvasOffset: unknown /* too deep */; device: Instance["_game"]["_device"]; dom: unknown /* too deep */; enterIncorrectOrientation: unknown /* too deep */; game: Instance["_game"]; leaveIncorrectOrientation: unknown /* too deep */; margin: unknown /* too deep */; onFullScreenChange: unknown /* too deep */; onFullScreenError: unknown /* too deep */; onFullScreenInit: unknown /* too deep */; onOrientationChange: unknown /* too deep */; onSizeChange: unknown /* too deep */; parentScaleFactor: unknown /* too deep */; scaleFactor: unknown /* too deep */; scaleFactorInverted: unknown /* too deep */; windowConstraints: unknown /* too deep */; }; } | { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: never[]; _signal: Instance["_game"]["_onResume"]; context: { add(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown): unknown; destroy(): void; findOwnerForTween(t: unknown): unknown; getAll(): unknown; pauseAll(): void; remove(t: unknown): void; removeAll(): void; removeAllFromOwner(t: unknown): void; removeFrom(t: unknown, i: unknown): void; removeTweenFromOwner(t: unknown): unknown; resumeAll(): void; update(): unknown; _owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>; _tweens: unknown /* too deep */; game: Instance["_game"]; }; })[];
			bindings: Instance["_game"]["_onResume"]["_bindings"];
		};
		_rnd: {
			c: number;
			s0: number;
			s1: number;
			s2: number;
			angle(): unknown;
			frac(): unknown;
			hash(t: unknown): unknown;
			integer(): unknown;
			integerInRange(t: unknown, i: unknown): unknown;
			normal(): unknown;
			pick(t: unknown): unknown;
			real(): unknown;
			realInRange(t: unknown, i: unknown): unknown;
			rnd(): unknown;
			shuffle(t: unknown): unknown;
			sign(): unknown;
			sow(t: unknown): void;
			state(t: unknown): unknown;
			uuid(): unknown;
			weightedPick(t: unknown): unknown;
		};
		_scale: {
			_booted: boolean;
			_pageAlignHorizontally: boolean;
			_pageAlignVertically: boolean;
			forceLandscape: boolean;
			forcePortrait: boolean;
			incorrectOrientation: boolean;
			isFullScreen: boolean;
			isLandscape: boolean;
			isPortrait: boolean;
			pageAlignHorizontally: boolean;
			pageAlignVertically: boolean;
			parentIsWindow: boolean;
			_fullScreenScaleMode: number;
			_lastUpdate: number;
			_scaleMode: number;
			_updateThrottle: number;
			_updateThrottleReset: number;
			aspectRatio: number;
			currentScaleMode: number;
			fullScreenScaleMode: number;
			height: number;
			scaleMode: number;
			sourceAspectRatio: number;
			trackParentInterval: number;
			width: number;
			screenOrientation: string;
			_pendingScaleMode: null;
			onResizeContext: null;
			_fullScreenChange(i: unknown): void;
			_fullScreenError(i: unknown): void;
			_gameResumed(): void;
			_orientationChange(i: unknown): void;
			_windowResize(i: unknown): void;
			align(t: unknown, i: unknown): void;
			alignCanvas(t: unknown, i: unknown): void;
			boot(): void;
			cleanupCreatedTarget(): void;
			createFullScreenTarget(): unknown;
			destroy(): void;
			forceOrientation(t: unknown, i: unknown): void;
			fullScreenChange(t: unknown): void;
			fullScreenError(t: unknown): void;
			getParentBounds(t: unknown, i: unknown): unknown;
			orientationChange(t: unknown): void;
			parseConfig(t: unknown): void;
			pauseUpdate(): void;
			prepScreenMode(i: unknown): void;
			preUpdate(): void;
			queueUpdate(t: unknown): void;
			recalculateCanvasOffset(): void;
			reflowCanvas(): void;
			reflowGame(): void;
			refresh(): void;
			resetCanvas(t: unknown, i: unknown): void;
			setExactFit(): void;
			setGameSize(i: unknown, n: unknown): void;
			setMaximum(): void;
			setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setResizeCallback(t: unknown, i: unknown): void;
			setShowAll(t: unknown): void;
			setupScale(t: unknown, i: unknown): void;
			signalSizeChange(): void;
			startFullScreen(t: unknown, i: unknown): unknown;
			stopFullScreen(): unknown;
			updateDimensions(i: unknown, n: unknown, e: unknown): void;
			updateLayout(): void;
			updateOrientationState(): unknown;
			updateScalingAndBounds(): void;
			windowResize(t: unknown): void;
			boundingParent: HTMLDivElement;
			parentNode: HTMLCanvasElement;
			_gameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
			};
			_lastReportedCanvasSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
			};
			_lastReportedGameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
			};
			_parentBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
			};
			_tempBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
			};
			bounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				bottomRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topLeft: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
				topRight: {
					x: number;
					y: number;
					clone(): unknown;
					copy(t: unknown): unknown;
					copyFrom(t: unknown): unknown;
					copyTo(t: unknown): unknown;
					equals(t: unknown): unknown;
					set(t: unknown, e: unknown): unknown;
				};
			};
			canvasOffset: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			device: Instance["_game"]["_device"];
			dom: {
				scrollX: number;
				scrollY: number;
				getOffset(t: unknown, i: unknown): unknown;
				getScreenOrientation(): unknown;
				onDeviceReady(t: unknown): void;
				layoutBounds: {
					height: number;
					width: number;
					x: number;
					y: number;
				};
				visualBounds: {
					height: number;
					width: number;
					x: number;
					y: number;
					_dom: Instance["_game"]["_scale"]["dom"];
				};
			};
			enterIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_scale"]["enterIncorrectOrientation"]["_bindings"];
			};
			game: Instance["_game"];
			leaveIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_scale"]["leaveIncorrectOrientation"]["_bindings"];
			};
			margin: {
				bottom: number;
				left: number;
				right: number;
				top: number;
				x: number;
				y: number;
			};
			onFullScreenChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_scale"]["onFullScreenChange"]["_bindings"];
			};
			onFullScreenError: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_scale"]["onFullScreenError"]["_bindings"];
			};
			onFullScreenInit: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_scale"]["onFullScreenInit"]["_bindings"];
			};
			onOrientationChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_scale"]["onOrientationChange"]["_bindings"];
			};
			onSizeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_scale"]["onSizeChange"]["_bindings"];
			};
			parentScaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactorInverted: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			windowConstraints: {
				bottom: string;
				right: string;
			};
		};
		_sound: {
			_codeMuted: boolean;
			_muted: boolean;
			_watching: boolean;
			connectToMaster: boolean;
			mute: boolean;
			muteOnPause: boolean;
			noAudio: boolean;
			touchLocked: boolean;
			baseLatency: number;
			channels: number;
			volume: number;
			_unlockSource: null;
			_watchCallback: null;
			_watchContext: null;
			_onResumeWebAudioOnClick(): void;
			_resumeWebAudioOnClick(): void;
			add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boot(): void;
			destroy(): void;
			pauseAll(): void;
			play(t: unknown, i: unknown, n: unknown): unknown;
			remove(t: unknown): unknown;
			removeAll(): void;
			removeByKey(t: unknown): unknown;
			resumeAll(): void;
			resumeWebAudio(): unknown;
			setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
			setMute(): void;
			setTouchLock(): void;
			setTouchUnlock(): void;
			stopAll(): void;
			unlock(): unknown;
			unsetMute(): void;
			update(): void;
			context: AudioContext;
			emptyBuffer: AudioBuffer;
			_sounds: never[];
			_watchList: {
				_cursor: number;
				total: number;
				first: null;
				next: null;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: never[];
				list: Instance["_game"]["_sound"]["_watchList"]["_list"];
			};
			game: Instance["_game"];
			onMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_sound"]["onMute"]["_bindings"];
			};
			onSoundDecode: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_sound"]["onSoundDecode"]["_bindings"];
			};
			onTouchUnlock: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_sound"]["onTouchUnlock"]["_bindings"];
			};
			onUnMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_sound"]["onUnMute"]["_bindings"];
			};
			onVolumeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_sound"]["onVolumeChange"]["_bindings"];
			};
			sounds: Instance["_game"]["_sound"]["_sounds"];
		};
		_stage: Instance["_game"]["_add"]["stage"];
		_state: {
			_clearWorld: boolean;
			current: string;
			_pendingState: null;
			add(t: unknown, i: unknown, n: unknown): unknown;
			boot(): void;
			clearCurrentState(): void;
			destroy(): void;
			get(t: unknown): unknown;
			getCurrentState(): unknown;
			loadComplete(): void;
			pause(): void;
			preUpdate(): unknown;
			remove(t: unknown): void;
			resume(): void;
			setCurrentState(t: unknown): void;
			start(t: unknown, i: unknown): void;
			update(): void;
			_states: Map<string, ({ _isLoaded: boolean; _localizedTextLoaded: boolean; _waitingOnFeatureRevisionsData: boolean; _key: string; key: string; cacheGeolocationData(): void; create(): void; extendInput(): void; featureFlagsLoaded(t: unknown): void; fetchLocalizationData(): unknown; handlePromiseLoadError(t: unknown): void; init(): void; loadedAssets(t: unknown, i: unknown): void; loadedData(t: unknown, e: unknown): unknown; loadedLocalizedData(): unknown; mergeFeatureData(t: unknown, i: unknown): unknown; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; _featureRevisionsData: {}; _gameData: { ad: unknown /* too deep */[]; affix: unknown /* too deep */[]; atlas: unknown /* too deep */[]; bgm: unknown /* too deep */[]; bitmapFont: unknown /* too deep */[]; boots: unknown /* too deep */[]; boss: unknown /* too deep */[]; bountyName: unknown /* too deep */[]; bundle: unknown /* too deep */[]; currency: unknown /* too deep */[]; dailyReward: unknown /* too deep */[]; dialogue: unknown /* too deep */[]; dorm: unknown /* too deep */[]; dormbg: unknown /* too deep */[]; dungeon: unknown /* too deep */[]; emote: unknown /* too deep */[]; eyeColor: unknown /* too deep */[]; face: unknown /* too deep */[]; faceColor: unknown /* too deep */[]; featureRequirement: unknown /* too deep */[]; follow: unknown /* too deep */[]; fontStyle: unknown /* too deep */[]; fossil: unknown /* too deep */[]; fsm: unknown /* too deep */[]; gameFeed: unknown /* too deep */[]; gender: unknown /* too deep */[]; generic: unknown /* too deep */[]; giftBox: unknown /* too deep */[]; hair: unknown /* too deep */[]; hairColor: unknown /* too deep */[]; hat: unknown /* too deep */[]; item: unknown /* too deep */[]; itemTable: unknown /* too deep */[]; key: unknown /* too deep */[]; mathTownDecor: unknown /* too deep */[]; mathTownFrame: unknown /* too deep */[]; mathTownInterior: unknown /* too deep */[]; mount: unknown /* too deep */[]; name: unknown /* too deep */[]; nickname: unknown /* too deep */[]; orb: unknown /* too deep */[]; outfit: unknown /* too deep */[]; particleEffect: unknown /* too deep */[]; pet: unknown /* too deep */[]; prefab: unknown /* too deep */[]; prizeWheel: unknown /* too deep */[]; relic: unknown /* too deep */[]; sfx: unknown /* too deep */[]; singleImage: unknown /* too deep */[]; skinColor: unknown /* too deep */[]; spell: unknown /* too deep */[]; spellRelic: unknown /* too deep */[]; spine: unknown /* too deep */[]; streamedMap: unknown /* too deep */[]; titan: unknown /* too deep */[]; ui: unknown /* too deep */[]; weapon: unknown /* too deep */[]; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: { getConnection(): unknown; getConnectionDownlinkSpeed(): unknown; getConnectionEffectiveType(): unknown; getConnectionRTT(): unknown; getConnectionType(): unknown; getDeviceMemory(): unknown; getHardwareConcurrency(): unknown; getJSHeapSizeLimit(): unknown; getPlatformName(): unknown; getScreenHeight(): unknown; getScreenWidth(): unknown; getUsedJSHeapSize(): unknown; isVideoAvailable(): unknown; isWebGLAvailable(): unknown; isWebSocketAvailable(): unknown; isWebWorkerAvailable(): unknown; }; game: Instance["_game"]; gameCompleteDataFactory: { buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown; getGame(): unknown; game: Instance["_game"]; gameEventDataBuilder: unknown /* too deep */; }; loadingMetricProperties: never[]; objectCountProperties: never[]; }; add: Instance["_game"]["_add"]; game: Instance["_game"]; input: Instance["_game"]["_input"]; stage: Instance["_game"]["_add"]["stage"]; } | { complete: boolean; isHintPanelShown: boolean; isLoaded: boolean; startTime: number; timeLoadStartedMS: number; _key: string; key: string; _errorMessageBox: null; _hint: null; _mapName: null; completed(): void; create(): void; init(): void; initData(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; onErrorMessageClose(): void; paused(): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; update(): void; add: Instance["_game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: string[]; }; element: never; game: Instance["_game"]; input: Instance["_game"]["_input"]; prodigyGame: Instance["_game"]; stage: Instance["_game"]["_add"]["stage"]; } | { isHintPanelShown: boolean; _pvpTimeoutTime: number; _key: string; key: string; _battleRoom: null; _closeButton: null; _duelInviteService: null; _errorMessageBox: null; _hint: null; _loadingProgress: null; _mapName: null; timeLoadStartedMS: null; battleRoomMessageReceived(t: unknown): unknown; cancelInvite(): void; completed(): void; create(): void; dispatchBattleTeamMessage(): unknown; dispatchInitialMessages(): void; dispatchPlayerDataMessage(): void; init(): void; initData(t: unknown): void; inviteWasRejected(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; maintenanceModeStarted(): void; onErrorMessageClose(): void; paused(): void; playerJoinedBattleRoom(t: unknown): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; tryLoadingAssets(): void; update(): void; add: Instance["_game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: never[]; }; game: Instance["_game"]; input: Instance["_game"]["_input"]; prodigyGame: Instance["_game"]; stage: Instance["_game"]["_add"]["stage"]; } | never | { complete: boolean; fadeInSet: boolean; showMenu: boolean; _key: string; key: string; screenName: string; zoneName: string; _blockingOverlay: null; backButton: null; classCode: null; codeField: null; error: null; nextButton: null; spinner: null; callFunctionOrSignal(t: unknown, i: unknown): void; chooseServer(t: unknown, i: unknown): void; classCodeComplete(): void; closeClassCode(): void; create(): void; createLoadingMetricEvent(): void; disableOverlay(t: unknown): void; enableOverlay(t: unknown): void; fadeIn(): void; fadeOut(t: unknown, i: unknown): void; findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown; findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown; getCode(): void; init(): void; initListeners(): void; onAddChild(t: unknown, i: unknown, n: unknown): void; onDebugAutoClickElement(t: unknown): unknown; onDebugAutoClickItem(t: unknown, i: unknown): void; onDebugAutoClickList(): void; onEnableBackground(t: unknown): void; onEnableContent(t: unknown): void; onGetLayer(t: unknown): unknown; openWorlds(): void; paused(): void; preload(): void; resumed(): void; screenSetup(): void; screenUpdate(): void; setCode(t: unknown): void; showClassCode(): void; showContentA(): unknown; showMessage(t: unknown, i: unknown): void; shutdown(): void; start(): void; stopListeners(): void; submit(): unknown; triggerElementClick(t: unknown): void; update(): void; validationComplete(t: unknown): void; _background: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _content: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _dialogue: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _foreground: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _localizer: { getText(t: unknown): unknown; setDataSource(t: unknown): void; dataSource: { getValue(t: unknown): unknown; loadDataFromURL(t: unknown, i: unknown): unknown; _httpClient: unknown /* too deep */; _languageData: unknown /* too deep */; }; }; _menus: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: { getConnection(): unknown; getConnectionDownlinkSpeed(): unknown; getConnectionEffectiveType(): unknown; getConnectionRTT(): unknown; getConnectionType(): unknown; getDeviceMemory(): unknown; getHardwareConcurrency(): unknown; getJSHeapSizeLimit(): unknown; getPlatformName(): unknown; getScreenHeight(): unknown; getScreenWidth(): unknown; getUsedJSHeapSize(): unknown; isVideoAvailable(): unknown; isWebGLAvailable(): unknown; isWebSocketAvailable(): unknown; isWebWorkerAvailable(): unknown; }; game: Instance["_game"]; gameCompleteDataFactory: { buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown; getGame(): unknown; game: Instance["_game"]; gameEventDataBuilder: unknown /* too deep */; }; loadingMetricProperties: never[]; objectCountProperties: never[]; }; _opaque: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _overlay: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _root: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; children: unknown /* too deep */[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; }; _uiLayer: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; add: Instance["_game"]["_add"]; assets: string[]; background: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: (unknown /* too deep */ | Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["parent"])[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; backgroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; content: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; contentA: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; totalHeight: number; totalWidth: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; onDown: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; changePanel(t: unknown): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setClickable(t: unknown, i: unknown, n: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; images: unknown /* too deep */[]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Instance["_game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; contentGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; dialogue: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; foreground: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; foregroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; game: Instance["_game"]; input: Instance["_game"]["_input"]; menus: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; off: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bg: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; input: unknown /* too deep */; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; btnGroup: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; icon: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Instance["_game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; text: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _defaultFontSize: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; boundsWidth: number; centerX: number; centerY: number; fontID: number; fontSize: number; height: number; iconOffsetY: number; left: number; length: number; lines: number; numberOfLines: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; alignment: string; fontName: string; name: string; text: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; lineHeight: undefined; monoSpace: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addClickCallback(t: unknown, i: unknown, n: unknown): void; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; letters: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; sprites: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; opaque: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; overlay: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; prodigyGame: Instance["_game"]; screenData: unknown /* too deep */[]; stage: Instance["_game"]["_add"]["stage"]; uiLayer: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; } | { _key: string; key: string; battleLayers: null; rootContext: null; create(): void; createBattleEntities(t: unknown, i: unknown): void; createPlayerTeam(): unknown; createTitanTeam(t: unknown): unknown; init(t: unknown): unknown; paused(): void; preload(): void; resumed(): void; setupHealthBars(): void; setupLayers(): void; shutdown(): void; update(): void; add: Instance["_game"]["_add"]; game: Instance["_game"]; input: Instance["_game"]["_input"]; stage: Instance["_game"]["_add"]["stage"]; } | { _key: string; key: string; _currentScene: null; create(): void; init(t: unknown): void; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; add: Instance["_game"]["_add"]; game: Instance["_game"]; input: Instance["_game"]["_input"]; stage: Instance["_game"]["_add"]["stage"]; })>;
			states: Map<string, ({ _isLoaded: boolean; _localizedTextLoaded: boolean; _waitingOnFeatureRevisionsData: boolean; _key: string; key: string; cacheGeolocationData(): void; create(): void; extendInput(): void; featureFlagsLoaded(t: unknown): void; fetchLocalizationData(): unknown; handlePromiseLoadError(t: unknown): void; init(): void; loadedAssets(t: unknown, i: unknown): void; loadedData(t: unknown, e: unknown): unknown; loadedLocalizedData(): unknown; mergeFeatureData(t: unknown, i: unknown): unknown; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; _featureRevisionsData: {}; _gameData: { ad: unknown /* too deep */[]; affix: unknown /* too deep */[]; atlas: unknown /* too deep */[]; bgm: unknown /* too deep */[]; bitmapFont: unknown /* too deep */[]; boots: unknown /* too deep */[]; boss: unknown /* too deep */[]; bountyName: unknown /* too deep */[]; bundle: unknown /* too deep */[]; currency: unknown /* too deep */[]; dailyReward: unknown /* too deep */[]; dialogue: unknown /* too deep */[]; dorm: unknown /* too deep */[]; dormbg: unknown /* too deep */[]; dungeon: unknown /* too deep */[]; emote: unknown /* too deep */[]; eyeColor: unknown /* too deep */[]; face: unknown /* too deep */[]; faceColor: unknown /* too deep */[]; featureRequirement: unknown /* too deep */[]; follow: unknown /* too deep */[]; fontStyle: unknown /* too deep */[]; fossil: unknown /* too deep */[]; fsm: unknown /* too deep */[]; gameFeed: unknown /* too deep */[]; gender: unknown /* too deep */[]; generic: unknown /* too deep */[]; giftBox: unknown /* too deep */[]; hair: unknown /* too deep */[]; hairColor: unknown /* too deep */[]; hat: unknown /* too deep */[]; item: unknown /* too deep */[]; itemTable: unknown /* too deep */[]; key: unknown /* too deep */[]; mathTownDecor: unknown /* too deep */[]; mathTownFrame: unknown /* too deep */[]; mathTownInterior: unknown /* too deep */[]; mount: unknown /* too deep */[]; name: unknown /* too deep */[]; nickname: unknown /* too deep */[]; orb: unknown /* too deep */[]; outfit: unknown /* too deep */[]; particleEffect: unknown /* too deep */[]; pet: unknown /* too deep */[]; prefab: unknown /* too deep */[]; prizeWheel: unknown /* too deep */[]; relic: unknown /* too deep */[]; sfx: unknown /* too deep */[]; singleImage: unknown /* too deep */[]; skinColor: unknown /* too deep */[]; spell: unknown /* too deep */[]; spellRelic: unknown /* too deep */[]; spine: unknown /* too deep */[]; streamedMap: unknown /* too deep */[]; titan: unknown /* too deep */[]; ui: unknown /* too deep */[]; weapon: unknown /* too deep */[]; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: { getConnection(): unknown; getConnectionDownlinkSpeed(): unknown; getConnectionEffectiveType(): unknown; getConnectionRTT(): unknown; getConnectionType(): unknown; getDeviceMemory(): unknown; getHardwareConcurrency(): unknown; getJSHeapSizeLimit(): unknown; getPlatformName(): unknown; getScreenHeight(): unknown; getScreenWidth(): unknown; getUsedJSHeapSize(): unknown; isVideoAvailable(): unknown; isWebGLAvailable(): unknown; isWebSocketAvailable(): unknown; isWebWorkerAvailable(): unknown; }; game: Instance["_game"]; gameCompleteDataFactory: { buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown; getGame(): unknown; game: Instance["_game"]; gameEventDataBuilder: unknown /* too deep */; }; loadingMetricProperties: never[]; objectCountProperties: never[]; }; add: Instance["_game"]["_add"]; game: Instance["_game"]; input: Instance["_game"]["_input"]; stage: Instance["_game"]["_add"]["stage"]; } | { complete: boolean; isHintPanelShown: boolean; isLoaded: boolean; startTime: number; timeLoadStartedMS: number; _key: string; key: string; _errorMessageBox: null; _hint: null; _mapName: null; completed(): void; create(): void; init(): void; initData(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; onErrorMessageClose(): void; paused(): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; update(): void; add: Instance["_game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: string[]; }; element: never; game: Instance["_game"]; input: Instance["_game"]["_input"]; prodigyGame: Instance["_game"]; stage: Instance["_game"]["_add"]["stage"]; } | { isHintPanelShown: boolean; _pvpTimeoutTime: number; _key: string; key: string; _battleRoom: null; _closeButton: null; _duelInviteService: null; _errorMessageBox: null; _hint: null; _loadingProgress: null; _mapName: null; timeLoadStartedMS: null; battleRoomMessageReceived(t: unknown): unknown; cancelInvite(): void; completed(): void; create(): void; dispatchBattleTeamMessage(): unknown; dispatchInitialMessages(): void; dispatchPlayerDataMessage(): void; init(): void; initData(t: unknown): void; inviteWasRejected(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; maintenanceModeStarted(): void; onErrorMessageClose(): void; paused(): void; playerJoinedBattleRoom(t: unknown): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; tryLoadingAssets(): void; update(): void; add: Instance["_game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: never[]; }; game: Instance["_game"]; input: Instance["_game"]["_input"]; prodigyGame: Instance["_game"]; stage: Instance["_game"]["_add"]["stage"]; } | never | { complete: boolean; fadeInSet: boolean; showMenu: boolean; _key: string; key: string; screenName: string; zoneName: string; _blockingOverlay: null; backButton: null; classCode: null; codeField: null; error: null; nextButton: null; spinner: null; callFunctionOrSignal(t: unknown, i: unknown): void; chooseServer(t: unknown, i: unknown): void; classCodeComplete(): void; closeClassCode(): void; create(): void; createLoadingMetricEvent(): void; disableOverlay(t: unknown): void; enableOverlay(t: unknown): void; fadeIn(): void; fadeOut(t: unknown, i: unknown): void; findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown; findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown; getCode(): void; init(): void; initListeners(): void; onAddChild(t: unknown, i: unknown, n: unknown): void; onDebugAutoClickElement(t: unknown): unknown; onDebugAutoClickItem(t: unknown, i: unknown): void; onDebugAutoClickList(): void; onEnableBackground(t: unknown): void; onEnableContent(t: unknown): void; onGetLayer(t: unknown): unknown; openWorlds(): void; paused(): void; preload(): void; resumed(): void; screenSetup(): void; screenUpdate(): void; setCode(t: unknown): void; showClassCode(): void; showContentA(): unknown; showMessage(t: unknown, i: unknown): void; shutdown(): void; start(): void; stopListeners(): void; submit(): unknown; triggerElementClick(t: unknown): void; update(): void; validationComplete(t: unknown): void; _background: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _content: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _dialogue: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _foreground: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _localizer: { getText(t: unknown): unknown; setDataSource(t: unknown): void; dataSource: { getValue(t: unknown): unknown; loadDataFromURL(t: unknown, i: unknown): unknown; _httpClient: unknown /* too deep */; _languageData: unknown /* too deep */; }; }; _menus: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: { getConnection(): unknown; getConnectionDownlinkSpeed(): unknown; getConnectionEffectiveType(): unknown; getConnectionRTT(): unknown; getConnectionType(): unknown; getDeviceMemory(): unknown; getHardwareConcurrency(): unknown; getJSHeapSizeLimit(): unknown; getPlatformName(): unknown; getScreenHeight(): unknown; getScreenWidth(): unknown; getUsedJSHeapSize(): unknown; isVideoAvailable(): unknown; isWebGLAvailable(): unknown; isWebSocketAvailable(): unknown; isWebWorkerAvailable(): unknown; }; game: Instance["_game"]; gameCompleteDataFactory: { buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown; getGame(): unknown; game: Instance["_game"]; gameEventDataBuilder: unknown /* too deep */; }; loadingMetricProperties: never[]; objectCountProperties: never[]; }; _opaque: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _overlay: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; _root: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; children: unknown /* too deep */[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; }; _uiLayer: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; add: Instance["_game"]["_add"]; assets: string[]; background: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: (unknown /* too deep */ | Instance["_game"]["_input"]["interactiveItems"]["first"]["sprite"]["parent"])[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; backgroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; content: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; contentA: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; totalHeight: number; totalWidth: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; onDown: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; changePanel(t: unknown): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setClickable(t: unknown, i: unknown, n: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; images: unknown /* too deep */[]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Instance["_game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; contentGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; dialogue: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; foreground: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; foregroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: never[]; _components: unknown /* too deep */[]; _legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; _parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; children: never[]; components: unknown /* too deep */[]; legacyTransform: { _isCreated: boolean; Active: boolean; isActive: boolean; IsActiveInHierarchy: boolean; isCreated: boolean; roundRelativeValues: boolean; RoundRelativeValues: boolean; anchorX: number; anchorY: number; height: number; relativeHeight: number; relativeWidth: number; relativeX: number; relativeY: number; roundedHeight: number; roundedWidth: number; roundedX: number; roundedY: number; scaleX: number; scaleY: number; width: number; x: number; y: number; cachedRelativeHeight: null; cachedRelativeWidth: null; cachedRelativeX: null; cachedRelativeY: null; dimensionPlaceholder: null; create(): void; customDeserialize(t: unknown): void; destroy(): void; onDisable(): void; onEnable(): void; postCreate(): void; postDeserialize(): void; reapplyChildRelativeValues(): void; update(): void; updateGroupVisibility(): void; updateParentGroup(): void; updatePivotXFromAnchorX(): void; updatePivotYFromAnchorY(): void; _group: unknown /* too deep */; anchor: unknown /* too deep */; gameObject: unknown /* too deep */; GameObject: unknown /* too deep */; group: unknown /* too deep */; onActiveChanged: unknown /* too deep */; OnActiveChanged: unknown /* too deep */; onDestroy: unknown /* too deep */; OnDestroy: unknown /* too deep */; }; onActiveChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onActiveInHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onChildRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAdded: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentAddedToHierarchy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onComponentRemoved: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onHierarchyChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLayerChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; }; game: Instance["_game"]; input: Instance["_game"]["_input"]; menus: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; off: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bg: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; input: unknown /* too deep */; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; btnGroup: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; icon: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Instance["_game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; text: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _defaultFontSize: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; boundsWidth: number; centerX: number; centerY: number; fontID: number; fontSize: number; height: number; iconOffsetY: number; left: number; length: number; lines: number; numberOfLines: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; alignment: string; fontName: string; name: string; text: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; lineHeight: undefined; monoSpace: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addClickCallback(t: unknown, i: unknown, n: unknown): void; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; letters: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; sprites: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; opaque: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; overlay: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; prodigyGame: Instance["_game"]; screenData: unknown /* too deep */[]; stage: Instance["_game"]["_add"]["stage"]; uiLayer: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; gameObjectRef: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_add"]["stage"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; } | { _key: string; key: string; battleLayers: null; rootContext: null; create(): void; createBattleEntities(t: unknown, i: unknown): void; createPlayerTeam(): unknown; createTitanTeam(t: unknown): unknown; init(t: unknown): unknown; paused(): void; preload(): void; resumed(): void; setupHealthBars(): void; setupLayers(): void; shutdown(): void; update(): void; add: Instance["_game"]["_add"]; game: Instance["_game"]; input: Instance["_game"]["_input"]; stage: Instance["_game"]["_add"]["stage"]; } | { _key: string; key: string; _currentScene: null; create(): void; init(t: unknown): void; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; add: Instance["_game"]["_add"]; game: Instance["_game"]; input: Instance["_game"]["_input"]; stage: Instance["_game"]["_add"]["stage"]; })>;
			_current: {
				complete: boolean;
				fadeInSet: boolean;
				showMenu: boolean;
				_key: string;
				key: string;
				screenName: string;
				zoneName: string;
				_blockingOverlay: null;
				backButton: null;
				classCode: null;
				codeField: null;
				error: null;
				nextButton: null;
				spinner: null;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				chooseServer(t: unknown, i: unknown): void;
				classCodeComplete(): void;
				closeClassCode(): void;
				create(): void;
				createLoadingMetricEvent(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getCode(): void;
				init(): void;
				initListeners(): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClickElement(t: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				openWorlds(): void;
				paused(): void;
				preload(): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setCode(t: unknown): void;
				showClassCode(): void;
				showContentA(): unknown;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(): void;
				stopListeners(): void;
				submit(): unknown;
				triggerElementClick(t: unknown): void;
				update(): void;
				validationComplete(t: unknown): void;
				_background: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_background"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_background"];
						GameObject: Instance["_game"]["_state"]["_current"]["_background"];
						group: Instance["_game"]["_state"]["_current"]["_background"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_background"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_background"]["_legacyTransform"]["onDestroy"];
					};
					_parent: {
						_isActive: boolean;
						_isActiveInHierarchy: boolean;
						active: boolean;
						activeInHierarchy: boolean;
						_layer: string;
						_name: string;
						layer: string;
						name: string;
						_parent: null;
						_transform: null;
						parent: null;
						transform: null;
						activeInHierarchyChanged(): void;
						addChild(t: unknown): void;
						addChildAt(t: unknown, i: unknown): void;
						addComponent(t: unknown, i: unknown): unknown;
						bringToFront(): void;
						destroy(): void;
						dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
						findChildByName(t: unknown): unknown;
						findComponent(t: unknown): unknown;
						findComponentInChildren(t: unknown, i: unknown): unknown;
						findComponentInParent(t: unknown, i: unknown): unknown;
						findComponents(t: unknown): unknown;
						findComponentsInChildren(t: unknown, i: unknown): unknown;
						getRenderOrder(): unknown;
						hasComponent(t: unknown): unknown;
						isActiveInHierarchy(): unknown;
						isInBack(): unknown;
						isInFront(): unknown;
						removeComponent(t: unknown): void;
						removeFromParent(): unknown;
						sendToBack(): void;
						setLayer(t: unknown, i: unknown): void;
						setParent(t: unknown, i: unknown): unknown;
						setRenderOrder(t: unknown): void;
						update(): void;
						_children: (Instance["_game"]["_state"]["_current"]["_background"] | unknown /* too deep */)[];
						_components: unknown /* too deep */[];
						_legacyTransform: {
							_isCreated: boolean;
							Active: boolean;
							isActive: boolean;
							IsActiveInHierarchy: boolean;
							isCreated: boolean;
							roundRelativeValues: boolean;
							RoundRelativeValues: boolean;
							anchorX: number;
							anchorY: number;
							height: number;
							relativeHeight: number;
							relativeWidth: number;
							relativeX: number;
							relativeY: number;
							roundedHeight: number;
							roundedWidth: number;
							roundedX: number;
							roundedY: number;
							scaleX: number;
							scaleY: number;
							width: number;
							x: number;
							y: number;
							cachedRelativeHeight: null;
							cachedRelativeWidth: null;
							cachedRelativeX: null;
							cachedRelativeY: null;
							dimensionPlaceholder: null;
							create(): void;
							customDeserialize(t: unknown): void;
							destroy(): void;
							onDisable(): void;
							onEnable(): void;
							postCreate(): void;
							postDeserialize(): void;
							reapplyChildRelativeValues(): void;
							update(): void;
							updateGroupVisibility(): void;
							updateParentGroup(): void;
							updatePivotXFromAnchorX(): void;
							updatePivotYFromAnchorY(): void;
							_group: unknown /* too deep */;
							anchor: unknown /* too deep */;
							gameObject: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
							GameObject: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
							group: unknown /* too deep */;
							onActiveChanged: unknown /* too deep */;
							OnActiveChanged: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							OnDestroy: unknown /* too deep */;
						};
						children: Instance["_game"]["_state"]["_current"]["_background"]["_parent"]["_children"];
						components: Instance["_game"]["_state"]["_current"]["_background"]["_parent"]["_components"];
						legacyTransform: Instance["_game"]["_state"]["_current"]["_background"]["_parent"]["_legacyTransform"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onActiveInHierarchyChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onChildAdded: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onChildRemoved: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onComponentAdded: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onComponentAddedToHierarchy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onComponentRemoved: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onHierarchyChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onLayerChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
					};
					children: Instance["_game"]["_state"]["_current"]["_background"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_background"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_background"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_background"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				_content: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_content"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_content"];
						GameObject: Instance["_game"]["_state"]["_current"]["_content"];
						group: Instance["_game"]["_state"]["_current"]["_content"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_content"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_content"]["_legacyTransform"]["onDestroy"];
					};
					_parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
					children: Instance["_game"]["_state"]["_current"]["_content"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_content"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_content"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_content"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				_dialogue: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_dialogue"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_dialogue"];
						GameObject: Instance["_game"]["_state"]["_current"]["_dialogue"];
						group: Instance["_game"]["_state"]["_current"]["_dialogue"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_dialogue"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_dialogue"]["_legacyTransform"]["onDestroy"];
					};
					_parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
					children: Instance["_game"]["_state"]["_current"]["_dialogue"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_dialogue"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_dialogue"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_dialogue"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				_foreground: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_foreground"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_foreground"];
						GameObject: Instance["_game"]["_state"]["_current"]["_foreground"];
						group: Instance["_game"]["_state"]["_current"]["_foreground"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_foreground"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_foreground"]["_legacyTransform"]["onDestroy"];
					};
					_parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
					children: Instance["_game"]["_state"]["_current"]["_foreground"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_foreground"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_foreground"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_foreground"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				_localizer: {
					getText(t: unknown): unknown;
					setDataSource(t: unknown): void;
					dataSource: {
						getValue(t: unknown): unknown;
						loadDataFromURL(t: unknown, i: unknown): unknown;
						_httpClient: {
							_baseURI: string;
							clearDefaultResponseHandler(t: unknown): void;
							getBaseURI(): unknown;
							getDefaultHeaders(): unknown;
							getRequestInitData(t: unknown): unknown;
							retryRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							sendFetchRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							sendRequest(t: unknown): unknown;
							setBaseURI(t: unknown): void;
							setDefaultHeader(t: unknown, i: unknown, n: unknown): void;
							setDefaultResponseHandler(t: unknown, i: unknown, n: unknown): void;
							_defaultHeaders: Map<never, never>;
							_defaultResponseHandler: Map<string, unknown /* too deep */>;
						};
						_languageData: {
							"1_YEAR_EPIC_AD_BODY": string;
							"1_YEAR_EPIC_AD_END_DATE": string;
							"1_YEAR_EPIC_AD_TITLE": string;
							"1_YEAR_EPIC_AD_TOOLTIP_BODY": string;
							"1_YEAR_EPIC_AD_TOOLTIP_TITLE": string;
							ABANDON_BOUNTY_SERVER_ERROR: string;
							ABANDON_BOUNTY_SERVER_ERROR_TITLE: string;
							ABOUT: string;
							ACADEMY_TOWER_LOCKED: string;
							ACADEMY_TOWER_NOT_RELEASED: string;
							ACCOUNT_CREATE_PASSWORD: string;
							ACCOUNT_CREATE_PRIVACY_POLICY: string;
							ACCOUNT_CREATE_USERNAME: string;
							ACCOUNT_LOCATION_AUSTRALIA: string;
							ACCOUNT_LOCATION_COLORADO: string;
							ACCOUNT_LOCATION_ENGLAND: string;
							ACCOUNT_LOCATION_FLORIDA: string;
							ACCOUNT_LOCATION_INDIA: string;
							ACCOUNT_LOCATION_NEW_YORK: string;
							ACCOUNT_LOCATION_ONTARIO: string;
							ACCOUNT_LOCATION_OTHER: string;
							ACCOUNT_LOCATION_TENNESSEE: string;
							ACCOUNT_LOCATION_TEXAS: string;
							ACCOUNT_LOCATION_TITLE_CANADA: string;
							ACCOUNT_LOCATION_TITLE_OTHER: string;
							ACCOUNT_LOCATION_TITLE_USA: string;
							ACCOUNT_LOCATION_VIRGINIA: string;
							ACHIEVEMENT_ANTIQUARIAN_DESC: string;
							ACHIEVEMENT_ANTIQUARIAN_NAME: string;
							ACHIEVEMENT_BONFIRE_CHESTS_DESC: string;
							ACHIEVEMENT_BONFIRE_CHESTS_NAME: string;
							ACHIEVEMENT_BONFIRE_DEFEAT_WIZARDS_DESC: string;
							ACHIEVEMENT_BONFIRE_DEFEAT_WIZARDS_NAME: string;
							ACHIEVEMENT_BONFIRE_QUESTS_DESC: string;
							ACHIEVEMENT_BONFIRE_QUESTS_NAME: string;
							ACHIEVEMENT_BONFIRE_SET_DESC: string;
							ACHIEVEMENT_BONFIRE_SET_NAME: string;
							ACHIEVEMENT_CATCH_PET_DESC: string;
							ACHIEVEMENT_CATCH_PET_NAME: string;
							ACHIEVEMENT_CHALLENGER_DESC: string;
							ACHIEVEMENT_CHALLENGER_NAME: string;
							ACHIEVEMENT_CHAMP_DESC: string;
							ACHIEVEMENT_CHAMP_NAME: string;
							ACHIEVEMENT_COIN_COLLECT_DESC: string;
							ACHIEVEMENT_COIN_COLLECT_NAME: string;
							ACHIEVEMENT_COLISEUM_DEFEAT_DESC: string;
							ACHIEVEMENT_COLISEUM_DEFEAT_NAME: string;
							ACHIEVEMENT_COLLECT_PAGES: string;
							ACHIEVEMENT_COLLECT_PAGES_DESC: string;
							ACHIEVEMENT_COMPLETED: string;
							ACHIEVEMENT_DECORATOR_DESC: string;
							ACHIEVEMENT_DECORATOR_NAME: string;
							ACHIEVEMENT_FINISH_TOWER_FLOORS: string;
							ACHIEVEMENT_FINISH_TOWER_FLOORS_DESC: string;
							ACHIEVEMENT_FINISHED: string;
							ACHIEVEMENT_FOREST_CHESTS_DESC: string;
							ACHIEVEMENT_FOREST_CHESTS_NAME: string;
							ACHIEVEMENT_FOREST_DEFEAT_WIZARDS_DESC: string;
							ACHIEVEMENT_FOREST_DEFEAT_WIZARDS_NAME: string;
							ACHIEVEMENT_FOREST_NEEK: string;
							ACHIEVEMENT_FOREST_NEEK_DESC: string;
							ACHIEVEMENT_FOREST_QUESTS_DESC: string;
							ACHIEVEMENT_FOREST_QUESTS_NAME: string;
							ACHIEVEMENT_FOREST_SET_DESC: string;
							ACHIEVEMENT_FOREST_SET_NAME: string;
							ACHIEVEMENT_GROUP_BATTLE: string;
							ACHIEVEMENT_GROUP_BONFIRE: string;
							ACHIEVEMENT_GROUP_EARTHTOWER: string;
							ACHIEVEMENT_GROUP_EDUCATION: string;
							ACHIEVEMENT_GROUP_EXPLORATION: string;
							ACHIEVEMENT_GROUP_FIREFLY: string;
							ACHIEVEMENT_GROUP_GENERAL: string;
							ACHIEVEMENT_GROUP_LAMPLIGHT: string;
							ACHIEVEMENT_GROUP_PVP: string;
							ACHIEVEMENT_GROUP_SHIPWRECK: string;
							ACHIEVEMENT_GROUP_SHIVERCHILL: string;
							ACHIEVEMENT_GROUP_SKYWATCH: string;
							ACHIEVEMENT_MASTER_SKILLS_DESC: string;
							ACHIEVEMENT_MASTER_SKILLS_NAME: string;
							ACHIEVEMENT_MONSTER_HUNTER_DESC: string;
							ACHIEVEMENT_MONSTER_HUNTER_NAME: string;
							ACHIEVEMENT_NEWBIE_DESC: string;
							ACHIEVEMENT_NEWBIE_NAME: string;
							ACHIEVEMENT_PACKRAT_DESC: string;
							ACHIEVEMENT_PACKRAT_NAME: string;
							ACHIEVEMENT_PRODIGY_DESC: string;
							ACHIEVEMENT_PRODIGY_NAME: string;
							ACHIEVEMENT_QUESTIONNAIRE_DESC: string;
							ACHIEVEMENT_QUESTIONNAIRE_NAME: string;
							ACHIEVEMENT_RUNWAY_MODEL_DESC: string;
							ACHIEVEMENT_RUNWAY_MODEL_NAME: string;
							ACHIEVEMENT_SAVE_FLORIAN: string;
							ACHIEVEMENT_SAVE_FLORIAN_DESC: string;
							ACHIEVEMENT_SEQUENCING_DESC: string;
							ACHIEVEMENT_SEQUENCING_NAME: string;
							ACHIEVEMENT_SHIPWRECK_CHESTS_DESC: string;
							ACHIEVEMENT_SHIPWRECK_CHESTS_NAME: string;
							ACHIEVEMENT_SHIPWRECK_CLEAR_INK_DESC: string;
							ACHIEVEMENT_SHIPWRECK_CLEAR_INK_NAME: string;
							ACHIEVEMENT_SHIPWRECK_DEFEAT_WIZARDS_DESC: string;
							ACHIEVEMENT_SHIPWRECK_DEFEAT_WIZARDS_NAME: string;
							ACHIEVEMENT_SHIPWRECK_QUESTS_DESC: string;
							ACHIEVEMENT_SHIPWRECK_QUESTS_NAME: string;
							ACHIEVEMENT_SHIPWRECK_SET_DESC: string;
							ACHIEVEMENT_SHIPWRECK_SET_NAME: string;
							ACHIEVEMENT_SHIVERCHILL_CHESTS_DESC: string;
							ACHIEVEMENT_SHIVERCHILL_CHESTS_NAME: string;
							ACHIEVEMENT_SHIVERCHILL_DEFEAT_WIZARDS_DESC: string;
							ACHIEVEMENT_SHIVERCHILL_DEFEAT_WIZARDS_NAME: string;
							ACHIEVEMENT_SHIVERCHILL_QUESTS_DESC: string;
							ACHIEVEMENT_SHIVERCHILL_QUESTS_NAME: string;
							ACHIEVEMENT_SHIVERCHILL_SET_DESC: string;
							ACHIEVEMENT_SHIVERCHILL_SET_NAME: string;
							ACHIEVEMENT_SHOPAHOLIC_DESC: string;
							ACHIEVEMENT_SHOPAHOLIC_NAME: string;
							ACHIEVEMENT_SKYWATCH_CHESTS_DESC: string;
							ACHIEVEMENT_SKYWATCH_CHESTS_NAME: string;
							ACHIEVEMENT_SKYWATCH_DEFEAT_WIZARDS_DESC: string;
							ACHIEVEMENT_SKYWATCH_DEFEAT_WIZARDS_NAME: string;
							ACHIEVEMENT_SKYWATCH_QUESTS_DESC: string;
							ACHIEVEMENT_SKYWATCH_QUESTS_NAME: string;
							ACHIEVEMENT_SKYWATCH_SET_DESC: string;
							ACHIEVEMENT_SKYWATCH_SET_NAME: string;
							ACHIEVEMENT_SNAKE_BUDDY: string;
							ACHIEVEMENT_SNAKE_BUDDY_DESC: string;
							ACHIEVEMENT_SPELLMASTER_DESC: string;
							ACHIEVEMENT_SPELLMASTER_NAME: string;
							ACHIEVEMENT_TOURIST_DESC: string;
							ACHIEVEMENT_TOURIST_NAME: string;
							ACHIEVEMENT_TOWER_FLOORS_DESC: string;
							ACHIEVEMENT_TOWER_FLOORS_NAME: string;
							ACHIEVEMENT_TURN_UP_HEAT_DESC: string;
							ACHIEVEMENT_TURN_UP_HEAT_NAME: string;
							ACHIEVEMENT_UNLOCKED_TITLE: string;
							AD_CRYSTAL_CAVERNS_LAUNCH_BODY: string;
							AD_CRYSTAL_CAVERNS_LAUNCH_TITLE: string;
							AD_CRYSTAL_CAVERNS_TEASER2_BODY: string;
							AD_CRYSTAL_CAVERNS_TEASER2_TITLE: string;
							AD_PET_LORE_PREVIEW_BODY: string;
							AD_PET_LORE_PREVIEW_BODY_2: string;
							AD_PET_LORE_PREVIEW_TITLE: string;
							AD_PET_LORE_PREVIEW_TITLE_2: string;
							AD_PETBOOK_BODY: string;
							AD_PETBOOK_TITLE: string;
							AD_SUMMER_QUEST_BODY: string;
							AD_SUMMER_QUEST_TITLE: string;
							ADD_FRIEND_PROMPT_USERNAME: string;
							ADVENTURE_CONFIRMATION: string;
							ADVENTURE_LEVEL: string;
							ADVENTURE_REMAINING_REWARDS: string;
							ADVENTURE_REMAINING_REWARDS_SINGLE: string;
							ALREADY_ON_TEAM_TOOLTIP: string;
							ARCHIVES_ENTRANCE_WELCOME: string;
							ARCHIVES_EXIT_PAGES: string;
							ARCHIVES_EXIT_TITLE: string;
							ARCHIVES_EXIT_WARNING: string;
							ARCHIVES_EXIT_WARNING_COLLECTED: string;
							ARCHIVES_PRIZES_MESSAGE: string;
							ARCHIVES_PRIZES_TITLE: string;
							ARCHIVES_TITLE: string;
							ARCHIVES_WHEEL_COMEBACK: string;
							ARENA_CHALLENGE_WIZARDS: string;
							ARENA_CHECK_INTERNET_MESSAGE: string;
							ARENA_CONFIRM_TRAINING: string;
							ARENA_DOWN_MESSAGE: string;
							ARENA_EARN_BRONZE: string;
							ARENA_FIND_CHALLENGER: string;
							ARENA_LEADERBOARD_TOP_PLAYERS: string;
							ARENA_LEADERBOARD_WORLD_TOP_PLAYER: string;
							ARENA_MUST_BE_IN_CLASS: string;
							ARENA_MY_SCORE: string;
							ARENA_OFFLINE_MESSAGE: string;
							ARENA_RANK_UP_FASTER: string;
							ARENA_STORE_DIAMOND_BUTTON_BOT: string;
							ARENA_STORE_DIAMOND_BUTTON_TOP: string;
							ARENA_STORE_GOLD_BUTTON_BOT: string;
							ARENA_STORE_GOLD_BUTTON_TOP: string;
							ARENA_STORE_PLATINUM_BUTTON_BOT: string;
							ARENA_STORE_PLATINUM_BUTTON_TOP: string;
							ARENA_STORE_SILVER_BUTTON_BOT: string;
							ARENA_STORE_SILVER_BUTTON_TOP: string;
							ARENA_TITLE: string;
							ATTACK_SELECT_ACTIONS: string;
							ATTACK_SELECT_ATTACK: string;
							ATTACK_SELECT_CAPTURE: string;
							ATTACK_SELECT_ELEMENTS: string;
							ATTACK_SELECT_EPIC_SPELLS: string;
							ATTACK_SELECT_ESCAPE: string;
							ATTACK_SELECT_LEVEL: string;
							ATTACK_SELECT_MY_TEAM: string;
							ATTACK_SELECT_SPELLS: string;
							AWARDS_TITLE: string;
							BACKPACK_BUTTON_BOOTS: string;
							BACKPACK_BUTTON_BUDDIES: string;
							BACKPACK_BUTTON_CURRENCY: string;
							BACKPACK_BUTTON_HATS: string;
							BACKPACK_BUTTON_ITEMS: string;
							BACKPACK_BUTTON_OUTFITS: string;
							BACKPACK_BUTTON_RELICS: string;
							BACKPACK_BUTTON_WANDS: string;
							BATTLE_API_MAINTENANCE_MESSAGE: string;
							BATTLE_INTRO: string;
							BATTLE_REQUEST_ACCEPT: string;
							BATTLE_REQUEST_NAME: string;
							BATTLE_STATUS_ALL_OUT_ATTACK: string;
							BATTLE_STATUS_LEVEL: string;
							BONFIRE_GUARDIAN: string;
							BOOST_DESCRIPTION_DIG_FASTER: string;
							BOOST_DESCRIPTION_MORE_FOSSILS: string;
							BOOST_DESCRIPTION_MORE_GEARS: string;
							BOOST_DESCRIPTION_MULTIPLIER: string;
							BOOST_DESCRIPTION_SLOW_TIME: string;
							BOOST_DESCRIPTION_WALK_FASTER: string;
							BOOST_MENU_BUTTON_NONE: string;
							BOOST_MENU_TITLE: string;
							BOSS_NAME_GLACIAS: string;
							BOSS_NAME_YETI: string;
							BOUNTIES_INCREASE_RANK: string;
							BOUNTY_BOARD_ANCIENT_REWARD: string;
							BOUNTY_BOARD_BOUNTY_TITLE: string;
							BOUNTY_BOARD_BUTTON_BOT: string;
							BOUNTY_BOARD_BUTTON_TOP: string;
							BOUNTY_BOARD_COMPLETED: string;
							BOUNTY_BOARD_COMPLETED_TURN_IN: string;
							BOUNTY_BOARD_GO_TO_LAMPLIGHT: string;
							BOUNTY_BOARD_MEMBER_BUTTON_BOT: string;
							BOUNTY_BOARD_MEMBER_BUTTON_TOP: string;
							BOUNTY_BOARD_POSSIBLE_REWARDS: string;
							BOUNTY_BOARD_PREPARE_TEAM: string;
							BOUNTY_BOARD_TITLE: string;
							BOUNTY_BOARD_UNLOCK_MESSAGE: string;
							BOUNTY_DEFEAT_MONSTER_TEXT_0_A: string;
							BOUNTY_DEFEAT_MONSTER_TEXT_0_AN: string;
							BOUNTY_DEFEAT_MONSTER_TEXT_1: string;
							BOUNTY_DEFEAT_MONSTER_TEXT_2: string;
							BOUNTY_DEFEAT_MONSTER_TEXT_3: string;
							BOUNTY_DEFEAT_MONSTER_TEXT_4: string;
							BOUNTY_FOUND: string;
							BOUNTY_POINTS_100: string;
							BOUNTY_POINTS_20: string;
							BOUNTY_POINTS_5: string;
							BOUNTY_POINTS_50: string;
							BOUNTY_RUN_ABANDON_WARNING: string;
							BOUNTY_RUN_ABANDON_WARNING_TITLE: string;
							BOUNTY_RUN_BOSS_BUFF: string;
							BOUNTY_RUN_BUFF_CRITICAL: string;
							BOUNTY_RUN_BUFF_DAMAGE: string;
							BOUNTY_RUN_BUFF_HEALTH: string;
							BOUNTY_RUN_CLOSE_MENU: string;
							BOUNTY_RUN_RARE: string;
							BOUNTY_RUN_SELECT_BOUNTY: string;
							BOUNTY_RUN_START_RUN: string;
							BOUNTY_RUN_TIME_REMAINING: string;
							BUTTON_APPLY: string;
							BUTTON_BACK: string;
							BUTTON_BACK_CAPITAL: string;
							BUTTON_CANCEL: string;
							BUTTON_CANCEL_UPPERCASE: string;
							BUTTON_CLICK_HERE: string;
							BUTTON_CLOSE: string;
							BUTTON_DELETE_TEAM: string;
							BUTTON_DONE: string;
							BUTTON_GO_BACK: string;
							BUTTON_KEEP_TEAM: string;
							BUTTON_LEAVE_TEAM: string;
							BUTTON_NEXT: string;
							BUTTON_NEXT_CAPITAL: string;
							BUTTON_NO: string;
							BUTTON_NO_UPPERCASE: string;
							BUTTON_OK_EXCLAMATION: string;
							BUTTON_OK_UPPERCASE: string;
							BUTTON_OKAY: string;
							BUTTON_OKAY_CAPITAL: string;
							BUTTON_OKAY_EXCLAMATION: string;
							BUTTON_OKAY_UPPERCASE: string;
							BUTTON_QUIT_CAPITAL: string;
							BUTTON_QUIT_QUESTION: string;
							BUTTON_STAY_TEAM: string;
							BUTTON_YES: string;
							BUTTON_YES_UPPERCASE: string;
							BUY_TOY_ASK_PARENT: string;
							BUY_TOY_BUY_NOW: string;
							BUY_TOY_EPIC_ATTACK: string;
							BUY_TOY_MESSAGE: string;
							BUY_TOY_REQUIRE_COMPUTER_MESSAGE: string;
							CANCEL: string;
							CHARACTER_CREATE_EYE_COLOR: string;
							CHARACTER_CREATE_HAIR_COLOR: string;
							CHARACTER_CREATE_HAIR_STYLE: string;
							CHARACTER_CREATE_SKIN_COLOR: string;
							CHARACTER_SELECT_ADD_CHARACTER: string;
							CHARACTER_SELECT_ENTER_CLASS: string;
							CHARACTER_SELECT_ERROR_INVALID_CLASS_CODE: string;
							CHARACTER_SELECT_ERROR_NO_CLASS_CODE: string;
							CHARACTER_SELECT_LEARN: string;
							CHARACTER_SELECT_NEW_CLASS_BODY: string;
							CHARACTER_SELECT_NEW_CLASS_TITLE: string;
							CHARACTER_SELECT_NEW_TEACHER: string;
							CHARACTER_SELECT_NO_CLASS_CODE: string;
							CHARACTER_SELECT_TOYS: string;
							CHARACTER_SELECT_UPDATE: string;
							CHAT_ABRACA_DAB_RA: string;
							CHAT_ABRACADABRA: string;
							CHAT_ALL_GOOD: string;
							CHAT_ALL_RIGHT: string;
							CHAT_ANIMALS: string;
							CHAT_ARE_YOU_COMING: string;
							CHAT_ARE_YOU_HAVING_FUN: string;
							CHAT_ARE_YOU_LEAVING: string;
							CHAT_ARE_YOU_STAYING: string;
							CHAT_ASK_PARENTS: string;
							CHAT_BAD: string;
							CHAT_BARELY: string;
							CHAT_BECAUSE: string;
							CHAT_BORING: string;
							CHAT_BOUGHT_IT: string;
							CHAT_BUNNIES_ARE_BEST: string;
							CHAT_BUSY: string;
							CHAT_BUT: string;
							CHAT_BYE: string;
							CHAT_BYE_BYE: string;
							CHAT_CANT_RIGHT_NOW: string;
							CHAT_CHECK_IT_OUT: string;
							CHAT_CHILL_CHAR_COOL: string;
							CHAT_CHILL_CHAR_FAVOURITE: string;
							CHAT_COME_OVER_HERE: string;
							CHAT_CRUD: string;
							CHAT_DEPENDS: string;
							CHAT_DID_YOU_CATCH: string;
							CHAT_DID_YOU_SEE_THAT: string;
							CHAT_DO_YOU_HAVE: string;
							CHAT_DO_YOU_HAVE_A_MIN: string;
							CHAT_DO_YOU_LIKE_BUNNIES: string;
							CHAT_DO_YOU_LIKE_FOXES: string;
							CHAT_DON_ZORRO_FANTASTICO: string;
							CHAT_DONT_BOTHER: string;
							CHAT_DRAGONS: string;
							CHAT_DRAGONS_COMING: string;
							CHAT_DRAGONS_COOL: string;
							CHAT_DRAGONS_HERE: string;
							CHAT_DRAGONS_LIKE: string;
							CHAT_DRAGONS_SEEN: string;
							CHAT_DRAGONS_WANT: string;
							CHAT_DUDE: string;
							CHAT_ECLIPSE_COOL: string;
							CHAT_ECLIPSE_FAVOURITE: string;
							CHAT_ELEMENTARY: string;
							CHAT_EVERYONE_LOOK: string;
							CHAT_FEEL_LIKE_DANCING: string;
							CHAT_FOLLOW_ME: string;
							CHAT_FORGET_IT: string;
							CHAT_FOUND_IT: string;
							CHAT_FOUND_YOU: string;
							CHAT_FOXES_ARE_BEST: string;
							CHAT_FREAKY: string;
							CHAT_FRIENDS: string;
							CHAT_FUN: string;
							CHAT_FUNDERFUL: string;
							CHAT_GHOSTS: string;
							CHAT_GO_AWAY: string;
							CHAT_GO_BUNNY_BANDITS: string;
							CHAT_GO_FOX_KNIGHTS: string;
							CHAT_GOLLY: string;
							CHAT_GOOD: string;
							CHAT_GOOD_AFTERNOON: string;
							CHAT_GOOD_MORNING: string;
							CHAT_GOOD_NIGHT: string;
							CHAT_GOOD_TO_KNOW: string;
							CHAT_GOODBYE: string;
							CHAT_GOT_TO_GO: string;
							CHAT_GREAT: string;
							CHAT_GREETINGS: string;
							CHAT_GUESS: string;
							CHAT_GUESS_AGAIN: string;
							CHAT_HAPPY: string;
							CHAT_HARRIET_HOOD_RULES: string;
							CHAT_HELLO: string;
							CHAT_HELLO_THERE: string;
							CHAT_HELP_ME: string;
							CHAT_HEY: string;
							CHAT_HI: string;
							CHAT_HIPPITY_HOP: string;
							CHAT_HOP_HOP: string;
							CHAT_HOW: string;
							CHAT_HOW_ARE_YOU: string;
							CHAT_I_CAUGHT_A: string;
							CHAT_I_DONT_LIKE_IT_HERE: string;
							CHAT_I_GOT_A: string;
							CHAT_I_HAVE_TO_GO: string;
							CHAT_I_HAVE_TO_LEAVE: string;
							CHAT_I_LEVELED_UP: string;
							CHAT_I_LIKE_BUNNIES: string;
							CHAT_I_LIKE_FOXES: string;
							CHAT_I_LIKE_IT_HERE: string;
							CHAT_I_LIKE_THIS_PLACE: string;
							CHAT_I_LIKE_YOU_PET: string;
							CHAT_I_LIKE_YOUR_HAIR: string;
							CHAT_I_LIKE_YOUR_HAT: string;
							CHAT_I_LIKE_YOUR_OUTFIT: string;
							CHAT_I_LIKE_YOUR_WAND: string;
							CHAT_I_LOVE_PRODIGY: string;
							CHAT_IM_RICH: string;
							CHAT_ITS_SPOOKY_HERE: string;
							CHAT_ITS_SUPER_RARE: string;
							CHAT_ITS_TIME: string;
							CHAT_JEALOUS: string;
							CHAT_JOKING: string;
							CHAT_JUST_KIDDING: string;
							CHAT_JUST_YOU_WAIT: string;
							CHAT_KEEP_GOING: string;
							CHAT_KEEP_IT_UP: string;
							CHAT_KEEP_WALKING: string;
							CHAT_LEAVE_ME_ALONE: string;
							CHAT_LET_ME_SEE: string;
							CHAT_LETS_BATTLE: string;
							CHAT_LETS_DANCE: string;
							CHAT_LETS_GO: string;
							CHAT_LOCKED: string;
							CHAT_LOOK: string;
							CHAT_LOOK_AT_THIS: string;
							CHAT_LOVE_IT: string;
							CHAT_LUMA_COOL: string;
							CHAT_LUMA_FAVOURITE: string;
							CHAT_MADE_IT: string;
							CHAT_MADE_TONS_OF_GOLD: string;
							CHAT_MAKE_ME: string;
							CHAT_MANY_THANKS: string;
							CHAT_MAYBE: string;
							CHAT_MEMBER_AWESOME: string;
							CHAT_MY_FAVOURITE_IS: string;
							CHAT_MY_FAVOURITE_ITEM_IS: string;
							CHAT_MY_FAVOURITE_PET_IS: string;
							CHAT_NAH: string;
							CHAT_NEAT: string;
							CHAT_NEVER: string;
							CHAT_NEVER_MIND: string;
							CHAT_NO: string;
							CHAT_NO_CAN_DO: string;
							CHAT_NO_WAY: string;
							CHAT_NOT_RIGHT_NOW: string;
							CHAT_NOT_TODAY: string;
							CHAT_NOW: string;
							CHAT_NOW_QUESTION: string;
							CHAT_OKAY: string;
							CHAT_OMINOUS: string;
							CHAT_ONE_OF_THESE_IS: string;
							CHAT_OVER: string;
							CHAT_OVER_HERE: string;
							CHAT_PARENTS_BEST: string;
							CHAT_PARTY_TIME: string;
							CHAT_PERHAPS: string;
							CHAT_PRACTICE: string;
							CHAT_PRETTY_COOL: string;
							CHAT_PUYOY: string;
							CHAT_QUACK_QUACK: string;
							CHAT_QUIET: string;
							CHAT_QUITE: string;
							CHAT_RIBBIT: string;
							CHAT_RIGHT: string;
							CHAT_RIGHT_BEHIND_YOU: string;
							CHAT_RIGHT_OVER_HERE: string;
							CHAT_RIGHT_THERE: string;
							CHAT_SAFE_AND_SOUND: string;
							CHAT_SEE: string;
							CHAT_SEE_YA: string;
							CHAT_SEE_YOU_LATER: string;
							CHAT_SEEMS_LIKE_IT: string;
							CHAT_SHHH: string;
							CHAT_SHOW_FUNNY_FACE: string;
							CHAT_SOMEDAY: string;
							CHAT_SOMEONE_SAID_SO: string;
							CHAT_SORRY: string;
							CHAT_SOUNDS_LIKE: string;
							CHAT_TEACHER_AWESOME: string;
							CHAT_TELL_YOU_WHAT: string;
							CHAT_TERRIBLE: string;
							CHAT_THANK_YOU: string;
							CHAT_THERE_YOU_ARE: string;
							CHAT_THINK_ABOUT_IT: string;
							CHAT_TIDUS_COOL: string;
							CHAT_TIDUS_FAVOURITE: string;
							CHAT_TIME_FOR_BED: string;
							CHAT_TIME_FOR_DINNER: string;
							CHAT_TIME_FOR_LUNCH: string;
							CHAT_TIME_FOR_SUPPER: string;
							CHAT_TIME_TO_GET_UP: string;
							CHAT_TIME_TO_GO: string;
							CHAT_VERY_GOOD: string;
							CHAT_WHAT: string;
							CHAT_WHAT_DOES_FOX_SAY: string;
							CHAT_WHATS_UP: string;
							CHAT_WHERE: string;
							CHAT_WHO: string;
							CHAT_WHO_ARE_YOU: string;
							CHAT_WHY: string;
							CHAT_YES: string;
							CHAT_YOLO: string;
							CHAT_YOU_COMING: string;
							CHAT_YOU_LOOK_COOL: string;
							CHAT_YOU_STILL_THERE: string;
							CHAT_YOURE_WELCOME: string;
							CHAT_ZZZ: string;
							CHEST_LOCKED_MESSAGE: string;
							CHEST_OPEN_MULTI: string;
							CHEST_OPEN_SINGLE: string;
							CHOOSE_A_PET: string;
							CHOOSE_PET_BUTTON: string;
							CHOOSE_SPELL_TITLE: string;
							CLASS_CODE_CONTINUE: string;
							CLASS_CODE_CORRECT: string;
							CLASS_CODE_ERROR: string;
							CLASS_CODE_LEARN_MORE_BODY: string;
							CLASS_CODE_LEARN_MORE_HEADER: string;
							CLASS_CODE_PLAYING_AT_HOME: string;
							CLASS_CODE_PLAYING_AT_SCHOOL: string;
							CLASS_CODE_PROMPT_TEACHER_CLICK_0: string;
							CLASS_CODE_PROMPT_TEACHER_CLICK_1: string;
							CLASS_CODE_SAVED: string;
							CLASS_CODE_SELECT_CONTENT: string;
							CLASS_CODE_SELECT_JOIN: string;
							CLASS_CODE_SELECT_PLAY: string;
							CLASS_CODE_SELECT_TITLE: string;
							CLASS_CODE_TEACHER: string;
							CLASS_CODE_TITLE: string;
							"CLASS_CODE-CONTENT": string;
							CLASS_MODE_LAMPLIGHT_BODY: string;
							CLASS_MODE_LAMPLIGHT_TITLE: string;
							CLASS_MODE_SPIN_BUTTON: string;
							CLASS_MODE_TW: string;
							CLASS_MODE_WOW: string;
							CLICK_TO_ADD: string;
							CO_OP_CORRECT_ANSWERS: string;
							CO_OP_CRYSTAL_HEALTH_NAME: string;
							CO_OP_GUEST_SUBTITLE: string;
							CO_OP_GUEST_TAG: string;
							CO_OP_HOST_START_BUTTON: string;
							CO_OP_HOST_SUBTITLE: string;
							CO_OP_INPUT_BLOCKED_MODAL: string;
							CO_OP_LEAVE_TEAM: string;
							CO_OP_MORE_TITAN_SHARDS: string;
							CO_OP_PARTY_CELL_FRIEND: string;
							CO_OP_PARTY_CELL_FULL: string;
							CO_OP_PARTY_CELL_JOIN_BUTTON: string;
							CO_OP_PARTY_CREATE_BUTTON: string;
							CO_OP_PARTY_CREATE_SUBTITLE: string;
							CO_OP_PARTY_CREATE_TITLE: string;
							CO_OP_PARTY_NO_TEAMS: string;
							CO_OP_PARTY_SELECT_SUBTITLE: string;
							CO_OP_PARTY_SELECT_TITLE: string;
							CO_OP_REJOIN_TEAM: string;
							CO_OP_RESULTS_BANNER: string;
							CO_OP_REWARDS_EARNED: string;
							CO_OP_TEAM: string;
							CO_OP_TITAN_HEALTH_NAME: string;
							CODE_INCORRECT_LENGTH_ERROR: string;
							CODE_INVALID_ERROR: string;
							CODE_UNKNOWN_ERROR: string;
							COLISEUM_BUTTON_CHALLENGE: string;
							COLISEUM_OPPONENT_ADVENTURER_DESCRIPTION: string;
							COLISEUM_OPPONENT_ADVENTURER_NAME: string;
							COLISEUM_OPPONENT_ADVENTURER_TITLE: string;
							COLISEUM_OPPONENT_BEASTMASTER_DESCRIPTION: string;
							COLISEUM_OPPONENT_BEASTMASTER_NAME: string;
							COLISEUM_OPPONENT_BEASTMASTER_TITLE: string;
							COLISEUM_OPPONENT_CAROLER_DESCRIPTION: string;
							COLISEUM_OPPONENT_CAROLER_NAME: string;
							COLISEUM_OPPONENT_CAROLER_TITLE: string;
							COLISEUM_OPPONENT_COPYCAT_DESCRIPTION: string;
							COLISEUM_OPPONENT_COPYCAT_NAME: string;
							COLISEUM_OPPONENT_COPYCAT_TITLE: string;
							COLISEUM_OPPONENT_CURIOUS_ONE_DESCRIPTION: string;
							COLISEUM_OPPONENT_CURIOUS_ONE_NAME: string;
							COLISEUM_OPPONENT_CURIOUS_ONE_TITLE: string;
							COLISEUM_OPPONENT_EMERALD_KNIGHT_DESCRIPTION: string;
							COLISEUM_OPPONENT_EMERALD_KNIGHT_NAME: string;
							COLISEUM_OPPONENT_EMERALD_KNIGHT_TITLE: string;
							COLISEUM_OPPONENT_ENIGMA_DESCRIPTION: string;
							COLISEUM_OPPONENT_ENIGMA_NAME: string;
							COLISEUM_OPPONENT_ENIGMA_TITLE: string;
							COLISEUM_OPPONENT_FOREST_GUARDIAN_DESCRIPTION: string;
							COLISEUM_OPPONENT_FOREST_GUARDIAN_NAME: string;
							COLISEUM_OPPONENT_FOREST_GUARDIAN_TITLE: string;
							COLISEUM_OPPONENT_FOREST_SPRITE_DESCRIPTION: string;
							COLISEUM_OPPONENT_FOREST_SPRITE_NAME: string;
							COLISEUM_OPPONENT_FOREST_SPRITE_TITLE: string;
							COLISEUM_OPPONENT_ICE_QUEEN_DESCRIPTION: string;
							COLISEUM_OPPONENT_ICE_QUEEN_NAME: string;
							COLISEUM_OPPONENT_ICE_QUEEN_TITLE: string;
							COLISEUM_OPPONENT_LOUDMOUTH_DESCRIPTION: string;
							COLISEUM_OPPONENT_LOUDMOUTH_NAME: string;
							COLISEUM_OPPONENT_LOUDMOUTH_TITLE: string;
							COLISEUM_OPPONENT_METALHEAD_DESCRIPTION: string;
							COLISEUM_OPPONENT_METALHEAD_NAME: string;
							COLISEUM_OPPONENT_METALHEAD_TITLE: string;
							COLISEUM_OPPONENT_NAMELESS_DESCRIPTION: string;
							COLISEUM_OPPONENT_NAMELESS_NAME: string;
							COLISEUM_OPPONENT_NAMELESS_TITLE: string;
							COLISEUM_OPPONENT_NEW_GIRL_DESCRIPTION: string;
							COLISEUM_OPPONENT_NEW_GIRL_NAME: string;
							COLISEUM_OPPONENT_NEW_GIRL_TITLE: string;
							COLISEUM_OPPONENT_PET_ENTHUSIAST_DESCRIPTION: string;
							COLISEUM_OPPONENT_PET_ENTHUSIAST_NAME: string;
							COLISEUM_OPPONENT_PET_ENTHUSIAST_TITLE: string;
							COLISEUM_OPPONENT_PRODIGY_DESCRIPTION: string;
							COLISEUM_OPPONENT_PRODIGY_NAME: string;
							COLISEUM_OPPONENT_PRODIGY_TITLE: string;
							COLISEUM_OPPONENT_SWEETHEART_DESCRIPTION: string;
							COLISEUM_OPPONENT_SWEETHEART_NAME: string;
							COLISEUM_OPPONENT_SWEETHEART_TITLE: string;
							COLISEUM_OPPONENT_TIMED_TRAVELLER_DESCRIPTION: string;
							COLISEUM_OPPONENT_TIMED_TRAVELLER_NAME: string;
							COLISEUM_OPPONENT_TIMED_TRAVELLER_TITLE: string;
							COLISEUM_OPPONENT_VETERAN_DESCRIPTION: string;
							COLISEUM_OPPONENT_VETERAN_NAME: string;
							COLISEUM_OPPONENT_VETERAN_TITLE: string;
							COLISEUM_OPPONENT_WELL_ROUNDED_DESCRIPTION: string;
							COLISEUM_OPPONENT_WELL_ROUNDED_NAME: string;
							COLISEUM_OPPONENT_WELL_ROUNDED_TITLE: string;
							COLISEUM_PROMPT_CHALLENGE: string;
							COLISEUM_PROMPT_REQUIRE_DEFEAT_PLURAL: string;
							COLISEUM_PROMPT_REQUIRE_DEFEAT_SINGLE: string;
							COLISEUM_PROMPT_REQUIRE_LEVEL: string;
							COLISEUM_PROMPT_REQUIRE_LEVEL_DEFEAT_PLURAL: string;
							COLISEUM_PROMPT_REQUIRE_LEVEL_DEFEAT_SINGLE: string;
							COLISEUM_REWARD: string;
							COMBAT_ATTACK_USED: string;
							COMBAT_BOSS_BATTLE: string;
							COMBAT_BOSS_TIME: string;
							COMBAT_BOUNTY_BATTLE: string;
							COMBAT_CANT_EAT_RIGHT_NOW: string;
							COMBAT_CAST_BONUS_HIT: string;
							COMBAT_CATCH_CONFIRM: string;
							COMBAT_CATCH_GOLD_MESSAGE_BODY: string;
							COMBAT_CATCH_NON_WIZARD: string;
							COMBAT_CATCH_TOO_MANY_MESSAGE_BODY: string;
							COMBAT_CATCH_TOO_MUCH_HEALTH: string;
							COMBAT_CLOUD_FIGHT: string;
							COMBAT_DEFEAT_AMBUSHERS: string;
							COMBAT_DEFEAT_GUARDIAN: string;
							COMBAT_DRAW: string;
							COMBAT_FREE_CATCH_CONFIRM: string;
							COMBAT_LOST: string;
							COMBAT_MINION_BATTLE: string;
							COMBAT_PIPPET_BATTLE: string;
							COMBAT_RAN_AWAY: string;
							COMBAT_RUN_FAILED: string;
							COMBAT_SAVE_EUGENE: string;
							COMBAT_SCARY_WORM: string;
							COMBAT_SNOWBALL_FIGHT: string;
							COMBAT_TITAN_BATTLE: string;
							COMBAT_TITAN_HIT: string;
							COMBAT_TRIPTROP_TRIO: string;
							COMBAT_WEATHER_METER: string;
							COMBAT_WIZARD_BATTLE: string;
							COMBAT_WON: string;
							COMBAT_YOU: string;
							COMING_SOON_MESSAGE: string;
							COMMON_CORE_STATE_STANDARDS: string;
							COOP_GUEST_BANNER_BODY: string;
							COUNTDOWN_DAY_LEFT: string;
							COUNTDOWN_DAYS_LEFT: string;
							COUNTDOWN_HOUR_LEFT: string;
							COUNTDOWN_HOURS_LEFT: string;
							COUNTDOWN_MINUTE_LEFT: string;
							COUNTDOWN_MINUTES_LEFT: string;
							COUNTDOWN_SECOND_LEFT: string;
							COUNTDOWN_SECONDS_LEFT: string;
							CREATURE_IS_EVOLVING: string;
							CREATURE_STOPPED_EVOLVING: string;
							CREATURE_TRYING_TO_EVOLVE: string;
							CRYSTAL_CAVERN_ASPEN_1: string;
							CRYSTAL_CAVERN_ASPEN_10: string;
							CRYSTAL_CAVERN_ASPEN_11: string;
							CRYSTAL_CAVERN_ASPEN_12: string;
							CRYSTAL_CAVERN_ASPEN_13: string;
							CRYSTAL_CAVERN_ASPEN_14: string;
							CRYSTAL_CAVERN_ASPEN_15: string;
							CRYSTAL_CAVERN_ASPEN_16: string;
							CRYSTAL_CAVERN_ASPEN_17: string;
							CRYSTAL_CAVERN_ASPEN_18: string;
							CRYSTAL_CAVERN_ASPEN_19: string;
							CRYSTAL_CAVERN_ASPEN_2: string;
							CRYSTAL_CAVERN_ASPEN_20: string;
							CRYSTAL_CAVERN_ASPEN_3: string;
							CRYSTAL_CAVERN_ASPEN_4: string;
							CRYSTAL_CAVERN_ASPEN_5: string;
							CRYSTAL_CAVERN_ASPEN_6: string;
							CRYSTAL_CAVERN_ASPEN_7: string;
							CRYSTAL_CAVERN_ASPEN_8: string;
							CRYSTAL_CAVERN_ASPEN_9: string;
							CRYSTAL_CAVERN_MINER_1: string;
							CRYSTAL_CAVERN_MINER_2: string;
							CRYSTAL_CAVERN_MINER_3: string;
							CRYSTAL_CAVERN_MINER_4: string;
							CRYSTAL_CAVERN_MINER_5: string;
							CRYSTAL_CAVERN_MINER_6: string;
							CRYSTAL_CAVERN_NOOT_1: string;
							CRYSTAL_CAVERN_NOOT_10: string;
							CRYSTAL_CAVERN_NOOT_11: string;
							CRYSTAL_CAVERN_NOOT_12: string;
							CRYSTAL_CAVERN_NOOT_13: string;
							CRYSTAL_CAVERN_NOOT_14: string;
							CRYSTAL_CAVERN_NOOT_15: string;
							CRYSTAL_CAVERN_NOOT_16: string;
							CRYSTAL_CAVERN_NOOT_17: string;
							CRYSTAL_CAVERN_NOOT_18: string;
							CRYSTAL_CAVERN_NOOT_19: string;
							CRYSTAL_CAVERN_NOOT_2: string;
							CRYSTAL_CAVERN_NOOT_20: string;
							CRYSTAL_CAVERN_NOOT_3: string;
							CRYSTAL_CAVERN_NOOT_4: string;
							CRYSTAL_CAVERN_NOOT_5: string;
							CRYSTAL_CAVERN_NOOT_6: string;
							CRYSTAL_CAVERN_NOOT_7: string;
							CRYSTAL_CAVERN_NOOT_8: string;
							CRYSTAL_CAVERN_NOOT_9: string;
							CRYSTAL_CAVERN_WINSTON_1: string;
							CRYSTAL_CAVERN_WINSTON_2: string;
							CRYSTAL_CAVERN_WINSTON_3: string;
							CRYSTAL_CAVERN_WINSTON_4: string;
							CRYSTAL_CAVERN_WINSTON_5: string;
							CRYSTAL_CAVERNS_AD_BODY: string;
							CRYSTAL_CAVERNS_AD_TITLE: string;
							CRYSTAL_CAVERNS_ADVENTURE: string;
							CURRENCY_BOUNTY_POINTS: string;
							CURRENCY_GOLD_COINS: string;
							CUTSCENE_SKIP: string;
							DAILY_LOGIN_BONUS_TITLE: string;
							DAILY_LOGIN_COME_BACK: string;
							DAILY_LOGIN_DAY: string;
							DAILY_QUESTIONS_TITLE: string;
							DANCE_DANCE_BEST_SCORE: string;
							DANCE_DANCE_BUTTON_BACK: string;
							DANCE_DANCE_BUTTON_GO: string;
							DANCE_DANCE_CHOOSE_DIFFICULTY: string;
							DANCE_DANCE_EARNED_GEARS: string;
							DANCE_DANCE_FAILED: string;
							DANCE_DANCE_GET_ROBOT_0: string;
							DANCE_DANCE_GET_ROBOT_1: string;
							DANCE_DANCE_GET_ROBOT_2: string;
							DANCE_DANCE_GET_ROBOT_3: string;
							DANCE_DANCE_HIGHER_LEVEL: string;
							DANCE_DANCE_INSTRUCTIONS_0: string;
							DANCE_DANCE_INSTRUCTIONS_1: string;
							DANCE_DANCE_INSTRUCTIONS_2: string;
							DANCE_DANCE_LEVEL_UP_MAX: string;
							DANCE_DANCE_LEVEL_UP_UNDER_10: string;
							DANCE_DANCE_LEVEL_UP_UNDER_5: string;
							DANCE_DANCE_LOWER_DIFFICULTY: string;
							DANCE_DANCE_MAX_LEVEL: string;
							DANCE_DANCE_MESSAGE_LEVEL_BODY: string;
							DANCE_DANCE_NEW_HIGH_SCORE: string;
							DANCE_DANCE_READY: string;
							DANCE_DANCE_READY_TO_START: string;
							DANCE_DANCE_REWARD: string;
							DANCE_DANCE_SPEED_UP: string;
							DANCE_DANCE_START: string;
							DANCE_DANCE_SUCCESS: string;
							DANCE_DANCE_TRY_AGAIN: string;
							DANCE_DANCE_TRY_NEW_DIFFICULTY: string;
							DANCE_DANCE_UH_OH: string;
							DELETE_TEAM_BODY: string;
							DELETE_TEAM_TITLE: string;
							DIALOG_CONTINUE: string;
							DIALOG_LEAVE: string;
							DIALOG_TITLE_TRIAL_LOCKED: string;
							DIALOGUE_ATHENA_1: string;
							DIALOGUE_ATHENA_10: string;
							DIALOGUE_ATHENA_11: string;
							DIALOGUE_ATHENA_12: string;
							DIALOGUE_ATHENA_13: string;
							DIALOGUE_ATHENA_14: string;
							DIALOGUE_ATHENA_15: string;
							DIALOGUE_ATHENA_16: string;
							DIALOGUE_ATHENA_17: string;
							DIALOGUE_ATHENA_2: string;
							DIALOGUE_ATHENA_3: string;
							DIALOGUE_ATHENA_4: string;
							DIALOGUE_ATHENA_5: string;
							DIALOGUE_ATHENA_6: string;
							DIALOGUE_ATHENA_7: string;
							DIALOGUE_ATHENA_8: string;
							DIALOGUE_ATHENA_9: string;
							DIALOGUE_BARGO_0: string;
							DIALOGUE_BARGO_1: string;
							DIALOGUE_BARGO_2: string;
							DIALOGUE_BARGO_3: string;
							DIALOGUE_BARGO_4: string;
							DIALOGUE_BENNI_0: string;
							DIALOGUE_BENNI_1: string;
							DIALOGUE_BENNI_10: string;
							DIALOGUE_BENNI_11: string;
							DIALOGUE_BENNI_12: string;
							DIALOGUE_BENNI_13: string;
							DIALOGUE_BENNI_14: string;
							DIALOGUE_BENNI_15: string;
							DIALOGUE_BENNI_16: string;
							DIALOGUE_BENNI_17: string;
							DIALOGUE_BENNI_18: string;
							DIALOGUE_BENNI_19: string;
							DIALOGUE_BENNI_2: string;
							DIALOGUE_BENNI_20: string;
							DIALOGUE_BENNI_21: string;
							DIALOGUE_BENNI_22: string;
							DIALOGUE_BENNI_23: string;
							DIALOGUE_BENNI_24: string;
							DIALOGUE_BENNI_25: string;
							DIALOGUE_BENNI_26: string;
							DIALOGUE_BENNI_27: string;
							DIALOGUE_BENNI_28: string;
							DIALOGUE_BENNI_29: string;
							DIALOGUE_BENNI_3: string;
							DIALOGUE_BENNI_30: string;
							DIALOGUE_BENNI_31: string;
							DIALOGUE_BENNI_32: string;
							DIALOGUE_BENNI_33: string;
							DIALOGUE_BENNI_34: string;
							DIALOGUE_BENNI_35: string;
							DIALOGUE_BENNI_36: string;
							DIALOGUE_BENNI_37: string;
							DIALOGUE_BENNI_38: string;
							DIALOGUE_BENNI_39: string;
							DIALOGUE_BENNI_4: string;
							DIALOGUE_BENNI_40: string;
							DIALOGUE_BENNI_41: string;
							DIALOGUE_BENNI_42: string;
							DIALOGUE_BENNI_43: string;
							DIALOGUE_BENNI_44: string;
							DIALOGUE_BENNI_45: string;
							DIALOGUE_BENNI_46: string;
							DIALOGUE_BENNI_5: string;
							DIALOGUE_BENNI_6: string;
							DIALOGUE_BENNI_7: string;
							DIALOGUE_BENNI_8: string;
							DIALOGUE_BENNI_9: string;
							DIALOGUE_BOK_0: string;
							DIALOGUE_BOK_1: string;
							DIALOGUE_BOK_10: string;
							DIALOGUE_BOK_11: string;
							DIALOGUE_BOK_12: string;
							DIALOGUE_BOK_13: string;
							DIALOGUE_BOK_14: string;
							DIALOGUE_BOK_15: string;
							DIALOGUE_BOK_16: string;
							DIALOGUE_BOK_17: string;
							DIALOGUE_BOK_18: string;
							DIALOGUE_BOK_19: string;
							DIALOGUE_BOK_2: string;
							DIALOGUE_BOK_20: string;
							DIALOGUE_BOK_21: string;
							DIALOGUE_BOK_22: string;
							DIALOGUE_BOK_23: string;
							DIALOGUE_BOK_24: string;
							DIALOGUE_BOK_25: string;
							DIALOGUE_BOK_26: string;
							DIALOGUE_BOK_27: string;
							DIALOGUE_BOK_28: string;
							DIALOGUE_BOK_29: string;
							DIALOGUE_BOK_3: string;
							DIALOGUE_BOK_30: string;
							DIALOGUE_BOK_31: string;
							DIALOGUE_BOK_32: string;
							DIALOGUE_BOK_33: string;
							DIALOGUE_BOK_34: string;
							DIALOGUE_BOK_35: string;
							DIALOGUE_BOK_36: string;
							DIALOGUE_BOK_37: string;
							DIALOGUE_BOK_38: string;
							DIALOGUE_BOK_39: string;
							DIALOGUE_BOK_4: string;
							DIALOGUE_BOK_5: string;
							DIALOGUE_BOK_6: string;
							DIALOGUE_BOK_7: string;
							DIALOGUE_BOK_8: string;
							DIALOGUE_BOK_9: string;
							DIALOGUE_BOOMBOX_0: string;
							DIALOGUE_BOOMBOX_1: string;
							DIALOGUE_BOOMBOX_2: string;
							DIALOGUE_BOOMBOX_3: string;
							DIALOGUE_BOOMBOX_4: string;
							DIALOGUE_BOOMBOX_5: string;
							DIALOGUE_BOOMBOX_6: string;
							DIALOGUE_BOOMBOX_7: string;
							DIALOGUE_BOOMBOX_8: string;
							DIALOGUE_BROCCOLINA_0: string;
							DIALOGUE_BROCCOLINA_1: string;
							DIALOGUE_CEBOLLINI_0: string;
							DIALOGUE_CEBOLLINI_1: string;
							DIALOGUE_CEBOLLINI_10: string;
							DIALOGUE_CEBOLLINI_11: string;
							DIALOGUE_CEBOLLINI_12: string;
							DIALOGUE_CEBOLLINI_13: string;
							DIALOGUE_CEBOLLINI_14: string;
							DIALOGUE_CEBOLLINI_15: string;
							DIALOGUE_CEBOLLINI_16: string;
							DIALOGUE_CEBOLLINI_17: string;
							DIALOGUE_CEBOLLINI_18: string;
							DIALOGUE_CEBOLLINI_19: string;
							DIALOGUE_CEBOLLINI_2: string;
							DIALOGUE_CEBOLLINI_3: string;
							DIALOGUE_CEBOLLINI_4: string;
							DIALOGUE_CEBOLLINI_5: string;
							DIALOGUE_CEBOLLINI_6: string;
							DIALOGUE_CEBOLLINI_7: string;
							DIALOGUE_CEBOLLINI_8: string;
							DIALOGUE_CEBOLLINI_9: string;
							DIALOGUE_DON_ZORRO_0: string;
							DIALOGUE_DON_ZORRO_1: string;
							DIALOGUE_DON_ZORRO_10: string;
							DIALOGUE_DON_ZORRO_11: string;
							DIALOGUE_DON_ZORRO_12: string;
							DIALOGUE_DON_ZORRO_13: string;
							DIALOGUE_DON_ZORRO_14: string;
							DIALOGUE_DON_ZORRO_2: string;
							DIALOGUE_DON_ZORRO_3: string;
							DIALOGUE_DON_ZORRO_4: string;
							DIALOGUE_DON_ZORRO_5: string;
							DIALOGUE_DON_ZORRO_6: string;
							DIALOGUE_DON_ZORRO_7: string;
							DIALOGUE_DON_ZORRO_8: string;
							DIALOGUE_DON_ZORRO_9: string;
							DIALOGUE_EUGENE_0: string;
							DIALOGUE_EUGENE_1: string;
							DIALOGUE_EUGENE_2: string;
							DIALOGUE_EUGENE_3: string;
							DIALOGUE_EUGENE_4: string;
							DIALOGUE_EUGENE_5: string;
							DIALOGUE_EUGENE_6: string;
							DIALOGUE_EVE_0: string;
							DIALOGUE_EVE_1: string;
							DIALOGUE_EVE_10: string;
							DIALOGUE_EVE_11: string;
							DIALOGUE_EVE_12: string;
							DIALOGUE_EVE_13: string;
							DIALOGUE_EVE_14: string;
							DIALOGUE_EVE_15: string;
							DIALOGUE_EVE_16: string;
							DIALOGUE_EVE_17: string;
							DIALOGUE_EVE_18: string;
							DIALOGUE_EVE_19: string;
							DIALOGUE_EVE_2: string;
							DIALOGUE_EVE_20: string;
							DIALOGUE_EVE_21: string;
							DIALOGUE_EVE_22: string;
							DIALOGUE_EVE_23: string;
							DIALOGUE_EVE_24: string;
							DIALOGUE_EVE_25: string;
							DIALOGUE_EVE_26: string;
							DIALOGUE_EVE_27: string;
							DIALOGUE_EVE_28: string;
							DIALOGUE_EVE_29: string;
							DIALOGUE_EVE_3: string;
							DIALOGUE_EVE_30: string;
							DIALOGUE_EVE_31: string;
							DIALOGUE_EVE_32: string;
							DIALOGUE_EVE_33: string;
							DIALOGUE_EVE_34: string;
							DIALOGUE_EVE_35: string;
							DIALOGUE_EVE_36: string;
							DIALOGUE_EVE_37: string;
							DIALOGUE_EVE_38: string;
							DIALOGUE_EVE_39: string;
							DIALOGUE_EVE_4: string;
							DIALOGUE_EVE_40: string;
							DIALOGUE_EVE_41: string;
							DIALOGUE_EVE_42: string;
							DIALOGUE_EVE_43: string;
							DIALOGUE_EVE_44: string;
							DIALOGUE_EVE_45: string;
							DIALOGUE_EVE_5: string;
							DIALOGUE_EVE_6: string;
							DIALOGUE_EVE_7: string;
							DIALOGUE_EVE_8: string;
							DIALOGUE_EVE_9: string;
							DIALOGUE_FIRST_NAME_SELECT_NOOT_1: string;
							DIALOGUE_FLORA_0: string;
							DIALOGUE_FLORA_1: string;
							DIALOGUE_FLORA_10: string;
							DIALOGUE_FLORA_11: string;
							DIALOGUE_FLORA_12: string;
							DIALOGUE_FLORA_13: string;
							DIALOGUE_FLORA_14: string;
							DIALOGUE_FLORA_15: string;
							DIALOGUE_FLORA_16: string;
							DIALOGUE_FLORA_17: string;
							DIALOGUE_FLORA_18: string;
							DIALOGUE_FLORA_19: string;
							DIALOGUE_FLORA_2: string;
							DIALOGUE_FLORA_20: string;
							DIALOGUE_FLORA_21: string;
							DIALOGUE_FLORA_22: string;
							DIALOGUE_FLORA_23: string;
							DIALOGUE_FLORA_24: string;
							DIALOGUE_FLORA_25: string;
							DIALOGUE_FLORA_26: string;
							DIALOGUE_FLORA_27: string;
							DIALOGUE_FLORA_28: string;
							DIALOGUE_FLORA_29: string;
							DIALOGUE_FLORA_3: string;
							DIALOGUE_FLORA_30: string;
							DIALOGUE_FLORA_31: string;
							DIALOGUE_FLORA_32: string;
							DIALOGUE_FLORA_33: string;
							DIALOGUE_FLORA_34: string;
							DIALOGUE_FLORA_35: string;
							DIALOGUE_FLORA_36: string;
							DIALOGUE_FLORA_37: string;
							DIALOGUE_FLORA_38: string;
							DIALOGUE_FLORA_39: string;
							DIALOGUE_FLORA_4: string;
							DIALOGUE_FLORA_5: string;
							DIALOGUE_FLORA_6: string;
							DIALOGUE_FLORA_7: string;
							DIALOGUE_FLORA_8: string;
							DIALOGUE_FLORA_9: string;
							DIALOGUE_FLORIAN_0: string;
							DIALOGUE_FLORIAN_1: string;
							DIALOGUE_FLORIAN_10: string;
							DIALOGUE_FLORIAN_11: string;
							DIALOGUE_FLORIAN_12: string;
							DIALOGUE_FLORIAN_13: string;
							DIALOGUE_FLORIAN_14: string;
							DIALOGUE_FLORIAN_15: string;
							DIALOGUE_FLORIAN_16: string;
							DIALOGUE_FLORIAN_17: string;
							DIALOGUE_FLORIAN_18: string;
							DIALOGUE_FLORIAN_19: string;
							DIALOGUE_FLORIAN_2: string;
							DIALOGUE_FLORIAN_20: string;
							DIALOGUE_FLORIAN_21: string;
							DIALOGUE_FLORIAN_22: string;
							DIALOGUE_FLORIAN_23: string;
							DIALOGUE_FLORIAN_24: string;
							DIALOGUE_FLORIAN_25: string;
							DIALOGUE_FLORIAN_26: string;
							DIALOGUE_FLORIAN_3: string;
							DIALOGUE_FLORIAN_4: string;
							DIALOGUE_FLORIAN_5: string;
							DIALOGUE_FLORIAN_6: string;
							DIALOGUE_FLORIAN_7: string;
							DIALOGUE_FLORIAN_8: string;
							DIALOGUE_FLORIAN_9: string;
							DIALOGUE_GALE_0: string;
							DIALOGUE_GALE_1: string;
							DIALOGUE_GALE_10: string;
							DIALOGUE_GALE_11: string;
							DIALOGUE_GALE_12: string;
							DIALOGUE_GALE_13: string;
							DIALOGUE_GALE_14: string;
							DIALOGUE_GALE_15: string;
							DIALOGUE_GALE_16: string;
							DIALOGUE_GALE_17: string;
							DIALOGUE_GALE_2: string;
							DIALOGUE_GALE_3: string;
							DIALOGUE_GALE_4: string;
							DIALOGUE_GALE_5: string;
							DIALOGUE_GALE_6: string;
							DIALOGUE_GALE_7: string;
							DIALOGUE_GALE_8: string;
							DIALOGUE_GALE_9: string;
							DIALOGUE_HARRIET_0: string;
							DIALOGUE_HARRIET_1: string;
							DIALOGUE_HARRIET_10: string;
							DIALOGUE_HARRIET_11: string;
							DIALOGUE_HARRIET_12: string;
							DIALOGUE_HARRIET_2: string;
							DIALOGUE_HARRIET_3: string;
							DIALOGUE_HARRIET_4: string;
							DIALOGUE_HARRIET_5: string;
							DIALOGUE_HARRIET_6: string;
							DIALOGUE_HARRIET_7: string;
							DIALOGUE_HARRIET_8: string;
							DIALOGUE_HARRIET_9: string;
							DIALOGUE_HARVEY_0: string;
							DIALOGUE_HARVEY_1: string;
							DIALOGUE_HARVEY_2: string;
							DIALOGUE_HARVEY_3: string;
							DIALOGUE_HARVEY_4: string;
							DIALOGUE_HARVEY_5: string;
							DIALOGUE_HOWARD_CORNELIUS_0: string;
							DIALOGUE_HOWARD_CORNELIUS_1: string;
							DIALOGUE_HOWARD_CORNELIUS_2: string;
							DIALOGUE_HOWARD_CORNELIUS_3: string;
							DIALOGUE_HOWARD_CORNELIUS_4: string;
							DIALOGUE_HOWARD_CORNELIUS_5: string;
							DIALOGUE_JELLY_JIM_0: string;
							DIALOGUE_JELLY_JIM_1: string;
							DIALOGUE_JELLY_JIM_2: string;
							DIALOGUE_JELLY_JIM_3: string;
							DIALOGUE_JELLY_JIM_4: string;
							DIALOGUE_JELLY_JIM_5: string;
							DIALOGUE_JELLY_JIM_6: string;
							DIALOGUE_JELLY_JIM_7: string;
							DIALOGUE_JULIA_GHOULIA_0: string;
							DIALOGUE_JULIA_GHOULIA_1: string;
							DIALOGUE_JULIA_GHOULIA_2: string;
							DIALOGUE_JULIA_GHOULIA_3: string;
							DIALOGUE_JULIA_GHOULIA_4: string;
							DIALOGUE_JULIA_GHOULIA_5: string;
							DIALOGUE_KANDI_KORN_1: string;
							DIALOGUE_KANDI_KORN_2: string;
							DIALOGUE_KANDI_KORN_3: string;
							DIALOGUE_KANDI_KORN_4: string;
							DIALOGUE_KANDI_KORN_5: string;
							DIALOGUE_KANDI_KORN_6: string;
							DIALOGUE_KOI_1: string;
							DIALOGUE_KOI_10: string;
							DIALOGUE_KOI_11: string;
							DIALOGUE_KOI_2: string;
							DIALOGUE_KOI_3: string;
							DIALOGUE_KOI_4: string;
							DIALOGUE_KOI_5: string;
							DIALOGUE_KOI_6: string;
							DIALOGUE_KOI_7: string;
							DIALOGUE_KOI_8: string;
							DIALOGUE_KOI_9: string;
							DIALOGUE_MAMA_STAR_0: string;
							DIALOGUE_MAMA_STAR_1: string;
							DIALOGUE_MAMA_STAR_10: string;
							DIALOGUE_MAMA_STAR_11: string;
							DIALOGUE_MAMA_STAR_12: string;
							DIALOGUE_MAMA_STAR_13: string;
							DIALOGUE_MAMA_STAR_14: string;
							DIALOGUE_MAMA_STAR_15: string;
							DIALOGUE_MAMA_STAR_16: string;
							DIALOGUE_MAMA_STAR_2: string;
							DIALOGUE_MAMA_STAR_3: string;
							DIALOGUE_MAMA_STAR_4: string;
							DIALOGUE_MAMA_STAR_5: string;
							DIALOGUE_MAMA_STAR_6: string;
							DIALOGUE_MAMA_STAR_7: string;
							DIALOGUE_MAMA_STAR_8: string;
							DIALOGUE_MAMA_STAR_9: string;
							DIALOGUE_MERCHANT_0: string;
							DIALOGUE_MERCHANT_1: string;
							DIALOGUE_MERCHANT_10: string;
							DIALOGUE_MERCHANT_11: string;
							DIALOGUE_MERCHANT_12: string;
							DIALOGUE_MERCHANT_13: string;
							DIALOGUE_MERCHANT_14: string;
							DIALOGUE_MERCHANT_15: string;
							DIALOGUE_MERCHANT_16: string;
							DIALOGUE_MERCHANT_17: string;
							DIALOGUE_MERCHANT_18: string;
							DIALOGUE_MERCHANT_19: string;
							DIALOGUE_MERCHANT_2: string;
							DIALOGUE_MERCHANT_20: string;
							DIALOGUE_MERCHANT_21: string;
							DIALOGUE_MERCHANT_22: string;
							DIALOGUE_MERCHANT_23: string;
							DIALOGUE_MERCHANT_24: string;
							DIALOGUE_MERCHANT_25: string;
							DIALOGUE_MERCHANT_26: string;
							DIALOGUE_MERCHANT_27: string;
							DIALOGUE_MERCHANT_28: string;
							DIALOGUE_MERCHANT_29: string;
							DIALOGUE_MERCHANT_3: string;
							DIALOGUE_MERCHANT_30: string;
							DIALOGUE_MERCHANT_31: string;
							DIALOGUE_MERCHANT_32: string;
							DIALOGUE_MERCHANT_33: string;
							DIALOGUE_MERCHANT_34: string;
							DIALOGUE_MERCHANT_35: string;
							DIALOGUE_MERCHANT_36: string;
							DIALOGUE_MERCHANT_37: string;
							DIALOGUE_MERCHANT_38: string;
							DIALOGUE_MERCHANT_39: string;
							DIALOGUE_MERCHANT_4: string;
							DIALOGUE_MERCHANT_5: string;
							DIALOGUE_MERCHANT_6: string;
							DIALOGUE_MERCHANT_7: string;
							DIALOGUE_MERCHANT_8: string;
							DIALOGUE_MERCHANT_9: string;
							DIALOGUE_MIRA_0: string;
							DIALOGUE_MIRA_1: string;
							DIALOGUE_MIRA_10: string;
							DIALOGUE_MIRA_11: string;
							DIALOGUE_MIRA_12: string;
							DIALOGUE_MIRA_13: string;
							DIALOGUE_MIRA_14: string;
							DIALOGUE_MIRA_15: string;
							DIALOGUE_MIRA_16: string;
							DIALOGUE_MIRA_17: string;
							DIALOGUE_MIRA_18: string;
							DIALOGUE_MIRA_19: string;
							DIALOGUE_MIRA_2: string;
							DIALOGUE_MIRA_20: string;
							DIALOGUE_MIRA_21: string;
							DIALOGUE_MIRA_22: string;
							DIALOGUE_MIRA_23: string;
							DIALOGUE_MIRA_24: string;
							DIALOGUE_MIRA_25: string;
							DIALOGUE_MIRA_26: string;
							DIALOGUE_MIRA_27: string;
							DIALOGUE_MIRA_28: string;
							DIALOGUE_MIRA_29: string;
							DIALOGUE_MIRA_3: string;
							DIALOGUE_MIRA_30: string;
							DIALOGUE_MIRA_31: string;
							DIALOGUE_MIRA_32: string;
							DIALOGUE_MIRA_33: string;
							DIALOGUE_MIRA_34: string;
							DIALOGUE_MIRA_35: string;
							DIALOGUE_MIRA_36: string;
							DIALOGUE_MIRA_37: string;
							DIALOGUE_MIRA_38: string;
							DIALOGUE_MIRA_39: string;
							DIALOGUE_MIRA_4: string;
							DIALOGUE_MIRA_40: string;
							DIALOGUE_MIRA_41: string;
							DIALOGUE_MIRA_42: string;
							DIALOGUE_MIRA_43: string;
							DIALOGUE_MIRA_44: string;
							DIALOGUE_MIRA_45: string;
							DIALOGUE_MIRA_46: string;
							DIALOGUE_MIRA_47: string;
							DIALOGUE_MIRA_5: string;
							DIALOGUE_MIRA_6: string;
							DIALOGUE_MIRA_7: string;
							DIALOGUE_MIRA_8: string;
							DIALOGUE_MIRA_9: string;
							DIALOGUE_MIRA_DEFEAT_0: string;
							DIALOGUE_MIRA_DEFEAT_1: string;
							DIALOGUE_MIRA_DEFEAT_2: string;
							DIALOGUE_MIRA_DEFEAT_3: string;
							DIALOGUE_MIRA_DEFEAT_4: string;
							DIALOGUE_MIRA_REWARD: string;
							DIALOGUE_MIST_1: string;
							DIALOGUE_MIST_2: string;
							DIALOGUE_MIST_3: string;
							DIALOGUE_MIST_4: string;
							DIALOGUE_MIST_5: string;
							DIALOGUE_MIZU_1: string;
							DIALOGUE_MIZU_2: string;
							DIALOGUE_MIZU_3: string;
							DIALOGUE_MIZU_4: string;
							DIALOGUE_MIZU_5: string;
							DIALOGUE_MOZZA_ELLE_0: string;
							DIALOGUE_MOZZA_ELLE_1: string;
							DIALOGUE_MOZZA_ELLE_10: string;
							DIALOGUE_MOZZA_ELLE_11: string;
							DIALOGUE_MOZZA_ELLE_2: string;
							DIALOGUE_MOZZA_ELLE_3: string;
							DIALOGUE_MOZZA_ELLE_4: string;
							DIALOGUE_MOZZA_ELLE_5: string;
							DIALOGUE_MOZZA_ELLE_6: string;
							DIALOGUE_MOZZA_ELLE_7: string;
							DIALOGUE_MOZZA_ELLE_8: string;
							DIALOGUE_MOZZA_ELLE_9: string;
							DIALOGUE_NOOT_0: string;
							DIALOGUE_NOOT_1: string;
							DIALOGUE_NOOT_10: string;
							DIALOGUE_NOOT_100: string;
							DIALOGUE_NOOT_101: string;
							DIALOGUE_NOOT_102: string;
							DIALOGUE_NOOT_103: string;
							DIALOGUE_NOOT_104: string;
							DIALOGUE_NOOT_105: string;
							DIALOGUE_NOOT_106: string;
							DIALOGUE_NOOT_107: string;
							DIALOGUE_NOOT_108: string;
							DIALOGUE_NOOT_109: string;
							DIALOGUE_NOOT_11: string;
							DIALOGUE_NOOT_110: string;
							DIALOGUE_NOOT_111: string;
							DIALOGUE_NOOT_112: string;
							DIALOGUE_NOOT_113: string;
							DIALOGUE_NOOT_114: string;
							DIALOGUE_NOOT_115: string;
							DIALOGUE_NOOT_116: string;
							DIALOGUE_NOOT_117: string;
							DIALOGUE_NOOT_118: string;
							DIALOGUE_NOOT_119: string;
							DIALOGUE_NOOT_12: string;
							DIALOGUE_NOOT_120: string;
							DIALOGUE_NOOT_121: string;
							DIALOGUE_NOOT_122: string;
							DIALOGUE_NOOT_123: string;
							DIALOGUE_NOOT_124: string;
							DIALOGUE_NOOT_125: string;
							DIALOGUE_NOOT_126: string;
							DIALOGUE_NOOT_127: string;
							DIALOGUE_NOOT_128: string;
							DIALOGUE_NOOT_129: string;
							DIALOGUE_NOOT_13: string;
							DIALOGUE_NOOT_130: string;
							DIALOGUE_NOOT_131: string;
							DIALOGUE_NOOT_132: string;
							DIALOGUE_NOOT_133: string;
							DIALOGUE_NOOT_134: string;
							DIALOGUE_NOOT_135: string;
							DIALOGUE_NOOT_136: string;
							DIALOGUE_NOOT_137: string;
							DIALOGUE_NOOT_138: string;
							DIALOGUE_NOOT_139: string;
							DIALOGUE_NOOT_14: string;
							DIALOGUE_NOOT_140: string;
							DIALOGUE_NOOT_141: string;
							DIALOGUE_NOOT_142: string;
							DIALOGUE_NOOT_143: string;
							DIALOGUE_NOOT_144: string;
							DIALOGUE_NOOT_145: string;
							DIALOGUE_NOOT_146: string;
							DIALOGUE_NOOT_147: string;
							DIALOGUE_NOOT_148: string;
							DIALOGUE_NOOT_149: string;
							DIALOGUE_NOOT_15: string;
							DIALOGUE_NOOT_150: string;
							DIALOGUE_NOOT_151: string;
							DIALOGUE_NOOT_152: string;
							DIALOGUE_NOOT_153: string;
							DIALOGUE_NOOT_154: string;
							DIALOGUE_NOOT_155: string;
							DIALOGUE_NOOT_156: string;
							DIALOGUE_NOOT_157: string;
							DIALOGUE_NOOT_158: string;
							DIALOGUE_NOOT_159: string;
							DIALOGUE_NOOT_16: string;
							DIALOGUE_NOOT_160: string;
							DIALOGUE_NOOT_161: string;
							DIALOGUE_NOOT_162: string;
							DIALOGUE_NOOT_163: string;
							DIALOGUE_NOOT_164: string;
							DIALOGUE_NOOT_165: string;
							DIALOGUE_NOOT_166: string;
							DIALOGUE_NOOT_167: string;
							DIALOGUE_NOOT_168: string;
							DIALOGUE_NOOT_169: string;
							DIALOGUE_NOOT_17: string;
							DIALOGUE_NOOT_170: string;
							DIALOGUE_NOOT_171: string;
							DIALOGUE_NOOT_172: string;
							DIALOGUE_NOOT_173: string;
							DIALOGUE_NOOT_174: string;
							DIALOGUE_NOOT_175: string;
							DIALOGUE_NOOT_176: string;
							DIALOGUE_NOOT_177: string;
							DIALOGUE_NOOT_178: string;
							DIALOGUE_NOOT_179: string;
							DIALOGUE_NOOT_18: string;
							DIALOGUE_NOOT_180: string;
							DIALOGUE_NOOT_181: string;
							DIALOGUE_NOOT_182: string;
							DIALOGUE_NOOT_183: string;
							DIALOGUE_NOOT_184: string;
							DIALOGUE_NOOT_185: string;
							DIALOGUE_NOOT_186: string;
							DIALOGUE_NOOT_187: string;
							DIALOGUE_NOOT_188: string;
							DIALOGUE_NOOT_189: string;
							DIALOGUE_NOOT_19: string;
							DIALOGUE_NOOT_190: string;
							DIALOGUE_NOOT_191: string;
							DIALOGUE_NOOT_192: string;
							DIALOGUE_NOOT_193: string;
							DIALOGUE_NOOT_194: string;
							DIALOGUE_NOOT_195: string;
							DIALOGUE_NOOT_196: string;
							DIALOGUE_NOOT_197: string;
							DIALOGUE_NOOT_198: string;
							DIALOGUE_NOOT_199: string;
							DIALOGUE_NOOT_2: string;
							DIALOGUE_NOOT_20: string;
							DIALOGUE_NOOT_200: string;
							DIALOGUE_NOOT_201: string;
							DIALOGUE_NOOT_202: string;
							DIALOGUE_NOOT_203: string;
							DIALOGUE_NOOT_204: string;
							DIALOGUE_NOOT_205: string;
							DIALOGUE_NOOT_206: string;
							DIALOGUE_NOOT_207: string;
							DIALOGUE_NOOT_208: string;
							DIALOGUE_NOOT_209: string;
							DIALOGUE_NOOT_21: string;
							DIALOGUE_NOOT_210: string;
							DIALOGUE_NOOT_211: string;
							DIALOGUE_NOOT_212: string;
							DIALOGUE_NOOT_213: string;
							DIALOGUE_NOOT_214: string;
							DIALOGUE_NOOT_215: string;
							DIALOGUE_NOOT_216: string;
							DIALOGUE_NOOT_217: string;
							DIALOGUE_NOOT_218: string;
							DIALOGUE_NOOT_219: string;
							DIALOGUE_NOOT_22: string;
							DIALOGUE_NOOT_220: string;
							DIALOGUE_NOOT_221: string;
							DIALOGUE_NOOT_222: string;
							DIALOGUE_NOOT_223: string;
							DIALOGUE_NOOT_224: string;
							DIALOGUE_NOOT_225: string;
							DIALOGUE_NOOT_226: string;
							DIALOGUE_NOOT_227: string;
							DIALOGUE_NOOT_228: string;
							DIALOGUE_NOOT_229: string;
							DIALOGUE_NOOT_23: string;
							DIALOGUE_NOOT_230: string;
							DIALOGUE_NOOT_231: string;
							DIALOGUE_NOOT_232: string;
							DIALOGUE_NOOT_233: string;
							DIALOGUE_NOOT_234: string;
							DIALOGUE_NOOT_235: string;
							DIALOGUE_NOOT_236: string;
							DIALOGUE_NOOT_237: string;
							DIALOGUE_NOOT_238: string;
							DIALOGUE_NOOT_239: string;
							DIALOGUE_NOOT_24: string;
							DIALOGUE_NOOT_240: string;
							DIALOGUE_NOOT_241: string;
							DIALOGUE_NOOT_242: string;
							DIALOGUE_NOOT_243: string;
							DIALOGUE_NOOT_244: string;
							DIALOGUE_NOOT_245: string;
							DIALOGUE_NOOT_246: string;
							DIALOGUE_NOOT_247: string;
							DIALOGUE_NOOT_248: string;
							DIALOGUE_NOOT_249: string;
							DIALOGUE_NOOT_25: string;
							DIALOGUE_NOOT_250: string;
							DIALOGUE_NOOT_251: string;
							DIALOGUE_NOOT_252: string;
							DIALOGUE_NOOT_253: string;
							DIALOGUE_NOOT_254: string;
							DIALOGUE_NOOT_255: string;
							DIALOGUE_NOOT_256: string;
							DIALOGUE_NOOT_257: string;
							DIALOGUE_NOOT_258: string;
							DIALOGUE_NOOT_259: string;
							DIALOGUE_NOOT_26: string;
							DIALOGUE_NOOT_260: string;
							DIALOGUE_NOOT_261: string;
							DIALOGUE_NOOT_262: string;
							DIALOGUE_NOOT_263: string;
							DIALOGUE_NOOT_264: string;
							DIALOGUE_NOOT_265: string;
							DIALOGUE_NOOT_266: string;
							DIALOGUE_NOOT_267: string;
							DIALOGUE_NOOT_268: string;
							DIALOGUE_NOOT_269: string;
							DIALOGUE_NOOT_27: string;
							DIALOGUE_NOOT_270: string;
							DIALOGUE_NOOT_271: string;
							DIALOGUE_NOOT_272: string;
							DIALOGUE_NOOT_273: string;
							DIALOGUE_NOOT_274: string;
							DIALOGUE_NOOT_275: string;
							DIALOGUE_NOOT_276: string;
							DIALOGUE_NOOT_277: string;
							DIALOGUE_NOOT_278: string;
							DIALOGUE_NOOT_279: string;
							DIALOGUE_NOOT_28: string;
							DIALOGUE_NOOT_280: string;
							DIALOGUE_NOOT_281: string;
							DIALOGUE_NOOT_282: string;
							DIALOGUE_NOOT_283: string;
							DIALOGUE_NOOT_284: string;
							DIALOGUE_NOOT_285: string;
							DIALOGUE_NOOT_286: string;
							DIALOGUE_NOOT_287: string;
							DIALOGUE_NOOT_288: string;
							DIALOGUE_NOOT_289: string;
							DIALOGUE_NOOT_29: string;
							DIALOGUE_NOOT_3: string;
							DIALOGUE_NOOT_30: string;
							DIALOGUE_NOOT_31: string;
							DIALOGUE_NOOT_32: string;
							DIALOGUE_NOOT_33: string;
							DIALOGUE_NOOT_34: string;
							DIALOGUE_NOOT_35: string;
							DIALOGUE_NOOT_36: string;
							DIALOGUE_NOOT_37: string;
							DIALOGUE_NOOT_38: string;
							DIALOGUE_NOOT_39: string;
							DIALOGUE_NOOT_4: string;
							DIALOGUE_NOOT_40: string;
							DIALOGUE_NOOT_41: string;
							DIALOGUE_NOOT_42: string;
							DIALOGUE_NOOT_43: string;
							DIALOGUE_NOOT_44: string;
							DIALOGUE_NOOT_45: string;
							DIALOGUE_NOOT_46: string;
							DIALOGUE_NOOT_47: string;
							DIALOGUE_NOOT_48: string;
							DIALOGUE_NOOT_49: string;
							DIALOGUE_NOOT_5: string;
							DIALOGUE_NOOT_50: string;
							DIALOGUE_NOOT_51: string;
							DIALOGUE_NOOT_52: string;
							DIALOGUE_NOOT_53: string;
							DIALOGUE_NOOT_54: string;
							DIALOGUE_NOOT_55: string;
							DIALOGUE_NOOT_56: string;
							DIALOGUE_NOOT_57: string;
							DIALOGUE_NOOT_58: string;
							DIALOGUE_NOOT_59: string;
							DIALOGUE_NOOT_6: string;
							DIALOGUE_NOOT_60: string;
							DIALOGUE_NOOT_61: string;
							DIALOGUE_NOOT_62: string;
							DIALOGUE_NOOT_63: string;
							DIALOGUE_NOOT_64: string;
							DIALOGUE_NOOT_65: string;
							DIALOGUE_NOOT_66: string;
							DIALOGUE_NOOT_67: string;
							DIALOGUE_NOOT_68: string;
							DIALOGUE_NOOT_69: string;
							DIALOGUE_NOOT_7: string;
							DIALOGUE_NOOT_70: string;
							DIALOGUE_NOOT_71: string;
							DIALOGUE_NOOT_72: string;
							DIALOGUE_NOOT_73: string;
							DIALOGUE_NOOT_74: string;
							DIALOGUE_NOOT_75: string;
							DIALOGUE_NOOT_76: string;
							DIALOGUE_NOOT_77: string;
							DIALOGUE_NOOT_78: string;
							DIALOGUE_NOOT_79: string;
							DIALOGUE_NOOT_8: string;
							DIALOGUE_NOOT_80: string;
							DIALOGUE_NOOT_81: string;
							DIALOGUE_NOOT_82: string;
							DIALOGUE_NOOT_83: string;
							DIALOGUE_NOOT_84: string;
							DIALOGUE_NOOT_85: string;
							DIALOGUE_NOOT_86: string;
							DIALOGUE_NOOT_87: string;
							DIALOGUE_NOOT_88: string;
							DIALOGUE_NOOT_89: string;
							DIALOGUE_NOOT_9: string;
							DIALOGUE_NOOT_90: string;
							DIALOGUE_NOOT_91: string;
							DIALOGUE_NOOT_92: string;
							DIALOGUE_NOOT_93: string;
							DIALOGUE_NOOT_94: string;
							DIALOGUE_NOOT_95: string;
							DIALOGUE_NOOT_96: string;
							DIALOGUE_NOOT_97: string;
							DIALOGUE_NOOT_98: string;
							DIALOGUE_NOOT_99: string;
							DIALOGUE_PIPPIT_0: string;
							DIALOGUE_PIPPIT_1: string;
							DIALOGUE_PIPPIT_2: string;
							DIALOGUE_PIPPIT_3: string;
							DIALOGUE_PIPPIT_4: string;
							DIALOGUE_PIPPIT_5: string;
							DIALOGUE_PIPPIT_6: string;
							DIALOGUE_PIPPIT_7: string;
							DIALOGUE_PIPPIT_8: string;
							DIALOGUE_PIPPIT_9: string;
							DIALOGUE_POTION_0: string;
							DIALOGUE_POTION_1: string;
							DIALOGUE_POTION_2: string;
							DIALOGUE_POTION_3: string;
							DIALOGUE_POTION_4: string;
							DIALOGUE_POTION_5: string;
							DIALOGUE_POTION_6: string;
							DIALOGUE_POTION_7: string;
							DIALOGUE_PROFESSOR_SCOOG_0: string;
							DIALOGUE_PROFESSOR_SCOOG_1: string;
							DIALOGUE_PROFESSOR_SCOOG_10: string;
							DIALOGUE_PROFESSOR_SCOOG_11: string;
							DIALOGUE_PROFESSOR_SCOOG_12: string;
							DIALOGUE_PROFESSOR_SCOOG_13: string;
							DIALOGUE_PROFESSOR_SCOOG_14: string;
							DIALOGUE_PROFESSOR_SCOOG_15: string;
							DIALOGUE_PROFESSOR_SCOOG_16: string;
							DIALOGUE_PROFESSOR_SCOOG_17: string;
							DIALOGUE_PROFESSOR_SCOOG_18: string;
							DIALOGUE_PROFESSOR_SCOOG_19: string;
							DIALOGUE_PROFESSOR_SCOOG_2: string;
							DIALOGUE_PROFESSOR_SCOOG_20: string;
							DIALOGUE_PROFESSOR_SCOOG_21: string;
							DIALOGUE_PROFESSOR_SCOOG_22: string;
							DIALOGUE_PROFESSOR_SCOOG_23: string;
							DIALOGUE_PROFESSOR_SCOOG_24: string;
							DIALOGUE_PROFESSOR_SCOOG_25: string;
							DIALOGUE_PROFESSOR_SCOOG_26: string;
							DIALOGUE_PROFESSOR_SCOOG_27: string;
							DIALOGUE_PROFESSOR_SCOOG_28: string;
							DIALOGUE_PROFESSOR_SCOOG_29: string;
							DIALOGUE_PROFESSOR_SCOOG_3: string;
							DIALOGUE_PROFESSOR_SCOOG_30: string;
							DIALOGUE_PROFESSOR_SCOOG_31: string;
							DIALOGUE_PROFESSOR_SCOOG_32: string;
							DIALOGUE_PROFESSOR_SCOOG_33: string;
							DIALOGUE_PROFESSOR_SCOOG_34: string;
							DIALOGUE_PROFESSOR_SCOOG_35: string;
							DIALOGUE_PROFESSOR_SCOOG_36: string;
							DIALOGUE_PROFESSOR_SCOOG_37: string;
							DIALOGUE_PROFESSOR_SCOOG_38: string;
							DIALOGUE_PROFESSOR_SCOOG_39: string;
							DIALOGUE_PROFESSOR_SCOOG_4: string;
							DIALOGUE_PROFESSOR_SCOOG_40: string;
							DIALOGUE_PROFESSOR_SCOOG_41: string;
							DIALOGUE_PROFESSOR_SCOOG_42: string;
							DIALOGUE_PROFESSOR_SCOOG_43: string;
							DIALOGUE_PROFESSOR_SCOOG_44: string;
							DIALOGUE_PROFESSOR_SCOOG_45: string;
							DIALOGUE_PROFESSOR_SCOOG_46: string;
							DIALOGUE_PROFESSOR_SCOOG_47: string;
							DIALOGUE_PROFESSOR_SCOOG_48: string;
							DIALOGUE_PROFESSOR_SCOOG_49: string;
							DIALOGUE_PROFESSOR_SCOOG_5: string;
							DIALOGUE_PROFESSOR_SCOOG_50: string;
							DIALOGUE_PROFESSOR_SCOOG_51: string;
							DIALOGUE_PROFESSOR_SCOOG_52: string;
							DIALOGUE_PROFESSOR_SCOOG_53: string;
							DIALOGUE_PROFESSOR_SCOOG_54: string;
							DIALOGUE_PROFESSOR_SCOOG_55: string;
							DIALOGUE_PROFESSOR_SCOOG_56: string;
							DIALOGUE_PROFESSOR_SCOOG_57: string;
							DIALOGUE_PROFESSOR_SCOOG_58: string;
							DIALOGUE_PROFESSOR_SCOOG_59: string;
							DIALOGUE_PROFESSOR_SCOOG_6: string;
							DIALOGUE_PROFESSOR_SCOOG_60: string;
							DIALOGUE_PROFESSOR_SCOOG_61: string;
							DIALOGUE_PROFESSOR_SCOOG_62: string;
							DIALOGUE_PROFESSOR_SCOOG_7: string;
							DIALOGUE_PROFESSOR_SCOOG_8: string;
							DIALOGUE_PROFESSOR_SCOOG_9: string;
							DIALOGUE_PUPPET_MASTER_0: string;
							DIALOGUE_PUPPET_MASTER_1: string;
							DIALOGUE_PUPPET_MASTER_10: string;
							DIALOGUE_PUPPET_MASTER_11: string;
							DIALOGUE_PUPPET_MASTER_12: string;
							DIALOGUE_PUPPET_MASTER_13: string;
							DIALOGUE_PUPPET_MASTER_14: string;
							DIALOGUE_PUPPET_MASTER_2: string;
							DIALOGUE_PUPPET_MASTER_3: string;
							DIALOGUE_PUPPET_MASTER_4: string;
							DIALOGUE_PUPPET_MASTER_5: string;
							DIALOGUE_PUPPET_MASTER_6: string;
							DIALOGUE_PUPPET_MASTER_7: string;
							DIALOGUE_PUPPET_MASTER_8: string;
							DIALOGUE_PUPPET_MASTER_9: string;
							DIALOGUE_SIR_VEY_0: string;
							DIALOGUE_SIR_VEY_1: string;
							DIALOGUE_SLIME_GUARD_0: string;
							DIALOGUE_SLIME_GUARD_1: string;
							DIALOGUE_SLIME_GUARD_2: string;
							DIALOGUE_SLIME_GUARD_3: string;
							DIALOGUE_SLIME_GUARD_4: string;
							DIALOGUE_SLIME_GUARD_5: string;
							DIALOGUE_SLIME_QUEEN_0: string;
							DIALOGUE_SLIME_QUEEN_1: string;
							DIALOGUE_SLIME_QUEEN_10: string;
							DIALOGUE_SLIME_QUEEN_2: string;
							DIALOGUE_SLIME_QUEEN_3: string;
							DIALOGUE_SLIME_QUEEN_4: string;
							DIALOGUE_SLIME_QUEEN_5: string;
							DIALOGUE_SLIME_QUEEN_6: string;
							DIALOGUE_SLIME_QUEEN_7: string;
							DIALOGUE_SLIME_QUEEN_8: string;
							DIALOGUE_SLIME_QUEEN_9: string;
							DIALOGUE_SLIME_WORKER_0: string;
							DIALOGUE_SLIME_WORKER_1: string;
							DIALOGUE_SLURPY_0: string;
							DIALOGUE_SLURPY_1: string;
							DIALOGUE_SLURPY_10: string;
							DIALOGUE_SLURPY_11: string;
							DIALOGUE_SLURPY_12: string;
							DIALOGUE_SLURPY_13: string;
							DIALOGUE_SLURPY_14: string;
							DIALOGUE_SLURPY_15: string;
							DIALOGUE_SLURPY_16: string;
							DIALOGUE_SLURPY_17: string;
							DIALOGUE_SLURPY_18: string;
							DIALOGUE_SLURPY_19: string;
							DIALOGUE_SLURPY_2: string;
							DIALOGUE_SLURPY_20: string;
							DIALOGUE_SLURPY_21: string;
							DIALOGUE_SLURPY_22: string;
							DIALOGUE_SLURPY_23: string;
							DIALOGUE_SLURPY_24: string;
							DIALOGUE_SLURPY_25: string;
							DIALOGUE_SLURPY_26: string;
							DIALOGUE_SLURPY_27: string;
							DIALOGUE_SLURPY_28: string;
							DIALOGUE_SLURPY_29: string;
							DIALOGUE_SLURPY_3: string;
							DIALOGUE_SLURPY_30: string;
							DIALOGUE_SLURPY_31: string;
							DIALOGUE_SLURPY_32: string;
							DIALOGUE_SLURPY_33: string;
							DIALOGUE_SLURPY_34: string;
							DIALOGUE_SLURPY_35: string;
							DIALOGUE_SLURPY_36: string;
							DIALOGUE_SLURPY_37: string;
							DIALOGUE_SLURPY_38: string;
							DIALOGUE_SLURPY_39: string;
							DIALOGUE_SLURPY_4: string;
							DIALOGUE_SLURPY_40: string;
							DIALOGUE_SLURPY_41: string;
							DIALOGUE_SLURPY_42: string;
							DIALOGUE_SLURPY_43: string;
							DIALOGUE_SLURPY_44: string;
							DIALOGUE_SLURPY_45: string;
							DIALOGUE_SLURPY_46: string;
							DIALOGUE_SLURPY_47: string;
							DIALOGUE_SLURPY_48: string;
							DIALOGUE_SLURPY_49: string;
							DIALOGUE_SLURPY_5: string;
							DIALOGUE_SLURPY_6: string;
							DIALOGUE_SLURPY_7: string;
							DIALOGUE_SLURPY_8: string;
							DIALOGUE_SLURPY_9: string;
							DIALOGUE_SWOOPY_0: string;
							DIALOGUE_SWOOPY_1: string;
							DIALOGUE_SWOOPY_2: string;
							DIALOGUE_SWOOPY_3: string;
							DIALOGUE_SWOOPY_4: string;
							DIALOGUE_TOY_0: string;
							DIALOGUE_TOY_1: string;
							DIALOGUE_TOY_10: string;
							DIALOGUE_TOY_11: string;
							DIALOGUE_TOY_12: string;
							DIALOGUE_TOY_13: string;
							DIALOGUE_TOY_14: string;
							DIALOGUE_TOY_15: string;
							DIALOGUE_TOY_16: string;
							DIALOGUE_TOY_17: string;
							DIALOGUE_TOY_2: string;
							DIALOGUE_TOY_3: string;
							DIALOGUE_TOY_4: string;
							DIALOGUE_TOY_5: string;
							DIALOGUE_TOY_6: string;
							DIALOGUE_TOY_7: string;
							DIALOGUE_TOY_8: string;
							DIALOGUE_TOY_9: string;
							DIALOGUE_VERNA_0: string;
							DIALOGUE_VERNA_1: string;
							DIALOGUE_VERNA_2: string;
							DIALOGUE_VERNA_3: string;
							DIALOGUE_WINTERFEST_0: string;
							DIALOGUE_WINTERFEST_1: string;
							DO_NOT_EVOLVE: string;
							DUNGEON_ENTRANCE_LOCKOUT: string;
							DUNGEON_ENTRANCE_TIMER: string;
							DYNO_DIG_DISTANCE_COLD: string;
							DYNO_DIG_DISTANCE_DIG: string;
							DYNO_DIG_DISTANCE_HOT: string;
							DYNO_DIG_DISTANCE_ICE_COLD: string;
							DYNO_DIG_DISTANCE_WARM: string;
							DYNO_DIG_EXTEND_TIME: string;
							DYNO_DIG_FOUND_FOSSIL: string;
							DYNO_DIG_FOUND_ITEM: string;
							DYNO_DIG_INSTRUCTIONS_0: string;
							DYNO_DIG_INSTRUCTIONS_1: string;
							DYNO_DIG_INSTRUCTIONS_2: string;
							DYNO_DIG_INSTRUCTIONS_3: string;
							DYNO_DIG_INSTRUCTIONS_4: string;
							DYNO_DIG_INSTRUCTIONS_5: string;
							DYNO_DIG_ITEMS_RECOVERED: string;
							DYNO_DIG_READY_TO_START: string;
							DYNO_DIG_SHOP_WELCOME: string;
							DYNO_DIG_START: string;
							DYNO_DIG_START_NO_MORE_FOSSILS: string;
							DYNO_DIG_START_NO_SHOVEL: string;
							DYNO_DIG_TIMES_UP: string;
							DYNO_DIG_TIMES_UP_REWARD: string;
							DYNO_DIG_TIMES_UP_TRY_AGAIN: string;
							DYNO_DIG_TITLE: string;
							EARTH_TOWER_WARDEN_KEY: string;
							EARTH_TOWER_WARDEN_LOCKED: string;
							EDUCATION_ERROR_REFRESH: string;
							EDUCATION_NOT_LOADED: string;
							EFFECT_ATTACK_POWERFUL: string;
							EFFECT_ATTACK_WEAK: string;
							EFFECT_BOUNTY_COMPLETE: string;
							EFFECT_VOLUME_LABEL: string;
							EFFICACY_SKIP_POPUP_SKIP: string;
							EFFICACY_SKIP_POPUP_TEXT: string;
							EFFICACY_SKIP_POPUP_TITLE: string;
							EFFICACY_SKIP_POPUP_WATCH: string;
							EFFICACY_VIDEO_REPLAY: string;
							EFFICACY_VIDEO_SOLVE: string;
							EFFICACY_VIDEO_TEXT: string;
							EFFICACY_VIDEO_TITLE: string;
							EG_CHOOSE_RUNE_HEADER: string;
							EG_CHOOSE_RUNE_TITLE: string;
							EG_GUARDIAN_1: string;
							EG_GUARDIAN_10: string;
							EG_GUARDIAN_11: string;
							EG_GUARDIAN_12: string;
							EG_GUARDIAN_13: string;
							EG_GUARDIAN_14: string;
							EG_GUARDIAN_15: string;
							EG_GUARDIAN_16: string;
							EG_GUARDIAN_17: string;
							EG_GUARDIAN_18: string;
							EG_GUARDIAN_19: string;
							EG_GUARDIAN_2: string;
							EG_GUARDIAN_20: string;
							EG_GUARDIAN_21: string;
							EG_GUARDIAN_22: string;
							EG_GUARDIAN_23: string;
							EG_GUARDIAN_3: string;
							EG_GUARDIAN_4: string;
							EG_GUARDIAN_5: string;
							EG_GUARDIAN_6: string;
							EG_GUARDIAN_7: string;
							EG_GUARDIAN_8: string;
							EG_GUARDIAN_9: string;
							EG_NOOT_1: string;
							EG_NOOT_10: string;
							EG_NOOT_11: string;
							EG_NOOT_12: string;
							EG_NOOT_13: string;
							EG_NOOT_14: string;
							EG_NOOT_15: string;
							EG_NOOT_16: string;
							EG_NOOT_17: string;
							EG_NOOT_18: string;
							EG_NOOT_19: string;
							EG_NOOT_2: string;
							EG_NOOT_20: string;
							EG_NOOT_21: string;
							EG_NOOT_22: string;
							EG_NOOT_23: string;
							EG_NOOT_24: string;
							EG_NOOT_25: string;
							EG_NOOT_3: string;
							EG_NOOT_4: string;
							EG_NOOT_5: string;
							EG_NOOT_6: string;
							EG_NOOT_7: string;
							EG_NOOT_8: string;
							EG_NOOT_9: string;
							EG_RUNE_BOOST_CRIT_DESC: string;
							EG_RUNE_BOOST_CRIT_NAME: string;
							EG_RUNE_BOOST_DAMAGE_DESC: string;
							EG_RUNE_BOOST_DAMAGE_NAME: string;
							EG_RUNE_BOOST_HEALTH_DESC: string;
							EG_RUNE_BOOST_HEALTH_NAME: string;
							ELEMENTAL_GUARDIAN_NOOT_ACTIVE_TELEPORTER: string;
							ELEMENTAL_GUARDIAN_NOOT_INACTIVE_TELEPORTER: string;
							EMAIL_PROMPT_ERROR: string;
							EMAIL_PROMPT_FAIL_MESSAGE_BODY: string;
							EMAIL_PROMPT_GET_APPLES: string;
							EMAIL_PROMPT_GET_GOLD: string;
							EMAIL_PROMPT_LATER: string;
							EMAIL_PROMPT_MESSAGE_BODY: string;
							EMAIL_PROMPT_MESSAGE_TITLE: string;
							EMAIL_PROMPT_SUBMIT: string;
							EMAIL_PROMPT_TITLE: string;
							EMPTY: string;
							ENJOY_BEAT_EVERYTHING: string;
							ENJOY_BEING_HERO: string;
							ENJOY_CANT_REAL_LIFE: string;
							ENJOY_CHANGE_GAME: string;
							ENJOY_COLLECT_REWARDS: string;
							ENJOY_COLLECT_THINGS: string;
							ENJOY_DECORATING: string;
							ENJOY_DIFFERENT_PLAY: string;
							ENJOY_DISCOVER_NEW: string;
							ENJOY_FIND_OUT_NEXT: string;
							ENJOY_GET_WORKED: string;
							ENJOY_LIMITED_EVENT: string;
							ENJOY_NEW_PLACES: string;
							ENJOY_NOT_LOSING: string;
							ENJOY_RARE_THINGS: string;
							ENJOY_THINGS_DO: string;
							ENJOY_UNEXPECTED_PRIZES: string;
							ENJOY_UPGRADE_ABILITY: string;
							ENJOY_UPGRADE_PETS: string;
							ENJOY_WORLD_DIFF: string;
							ENTER_CODE_LABEL: string;
							ENTER_HARD_PATH_WARNING: string;
							EPIC_ARENA_BATTLE_SELECT: string;
							EPIC_ARENA_BUY_TOY: string;
							EPIC_ARENA_CHALLENGE: string;
							EPIC_ATTACK_MESSAGE_TITLE: string;
							EPIC_NOT_READY_MESSAGE: string;
							EPICS_ARENA_LOCKED_TEXT: string;
							EPICS_CANNOT_LET_GO: string;
							EPICS_ERROR_ONCE_PER_BATTLE: string;
							EPICS_ERROR_ONCE_PER_CHALLENGE: string;
							EPICS_ERROR_TOO_POWERFUL: string;
							Episode_1: string;
							Episode_2: string;
							Episode_3: string;
							Episode_4: string;
							Episode_5: string;
							ERROR: string;
							ERROR_DIALOG_BODY: string;
							EVOLVE_LATER: string;
							EVOLVE_NOW: string;
							EVOLVE_STOP: string;
							EXISTING_MEMBER_WW_AD_BODY: string;
							EXISTING_MEMBER_WW_AD_TITLE: string;
							EXISTING_MEMBER_WW_TOOLTIP_BODY: string;
							EXISTING_MEMBER_WW_TOOLTIP_TITLE: string;
							EXPLAIN_MEMBERSHIP_PARENT_BODY_0: string;
							EXPLAIN_MEMBERSHIP_PARENT_BODY_1: string;
							EXPLAIN_MEMBERSHIP_PARENT_BODY_HIGHLIGHT: string;
							EXPLAIN_MEMBERSHIP_PARENT_FOOTER: string;
							EXPLAIN_MEMBERSHIP_PARENT_TITLE_1: string;
							EXPLAIN_MEMBERSHIP_STUDENT_BODY_1: string;
							EXPLAIN_MEMBERSHIP_STUDENT_BODY_2: string;
							EXPLAIN_MEMBERSHIP_STUDENT_BODY_3: string;
							EXPLAIN_MEMBERSHIP_STUDENT_BODY_4: string;
							EXPLAIN_MEMBERSHIP_STUDENT_TITLE_1: string;
							EXPLAIN_MEMBERSHIP_STUDENT_TITLE_2: string;
							EXPLAIN_MEMBERSHIP_STUDENT_TITLE_3: string;
							EXPLAIN_MEMBERSHIP_STUDENT_TITLE_4: string;
							FA_FORGOT: string;
							FA_QUESTIONS: string;
							FA_RETURNING: string;
							FEATURE_DISABLED: string;
							FESTIVAL_CONFIRM_TRAVEL: string;
							FF_CLICK_AND_DRAG: string;
							FF_COLLECT: string;
							FF_FLUNG: string;
							FF_FORGOT: string;
							FF_LAUNCHED: string;
							FF_MISSED: string;
							FF_NEWDESIGN: string;
							FF_NEWROOM: string;
							FF_POPUP_COLLECT_BODY: string;
							FF_POPUP_COLLECT_TITLE: string;
							FF_POPUP_FINISH_BODY: string;
							FF_POPUP_FINISH_TITLE: string;
							FF_POPUP_NO_FLOATLING_BODY: string;
							FF_POPUP_NO_FLOATLING_TITLE: string;
							FF_QUIT_BODY: string;
							FF_REACH: string;
							FF_RETURNINGS: string;
							FF_SENDFLOATLINGS: string;
							FF_TRY_TO_LAND: string;
							FF_USE_THE_SAMPLES: string;
							FF_YOU_CAN_TELL: string;
							FIRST_NAME_SELECT_CHOOSE_NAME: string;
							FIRST_NAME_SELECTOR_TITLE_DEFAULT: string;
							FIRST_NAME_SELECTOR_TITLE_LETTER: string;
							FOREST_GUARDIAN: string;
							FRIEND_REQUEST_ADD_FRIEND: string;
							FRIEND_REQUESTS_TITLE: string;
							FRIENDS_LIST_BUTTON_REQUESTS: string;
							FRIENDS_LIST_CANCEL_MESSAGE_BODY: string;
							FRIENDS_LIST_CANCEL_MESSAGE_TITLE: string;
							FRIENDS_LIST_CONFIRM_CANCEL_BODY: string;
							FRIENDS_LIST_CONFIRM_CANCEL_TITLE: string;
							FRIENDS_LIST_COUNTER: string;
							FRIENDS_LIST_ERROR_MESSAGE_BODY: string;
							FRIENDS_LIST_FULL_MESSAGE_BODY: string;
							FRIENDS_LIST_SENT_MESSAGE_BODY: string;
							FRIENDS_LIST_SENT_MESSAGE_TITLE: string;
							FRIENDS_LIST_TITLE: string;
							FRIENDS_LIST_UNAVAILABLE: string;
							FRIENDS_LIST_WAITING: string;
							FULLSCREEN_LABEL: string;
							GAINED_MEMBER_STARS: string;
							GAINED_MEMBER_STARS_EACH: string;
							GENERAL_LABEL: string;
							GET_CHARFOAL: string;
							GET_MERMINA: string;
							GET_SNOWFLUFF: string;
							GET_SPROOT: string;
							GET_WOTT: string;
							GO_NOW: string;
							GO_TO_CUSTOMER_SUPPORT_PAGE: string;
							GOOGLE_AUTH_CREATING_ACCOUNT: string;
							GOOGLE_AUTH_FAIL_DEFAULT: string;
							GOOGLE_AUTH_POPUP_BLOCKED: string;
							GOOGLE_AUTH_PROMPT_BROWSER: string;
							GOOGLE_AUTH_USE_BROWSER_INSTEAD: string;
							GOT_ITEM_AWESOME_STUFF: string;
							GOT_ITEM_BOOTS: string;
							GOT_ITEM_BOUNTY_POINTS: string;
							GOT_ITEM_FOLLOW: string;
							GOT_ITEM_GENERIC: string;
							GOT_ITEM_GIFT_BOX: string;
							GOT_ITEM_GOLD: string;
							GOT_ITEM_LOOK: string;
							GOT_ITEM_MOVED_HOUSE: string;
							GOT_ITEM_OTHER: string;
							GOT_ITEM_SPELL: string;
							GOT_ITEM_YOU_GOT_FURNITURE: string;
							GOT_ITEM_YOU_GOT_MYSTERY_BAG: string;
							GOT_ITEM_YOU_GOT_PET: string;
							GOT_ITEM_YOU_GOT_SOMETHING: string;
							GREAT_HALL_KEYSTONES_POPUP: string;
							GUARDIAN_BATTLE_START_ERROR: string;
							HARMONY_ISLAND_NOT_ENOUGH_RUNES_TRIAL_LOCKED: string;
							HARMONY_ISLAND_PART_2_AD_BODY: string;
							HARMONY_ISLAND_PART_2_AD_TITLE: string;
							HARMONY_ISLAND_RELEASE_AD_BODY: string;
							HARMONY_ISLAND_RELEASE_AD_TITLE: string;
							HARMONY_ISLAND_RELEASE_TOOLTIP_BODY: string;
							HARMONY_ISLAND_TEASER_AD_BODY: string;
							HARMONY_ISLAND_TEASER_AD_TITLE: string;
							HARMONY_ISLAND_TRAILER_AD_BODY: string;
							HARMONY_ISLAND_TRAILER_AD_TITLE: string;
							HEY_TEACHERS: string;
							HINT_0: string;
							HINT_1: string;
							HINT_10: string;
							HINT_11: string;
							HINT_12: string;
							HINT_13: string;
							HINT_14: string;
							HINT_15: string;
							HINT_16: string;
							HINT_17: string;
							HINT_18: string;
							HINT_19: string;
							HINT_2: string;
							HINT_20: string;
							HINT_21: string;
							HINT_22: string;
							HINT_23: string;
							HINT_24: string;
							HINT_25: string;
							HINT_26: string;
							HINT_3: string;
							HINT_4: string;
							HINT_5: string;
							HINT_6: string;
							HINT_7: string;
							HINT_8: string;
							HINT_9: string;
							HOST_DISCONNECTED_MESSAGE: string;
							HOUSE_BUTTON_VISIT: string;
							HOUSE_EDITOR_CONFIRM_PACK_UP: string;
							HOUSE_EDITOR_TITLE: string;
							HOUSE_PREVIEW_PURCHASE_MESSAGE: string;
							HOUSE_VISITING_LOCKED: string;
							HOUSE_VISITING_UNLOCKED: string;
							HS_FLOATLINGS_FOUND: string;
							HS_NINJAS: string;
							HTTP_TOKEN_EXPIRE_MESSAGE: string;
							INACTIVITY_BUTTON: string;
							INACTIVITY_MESSAGE: string;
							INIT_ORB_SERVER_ERROR: string;
							INK_BLOT_BLOCKED_MESSAGE: string;
							INK_BLOT_BLOCKED_TITLE: string;
							INPUT_CLEAR: string;
							ITEM_BUTTON_BUY: string;
							ITEM_BUTTON_HIDE: string;
							ITEM_BUTTON_REMOVE: string;
							ITEM_BUTTON_SHOW: string;
							ITEM_BUTTON_USE: string;
							ITEM_BUTTON_WEAR: string;
							ITEM_CURRENT: string;
							ITEM_FREE: string;
							ITEM_HEAL_HP: string;
							ITEM_MAX: string;
							ITEM_OWNED: string;
							ITEM_TEXT_CHANGE: string;
							ITEMCARD_FREE: string;
							ITEMCARD_LEVEL: string;
							ITEMCARD_LOCKED: string;
							ITEMCARD_OWNED: string;
							JAR_BECOME_MEMBER: string;
							JAR_EXPIRED: string;
							JWT_INVALID_MESSAGE: string;
							KEEP: string;
							KEEP_PLAYING_BUTTON: string;
							KEYSTONE_LEVEL_LOCK: string;
							KEYSTONE_PEDESTAL_NOT_FOUND: string;
							KEYSTONE_PEDESTAL_NOT_MIN_LEVEL: string;
							KEYSTONE_PEDESTAL_NOT_RELEASED: string;
							KEYSTONE_PEDESTALS_ALL_PLACED: string;
							KEYSTONE_PEDESTALS_TITLE: string;
							KEYSTONE_PLACED_DOOR_UNLOCKED: string;
							KEYSTONE_READY: string;
							KEYSTONE_UNLOCKED: string;
							LAMPLIGHT_DOOR_COMING_SOON_MESSAGE: string;
							LAMPLIGHT_DOOR_COMING_SOON_TITLE: string;
							LAMPLIGHT_LOCKED_FESTIVAL: string;
							LEADER_PROMPT_CHECK_IT_OUT: string;
							LEADER_PROMPT_HEY_THERE: string;
							LEADER_PROMPT_LOADING: string;
							LEADER_PROMPT_PLAY_HOME: string;
							LEADERBOARD_CATCH_UP: string;
							LEADERBOARD_CHECK_FRIENDS: string;
							LEADERBOARD_CLASS_ERROR_LOADING: string;
							LEADERBOARD_CLASS_LEADERS: string;
							LEADERBOARD_CLASS_LEVEL_LONG: string;
							LEADERBOARD_CLASS_LEVEL_SHORT: string;
							LEADERBOARD_CLASS_TOP: string;
							LEADERBOARD_ERROR_LOADING_BOARD: string;
							LEADERBOARD_ERROR_LOADING_PLAYER: string;
							LEADERBOARD_ERROR_TEMPORARILY_UNAVAILABLE: string;
							LEADERBOARD_NOT_APPLICABLE: string;
							LEADERBOARD_NOT_RANKED: string;
							LEADERBOARD_RANK_1: string;
							LEADERBOARD_RANK_UP: string;
							LEAVE_TEAM_BODY: string;
							LEAVE_TEAM_TITLE: string;
							LET_GO: string;
							LET_GO_FOREVER_WARNING: string;
							LET_PET_GO_QUESTION: string;
							LEVEL_AND_COLON: string;
							LEVEL_LOCK_EQUIP: string;
							LEVEL_LOCK_PURCHASE: string;
							LINK_PARENT_NO_REWARDS: string;
							LOADING_CAPITALIZE: string;
							LOADING_LOWERCASE: string;
							LOADOUT_NO_RUNES_AVAILABLE: string;
							LOADOUT_SET_1: string;
							LOADOUT_SET_2: string;
							LOADOUT_SET_3: string;
							LOADOUT_YOUR_RUNES: string;
							LOADOUT_YOUR_TEAM: string;
							LOCKED_SPELL: string;
							LOGIN_LEAVE_BODY: string;
							LOGIN_LEAVE_GAME: string;
							LOGIN_LOADING: string;
							LOGIN_LOADING_FEATURES: string;
							LOGIN_LOADING_SKILLS: string;
							LOGIN_LOADING_WORLDS: string;
							LOGIN_LOGGING_IN: string;
							LOGIN_LOGGING_IN_GOOGLE: string;
							LOGIN_PASSWORD: string;
							LOGIN_PASSWORD_HELP: string;
							LOGIN_PASSWORD_HELP_CONTENT: string;
							LOGIN_PRIVACY_POLICY: string;
							LOGIN_USERNAME: string;
							LOGIN_WEBSITE: string;
							LORE_TABLET_0: string;
							LORE_TABLET_1: string;
							LORE_TABLET_10: string;
							LORE_TABLET_11: string;
							LORE_TABLET_12: string;
							LORE_TABLET_13: string;
							LORE_TABLET_14: string;
							LORE_TABLET_15: string;
							LORE_TABLET_16: string;
							LORE_TABLET_17: string;
							LORE_TABLET_18: string;
							LORE_TABLET_19: string;
							LORE_TABLET_2: string;
							LORE_TABLET_20: string;
							LORE_TABLET_21: string;
							LORE_TABLET_22: string;
							LORE_TABLET_23: string;
							LORE_TABLET_24: string;
							LORE_TABLET_25: string;
							LORE_TABLET_26: string;
							LORE_TABLET_27: string;
							LORE_TABLET_3: string;
							LORE_TABLET_4: string;
							LORE_TABLET_5: string;
							LORE_TABLET_6: string;
							LORE_TABLET_7: string;
							LORE_TABLET_8: string;
							LORE_TABLET_9: string;
							LUCKY_LOOT: string;
							LVL: string;
							MAIL_BECOME_A_MEMBER: string;
							MAIL_CLICK_TO_OPEN: string;
							MAIL_OPEN_MY_BOX: string;
							MAIL_UNAVAILABLE: string;
							MAILBOX_DELETE_MESSAGE: string;
							MAP_ACADEMY_ARCHIVES: string;
							MAP_ACADEMY_GREATHALL: string;
							MAP_ACADEMY_SECOND_FLOOR: string;
							MAP_ACTIVITY_CENTRAL_VILLAGE: string;
							MAP_ACTIVITY_ISLAND_CENTER: string;
							MAP_ACTIVITY_NORTHEAST: string;
							MAP_ACTIVITY_NORTHWEST: string;
							MAP_ACTIVITY_RIVER_BRIDGE: string;
							MAP_ACTIVITY_SWING_BRIDGE: string;
							MAP_ACTIVITY_WESTERN_SHORE: string;
							MAP_BONFIRE_SPIRE_FIERY_ALCOVE: string;
							MAP_BONFIRE_SPIRE_FIREWATCH_ROAD: string;
							MAP_BONFIRE_SPIRE_GARDEN_GETAWAY: string;
							MAP_BONFIRE_SPIRE_LAVA_PITS: string;
							MAP_BONFIRE_SPIRE_MOLTEN_ENCLAVE: string;
							MAP_BONFIRE_SPIRE_OUTER_SLIMEBURBIA: string;
							MAP_BONFIRE_SPIRE_PALM_PATH: string;
							MAP_BONFIRE_SPIRE_PALM_TERRACE: string;
							MAP_BONFIRE_SPIRE_PITFALL_TERRACE: string;
							MAP_BONFIRE_SPIRE_RED_HOT_RIVER: string;
							MAP_BONFIRE_SPIRE_ROYAL_KITCHEN: string;
							MAP_BONFIRE_SPIRE_SLIME_SHANTY: string;
							MAP_BONFIRE_SPIRE_THRONE_ROOM: string;
							MAP_BONFIRE_SPIRE_THRONE_ROOM_ENTRANCE: string;
							MAP_BONFIRE_SPIRE_VOLCANIC_CAVERN: string;
							MAP_BONFIRE_SPIRE_VOLCANIC_SANCTUM: string;
							MAP_BONFIRE_SPIRE_VOLCANO_ENTRANCE: string;
							MAP_BONFIRE_SPIRE_VOLCANO_JUNCTION: string;
							MAP_BONFIRE_SPIRE_VOLCANO_VILLAGE: string;
							MAP_DARK_TOWER_ENTRANCE: string;
							MAP_DARK_TOWER_FLOOR: string;
							MAP_DARK_TOWER_SHOWDOWN: string;
							MAP_DYNO_DIG_MUSEUM: string;
							MAP_DYNO_DIG_OASIS: string;
							MAP_EARTH_TOWER: string;
							MAP_EARTH_TOWER_COMMON_ROOM: string;
							MAP_EARTH_TOWER_FLOOR: string;
							MAP_EARTH_TOWER_WARDEN_ROOM: string;
							MAP_FOREST_BIG_TREE: string;
							MAP_FOREST_CROSSROADS: string;
							MAP_FOREST_FIREFLY_CLEARING: string;
							MAP_FOREST_FIREFLY_CROSSING: string;
							MAP_FOREST_FISHERMANS_POND: string;
							MAP_FOREST_GRASSY_CLEARING: string;
							MAP_FOREST_MOUNTAIN_GATE: string;
							MAP_FOREST_MOUNTAIN_PASS: string;
							MAP_FOREST_OLD_ROAD_REMAINS: string;
							MAP_FOREST_STONEFISH_BEACH: string;
							MAP_FOREST_THE_OLD_ROAD: string;
							MAP_HOUSE_EXTERIOR: string;
							MAP_HOUSE_PALLET_PASS: string;
							MAP_HOUSE_STARTER_HOUSE: string;
							MAP_LAMPLIGHT_ACADEMY_CROSSROADS: string;
							MAP_LAMPLIGHT_ACADEMY_ENTRANCE: string;
							MAP_LAMPLIGHT_BURROW: string;
							MAP_LAMPLIGHT_COLISEUM: string;
							MAP_LAMPLIGHT_FORT_FOX: string;
							MAP_LAMPLIGHT_HISTORY_DISTRICT: string;
							MAP_LAMPLIGHT_LOWER_INTERSECTION: string;
							MAP_LAMPLIGHT_MARKET: string;
							MAP_LAMPLIGHT_NORTHWEST_COURT: string;
							MAP_LAMPLIGHT_OUTSKIRTS: string;
							MAP_LAMPLIGHT_PET_PARK: string;
							MAP_LAMPLIGHT_SOUTHERN_DOCK: string;
							MAP_LAMPLIGHT_TOWN_SQUARE: string;
							MAP_LAMPLIGHT_VENDORS_PLAZA: string;
							MAP_SHIPWRECK_SHORE_BROKEN_BOWSPRIT: string;
							MAP_SHIPWRECK_SHORE_BROKEN_SHIP_BED: string;
							MAP_SHIPWRECK_SHORE_CAPNS_QUARTERS: string;
							MAP_SHIPWRECK_SHORE_CARGO_HOLD: string;
							MAP_SHIPWRECK_SHORE_CROWS_NEST: string;
							MAP_SHIPWRECK_SHORE_DEEP_WATER: string;
							MAP_SHIPWRECK_SHORE_DESOLATE_DECK: string;
							MAP_SHIPWRECK_SHORE_DIVE_DOCK: string;
							MAP_SHIPWRECK_SHORE_FAR_BEACH: string;
							MAP_SHIPWRECK_SHORE_LOWER_DECK: string;
							MAP_SHIPWRECK_SHORE_LOWER_DECK_HALL: string;
							MAP_SHIPWRECK_SHORE_SAND_CITY: string;
							MAP_SHIPWRECK_SHORE_SAND_TOWN: string;
							MAP_SHIPWRECK_SHORE_SEAWEED_SANCTUARY: string;
							MAP_SHIPWRECK_SHORE_SEAWEED_SKYSCRAPERS: string;
							MAP_SHIPWRECK_SHORE_SECLUDED_SHORE: string;
							MAP_SHIPWRECK_SHORE_SECOND_SHIP_RAMP: string;
							MAP_SHIPWRECK_SHORE_SECRET_SHORE: string;
							MAP_SHIPWRECK_SHORE_SECRET_SHORE_SPACE: string;
							MAP_SHIPWRECK_SHORE_SHORELINE: string;
							MAP_SHIPWRECK_SHORE_SUNKEN_SECRET: string;
							MAP_SHIPWRECK_SHORE_UNDERWATER_ALCOVE: string;
							MAP_SHIPWRECK_SHORE_UPPER_DECK: string;
							MAP_SHIVERCHILL_BOKS_CAVE: string;
							MAP_SHIVERCHILL_BORDERLAND: string;
							MAP_SHIVERCHILL_DUNGEON_HUB: string;
							MAP_SHIVERCHILL_FROZEN_PASS: string;
							MAP_SHIVERCHILL_FURNACE_ROOM: string;
							MAP_SHIVERCHILL_GATE: string;
							MAP_SHIVERCHILL_HIDDEN_ROOM: string;
							MAP_SHIVERCHILL_MOUNTAIN_PASS: string;
							MAP_SHIVERCHILL_MOUNTAIN_VALLEY: string;
							MAP_SHIVERCHILL_RAIL_RUINS: string;
							MAP_SHIVERCHILL_ROYAL_PASSAGE: string;
							MAP_SHIVERCHILL_RUINED_ENTRANCE: string;
							MAP_SHIVERCHILL_RUINED_PASSAGE: string;
							MAP_SHIVERCHILL_RUINED_STEPS: string;
							MAP_SHIVERCHILL_THE_CHASM: string;
							MAP_SHIVERCHILL_TREASURE_ROOM: string;
							MAP_SHIVERCHILL_WORMS_REST: string;
							MAP_SKYWATCH_BLAST_DOORS: string;
							MAP_SKYWATCH_BREEZY_PASS: string;
							MAP_SKYWATCH_CLOUDY_PASS: string;
							MAP_SKYWATCH_END_CHAMBER: string;
							MAP_SKYWATCH_FACTORY_ENTRANCE: string;
							MAP_SKYWATCH_FACTORY_MAIN_HALL: string;
							MAP_SKYWATCH_GARDENERS_HUT_EXTERIOR: string;
							MAP_SKYWATCH_GARDENERS_HUT_INNER: string;
							MAP_SKYWATCH_GREAT_GRATERS: string;
							MAP_SKYWATCH_INNER_SCREWBALL_SHACK: string;
							MAP_SKYWATCH_LOWER_BEANOVATOR: string;
							MAP_SKYWATCH_MAIN_HALL: string;
							MAP_SKYWATCH_OLD_MANS_ROOM: string;
							MAP_SKYWATCH_OUTSKIRTS: string;
							MAP_SKYWATCH_SCREWBALL_SHACK: string;
							MAP_SKYWATCH_SKY_SHOWER: string;
							MAP_SKYWATCH_UPPER_BEANOVATOR: string;
							MAP_SKYWATCH_WIND_TUNNEL: string;
							MAP_TITAN_GROUNDS: string;
							MAP_TOY_ZONE_DRAGONS_LAIR: string;
							MAP_TOY_ZONE_EPIC_ZONE: string;
							MAP_TOY_ZONE_MYSTIC_ROTUNDA: string;
							MAX_STARS_EARNED: string;
							MEMBER_AD_ERROR_BODY: string;
							MEMBER_AD_PURCHASE_FAILED_BODY: string;
							MEMBER_AD_PURCHASE_PENDING_BODY: string;
							MEMBER_AD_SUCCESS_BODY: string;
							MEMBER_AD_SUCCESS_TITLE: string;
							MEMBER_AD_VISIT_SITE_BODY: string;
							MEMBER_PROMPT_BECOME_MEMBER: string;
							MEMBER_PROMPT_BUY_NOW: string;
							MEMBER_PROMPT_JOIN_GOLD: string;
							MEMBER_PROMPT_MEMBERSHIP: string;
							MEMBER_PROMPT_REWARD_GOLD: string;
							MEMBER_STARS_EARNED: string;
							MEMBERS_COLLECT_MORE_XP: string;
							MEMBERSHIP_AD_SCHOOL_CONTENT: string;
							MEMBERSHIP_AD_SCHOOL_TITLE: string;
							MEMBERSHIP_AMAZING_THINGS: string;
							MEMBERSHIP_AWESOME_GEAR: string;
							MEMBERSHIP_BECOME_MEMBER: string;
							MEMBERSHIP_CLOUD_MOUNT: string;
							MEMBERSHIP_CONGRATULATIONS: string;
							MEMBERSHIP_GET_MONTHLY_BOX: string;
							MEMBERSHIP_GET_MOUNT: string;
							MEMBERSHIP_GET_MOUNT_BODY: string;
							MEMBERSHIP_LEARN_MORE: string;
							MEMBERSHIP_MONTHLY_BOX_DESCRIPTION: string;
							MEMBERSHIP_MONTHLY_BOX_TITLE: string;
							MEMBERSHIP_MOUNT_EQUIP: string;
							MEMBERSHIP_SUCCESS_RELOAD_MESSAGE: string;
							MEMBERSHIP_SUPPRESSION_BODY: string;
							MEMBERSHIP_SUPPRESSION_HEADER: string;
							MEMBERSHIP_TITAN_CATAPULT_BODY_0: string;
							MEMBERSHIP_TITAN_CATAPULT_BODY_1: string;
							MEMBERSHIP_TITAN_CATAPULT_BODY_2: string;
							MEMBERSHIP_TITAN_CATAPULT_BODY_3: string;
							MEMBERSHIP_TITAN_CATAPULT_GRAPHIC_0: string;
							MEMBERSHIP_TITAN_CATAPULT_GRAPHIC_1: string;
							MEMBERSHIP_TITAN_CATAPULT_TITLE: string;
							MESSAGE_TITLE_OOPS: string;
							MESSAGE_TITLE_UH_OH: string;
							MINI_GAME_BUTTON_CANCEL: string;
							MINI_GAME_BUTTON_HOW_TO: string;
							MINI_GAME_BUTTON_START: string;
							MINI_GAME_NOT_ENOUGH_GOLD: string;
							MONTH_NAME_1: string;
							MONTH_NAME_10: string;
							MONTH_NAME_11: string;
							MONTH_NAME_12: string;
							MONTH_NAME_2: string;
							MONTH_NAME_3: string;
							MONTH_NAME_4: string;
							MONTH_NAME_5: string;
							MONTH_NAME_6: string;
							MONTH_NAME_7: string;
							MONTH_NAME_8: string;
							MONTH_NAME_9: string;
							MORPH_END_MESSAGE: string;
							MORPH_START_NEW: string;
							MOVE_HOUSE_CONFIRM: string;
							MUSEUM_COLLECTED_ALL_FOSSILS: string;
							MUSEUM_CRAFT_FOSSILS_0: string;
							MUSEUM_CRAFT_FOSSILS_1: string;
							MUSEUM_INTRO: string;
							MUSIC_VOLUME_LABEL: string;
							NAME_APPRENTICE: string;
							NAME_CHANGE_BUTTON_DONE: string;
							NAME_CHANGE_CHANGE_TO: string;
							NAME_CHANGE_CHOOSE_TITLE: string;
							NAME_CHANGE_NAME_WIZARD: string;
							NAME_CHANGE_REVERT_CHANGE: string;
							NAME_CHANGE_SUCCESS: string;
							NETWORK_ALL_GOOD: string;
							NETWORK_CANNOT_CONNECT: string;
							NETWORK_CANNOT_CONNECT_TIMER: string;
							NETWORK_CHECK_CONNECTION: string;
							NETWORK_ERROR: string;
							NETWORK_ERROR_SKILLS: string;
							NETWORK_FORBIDDEN: string;
							NETWORK_GOING_OFFLINE: string;
							NETWORK_INCORRECT_USERNAME_PASSWORD: string;
							NETWORK_LOGGED_IN_ELSEWHERE: string;
							NETWORK_OFFLINE: string;
							NETWORK_OUT_OF_DATE: string;
							NETWORK_TRY_LATER: string;
							NEW_MEMBER_WW_AD_BODY: string;
							NEW_MEMBER_WW_AD_TITLE: string;
							NEW_MEMBER_WW_TOOLTIP_BODY: string;
							NEW_MEMBER_WW_TOOLTIP_TITLE: string;
							NEW_STARLIGHT_HIGHLIGHT: string;
							NICKNAME_REQUIRE_CATCH_MIMIC: string;
							NICKNAME_REQUIRE_COMPLETEQUEST: string;
							NICKNAME_REQUIRE_HALFQUEST: string;
							NICKNAME_REQUIRE_MEMBERSHIP: string;
							NICKNAME_REQUIRE_PIRATE_SET: string;
							NICKNAME_REQUIRE_ROBOLYMPICS: string;
							NICKNAME_REQUIRE_ROBOT_SET: string;
							NICKNAME_REQUIRE_SHIPWRECK_COMPLETE: string;
							NICKNAME_REQUIRE_TECH_GOBBLER: string;
							NICKNAMER_BUTTON_APPLY: string;
							NICKNAMER_ORIGINAL: string;
							NICKNAMER_TITLE_BONFIRE: string;
							NICKNAMER_TITLE_FIREFLY: string;
							NICKNAMER_TITLE_SHIPWRECK: string;
							NICKNAMER_TITLE_SHIVERCHILL: string;
							NICKNAMER_TITLE_SKYWATCH: string;
							NICKNAMER_TITLE_SUMMERFEST: string;
							NO_CATCHING_MONSTER_ON_ISLAND: string;
							NO_TEXT: string;
							NOT_NOW: string;
							NOW_LEAVING_PRODIGY: string;
							NPC_NAME_ACADEMY_MERCHANT: string;
							NPC_NAME_ANCIENT: string;
							NPC_NAME_ARENA_CALLER: string;
							NPC_NAME_ARENA_MERCHANT: string;
							NPC_NAME_ASPEN_FROST: string;
							NPC_NAME_ASSISTANT_SPOKES: string;
							NPC_NAME_ATHENA: string;
							NPC_NAME_BARGO: string;
							NPC_NAME_BARRY_BOSS: string;
							NPC_NAME_BENNI: string;
							NPC_NAME_BLAZE: string;
							NPC_NAME_BOARDY: string;
							NPC_NAME_BOOMBOX: string;
							NPC_NAME_BROCCOLINA: string;
							NPC_NAME_CALEB_FORESTMASTER: string;
							NPC_NAME_CEBOLLINI: string;
							NPC_NAME_CHESTER_COPPERPAN: string;
							NPC_NAME_CHILLY: string;
							NPC_NAME_CLANKBOOT: string;
							NPC_NAME_CRABBSY: string;
							NPC_NAME_CRYSTAL_GOLEM: string;
							NPC_NAME_CRYSTAL_THIEF: string;
							NPC_NAME_CUMULO: string;
							NPC_NAME_DON_ZORRO: string;
							NPC_NAME_EGG_COLLECTOR: string;
							NPC_NAME_EUGENE: string;
							NPC_NAME_EVE: string;
							NPC_NAME_FIRIA: string;
							NPC_NAME_FLORA: string;
							NPC_NAME_FLORIAN: string;
							NPC_NAME_FOREST_THIEF: string;
							NPC_NAME_FREEZY: string;
							NPC_NAME_FROSTY: string;
							NPC_NAME_FROSTY_STORM: string;
							NPC_NAME_GALE: string;
							NPC_NAME_GERALD: string;
							NPC_NAME_GEROME: string;
							NPC_NAME_GLACIAS: string;
							NPC_NAME_GRUMPY_YETI: string;
							NPC_NAME_GUARD: string;
							NPC_NAME_GUARD_SLIME: string;
							NPC_NAME_GUARDIAN: string;
							NPC_NAME_HANK: string;
							NPC_NAME_HARRIET_HOOD: string;
							NPC_NAME_HARVEY: string;
							NPC_NAME_HOWARD_CORNELIUS: string;
							NPC_NAME_ICE_WORM: string;
							NPC_NAME_IVIRA: string;
							NPC_NAME_JELLY_JIM: string;
							NPC_NAME_JULIA_GHOULIA: string;
							NPC_NAME_KANDI_KORN: string;
							NPC_NAME_KOI: string;
							NPC_NAME_LOTNEY_CHUNK: string;
							NPC_NAME_LUCKY_JACK: string;
							NPC_NAME_LUMINITE: string;
							NPC_NAME_MAMA_STAR: string;
							NPC_NAME_MARY_FIRE: string;
							NPC_NAME_MARY_MOSS: string;
							NPC_NAME_MERCHANT: string;
							NPC_NAME_MIKE: string;
							NPC_NAME_MILLY: string;
							NPC_NAME_MINER: string;
							NPC_NAME_MIRA_SHADE: string;
							NPC_NAME_MIST: string;
							NPC_NAME_MIZU: string;
							NPC_NAME_MOOG_ASSISTANT: string;
							NPC_NAME_MOOGS_HENCHMAN: string;
							NPC_NAME_MORRIS: string;
							NPC_NAME_MOZZA_ELLE: string;
							NPC_NAME_MUGS: string;
							NPC_NAME_NOOT: string;
							NPC_NAME_OLD_ONE: string;
							NPC_NAME_PIPPET: string;
							NPC_NAME_PRIMO_AND_MOOG: string;
							NPC_NAME_PROFESSOR_SCOOG: string;
							NPC_NAME_PUPPETMASTER: string;
							NPC_NAME_QUEEN_GOO_LIA: string;
							NPC_NAME_RAINY_STORM: string;
							NPC_NAME_ROCKSY: string;
							NPC_NAME_RUTHERFORD: string;
							NPC_NAME_SANDY_STORM: string;
							NPC_NAME_SCIENTIST_SLIME: string;
							NPC_NAME_SCOOG: string;
							NPC_NAME_SHADOW_WYRM: string;
							NPC_NAME_SHOPKEEPER_FIGG: string;
							NPC_NAME_SIR_VEY: string;
							NPC_NAME_SLURPY: string;
							NPC_NAME_SPINNER: string;
							NPC_NAME_STACHE: string;
							NPC_NAME_STAMPSY: string;
							NPC_NAME_STORMY_STORM: string;
							NPC_NAME_SWOOPY: string;
							NPC_NAME_THIEF: string;
							NPC_NAME_TITAN_BARRIER: string;
							NPC_NAME_TOY_MERCHANT: string;
							NPC_NAME_TRIPTROP_TAK: string;
							NPC_NAME_TRIPTROP_TED: string;
							NPC_NAME_TRIPTROP_TOM: string;
							NPC_NAME_UNKNOWN: string;
							NPC_NAME_VERNA: string;
							NPC_NAME_WHEELER: string;
							NPC_NAME_WINSTON: string;
							NPC_NAME_WIZARD: string;
							NPC_NAME_WOODSMAN_MIKE: string;
							NPC_NAME_WORKER_SLIME: string;
							NTH_TRIAL: string;
							NTH_TRIAL_OF_THE_ANCIENT: string;
							OPEN_CHEST: string;
							OPEN_URL_AT_HOME: string;
							OPEN_URL_IN_APP: string;
							OPEN_VIDEO_AT_HOME: string;
							OPENING_A_VIDEO_DURING_SCHOOL: string;
							PAGE_COUNT_PROGRESS: string;
							PAGE_NUMBER: string;
							PARENT_ATTACH_AT_HOME_IS: string;
							PARENT_ATTACH_BACK_TO_GAME: string;
							PARENT_ATTACH_BIRTHDAY_DETAILS: string;
							PARENT_ATTACH_BIRTHDAY_PROMPT: string;
							PARENT_ATTACH_BUTTON_BACK: string;
							PARENT_ATTACH_BUTTON_OKAY: string;
							PARENT_ATTACH_BUTTON_PARENT: string;
							PARENT_ATTACH_BUTTON_UNLOCK: string;
							PARENT_ATTACH_BUTTON_USE_TICKET: string;
							PARENT_ATTACH_CAN_PLAY: string;
							PARENT_ATTACH_CHANCE: string;
							PARENT_ATTACH_CHECK_LOGIN: string;
							PARENT_ATTACH_CREATE_ACCOUNT: string;
							PARENT_ATTACH_CREATE_FREE: string;
							PARENT_ATTACH_CREATED: string;
							PARENT_ATTACH_GET_PARENT: string;
							PARENT_ATTACH_LEARN_HOME: string;
							PARENT_ATTACH_LOCKED: string;
							PARENT_ATTACH_LOGIN_DETAILS: string;
							PARENT_ATTACH_LOOP: string;
							PARENT_ATTACH_NAME_DETAILS: string;
							PARENT_ATTACH_NAME_PROMPT: string;
							PARENT_ATTACH_NEXT_STEPS: string;
							PARENT_ATTACH_NOT_CREATED: string;
							PARENT_ATTACH_PARENT_ACCOUNT: string;
							PARENT_ATTACH_PARENT_UNLOCK_PROMPT: string;
							PARENT_ATTACH_PASSWORD: string;
							PARENT_ATTACH_PASSWORD_DETAILS: string;
							PARENT_ATTACH_PLAY_ALL_AREAS: string;
							PARENT_ATTACH_PLAYING_AT_HOME_IS: string;
							PARENT_ATTACH_PROBLEM: string;
							PARENT_ATTACH_SUCCESS_AT_HOME: string;
							PARENT_ATTACH_TICKETS_LEFT: string;
							PARENT_ATTACH_TICKETS_UNTIL_PLAYING: string;
							PARENT_ATTACH_TO: string;
							PARENT_ATTACH_TRY_AGAIN: string;
							PARENT_ATTACH_UNLOCK_AT_HOME: string;
							PARENT_ATTACH_UNSUCCESSFUL: string;
							PARENT_ATTACH_USE_ONE_TICKET: string;
							PARENT_ATTACH_USED_A_TICKET: string;
							PARENT_ATTACH_USED_ALL: string;
							PARENT_ATTACH_USERNAME: string;
							PARENT_ATTACH_USERNAME_DETAILS: string;
							PARENT_ATTACH_WORLDS: string;
							PARENT_ATTACH_YOU_HAVE: string;
							PARENT_ATTACH_YOU_NOW_HAVE: string;
							PARENT_EMAIL_BUTTON: string;
							PARENT_EMAIL_CONTENT: string;
							PARENT_EMAIL_MSG_BUTTON: string;
							PARENT_EMAIL_MSG_CONTENT: string;
							PARENT_EMAIL_TEXT: string;
							PARENT_LINK_AT_SCHOOL_BODY: string;
							PARENT_LINK_INFO_BODY: string;
							PARENT_LINK_MOBILE_MESSAGE: string;
							PARENT_LINK_POST_CLICK: string;
							PARENT_LINK_REPLAY: string;
							PARENT_LINK_SCHOOL_HOURS: string;
							PARENT_LINK_SUCCESS_BODY: string;
							PARENT_LINK_TRIAL_BODY: string;
							PARENT_LINK_TRIAL_HOME_TITLE: string;
							PARENT_LINK_TRIAL_SCHOOL_TITLE: string;
							PARENTAL_LINK_BACK_TO_GAME: string;
							PARENTAL_LINK_BIRTH: string;
							PARENTAL_LINK_BIRTH_INFO: string;
							PARENTAL_LINK_BUTTON: string;
							PARENTAL_LINK_BUTTON_SUCCESS: string;
							PARENTAL_LINK_CONFIRM_BODY_1: string;
							PARENTAL_LINK_CONFIRM_BODY_2: string;
							PARENTAL_LINK_CONFIRM_BODY_3: string;
							PARENTAL_LINK_CONTENT: string;
							PARENTAL_LINK_CONTENT_SCHOOL: string;
							PARENTAL_LINK_CONTINUE: string;
							PARENTAL_LINK_CREATE_ACCOUNT: string;
							PARENTAL_LINK_EMAIL: string;
							PARENTAL_LINK_EMAIL_INFO: string;
							PARENTAL_LINK_FAILED_BODY_1: string;
							PARENTAL_LINK_FAILED_BODY_2: string;
							PARENTAL_LINK_FAILED_BODY_3: string;
							PARENTAL_LINK_FULL_NAME_INFO: string;
							PARENTAL_LINK_INFO_BODY_1: string;
							PARENTAL_LINK_INFO_BODY_2: string;
							PARENTAL_LINK_INFO_BODY_3: string;
							PARENTAL_LINK_INFO_BODY_4: string;
							PARENTAL_LINK_INVALID_BIRTH: string;
							PARENTAL_LINK_INVALID_EMAIL: string;
							PARENTAL_LINK_INVALID_PASSWORD: string;
							PARENTAL_LINK_PARENT_NAME: string;
							PARENTAL_LINK_PASSWORD: string;
							PARENTAL_LINK_PASSWORD_INFO: string;
							PARENTAL_LINK_PLAY: string;
							PARENTAL_LINK_PRIVACY_BUTTON: string;
							PARENTAL_LINK_SCHOOL_CONTENT: string;
							PARENTAL_LINK_SIGNUP: string;
							PARENTAL_LINK_SKIP: string;
							PARENTAL_LINK_TERMS_BUTTON: string;
							PARENTAL_LINK_TERMS_DESKTOP: string;
							PARENTAL_LINK_TERMS_MOBILE: string;
							PARENTAL_LINK_TERMS_MUST_ACCEPT: string;
							PARENTAL_LINK_TITLE: string;
							PARENTAL_LINK_TITLE_SUCCESS: string;
							PARENTAL_LINK_TRIAL_ENDED_BODY_1: string;
							PARENTAL_LINK_TRIAL_ENDED_BODY_2: string;
							PARENTAL_LINK_TRIAL_ENDED_TITLE: string;
							PARENTAL_LINK_TRIAL_LINK: string;
							PARENTAL_LINK_TRIAL_SKIP: string;
							PARENTAL_LINK_TRIAL_TITLE: string;
							PARENTAL_LINK_USERNAME: string;
							PARENTAL_LINK_USERNAME_INFO: string;
							PARENTAL_LINK_VIDEO_CONTENT_1: string;
							PARENTAL_LINK_VIDEO_CONTENT_2: string;
							PARENTAL_POPUP_ATTACH_FAILED: string;
							PARENTAL_POPUP_BACK: string;
							PARENTAL_POPUP_LOGIN: string;
							PARENTAL_POPUP_MESSAGE: string;
							PARTY_FULL_ERROR: string;
							PARTY_JOIN_FAILED_ERROR: string;
							PARTY_WAS_CANCELLED: string;
							PASSWORD_ERROR_MATCHES: string;
							PASSWORD_ERROR_NO_MATCH: string;
							PASSWORD_ERROR_NO_SPACES: string;
							PASSWORD_ERROR_TOO_LONG: string;
							PASSWORD_ERROR_TOO_SHORT: string;
							PET_ADDED_TO_TEAM: string;
							PET_ADVENTURES_TITLE: string;
							PET_ALREADY_ON_TEAM: string;
							PET_LORE_CHARFOAL_BODY: string;
							PET_LORE_CHARFOAL_TITLE: string;
							PET_LORE_MERMINA_BODY: string;
							PET_LORE_MERMINA_TITLE: string;
							PET_LORE_SNOWFLUFF_BODY: string;
							PET_LORE_SNOWFLUFF_TITLE: string;
							PET_LORE_SPROOT_BODY: string;
							PET_LORE_SPROOT_TITLE: string;
							PET_LORE_WOTT_BODY: string;
							PET_LORE_WOTT_TITLE: string;
							PET_MENU_BESTIARY: string;
							PET_MENU_MY_TEAM: string;
							PET_WAS_LET_GO: string;
							PETS_BUTTON_SET_FREE: string;
							PETS_CONFIRM_LEAVE: string;
							PETS_DESCRIPTION: string;
							PETS_DONT_OWN: string;
							PETS_GROWTH: string;
							PETS_I_OWN: string;
							PETS_LIFE: string;
							PETS_MY_TEAM: string;
							PETS_POWER: string;
							PETS_TYPE: string;
							PLAY_AT_HOME_BUY_ITEM: string;
							PLAY_AT_HOME_DANCE: string;
							PLAY_AT_HOME_EVOLVE_PETS: string;
							PLAY_AT_HOME_MEMBER_BOUNTY: string;
							PLAY_AT_HOME_MEMBER_CHESTS: string;
							PLAY_AT_HOME_MEMBER_HUD: string;
							PLAY_AT_HOME_MEMBER_PETS: string;
							PLAY_AT_HOME_MORE_EXP: string;
							PLAY_AT_HOME_MORE_EXP_CLASS_LEADERS: string;
							PLAY_AT_HOME_MORE_GOLD: string;
							PLAY_AT_HOME_NICKNAME: string;
							PLAY_AT_HOME_NOT_MEMBER_HUD: string;
							PLAY_AT_HOME_PLACEHOLDER: string;
							PLAY_AT_HOME_PREMIUM_ITEM: string;
							PLAY_AT_HOME_TITLE: string;
							PLAY_AT_HOME_TOWER: string;
							PLAY_AT_HOME_TWILIGHT_WHEEL: string;
							PLAY_AT_HOME_WHEEL_SPIN: string;
							PLAY_HOME_CONTINUE_ADVENTURE: string;
							PLAY_HOME_DISPLAY_PASSWORD: string;
							PLAY_HOME_DISPLAY_USERNAME: string;
							PLAY_HOME_ENJOY_EVERYWHERE: string;
							PLAY_HOME_WRITE_DOWN_CREDENTIALS: string;
							PLAYER_CARD_ADD_FRIEND_BOT: string;
							PLAYER_CARD_ADD_FRIEND_TOP: string;
							PLAYER_CARD_ARENA: string;
							PLAYER_CARD_BATTLE_BUTTON_TOP: string;
							PLAYER_CARD_CANCEL_FRIEND_BOT: string;
							PLAYER_CARD_CANCEL_FRIEND_TOP: string;
							PLAYER_CARD_CHANGE_STYLE_BUTTON_BOT: string;
							PLAYER_CARD_CHANGE_STYLE_BUTTON_TOP: string;
							PLAYER_CARD_CONFIRM_REMOVE_BODY: string;
							PLAYER_CARD_CONFIRM_REMOVE_TITLE: string;
							PLAYER_CARD_FLOOR: string;
							PLAYER_CARD_GEAR_BUTTON_BOT: string;
							PLAYER_CARD_GEAR_BUTTON_TOP: string;
							PLAYER_CARD_GEMS_BUTTON_BOT: string;
							PLAYER_CARD_GO_TO_HOUSE_BUTTON_BOT: string;
							PLAYER_CARD_GO_TO_HOUSE_BUTTON_TOP: string;
							PLAYER_CARD_GOLD: string;
							PLAYER_CARD_HEARTS: string;
							PLAYER_CARD_KEY_ITEMS_BUTTON_BOT: string;
							PLAYER_CARD_KEY_ITEMS_BUTTON_TOP: string;
							PLAYER_CARD_MAX: string;
							PLAYER_CARD_REMOVE_FRIEND_BOT: string;
							PLAYER_CARD_REMOVE_FRIEND_TOP: string;
							PLAYER_CARD_STARS: string;
							PLAYER_CARD_STATS_BUTTON_BOT: string;
							PLAYER_CARD_STATS_BUTTON_TOP: string;
							PLAYER_CARD_TOWER: string;
							PLAYER_CARD_VISIT_HOUSE_BUTTON_BOT: string;
							PLAYER_CARD_VISIT_HOUSE_BUTTON_TOP: string;
							PLAYER_CARD_WIN_LOSS: string;
							PLAYER_LOADOUT_SCORE: string;
							POTION_USE_ALREADY_ONE: string;
							POTION_USE_ONLY_WILD: string;
							POTION_USE_UNSPORTSMAN: string;
							POUCH_BUTTON_SEARCH: string;
							POUCH_CHOOSE_BOOTS: string;
							POUCH_CHOOSE_FOLLOW: string;
							POUCH_CHOOSE_HAT: string;
							POUCH_CHOOSE_OUTFIT: string;
							POUCH_CHOOSE_RING: string;
							POUCH_CHOOSE_SPELL: string;
							POUCH_CHOOSE_SPELLRELIC: string;
							POUCH_CHOOSE_WEAPON: string;
							POUCH_SEARCH_FAILED: string;
							PROCEED_ANYWAY: string;
							PUMPKINFEST_AD_BODY: string;
							PUMPKINFEST_AD_TITLE: string;
							PUMPKINFEST_CONFIRM_TRAVEL: string;
							PUMPKINFEST_SIGN_MESSAGE: string;
							PUMPKINFEST_SIGN_TITLE: string;
							PUMPKINFEST_TOOLTIP_BODY: string;
							PUMPKIPUFF_INSTRUCTIONS: string;
							PURCHASING_MESSAGE_ALREADY_LIVE_BODY: string;
							PURCHASING_MESSAGE_ALREADY_LOOK_BODY: string;
							PURCHASING_MESSAGE_HAVE_ITEM_BODY: string;
							PURCHASING_MESSAGE_HAVE_PET_BODY: string;
							PURCHASING_MESSAGE_NEED_MORE_CURRENCY_BODY: string;
							PURCHASING_MESSAGE_NEED_MORE_GOLD_BODY: string;
							PURCHASING_MESSAGE_TOO_MANY_ITEMS_BODY: string;
							PURCHASING_MESSAGE_TOO_MANY_PETS_BODY: string;
							PVP_ARENA_POINTS: string;
							PVP_CONNECTING_NOW: string;
							PVP_DISCONNECT_WARNING_BODY: string;
							PVP_DISCONNECT_WARNING_TITLE: string;
							PVP_FINDING_MATCH_BODY: string;
							PVP_FINDING_MATCH_TITLE: string;
							PVP_INTRO: string;
							PVP_PLAYERNAME: string;
							PVP_PRIZE_ACHIEVED_POPUP_BUTTON_TEXT: string;
							PVP_PRIZE_ACHIEVED_POPUP_MESSAGE: string;
							PVP_PRIZES_DISCLAIMER: string;
							PVP_PRIZES_POINTS_REQUIREMENT: string;
							PVP_PRIZES_RANK_REQUIREMENT: string;
							PVP_PRIZES_TITLE: string;
							PVP_RANK_DOWN: string;
							PVP_RANK_UP: string;
							PVP_SELECT_ACTION: string;
							PVP_TIME_REMAINING: string;
							PVP_VERSUS_SHORT: string;
							PVP_WAITING_ON_PLAYER: string;
							PVP_WIN_LOSS: string;
							QA_LENGTH_TEST: string;
							QA_LENGTH_TEST_2: string;
							QA_LENGTH_TEST_3: string;
							QA_LENGTH_TEST_4: string;
							QA_LENGTH_TEST_5: string;
							QUEST_CLEAR: string;
							QUEST_COMPLETE: string;
							QUEST_FOLLOW_PATH: string;
							QUEST_JOB_COMPLETE: string;
							QUEST_PROGRESS_COLLECT_MORE: string;
							QUEST_PROGRESS_DEFEAT_MORE: string;
							QUEST_TODAY: string;
							QUESTS_ACTIVITY_ZONE_DAILY_PLURAL: string;
							QUESTS_ACTIVITY_ZONE_DAILY_SINGLE: string;
							QUESTS_BONFIRE_SPIRE_ADD_INGREDIENT: string;
							QUESTS_BONFIRE_SPIRE_ATTEND_DINNER: string;
							QUESTS_BONFIRE_SPIRE_DEFEAT_CHEF: string;
							QUESTS_BONFIRE_SPIRE_FIND_KEY: string;
							QUESTS_BONFIRE_SPIRE_OFFER_DISH: string;
							QUESTS_BONFIRE_SPIRE_PULL_LEVER: string;
							QUESTS_BONFIRE_SPIRE_SAVE_GATHERERS: string;
							QUESTS_BONFIRE_SPIRE_TALK_TO_GUARDS: string;
							QUESTS_BONFIRE_SPIRE_TALK_TO_QUEEN: string;
							QUESTS_BONFIRE_SPIRE_UNLOCK_CHEST: string;
							QUESTS_BUTTON_START_QUEST: string;
							QUESTS_DINO_DESC_0: string;
							QUESTS_DINO_DESC_1: string;
							QUESTS_DINO_DESC_10: string;
							QUESTS_DINO_DESC_11: string;
							QUESTS_DINO_DESC_12: string;
							QUESTS_DINO_DESC_13: string;
							QUESTS_DINO_DESC_14: string;
							QUESTS_DINO_DESC_2: string;
							QUESTS_DINO_DESC_3: string;
							QUESTS_DINO_DESC_4: string;
							QUESTS_DINO_DESC_5: string;
							QUESTS_DINO_DESC_6: string;
							QUESTS_DINO_DESC_7: string;
							QUESTS_DINO_DESC_8: string;
							QUESTS_DINO_DESC_9: string;
							QUESTS_DINO_NAME_0: string;
							QUESTS_DINO_NAME_1: string;
							QUESTS_DINO_NAME_10: string;
							QUESTS_DINO_NAME_11: string;
							QUESTS_DINO_NAME_12: string;
							QUESTS_DINO_NAME_13: string;
							QUESTS_DINO_NAME_14: string;
							QUESTS_DINO_NAME_2: string;
							QUESTS_DINO_NAME_3: string;
							QUESTS_DINO_NAME_4: string;
							QUESTS_DINO_NAME_5: string;
							QUESTS_DINO_NAME_6: string;
							QUESTS_DINO_NAME_7: string;
							QUESTS_DINO_NAME_8: string;
							QUESTS_DINO_NAME_9: string;
							QUESTS_FOREST_DEFEAT_THE_TRIO: string;
							QUESTS_FOREST_FIND_GERALD: string;
							QUESTS_FOREST_FIX_FLUTE: string;
							QUESTS_FOREST_TALK_TO_MERCHANT: string;
							QUESTS_FOREST_WAKE_GERALD: string;
							QUESTS_SHIPWRECK_CLEAR_INK: string;
							QUESTS_SHIPWRECK_DEFEAT_BOSS: string;
							QUESTS_SHIPWRECK_FIND_JIM: string;
							QUESTS_SHIPWRECK_LOOK_AROUND: string;
							QUESTS_SHIPWRECK_OPEN_DOOR: string;
							QUESTS_SHIPWRECK_TAKE_PHOTO: string;
							QUESTS_SHIVERCHILL_ACTIVATE_FURNACE: string;
							QUESTS_SHIVERCHILL_CHECK_THRONE: string;
							QUESTS_SHIVERCHILL_DEFEAT_ICE_WORM: string;
							QUESTS_SHIVERCHILL_EXPLORE_CAVES: string;
							QUESTS_SHIVERCHILL_FIND_SHOVEL: string;
							QUESTS_SHIVERCHILL_HELP_MINER: string;
							QUESTS_SHIVERCHILL_UNKNOWN: string;
							QUESTS_SKYWATCH_DEFEAT_BOSS: string;
							QUESTS_SKYWATCH_FIND_BROCCOLINA: string;
							QUESTS_SKYWATCH_FIND_EUGENE: string;
							QUESTS_SKYWATCH_GET_DEVICE: string;
							QUESTS_SKYWATCH_GET_KEY: string;
							QUESTS_SKYWATCH_INSPECT_MACHINE: string;
							QUESTS_SKYWATCH_TRIM_VINES: string;
							RANGE: string;
							RANK_STORE_HIGHER_BOUNTY_MESSAGE: string;
							RANK_STORE_HIGHER_RANK_MESSAGE: string;
							RANK_STORE_NOT_REACHED: string;
							RANK_STORE_THIS_RANK: string;
							RANKS_BRONZE: string;
							RANKS_DIAMOND: string;
							RANKS_GOLD: string;
							RANKS_PLATINUM: string;
							RANKS_RANK_WRAPPER: string;
							RANKS_SILVER: string;
							RANKS_UNRANKED: string;
							RARITY_COMMON: string;
							RARITY_HEROIC: string;
							RARITY_LEGENDARY: string;
							RARITY_RARE: string;
							RARITY_UNCOMMON: string;
							RATING_PROMPT: string;
							REDBUBBLE_AD_BODY: string;
							REDBUBBLE_AD_TITLE: string;
							REDEEM_VOUCHER_BUTTON: string;
							REDEEM_VOUCHER_CONTENT: string;
							REGISTRATION_CLASS: string;
							REGISTRATION_CLASS_CODE_FIND: string;
							REGISTRATION_CLASS_CODE_GET: string;
							REGISTRATION_CLASS_CODE_NOT_FOUND: string;
							REGISTRATION_CLASS_TITLE: string;
							REGISTRATION_CLICK_HERE: string;
							REGISTRATION_GRADE: string;
							REGISTRATION_GRADE_TITLE: string;
							REGISTRATION_LEARN_MORE: string;
							REGISTRATION_LEVEL: string;
							REGISTRATION_LEVEL_TITLE: string;
							REGISTRATION_LOCATION_DIALOG_BODY: string;
							REGISTRATION_LOCATION_DIALOG_TITLE: string;
							REGISTRATION_LOCATION_TITLE: string;
							REGISTRATION_SUB_OTHER: string;
							REGISTRATION_WHY_NEED_GRADE: string;
							REGISTRATION_WHY_NEED_GRADE_REASON: string;
							REGISTRATION_WHY_NEED_INFO: string;
							REGISTRATION_WHY_NEED_NAME: string;
							REGISTRATION_WHY_NEED_NAME_REASON: string;
							REGISTRATION_YEAR: string;
							REGISTRATION_YEAR_TITLE: string;
							RESTART: string;
							ROOF_BLOCKED_FLOOR: string;
							ROOF_COMPLETE_FLOOR: string;
							ROOF_DUEL: string;
							ROOF_FAST: string;
							ROOF_LUCK: string;
							ROOF_MASTER: string;
							ROOF_ONEWAY: string;
							ROOF_WON: string;
							RUNE_RUN_FTUE_NOOT_0: string;
							RUNE_RUN_FTUE_NOOT_1: string;
							RUNE_RUN_FTUE_NOOT_2: string;
							RUNE_RUN_MEMBER_LOCKED_BODY: string;
							RUNE_RUN_MEMBER_LOCKED_TITLE: string;
							RUNE_RUN_START_ERROR: string;
							RUNE_RUN_UNAVAILABLE_ERROR: string;
							SCREEN_SIZE_TITLE: string;
							SEASON_COMPLETED: string;
							SEASON_COMPLETED_TITLE: string;
							SEASON_DETAILS_CHALLENGE_BUTTON_CHALLENGER: string;
							SEASON_DETAILS_CHALLENGE_BUTTON_FIND: string;
							SEASON_DETAILS_EARN_BONUS: string;
							SEASON_DETAILS_NEXT_PRIZE: string;
							SEASON_DETAILS_POINTS: string;
							SEASON_DETAILS_POINTS_TITLE: string;
							SEASON_DETAILS_PRIZE_BUTTON: string;
							SEASON_DETAILS_REACH_TOP: string;
							SEASON_DETAILS_SEASON_ENDS: string;
							SEASON_DETAILS_TAB_BOTTOM: string;
							SEASON_DETAILS_TAB_TOP: string;
							SEASON_DETAILS_WEEKLY_EARNED: string;
							SEASON_NEXT_RANK: string;
							SEASON_TO_TOP: string;
							SEASON_TOP_PLAYERS: string;
							SEASON_YOUR_POINTS: string;
							SEASON_YOUR_RANK: string;
							SEASON_YOUR_RANK_TITLE: string;
							SECURE_BATTLE_WAITING_CAST_SPELL: string;
							SECURE_BATTLE_WAITING_GENERIC: string;
							SECURE_BATTLE_WAITING_SWITCHING: string;
							SECURE_BATTLE_WAITING_USE_ITEM: string;
							SEND_GIFT_FEATURE_SOON_MESSAGE_BODY: string;
							SEND_GIFT_FEATURE_SOON_MESSAGE_TITLE: string;
							SERVER_CHOOSE_WORLD_TITLE: string;
							SERVER_CONNECTING_MESSAGE: string;
							SERVER_ERROR_FAILED_LOAD: string;
							SERVER_ERROR_FALLBACK: string;
							SERVER_ERROR_WORLD_FULL: string;
							SERVER_ERROR_WORLD_SELECTED_FULL: string;
							SERVER_LOADING_LIST: string;
							SERVER_PICK_SAME_WORLD: string;
							SERVER_WIZARDS_ONLINE: string;
							SERVERS_BUTTON_BACK_TO_WORLDS: string;
							SERVERS_BUTTON_MORE_WORLDS: string;
							SERVERS_BUTTON_MY_WORLDS: string;
							SERVERS_BUTTON_PLAY_OFFLINE: string;
							SETTINGS_ACCOUNT: string;
							SETTINGS_GRAPHICS: string;
							SETTINGS_LOGOUT: string;
							SETTINGS_MUSIC_VOLUME: string;
							SETTINGS_NETWORK: string;
							SETTINGS_OFFLINE: string;
							SETTINGS_PARENT: string;
							SETTINGS_RESTORE_DEFAULTS: string;
							SETTINGS_SOUND: string;
							SETTINGS_SOUND_VOLUME: string;
							SETTINGS_TITLE: string;
							SETTINGS_VOICE_VOLUME: string;
							SETTINGS_YOUR_WORLD: string;
							SHIPWRECK_GUARDIAN: string;
							SHIVERCHILL_FURNACE_FUEL: string;
							SHIVERCHILL_FURNACE_IN_ORDER: string;
							SHIVERCHILL_FURNACE_LIT: string;
							SHIVERCHILL_GUARDIAN: string;
							SIGN_OUT_BUTTON: string;
							SIGN_OUT_MESSAGE: string;
							SIGN_OUT_TITLE: string;
							SIR_VEY_QUESTION_FOR_YOU: string;
							SKYWATCH_GUARDIAN: string;
							SKYWATCH_REQUIRE_FACTORY_KEY: string;
							SKYWATCH_REQUIRE_MASTER_KEY: string;
							SLOT_MACHINE_BONUS_DAMAGE: string;
							SLOT_MACHINE_BONUS_GOLD: string;
							SLOT_MACHINE_BONUS_STARS: string;
							SLOT_MACHINE_DRAIN: string;
							SLOT_MACHINE_EVASION_UP: string;
							SLOT_MACHINE_HEAL_HP: string;
							SLOT_MACHINE_REDUCE_DAMAGE: string;
							SNOWBALL_INSTRUCTIONS: string;
							SO_SLEEPY: string;
							SOCIAL_MENU_AWARDS_BUTTON_BOT: string;
							SOCIAL_MENU_BADGES_BUTTON_BOT: string;
							SOCIAL_MENU_BATTLE_REQUESTS_BUTTON_BOT: string;
							SOCIAL_MENU_BATTLE_REQUESTS_BUTTON_TOP: string;
							SOCIAL_MENU_BOUNTIES_BUTTON_BOT: string;
							SOCIAL_MENU_SEASON_CLASS_LEADERS_BOT: string;
							SOCIAL_MENU_SEASON_CLASS_LEADERS_TOP: string;
							SOCIAL_MENU_SEASON_DETAILS_BOT: string;
							SOCIAL_MENU_SEASON_DETAILS_TOP: string;
							SOCIAL_MENU_SEASON_LEADERS_BOT: string;
							SOCIAL_MENU_SEASON_LEADERS_TOP: string;
							SOUND_TITLE: string;
							SPELL: string;
							SPELLBOOK_DESCRIPTION: string;
							SPELLBOOK_TITLE: string;
							SPELLS: string;
							SPRINGFEST: string;
							SPRINGFEST_CONFIRM_TRAVEL: string;
							SPRINGFEST_SIGN_MESSAGE: string;
							SPRINGFEST_SIGN_TITLE: string;
							SS_APPEARS: string;
							SS_GOOD_AS_NEW: string;
							SS_LASTTHING: string;
							STARLIGHT_AD_BODY: string;
							STARLIGHT_AD_TITLE: string;
							STARLIGHT_CONFIRM_TRAVEL: string;
							STARLIGHT_MESSAGE_RETURN_LATER: string;
							STARLIGHT_ON_NOW: string;
							STARLIGHT_SIGN_MESSAGE: string;
							STARLIGHT_SIGN_TITLE: string;
							STARS: string;
							STARS_IN_JAR_COUNT: string;
							START_TRIAL: string;
							STARTUP_TITLE: string;
							STATS: string;
							Steve_Test_1: string;
							STORE_CLOSE_TIMER: string;
							STORE_CURRENCY_LOCKED: string;
							STORE_ELEMENT: string;
							STORE_HOT_HOT_THREADS: string;
							STORE_MACHINE_SHOP: string;
							STORE_NAME_CRYSTAL_CAFE: string;
							STORE_NAME_DYNO: string;
							STORE_NAME_FIREFLY: string;
							STORE_OCEAN_OUTFITTERS: string;
							STORE_OPEN_FAILED_MESSAGE: string;
							STORE_OPEN_FAILED_TITLE: string;
							STORE_OWN_ITEM: string;
							STORE_OWN_MULTIPLE: string;
							STORE_PROMPT_NEED_GOLD: string;
							STORE_PROMPT_UNLOCK_ALL: string;
							STORE_PROMPT_WELCOME: string;
							STORE_PROMPT_WELCOME_API: string;
							STORE_SKY_HIGH: string;
							STORE_SNOWDAY_SALES: string;
							STORE_SPELL_NAME: string;
							STORE_TOOLTIP_HEADER_3: string;
							STORE_TOOLTIP_HEADER_4: string;
							STORE_TOOLTIP_MESSAGE_0: string;
							STORE_TOOLTIP_MESSAGE_1: string;
							STORE_TOOLTIP_MESSAGE_2: string;
							STORE_TOOLTIP_MESSAGE_3: string;
							STORE_TOOLTIP_MESSAGE_4: string;
							STORE_TOOLTIP_MESSAGE_5: string;
							STORE_TOOLTIP_MESSAGE_6: string;
							STYLIST_BUY_LOOK: string;
							STYLIST_CHOOSE_EYE_COLOR: string;
							STYLIST_CHOOSE_HAIR_COLOR: string;
							STYLIST_CHOOSE_HAIR_STYLE: string;
							STYLIST_CONFIRM_MESSAGE_BODY: string;
							STYLIST_HAIR_COLOR: string;
							STYLIST_MESSAGE_NEED_MORE_GOLD_BODY: string;
							STYLIST_TITLE: string;
							SUMMARY_BATTLE_STARS_EARNED: string;
							SUMMARY_BATTLE_STARS_EARNED_SINGULAR: string;
							SUMMARY_POPUP_EVOLUTION: string;
							SUMMARY_POPUP_HEARTS_EARNED: string;
							SUMMARY_POPUP_NEW_HEARTS: string;
							SUMMARY_POPUP_NEW_SPELL: string;
							SUMMARY_POPUP_SPELL_EVOLVED: string;
							SUMMARY_POPUP_SPELL_UNLOCKED: string;
							SUMMERFEST_AD_BODY: string;
							SUMMERFEST_AD_TITLE: string;
							SUMMERFEST_CONFIRM_TRAVEL: string;
							SUMMERFEST_SIGN_MESSAGE: string;
							SUMMERFEST_SIGN_TITLE: string;
							SUN_WHEEL_PROMPT_SPIN: string;
							SURVEY_AT_HOME_QUESTION: string;
							SURVEY_BUTTON_DONE: string;
							SURVEY_COMPUTER_ANSWER: string;
							SURVEY_COMPUTER_TABLET_QUESTION: string;
							SURVEY_CREATIVE_1: string;
							SURVEY_CREATIVE_2: string;
							SURVEY_CREATIVE_3: string;
							SURVEY_CREATIVE_4: string;
							SURVEY_CREATIVE_Q: string;
							SURVEY_DEMO_A1: string;
							SURVEY_DEMO_A2: string;
							SURVEY_DEMO_QS: string;
							SURVEY_ENJOY_COLLECTING: string;
							SURVEY_ENJOY_CREATIVE: string;
							SURVEY_ENJOY_EVENTS: string;
							SURVEY_ENJOY_FRIENDS: string;
							SURVEY_ENJOY_HERO: string;
							SURVEY_ENJOY_Q: string;
							SURVEY_ENJOY_RARE: string;
							SURVEY_ENJOY_STORY: string;
							SURVEY_ENJOY_WINNING: string;
							SURVEY_GAME_1: string;
							SURVEY_GAME_2: string;
							SURVEY_GAME_3: string;
							SURVEY_GAME_4: string;
							SURVEY_GAME_Q: string;
							SURVEY_LIKE_TO_SEE_0_A0: string;
							SURVEY_LIKE_TO_SEE_0_A1: string;
							SURVEY_LIKE_TO_SEE_0_A2: string;
							SURVEY_LIKE_TO_SEE_0_A3: string;
							SURVEY_LIKE_TO_SEE_0_Q: string;
							SURVEY_MEMBERSHIP_ANSWER_1: string;
							SURVEY_MEMBERSHIP_ANSWER_2: string;
							SURVEY_MEMBERSHIP_ANSWER_3: string;
							SURVEY_MEMBERSHIP_ANSWER_MORE: string;
							SURVEY_MORE_OF_ANSWER_1: string;
							SURVEY_MORE_OF_ANSWER_2: string;
							SURVEY_MORE_OF_ANSWER_3: string;
							SURVEY_MORE_OF_ANSWER_4: string;
							SURVEY_MOTIVATIONS_1: string;
							SURVEY_MOTIVATIONS_2: string;
							SURVEY_MOTIVATIONS_3: string;
							SURVEY_MOTIVATIONS_4: string;
							SURVEY_MOTIVATIONS_5: string;
							SURVEY_NO: string;
							SURVEY_TABLET_ANSWER: string;
							SURVEY_WANT_MORE_OF: string;
							SURVEY_WIZARD_QUESTION: string;
							SURVEY_YES: string;
							SURVEY_YES_EXCLAMATION: string;
							SYSTEM_BUTTON_FULLSCREEN: string;
							SYSTEM_BUTTON_FULLSCREEN_ENTER: string;
							SYSTEM_BUTTON_FULLSCREEN_EXIT: string;
							SYSTEM_BUTTON_FULLSCREEN_SHORT: string;
							SYSTEM_BUTTON_LARGE_SCREEN: string;
							SYSTEM_BUTTON_MEDIUM_SCREEN: string;
							SYSTEM_BUTTON_SMALL_SCREEN: string;
							TEAM_MUST_HAVE_A_LEADER: string;
							TEAM_TITAN_BATTLE: string;
							TECH_COMPLETED: string;
							TECH_START_0: string;
							TECH_START_1: string;
							TEXTAREA_CHARACTERS: string;
							TEXTBOX_TITLE_CLASS_CODE: string;
							TEXTBOX_TITLE_FIRST_NAME: string;
							TEXTBOX_TITLE_LAST_NAME: string;
							TEXTBOX_TITLE_LAST_NAME_INITIAL: string;
							TEXTBOX_TITLE_PARENT_EMAIL: string;
							TEXTBOX_TITLE_PASSWORD: string;
							TEXTBOX_TITLE_REENTER_PASSWORD: string;
							TEXTBOX_TITLE_USERNAME: string;
							THE_ANCIENT: string;
							THE_PUMPKIN_FESTIVAL: string;
							THE_STARLIGHT_FESTIVAL: string;
							THE_SUMMERFEST_FESTIVAL: string;
							TIMER_FORMAT: string;
							TIMER_FORMAT_DAYS: string;
							TITAN_DEFEATED_MESSAGE: string;
							TITAN_DEFEATED_TITLE: string;
							TITAN_HEARTS: string;
							TITAN_INACTIVE: string;
							TITAN_NAME: string;
							TITLE_LOGIN: string;
							TOKEN_EXPIRE_MESSAGE: string;
							TOWER_ALL_DEFEATED: string;
							TOWER_CHANCE_DAMAGE_INCREASED: string;
							TOWER_CHANCE_DAMAGE_REDUCED: string;
							TOWER_CHANCE_DISABLE_SWITCHING: string;
							TOWER_CHANCE_DOUBLE_STARS: string;
							TOWER_CHANCE_GAIN_HEARTS: string;
							TOWER_CHANCE_LOSE_HEARTS: string;
							TOWER_CHANCE_WHEEL: string;
							TOWER_ENTRANCE_LOCKOUT_TITLE: string;
							TOWER_ENTRANCE_WELCOME: string;
							TOWER_EXIT_CONTENT: string;
							TOWER_EXIT_FLORIAN: string;
							TOWER_EXIT_PAGES: string;
							TOWER_EXIT_TITLE: string;
							TOWER_EXIT_TO_CR: string;
							TOWER_EXIT_TO_FLOOR: string;
							TOWER_EXIT_WARNING: string;
							TOWER_EXIT_WARNING_COLLECTED: string;
							TOWER_NEXT_CHALLENGER: string;
							TOWER_PRIZES_MESSAGE: string;
							TOWER_PRIZES_TITLE: string;
							TOWER_PROMPT_COMPLETE_LEAVE: string;
							TOWER_PROMPT_LEAVE: string;
							TOWER_PROMPT_MUST_DEFEAT: string;
							TOWER_PROMPT_START: string;
							TOWER_PROMPT_START_GOLD: string;
							TOWER_TOWN_AD_BODY: string;
							TOWER_TOWN_AD_TITLE: string;
							TOWER_TOWN_GO_BUTTON: string;
							TOWER_TOWN_GO_POPUP: string;
							TOWER_TOWN_MAP: string;
							TOWER_TOWN_MAP_DESC: string;
							TOWER_TOWN_REDIRECT: string;
							TOWER_TOWN_TUTORIAL_MAP: string;
							TOY_UNLOCK_JOINED: string;
							TOY_UNLOCK_USE: string;
							TRAVEL_TO_CRYSTAL_CAVERNS: string;
							TRAVEL_TO_HARMONY_ISLAND: string;
							TRAVEL_TO_TOWER_TOWN: string;
							TRIAL_MEMBERSHIP_AUTO_BODY: string;
							TRIAL_MEMBERSHIP_AUTO_FOOTER: string;
							TRIAL_MEMBERSHIP_AUTO_LEVEL: string;
							TRIAL_MEMBERSHIP_AUTO_TITLE: string;
							TRIAL_MEMBERSHIP_SUCESS_BODY: string;
							TRIAL_MEMBERSHIP_SUCESS_TITLE: string;
							TRY_LUCKY_LOOT_AGAIN: string;
							TT_BUSTLING_VILLAGE: string;
							TT_CHOOSE_FLOOR_QUIT_BODY: string;
							TT_CHOOSE_FLOOR_TITLE: string;
							TT_FINISH_TOWER_FIRST: string;
							TT_FINISH_TOWER_ON_ADD: string;
							TT_FLOATLINGS_NEED_REST: string;
							TT_FTUE_BLOCK_PLACED: string;
							TT_FTUE_CAST_SPELLS: string;
							TT_FTUE_CHOOSE_FLOOR: string;
							TT_FTUE_CLICK_BUTTON: string;
							TT_FTUE_FLOATLINGS_RETURNING: string;
							TT_FTUE_LOOK_FLOOR: string;
							TT_FTUE_PM_WELCOME: string;
							TT_FTUE_PM_WELCOME_2: string;
							TT_FTUE_PM_WELCOME_3: string;
							TT_FTUE_START_BUILDING: string;
							TT_FTUE_SW_CAN_BUILD_NEXT_FLOOR: string;
							TT_FTUE_SW_SHOW: string;
							TT_FTUE_SW_THANK_GOODNESS: string;
							TT_FTUE_SW_WELCOME: string;
							TT_FTUE_SWOOPY_BUILDING_BASICS: string;
							TT_FTUE_SWOOPY_DONE: string;
							TT_FTUE_SWOOPY_FLOATLING_TYPES: string;
							TT_FTUE_SWOOPY_HELP: string;
							TT_FTUE_SWOOPY_LUMIN_TREES: string;
							TT_FTUE_SWOOPY_TRAVELS: string;
							TT_FTUE_SWOOPY_WEAKENED_PUPPETMASTER: string;
							TT_FTUE_TUTORIAL: string;
							TT_FTUE_WORK_BUILDING: string;
							TT_FTUR_SWOOPY_SHOW: string;
							TT_I_ALMOST_FORGOT: string;
							TT_INFINITY_TOWER_CLOSED: string;
							TT_INFINITY_TOWER_OPEN: string;
							TT_INFINITY_TOWER_OPEN_BODY: string;
							TT_MOVE_FIRST_FLOOR: string;
							TT_MOVE_FLOOR_BLOCKED: string;
							TT_MOVE_FLOOR_BOTTOM_ONLY_BACK: string;
							TT_MOVE_FLOOR_HEADER: string;
							TT_MOVE_FLOOR_MINIMUM_WARNING: string;
							TT_MOVE_FLOOR_NEXT_TALL: string;
							TT_MOVE_FLOOR_PREV_TALL: string;
							TT_MOVE_FLOOR_TOP_BOTTOM_ONLY: string;
							TT_MOVE_FLOOR_TOP_ONLY_FORWARD: string;
							TT_NEW_DESIGN: string;
							TT_NEXT_TIME_YOU_BUILD: string;
							TT_ROOFTOP_ASSIGNMENT: string;
							TT_ROOMMATES: string;
							TT_SHROUD_QUIT_CONFIRM_BODY: string;
							TT_SHROUD_TUTORIAL_DIALOGUE_1: string;
							TT_SHROUD_TUTORIAL_DIALOGUE_2: string;
							TT_SHROUD_TUTORIAL_DIALOGUE_3: string;
							TT_SHROUD_TUTORIAL_DIALOGUE_4: string;
							TT_START_BUILDING: string;
							TT_STUBBORN_SHADOW_QUIT_BODY: string;
							TT_SW_THINGS_CHANGED: string;
							TT_TOOLTIP_FLOOR_COMPLETE: string;
							TT_TOWER_CLOSED_BODY: string;
							TT_TOWER_CLOSED_FOOTER: string;
							TT_TOWER_CLOSED_LINK: string;
							TT_TOWER_CLOSED_LINKTXT: string;
							TT_TOWER_TOWN_OPEN: string;
							TT_TOWER_WORK_DONE: string;
							TT_UPDATE_BLOCKS_BUILT: string;
							TT_UPDATE_FLOORS_MADE: string;
							TT_UPDATE_SHROUDS_CLEARED: string;
							TWILIGHT_WHEEL: string;
							TWILIGHT_WHEEL_COME_BACK_LATER: string;
							TWILIGHT_WHEEL_COME_BACK_TOMORROW: string;
							TWILIGHT_WHEEL_POPUP_BODY: string;
							TWILIGHT_WHEEL_POPUP_TITLE: string;
							TWILIGHT_WHEEL_SPIN: string;
							TWILIGHT_WHEEL_SPIN_AGAIN: string;
							TWILIGHT_WHEEL_WATCH_SPIN: string;
							UI_FEED_All: string;
							UI_FEED_BECOME_A_MEMBER: string;
							UI_FEED_CAUGHT_UP: string;
							UI_FEED_CHECK_OUT: string;
							UI_FEED_EVENTS: string;
							UI_FEED_FRIEND: string;
							UI_FEED_LASTNIGHT: string;
							UI_FEED_ME: string;
							UI_FEED_MY_SHARES: string;
							UI_FEED_NAME_AT_LOCATION: string;
							UI_FEED_NO_SHARES: string;
							UI_FEED_NO_TODAY: string;
							UI_FEED_OLD: string;
							UI_FEED_SHARE: string;
							UI_FEED_SHARE_FRIENDS: string;
							UI_FEED_SHARED: string;
							UI_FEED_TITLE: string;
							UI_FEED_TODAY: string;
							UI_MAIL_CHECK_IT_OUT: string;
							UI_MAIL_NO_MAIL: string;
							UI_MAIL_WELCOME: string;
							UI_MAIL_YOUR_MAIL: string;
							UI_NO_FEED_ALL: string;
							UI_NO_FEED_FRIENDS: string;
							UI_NO_FEED_ME: string;
							UI_PVP_1000_POINTS: string;
							UI_PVP_COOL_ARMOR: string;
							UI_PVP_GRAND_PRIZE: string;
							UI_PVP_PRIZES: string;
							UI_PVP_PRIZES_DESC: string;
							UI_RESULTS_TITLE: string;
							UI_TAXI_PAY_HALF: string;
							UI_TAXI_REGULAR_FARE: string;
							UI_TITAN_APPEAR_INFO: string;
							UI_TITAN_BATTLES_INFO: string;
							UI_TITAN_REWARDS_TITLE: string;
							UI_TITAN_SHARDS_INFO: string;
							UI_ZONE_BONFIRE_SPIRE: string;
							UI_ZONE_CHECK_BACK: string;
							UI_ZONE_FIREFLY_FOREST: string;
							UI_ZONE_NO_CLASSMATES: string;
							UI_ZONE_NO_FRIENDS: string;
							UI_ZONE_PLAY: string;
							UI_ZONE_SHIPWRECK_SHORE: string;
							UI_ZONE_SHIVERCHILL: string;
							UI_ZONE_SKYWATCH: string;
							UNLOCKS_AT_LEVEL: string;
							VOICE_VOLUME_LABEL: string;
							VOLUME_OFF: string;
							WARNING: string;
							WARNING_DEVICE_PERFORMANCE: string;
							WARNING_DEVICE_PERFORMANCE_CRYSTAL_CAVERNS: string;
							WATCH: string;
							WATCH_VIDEO: string;
							WATER_BALLOON_INSTRUCTIONS: string;
							WEEKDAY_NAME_0: string;
							WEEKDAY_NAME_1: string;
							WEEKDAY_NAME_2: string;
							WEEKDAY_NAME_3: string;
							WEEKDAY_NAME_4: string;
							WEEKDAY_NAME_5: string;
							WEEKDAY_NAME_6: string;
							WEEKDAY_NAME_TODAY: string;
							WEEKDAY_NAME_TOMORROW: string;
							WHEEL: string;
							WHEEL_OF_SUN: string;
							WHEEL_OF_WONDER: string;
							WHEN_MOST_ENJOY: string;
							WINTERFEST: string;
							WINTERFEST_AD_BODY: string;
							WINTERFEST_AD_TITLE: string;
							WINTERFEST_CONFIRM_TRAVEL: string;
							WINTERFEST_SIGN_MESSAGE: string;
							WINTERFEST_SIGN_TITLE: string;
							WIZARD_LEVEL: string;
							WIZARD_LEVELS: string;
							WONDER_WHEEL_PROMPT_SPIN: string;
							WONDER_WHEEL_SPIN: string;
							WONDER_WHEEL_SPIN_AGAIN: string;
							WONDER_WHEEL_SPIN_TOMORROW: string;
							WONDER_WHEEL_TICKET: string;
							WORLD_BONFIRE_SPIRE: string;
							WORLD_BONFIRE_SPIRE_DESC: string;
							WORLD_DARK_TOWER: string;
							WORLD_DARK_TOWER_DESC: string;
							WORLD_DYNO_DIG_OASIS: string;
							WORLD_DYNO_DIG_OASIS_CLASS_MODE: string;
							WORLD_DYNO_DIG_OASIS_DESC: string;
							WORLD_ELEMENTAL_GUARDIAN: string;
							WORLD_ELEMENTAL_GUARDIAN_DESC: string;
							WORLD_EPICS_SUBSPACE: string;
							WORLD_EPICS_SUBSPACE_DESC: string;
							WORLD_FIREFLY_FOREST: string;
							WORLD_FIREFLY_FOREST_DESC: string;
							WORLD_INFO_PLAY_TOGETHER: string;
							WORLD_INFO_TITLE: string;
							WORLD_INFO_YOU_ARE_IN: string;
							WORLD_LABEL: string;
							WORLD_LAMPLIGHT_TOWN: string;
							WORLD_LAMPLIGHT_TOWN_CLASS_MODE: string;
							WORLD_LAMPLIGHT_TOWN_DESC: string;
							WORLD_LOST_ISLAND: string;
							WORLD_LOST_ISLAND_DESC: string;
							WORLD_MAP_ACADEMY_LEVEL_LOCKED: string;
							WORLD_MAP_BONFIRE_QUEST_0: string;
							WORLD_MAP_BONFIRE_QUEST_1: string;
							WORLD_MAP_BONFIRE_QUEST_10: string;
							WORLD_MAP_BONFIRE_QUEST_11: string;
							WORLD_MAP_BONFIRE_QUEST_12: string;
							WORLD_MAP_BONFIRE_QUEST_13: string;
							WORLD_MAP_BONFIRE_QUEST_2: string;
							WORLD_MAP_BONFIRE_QUEST_3: string;
							WORLD_MAP_BONFIRE_QUEST_4: string;
							WORLD_MAP_BONFIRE_QUEST_5: string;
							WORLD_MAP_BONFIRE_QUEST_6: string;
							WORLD_MAP_BONFIRE_QUEST_7: string;
							WORLD_MAP_BONFIRE_QUEST_8: string;
							WORLD_MAP_BONFIRE_QUEST_9: string;
							WORLD_MAP_CONFIRM_TRAVEL: string;
							WORLD_MAP_DARK_TOWER_LEVEL_LOCKED: string;
							WORLD_MAP_FOREST_QUEST_0: string;
							WORLD_MAP_FOREST_QUEST_1: string;
							WORLD_MAP_FOREST_QUEST_10: string;
							WORLD_MAP_FOREST_QUEST_11: string;
							WORLD_MAP_FOREST_QUEST_2: string;
							WORLD_MAP_FOREST_QUEST_3: string;
							WORLD_MAP_FOREST_QUEST_4: string;
							WORLD_MAP_FOREST_QUEST_5: string;
							WORLD_MAP_FOREST_QUEST_6: string;
							WORLD_MAP_FOREST_QUEST_7: string;
							WORLD_MAP_FOREST_QUEST_8: string;
							WORLD_MAP_FOREST_QUEST_9: string;
							WORLD_MAP_SHIPWRECK_QUEST_0: string;
							WORLD_MAP_SHIPWRECK_QUEST_1: string;
							WORLD_MAP_SHIPWRECK_QUEST_10: string;
							WORLD_MAP_SHIPWRECK_QUEST_2: string;
							WORLD_MAP_SHIPWRECK_QUEST_3: string;
							WORLD_MAP_SHIPWRECK_QUEST_4: string;
							WORLD_MAP_SHIPWRECK_QUEST_5: string;
							WORLD_MAP_SHIPWRECK_QUEST_6: string;
							WORLD_MAP_SHIPWRECK_QUEST_7: string;
							WORLD_MAP_SHIPWRECK_QUEST_8: string;
							WORLD_MAP_SHIPWRECK_QUEST_9: string;
							WORLD_MAP_SHIVERCHILL_QUEST_0: string;
							WORLD_MAP_SHIVERCHILL_QUEST_1: string;
							WORLD_MAP_SHIVERCHILL_QUEST_10: string;
							WORLD_MAP_SHIVERCHILL_QUEST_11: string;
							WORLD_MAP_SHIVERCHILL_QUEST_12: string;
							WORLD_MAP_SHIVERCHILL_QUEST_13: string;
							WORLD_MAP_SHIVERCHILL_QUEST_14: string;
							WORLD_MAP_SHIVERCHILL_QUEST_2: string;
							WORLD_MAP_SHIVERCHILL_QUEST_3: string;
							WORLD_MAP_SHIVERCHILL_QUEST_4: string;
							WORLD_MAP_SHIVERCHILL_QUEST_5: string;
							WORLD_MAP_SHIVERCHILL_QUEST_6: string;
							WORLD_MAP_SHIVERCHILL_QUEST_7: string;
							WORLD_MAP_SHIVERCHILL_QUEST_8: string;
							WORLD_MAP_SHIVERCHILL_QUEST_9: string;
							WORLD_MAP_SKYWATCH_QUEST_0: string;
							WORLD_MAP_SKYWATCH_QUEST_1: string;
							WORLD_MAP_SKYWATCH_QUEST_10: string;
							WORLD_MAP_SKYWATCH_QUEST_11: string;
							WORLD_MAP_SKYWATCH_QUEST_12: string;
							WORLD_MAP_SKYWATCH_QUEST_2: string;
							WORLD_MAP_SKYWATCH_QUEST_3: string;
							WORLD_MAP_SKYWATCH_QUEST_4: string;
							WORLD_MAP_SKYWATCH_QUEST_5: string;
							WORLD_MAP_SKYWATCH_QUEST_6: string;
							WORLD_MAP_SKYWATCH_QUEST_7: string;
							WORLD_MAP_SKYWATCH_QUEST_8: string;
							WORLD_MAP_SKYWATCH_QUEST_9: string;
							WORLD_MAP_TITLE: string;
							WORLD_MAP_ZONE_LEVEL_LOCKED: string;
							WORLD_MAP_ZONE_LOCKED: string;
							WORLD_OFFLINE_TEXT_1: string;
							WORLD_OFFLINE_TEXT_2: string;
							WORLD_SHIPWRECK_SHORE: string;
							WORLD_SHIPWRECK_SHORE_DESC: string;
							WORLD_SHIVERCHILL_MOUNTAINS: string;
							WORLD_SHIVERCHILL_MOUNTAINS_DESC: string;
							WORLD_SKYWATCH: string;
							WORLD_SKYWATCH_DESC: string;
							WORLD_SPRINGFEST_CLASS_MODE: string;
							WORLD_THE_ACADEMY: string;
							WORLD_THE_ACADEMY_DESC: string;
							WORLD_YOUR_HOUSE: string;
							WORLD_YOUR_HOUSE_CLASS_MODE: string;
							WORLD_YOUR_HOUSE_DESC: string;
							WORLDMAP_HARMONY_GO_BUTTON: string;
							WORLDMAP_HARMONY_LOCK_TITLE: string;
							WORLDMAP_HARMONY_LOCKED: string;
							WORLDMAP_HARMONY_UNLOCKED: string;
							WORTH: string;
							WRONG_USERNAME_PASSWORD: string;
							YOU_GOT_A_REWARD: string;
							YOU_GOT_AN_REWARD: string;
							YOUR_ACCOUNT_LABEL: string;
							YOUR_TEAM: string;
							YOUTUBE_DISABLED_MESSAGE: string;
						};
					};
				};
				_menus: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_menus"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_menus"];
						GameObject: Instance["_game"]["_state"]["_current"]["_menus"];
						group: Instance["_game"]["_state"]["_current"]["_menus"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_menus"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_menus"]["_legacyTransform"]["onDestroy"];
					};
					_parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
					children: Instance["_game"]["_state"]["_current"]["_menus"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_menus"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_menus"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_menus"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				_metricsManager: {
					_supportsWasm: boolean;
					crashedLastLogin: boolean;
					_averageDownloadSpeed: number;
					_networkRequestCount: number;
					_totalAssetDownloadSize: number;
					_totalAssetDownloadTime: number;
					_totalAssetsDownloaded: number;
					timeInLoadingMS: number;
					timeToPlayMS: number;
					_renderType: string;
					crashedLastTime: string;
					renderType: string;
					assetDownloaded(t: unknown, i: unknown): void;
					checkForCrash(): void;
					createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
					getCustomMetrics(): unknown;
					getLastGameSessionStartTime(): unknown;
					increaseNetworkRequestCount(): void;
					objectCreated(t: unknown): void;
					objectDestroyed(t: unknown): void;
					sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
					setInBattle(t: unknown): void;
					setLastGameSessionStartTime(t: unknown): void;
					setLastMapLoadStarted(t: unknown): void;
					deviceInfoProvider: {
						getConnection(): unknown;
						getConnectionDownlinkSpeed(): unknown;
						getConnectionEffectiveType(): unknown;
						getConnectionRTT(): unknown;
						getConnectionType(): unknown;
						getDeviceMemory(): unknown;
						getHardwareConcurrency(): unknown;
						getJSHeapSizeLimit(): unknown;
						getPlatformName(): unknown;
						getScreenHeight(): unknown;
						getScreenWidth(): unknown;
						getUsedJSHeapSize(): unknown;
						isVideoAvailable(): unknown;
						isWebGLAvailable(): unknown;
						isWebSocketAvailable(): unknown;
						isWebWorkerAvailable(): unknown;
					};
					game: Instance["_game"];
					gameCompleteDataFactory: {
						buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown;
						create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown;
						getGame(): unknown;
						game: Instance["_game"];
						gameEventDataBuilder: {
							buildEvent(t: unknown, i: unknown, n: unknown): unknown;
							setAnonymousToken(t: unknown): void;
							setAuthorizedToken(t: unknown, i: unknown): void;
							_sessionTokenAuthProvider: unknown /* too deep */;
							deviceInfo: unknown /* too deep */;
							game: Instance["_game"];
							loggedInPlayer: unknown /* too deep */;
							timeManager: unknown /* too deep */;
							uuidProvider: unknown /* too deep */;
						};
					};
					loadingMetricProperties: never[];
					objectCountProperties: never[];
				};
				_opaque: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_opaque"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_opaque"];
						GameObject: Instance["_game"]["_state"]["_current"]["_opaque"];
						group: Instance["_game"]["_state"]["_current"]["_opaque"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_opaque"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_opaque"]["_legacyTransform"]["onDestroy"];
					};
					_parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
					children: Instance["_game"]["_state"]["_current"]["_opaque"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_opaque"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_opaque"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_opaque"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				_overlay: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_overlay"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_overlay"];
						GameObject: Instance["_game"]["_state"]["_current"]["_overlay"];
						group: Instance["_game"]["_state"]["_current"]["_overlay"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_overlay"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_overlay"]["_legacyTransform"]["onDestroy"];
					};
					_parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
					children: Instance["_game"]["_state"]["_current"]["_overlay"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_overlay"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_overlay"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_overlay"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				_root: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				_uiLayer: {
					_isActive: boolean;
					_isActiveInHierarchy: boolean;
					active: boolean;
					activeInHierarchy: boolean;
					_layer: string;
					_name: string;
					layer: string;
					name: string;
					_transform: null;
					transform: null;
					activeInHierarchyChanged(): void;
					addChild(t: unknown): void;
					addChildAt(t: unknown, i: unknown): void;
					addComponent(t: unknown, i: unknown): unknown;
					bringToFront(): void;
					destroy(): void;
					dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
					findChildByName(t: unknown): unknown;
					findComponent(t: unknown): unknown;
					findComponentInChildren(t: unknown, i: unknown): unknown;
					findComponentInParent(t: unknown, i: unknown): unknown;
					findComponents(t: unknown): unknown;
					findComponentsInChildren(t: unknown, i: unknown): unknown;
					getRenderOrder(): unknown;
					hasComponent(t: unknown): unknown;
					isActiveInHierarchy(): unknown;
					isInBack(): unknown;
					isInFront(): unknown;
					removeComponent(t: unknown): void;
					removeFromParent(): unknown;
					sendToBack(): void;
					setLayer(t: unknown, i: unknown): void;
					setParent(t: unknown, i: unknown): unknown;
					setRenderOrder(t: unknown): void;
					update(): void;
					_children: never[];
					_components: unknown /* too deep */[];
					_legacyTransform: {
						_isCreated: boolean;
						Active: boolean;
						isActive: boolean;
						IsActiveInHierarchy: boolean;
						isCreated: boolean;
						roundRelativeValues: boolean;
						RoundRelativeValues: boolean;
						anchorX: number;
						anchorY: number;
						height: number;
						relativeHeight: number;
						relativeWidth: number;
						relativeX: number;
						relativeY: number;
						roundedHeight: number;
						roundedWidth: number;
						roundedX: number;
						roundedY: number;
						scaleX: number;
						scaleY: number;
						width: number;
						x: number;
						y: number;
						cachedRelativeHeight: null;
						cachedRelativeWidth: null;
						cachedRelativeX: null;
						cachedRelativeY: null;
						dimensionPlaceholder: null;
						create(): void;
						customDeserialize(t: unknown): void;
						destroy(): void;
						onDisable(): void;
						onEnable(): void;
						postCreate(): void;
						postDeserialize(): void;
						reapplyChildRelativeValues(): void;
						update(): void;
						updateGroupVisibility(): void;
						updateParentGroup(): void;
						updatePivotXFromAnchorX(): void;
						updatePivotYFromAnchorY(): void;
						_group: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							gameObjectRef: Instance["_game"]["_state"]["_current"]["_uiLayer"];
							localTransform: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							parent: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						anchor: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						gameObject: Instance["_game"]["_state"]["_current"]["_uiLayer"];
						GameObject: Instance["_game"]["_state"]["_current"]["_uiLayer"];
						group: Instance["_game"]["_state"]["_current"]["_uiLayer"]["_legacyTransform"]["_group"];
						onActiveChanged: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnActiveChanged: Instance["_game"]["_state"]["_current"]["_uiLayer"]["_legacyTransform"]["onActiveChanged"];
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						OnDestroy: Instance["_game"]["_state"]["_current"]["_uiLayer"]["_legacyTransform"]["onDestroy"];
					};
					_parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
					children: Instance["_game"]["_state"]["_current"]["_uiLayer"]["_children"];
					components: Instance["_game"]["_state"]["_current"]["_uiLayer"]["_components"];
					legacyTransform: Instance["_game"]["_state"]["_current"]["_uiLayer"]["_legacyTransform"];
					onActiveChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onActiveChanged"]["_bindings"];
					};
					onActiveInHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onActiveInHierarchyChanged"]["_bindings"];
					};
					onChildAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onChildAdded"]["_bindings"];
					};
					onChildRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onChildRemoved"]["_bindings"];
					};
					onComponentAdded: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onComponentAdded"]["_bindings"];
					};
					onComponentAddedToHierarchy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onComponentAddedToHierarchy"]["_bindings"];
					};
					onComponentRemoved: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onComponentRemoved"]["_bindings"];
					};
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onDestroy"]["_bindings"];
					};
					onHierarchyChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onHierarchyChanged"]["_bindings"];
					};
					onLayerChanged: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["_uiLayer"]["onLayerChanged"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_parent"];
				};
				add: Instance["_game"]["_add"];
				assets: string[];
				background: Instance["_game"]["_state"]["_current"]["_background"]["_legacyTransform"]["_group"];
				backgroundGameObject: Instance["_game"]["_state"]["_current"]["_background"];
				content: Instance["_game"]["_state"]["_current"]["_content"]["_legacyTransform"]["_group"];
				contentA: {
					_accessibleActive: boolean;
					_cacheAsBitmap: boolean;
					_destroyed: boolean;
					accessible: boolean;
					accessibleChildren: boolean;
					buttonMode: boolean;
					cacheAsBitmap: boolean;
					exists: boolean;
					fixedToCamera: boolean;
					interactive: boolean;
					interactiveChildren: boolean;
					isMask: boolean;
					isSprite: boolean;
					pendingDestroy: boolean;
					renderable: boolean;
					sortableChildren: boolean;
					sortDirty: boolean;
					visible: boolean;
					worldVisible: boolean;
					_boundsID: number;
					_eventsCount: number;
					_lastSortedIndex: number;
					_zIndex: number;
					alpha: number;
					angle: number;
					bottom: number;
					centerX: number;
					centerY: number;
					height: number;
					left: number;
					length: number;
					offsetX: number;
					offsetY: number;
					renderId: number;
					right: number;
					rotation: number;
					tabIndex: number;
					top: number;
					totalHeight: number;
					totalWidth: number;
					width: number;
					worldAlpha: number;
					worldRotation: number;
					x: number;
					y: number;
					z: number;
					zIndex: number;
					_sortProperty: string;
					accessiblePointerEvents: string;
					accessibleType: string;
					name: string;
					_accessibleDiv: null;
					_boundsRect: null;
					_cacheData: null;
					_element: null;
					_enabledFilters: null;
					_mask: null;
					accessibleHint: null;
					accessibleTitle: null;
					cursor: null;
					filterArea: null;
					filters: null;
					hitArea: null;
					mask: null;
					onDown: null;
					_cacheAsBitmapDestroy(t: unknown): void;
					_calculateBounds(): void;
					_calculateCachedBounds(): void;
					_destroyCachedDisplayObject(): void;
					_getCachedLocalBounds(): unknown;
					_initCachedDisplayObject(t: unknown): void;
					_initCachedDisplayObjectCanvas(t: unknown): void;
					_recursivePostUpdateTransform(): void;
					_render(t: unknown): void;
					_renderCached(t: unknown): void;
					_renderCachedCanvas(t: unknown): void;
					_renderCanvas(t: unknown): void;
					_renderWebGL(t: unknown): void;
					add(t: unknown, i: unknown): unknown;
					addAt(t: unknown, i: unknown): unknown;
					addChild(): unknown;
					addChildAt(t: unknown, e: unknown): unknown;
					addElementClass(t: unknown): void;
					addListener(t: unknown, e: unknown, r: unknown): unknown;
					ascendingSortHandler(t: unknown, i: unknown): unknown;
					bringChildToTop(t: unknown): void;
					calculateBounds(): void;
					callAll(t: unknown, i: unknown): void;
					callbackFromArray(t: unknown, i: unknown): unknown;
					changePanel(t: unknown): void;
					containerUpdateTransform(): void;
					descendingSortHandler(t: unknown, i: unknown): unknown;
					destroy(i: unknown): void;
					disableTempParent(t: unknown): void;
					displayObjectUpdateTransform(): void;
					emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
					enableTempParent(): unknown;
					eventNames(): unknown;
					getAt(t: unknown): unknown;
					getAutomationSignature(): unknown;
					getBounds(t: unknown, e: unknown): unknown;
					getByName(t: unknown): unknown;
					getChildAt(t: unknown): unknown;
					getChildByName(t: unknown, e: unknown): unknown;
					getChildElements(): unknown;
					getChildIndex(t: unknown): unknown;
					getClassName(): unknown;
					getElement(): unknown;
					getGlobalPosition(t: unknown, e: unknown): unknown;
					getIndex(t: unknown): unknown;
					getInjectedValue(t: unknown): unknown;
					getLocalBounds(e: unknown, r: unknown): unknown;
					hasTooltip(): unknown;
					highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
					isHighlighted(): unknown;
					iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
					listenerCount(t: unknown): unknown;
					listeners(t: unknown): unknown;
					moveDown(t: unknown): unknown;
					moveUp(t: unknown): unknown;
					off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					on(t: unknown, e: unknown, r: unknown): unknown;
					once(t: unknown, e: unknown, r: unknown): unknown;
					onChildrenChange(t: unknown): void;
					onGetUIElement(t: unknown): unknown;
					registerGetElementListener(): void;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					removeAllListeners(t: unknown): unknown;
					removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
					removeChild(): unknown;
					removeChildAt(t: unknown): unknown;
					removeChildren(t: unknown, e: unknown): unknown;
					removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					render(t: unknown): void;
					renderAdvanced(t: unknown): void;
					renderAdvancedWebGL(t: unknown): void;
					renderCanvas(t: unknown): void;
					renderWebGL(t: unknown): void;
					sendChildToBack(t: unknown): void;
					setChildIndex(t: unknown, e: unknown): void;
					setClickable(t: unknown, i: unknown, n: unknown, e: unknown): void;
					setParent(t: unknown): unknown;
					setRenderState(t: unknown, i: unknown): void;
					setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
					shouldCreateAndStageElement(): unknown;
					showTooltip(t: unknown, i: unknown): void;
					sort(t: unknown, i: unknown): void;
					sortChildren(): void;
					swap(t: unknown, i: unknown): void;
					swapChildren(t: unknown, e: unknown): void;
					toGlobal(t: unknown, e: unknown, r: unknown): unknown;
					toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
					unregisterGetElementListener(): void;
					update(): void;
					updateElementAttribute(t: unknown, i: unknown): void;
					updateElementAttributes(t: unknown): void;
					updateElementPosition(t: unknown, i: unknown): void;
					updateTransform(): void;
					updateZ(): void;
					_bounds: {
						maxX: number;
						maxY: number;
						minX: number;
						minY: number;
						updateID: number;
						rect: null;
						addBounds(t: unknown): void;
						addBoundsArea(t: unknown, e: unknown): void;
						addBoundsMask(t: unknown, e: unknown): void;
						addBoundsMatrix(t: unknown, e: unknown): void;
						addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						addPoint(t: unknown): void;
						addQuad(t: unknown): void;
						addVertexData(t: unknown, e: unknown, r: unknown): void;
						addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
						addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						clear(): void;
						getRectangle(t: unknown): unknown;
						isEmpty(): unknown;
						pad(t: unknown, e: unknown): void;
					};
					_events: {};
					_game: Instance["_game"];
					_localBounds: {
						maxX: number;
						maxY: number;
						minX: number;
						minY: number;
						updateID: number;
						rect: null;
						addBounds(t: unknown): void;
						addBoundsArea(t: unknown, e: unknown): void;
						addBoundsMask(t: unknown, e: unknown): void;
						addBoundsMatrix(t: unknown, e: unknown): void;
						addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						addPoint(t: unknown): void;
						addQuad(t: unknown): void;
						addVertexData(t: unknown, e: unknown, r: unknown): void;
						addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
						addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						clear(): void;
						getRectangle(t: unknown): unknown;
						isEmpty(): unknown;
						pad(t: unknown, e: unknown): void;
					};
					_localBoundsRect: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					_tempDisplayObjectParent: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						renderable: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_eventsCount: number;
						_lastSortedIndex: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						renderId: number;
						rotation: number;
						tabIndex: number;
						worldAlpha: number;
						x: number;
						y: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_localBoundsRect: null;
						_mask: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						name: null;
						parent: null;
						sortDirty: null;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_recursivePostUpdateTransform(): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						destroy(t: unknown): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						removeAllListeners(t: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						setParent(t: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						updateTransform(): void;
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_trackedPointers: {};
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						tempDisplayObjectParent: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
						trackedPointers: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"]["localTransform"];
							pivot: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"]["pivot"];
							position: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"]["position"];
							scale: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"]["scale"];
							skew: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					_trackedPointers: {};
					anchor: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					bounds: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					children: unknown /* too deep */[];
					events: {
						destroy(): void;
						onAddedToGroup: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onAnimationComplete: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onAnimationLoop: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onAnimationStart: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDragStart: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDragStop: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDragUpdate: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onEnterBounds: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputDown: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputOut: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputOver: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputUp: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onOutOfBounds: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onRemovedFromGroup: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onRemovedFromWorld: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						parent: Instance["_game"]["_state"]["_current"]["contentA"];
					};
					game: Instance["_game"];
					images: unknown /* too deep */[];
					localTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
					metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Instance["_game"]["_state"]["_current"]["contentA"]["onDestroy"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_content"]["_legacyTransform"]["_group"];
					pivot: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_state"]["_current"]["contentA"]["localTransform"];
							pivot: Instance["_game"]["_state"]["_current"]["contentA"]["pivot"];
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
					};
					position: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_state"]["_current"]["contentA"]["pivot"]["scope"];
					};
					scale: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_state"]["_current"]["contentA"]["pivot"]["scope"];
					};
					skew: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_state"]["_current"]["contentA"]["pivot"]["scope"];
					};
					stage: Instance["_game"]["_add"]["stage"];
					tempDisplayObjectParent: Instance["_game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"];
					trackedPointers: Instance["_game"]["_state"]["_current"]["contentA"]["_trackedPointers"];
					transform: Instance["_game"]["_state"]["_current"]["contentA"]["pivot"]["scope"];
					world: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					worldGamePosition: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					worldPosition: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					worldScale: Instance["_game"]["_state"]["_current"]["contentA"]["scale"];
					worldTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
				};
				contentGameObject: Instance["_game"]["_state"]["_current"]["_content"];
				dialogue: Instance["_game"]["_state"]["_current"]["_dialogue"]["_legacyTransform"]["_group"];
				foreground: Instance["_game"]["_state"]["_current"]["_foreground"]["_legacyTransform"]["_group"];
				foregroundGameObject: Instance["_game"]["_state"]["_current"]["_foreground"];
				game: Instance["_game"];
				input: Instance["_game"]["_input"];
				menus: Instance["_game"]["_state"]["_current"]["_menus"]["_legacyTransform"]["_group"];
				off: {
					_accessibleActive: boolean;
					_cacheAsBitmap: boolean;
					_destroyed: boolean;
					accessible: boolean;
					accessibleChildren: boolean;
					buttonMode: boolean;
					cacheAsBitmap: boolean;
					exists: boolean;
					fixedToCamera: boolean;
					interactive: boolean;
					interactiveChildren: boolean;
					isActive: boolean;
					isMask: boolean;
					isSprite: boolean;
					pendingDestroy: boolean;
					renderable: boolean;
					selected: boolean;
					sortableChildren: boolean;
					sortDirty: boolean;
					visible: boolean;
					worldVisible: boolean;
					_boundsID: number;
					_eventsCount: number;
					_lastSortedIndex: number;
					_zIndex: number;
					alpha: number;
					angle: number;
					bottom: number;
					centerX: number;
					centerY: number;
					height: number;
					left: number;
					length: number;
					offsetX: number;
					offsetY: number;
					renderId: number;
					right: number;
					rotation: number;
					tabIndex: number;
					top: number;
					width: number;
					worldAlpha: number;
					worldRotation: number;
					x: number;
					y: number;
					z: number;
					zIndex: number;
					_sortProperty: string;
					accessiblePointerEvents: string;
					accessibleType: string;
					name: string;
					_accessibleDiv: null;
					_boundsRect: null;
					_cacheData: null;
					_element: null;
					_enabledFilters: null;
					_mask: null;
					accessibleHint: null;
					accessibleTitle: null;
					cursor: null;
					filterArea: null;
					filters: null;
					hitArea: null;
					mask: null;
					iconSide: undefined;
					_cacheAsBitmapDestroy(t: unknown): void;
					_calculateBounds(): void;
					_calculateCachedBounds(): void;
					_destroyCachedDisplayObject(): void;
					_getCachedLocalBounds(): unknown;
					_initCachedDisplayObject(t: unknown): void;
					_initCachedDisplayObjectCanvas(t: unknown): void;
					_recursivePostUpdateTransform(): void;
					_render(t: unknown): void;
					_renderCached(t: unknown): void;
					_renderCachedCanvas(t: unknown): void;
					_renderCanvas(t: unknown): void;
					_renderWebGL(t: unknown): void;
					add(t: unknown, i: unknown): unknown;
					addAt(t: unknown, i: unknown): unknown;
					addChild(): unknown;
					addChildAt(t: unknown, e: unknown): unknown;
					addElementClass(t: unknown): void;
					addListener(t: unknown, e: unknown, r: unknown): unknown;
					ascendingSortHandler(t: unknown, i: unknown): unknown;
					bringChildToTop(t: unknown): void;
					calculateBounds(): void;
					callAll(t: unknown, i: unknown): void;
					callback(): void;
					callbackFromArray(t: unknown, i: unknown): unknown;
					containerUpdateTransform(): void;
					descendingSortHandler(t: unknown, i: unknown): unknown;
					deselect(): void;
					destroy(i: unknown): void;
					disableTempParent(t: unknown): void;
					displayObjectUpdateTransform(): void;
					emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
					enableTempParent(): unknown;
					eventNames(): unknown;
					getAt(t: unknown): unknown;
					getAutomationSignature(): unknown;
					getBounds(t: unknown, e: unknown): unknown;
					getByName(t: unknown): unknown;
					getChildAt(t: unknown): unknown;
					getChildByName(t: unknown, e: unknown): unknown;
					getChildElements(): unknown;
					getChildIndex(t: unknown): unknown;
					getClassName(): unknown;
					getElement(): unknown;
					getGlobalPosition(t: unknown, e: unknown): unknown;
					getIndex(t: unknown): unknown;
					getInjectedValue(t: unknown): unknown;
					getLocalBounds(e: unknown, r: unknown): unknown;
					handleDestroy(): void;
					hasTooltip(): unknown;
					highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
					isHighlighted(): unknown;
					iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
					listenerCount(t: unknown): unknown;
					listeners(t: unknown): unknown;
					moveDown(t: unknown): unknown;
					moveUp(t: unknown): unknown;
					off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					on(t: unknown, e: unknown, r: unknown): unknown;
					once(t: unknown, e: unknown, r: unknown): unknown;
					onChildrenChange(t: unknown): void;
					onDebugAutoClick(t: unknown): void;
					onDown(): void;
					onGetUIElement(t: unknown): unknown;
					onOut(): void;
					onOver(): void;
					onUp(): void;
					registerGetElementListener(): void;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					removeAllListeners(t: unknown): unknown;
					removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
					removeChild(): unknown;
					removeChildAt(t: unknown): unknown;
					removeChildren(t: unknown, e: unknown): unknown;
					removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
					render(t: unknown): void;
					renderAdvanced(t: unknown): void;
					renderAdvancedWebGL(t: unknown): void;
					renderCanvas(t: unknown): void;
					renderWebGL(t: unknown): void;
					select(): void;
					sendChildToBack(t: unknown): void;
					setActive(): void;
					setChildIndex(t: unknown, e: unknown): void;
					setEnabled(t: unknown): void;
					setIcon(t: unknown): void;
					setInactive(): void;
					setParent(t: unknown): unknown;
					setRenderState(t: unknown, i: unknown): void;
					setText(t: unknown): void;
					setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
					shouldCreateAndStageElement(): unknown;
					showTooltip(t: unknown, i: unknown): void;
					sort(t: unknown, i: unknown): void;
					sortChildren(): void;
					swap(t: unknown, i: unknown): void;
					swapChildren(t: unknown, e: unknown): void;
					tintActive(): void;
					toGlobal(t: unknown, e: unknown, r: unknown): unknown;
					toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
					unregisterGetElementListener(): void;
					update(): void;
					updateElementAttribute(t: unknown, i: unknown): void;
					updateElementAttributes(t: unknown): void;
					updateElementPosition(t: unknown, i: unknown): void;
					updateTransform(): void;
					updateZ(): void;
					_bounds: {
						maxX: number;
						maxY: number;
						minX: number;
						minY: number;
						updateID: number;
						rect: null;
						addBounds(t: unknown): void;
						addBoundsArea(t: unknown, e: unknown): void;
						addBoundsMask(t: unknown, e: unknown): void;
						addBoundsMatrix(t: unknown, e: unknown): void;
						addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						addPoint(t: unknown): void;
						addQuad(t: unknown): void;
						addVertexData(t: unknown, e: unknown, r: unknown): void;
						addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
						addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						clear(): void;
						getRectangle(t: unknown): unknown;
						isEmpty(): unknown;
						pad(t: unknown, e: unknown): void;
					};
					_events: {};
					_game: Instance["_game"];
					_localBounds: {
						maxX: number;
						maxY: number;
						minX: number;
						minY: number;
						updateID: number;
						rect: null;
						addBounds(t: unknown): void;
						addBoundsArea(t: unknown, e: unknown): void;
						addBoundsMask(t: unknown, e: unknown): void;
						addBoundsMatrix(t: unknown, e: unknown): void;
						addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						addPoint(t: unknown): void;
						addQuad(t: unknown): void;
						addVertexData(t: unknown, e: unknown, r: unknown): void;
						addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
						addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
						clear(): void;
						getRectangle(t: unknown): unknown;
						isEmpty(): unknown;
						pad(t: unknown, e: unknown): void;
					};
					_localBoundsRect: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					_tempDisplayObjectParent: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						renderable: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_eventsCount: number;
						_lastSortedIndex: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						renderId: number;
						rotation: number;
						tabIndex: number;
						worldAlpha: number;
						x: number;
						y: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_localBoundsRect: null;
						_mask: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						name: null;
						parent: null;
						sortDirty: null;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_recursivePostUpdateTransform(): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						destroy(t: unknown): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						removeAllListeners(t: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						setParent(t: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						updateTransform(): void;
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_trackedPointers: {};
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						tempDisplayObjectParent: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
						trackedPointers: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"]["localTransform"];
							pivot: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"]["pivot"];
							position: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"]["position"];
							scale: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"]["scale"];
							skew: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					_trackedPointers: {};
					anchor: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					bg: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						_roundPixels: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						exists: boolean;
						fixedToCamera: boolean;
						inputEnabled: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isLoaded: boolean;
						isMask: boolean;
						isSprite: boolean;
						pendingDestroy: boolean;
						renderable: boolean;
						roundPixels: boolean;
						smoothed: boolean;
						sortableChildren: boolean;
						sortDirty: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_cachedTint: number;
						_eventsCount: number;
						_height: number;
						_lastSortedIndex: number;
						_textureID: number;
						_textureTrimmedID: number;
						_tint: number;
						_tintRGB: number;
						_transformID: number;
						_transformTrimmedID: number;
						_width: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						blendMode: number;
						bottom: number;
						cachedTint: number;
						centerX: number;
						centerY: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						renderId: number;
						right: number;
						rotation: number;
						tabIndex: number;
						tint: number;
						top: number;
						width: number;
						worldAlpha: number;
						worldRotation: number;
						x: number;
						y: number;
						z: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						frameName: string;
						key: string;
						pluginName: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_mask: null;
						_tintedCanvas: null;
						_tintedTexture: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						loadingTween: null;
						mask: null;
						name: null;
						scaleMax: null;
						scaleMin: null;
						tintedTexture: null;
						transformCallbackContext: null;
						vertexTrimmedData: null;
						forcedHeight: undefined;
						forcedWidth: undefined;
						frame: undefined;
						onTextureLoaded: undefined;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateBounds(): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_onAnchorUpdate(): void;
						_onTextureUpdate(): void;
						_recursivePostUpdateTransform(): void;
						_render(t: unknown): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						_renderCanvas(t: unknown): void;
						_renderWebGL(t: unknown): void;
						addChild(): unknown;
						addChildAt(t: unknown, e: unknown): unknown;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						bringChildToTop(t: unknown): void;
						calculateBounds(): void;
						calculateTrimmedVertices(): unknown;
						calculateVertices(): void;
						checkCallback(): void;
						checkSpriteDimension(): void;
						containerUpdateTransform(): void;
						containsPoint(t: unknown): unknown;
						destroy(): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getChildAt(t: unknown): unknown;
						getChildByName(t: unknown, e: unknown): unknown;
						getChildIndex(t: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void;
						loadTexture(t: unknown, i: unknown): void;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						onChildrenChange(t: unknown): void;
						onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
						removeAllListeners(t: unknown): unknown;
						removeChild(): unknown;
						removeChildAt(t: unknown): unknown;
						removeChildren(t: unknown, e: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						render(t: unknown): void;
						renderAdvanced(t: unknown): void;
						renderAdvancedWebGL(t: unknown): void;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						rotateMiddleBased(t: unknown): void;
						sendChildToBack(t: unknown): void;
						setActive(t: unknown): void;
						setChildIndex(t: unknown, e: unknown): void;
						setFrame(t: unknown): void;
						setParent(t: unknown): unknown;
						setTexture(t: unknown, i: unknown): void;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						sortChildren(): void;
						swapChildren(t: unknown, e: unknown): void;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						update(): void;
						updateFrame(i: unknown): void;
						updateTexture(t: unknown): void;
						updateTransform(): void;
						indices: Uint16Array;
						uvs: Float32Array;
						vertexData: Float32Array;
						_anchor: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Instance["_game"]["_state"]["_current"]["off"]["bg"];
						};
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_localBoundsRect: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_texture: {
							noFrame: boolean;
							valid: boolean;
							_eventsCount: number;
							_rotate: number;
							_updateID: number;
							height: number;
							resolution: number;
							rotate: number;
							width: number;
							patternCache: null;
							trim: null;
							uvMatrix: null;
							_updateUvs(): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							castToBaseTexture(): unknown;
							clone(): unknown;
							destroy(t: unknown): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							eventNames(): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							onBaseTextureUpdated(t: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							update(): void;
							updateUvs(): void;
							_events: unknown /* too deep */;
							_frame: unknown /* too deep */;
							_uvs: unknown /* too deep */;
							baseTexture: unknown /* too deep */;
							defaultAnchor: unknown /* too deep */;
							frame: unknown /* too deep */;
							orig: unknown /* too deep */;
							textureCacheIds: unknown /* too deep */;
							tintCache: unknown /* too deep */;
						};
						_trackedPointers: {};
						anchor: Instance["_game"]["_state"]["_current"]["off"]["bg"]["_anchor"];
						animations: never;
						bounds: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						cameraOffset: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						children: never[];
						events: {
							destroy(): void;
							onAddedToGroup: unknown /* too deep */;
							onAnimationComplete: unknown /* too deep */;
							onAnimationLoop: unknown /* too deep */;
							onAnimationStart: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							onDragStart: unknown /* too deep */;
							onDragStop: unknown /* too deep */;
							onDragUpdate: unknown /* too deep */;
							onEnterBounds: unknown /* too deep */;
							onInputDown: unknown /* too deep */;
							onInputOut: unknown /* too deep */;
							onInputOver: unknown /* too deep */;
							onInputUp: unknown /* too deep */;
							onOutOfBounds: unknown /* too deep */;
							onRemovedFromGroup: unknown /* too deep */;
							onRemovedFromWorld: unknown /* too deep */;
							parent: Instance["_game"]["_state"]["_current"]["off"]["bg"];
						};
						game: Instance["_game"];
						input: {
							_dragDistancePass: boolean;
							_dragPhase: boolean;
							_dragTimePass: boolean;
							_pendingDrag: boolean;
							_setHandCursor: boolean;
							_wasEnabled: boolean;
							allowHorizontalDrag: boolean;
							allowVerticalDrag: boolean;
							bringToTop: boolean;
							checked: boolean;
							dragFromCenter: boolean;
							draggable: boolean;
							dragStopBlocksInputUp: boolean;
							enabled: boolean;
							isDragged: boolean;
							snapOnDrag: boolean;
							snapOnRelease: boolean;
							useHandCursor: boolean;
							dragDistanceThreshold: number;
							dragTimeThreshold: number;
							priorityID: number;
							snapOffsetX: number;
							snapOffsetY: number;
							snapX: number;
							snapY: number;
							boundsRect: null;
							boundsSprite: null;
							_pointerOutHandler(t: unknown, i: unknown): void;
							_pointerOverHandler(t: unknown, i: unknown): void;
							_releasedHandler(t: unknown): void;
							_touchedHandler(t: unknown): unknown;
							addedToGroup(): void;
							checkBoundsRect(): void;
							checkBoundsSprite(): void;
							checkPointerDown(t: unknown): unknown;
							checkPointerOver(t: unknown, i: unknown): unknown;
							destroy(): void;
							disableDrag(): void;
							disableSnap(): void;
							downDuration(t: unknown): unknown;
							dragTimeElapsed(t: unknown): void;
							enableDrag(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							enableSnap(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
							globalToLocal(t: unknown): unknown;
							justOut(t: unknown, i: unknown): unknown;
							justOver(t: unknown, i: unknown): unknown;
							justPressed(t: unknown, i: unknown): unknown;
							justReleased(t: unknown, i: unknown): unknown;
							overDuration(t: unknown): unknown;
							pointerDown(t: unknown): unknown;
							pointerDragged(t: unknown): unknown;
							pointerOut(t: unknown): unknown;
							pointerOver(t: unknown): unknown;
							pointerTimeDown(t: unknown): unknown;
							pointerTimeOut(t: unknown): unknown;
							pointerTimeOver(t: unknown): unknown;
							pointerTimeUp(t: unknown): unknown;
							pointerUp(t: unknown): unknown;
							pointerX(t: unknown): unknown;
							pointerY(t: unknown): unknown;
							removedFromGroup(): void;
							reset(): void;
							setDragLock(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown): unknown;
							startDrag(t: unknown): void;
							stop(): void;
							stopDrag(t: unknown): void;
							update(t: unknown): unknown;
							updateDrag(t: unknown, i: unknown): unknown;
							validForInput(t: unknown): unknown;
							_dragPoint: unknown /* too deep */;
							_pointerData: unknown /* too deep */;
							_tempPoint: unknown /* too deep */;
							downPoint: unknown /* too deep */;
							dragOffset: unknown /* too deep */;
							dragStartPoint: unknown /* too deep */;
							game: Instance["_game"];
							snapOffset: unknown /* too deep */;
							snapPoint: unknown /* too deep */;
							sprite: Instance["_game"]["_state"]["_current"]["off"]["bg"];
						};
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						parent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_element: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addElementClass(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getAutomationSignature(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildElements(): unknown;
							getChildIndex(t: unknown): unknown;
							getClassName(): unknown;
							getElement(): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							hasTooltip(): unknown;
							highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
							isHighlighted(): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							onGetUIElement(t: unknown): unknown;
							registerGetElementListener(): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setRenderState(t: unknown, i: unknown): void;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							shouldCreateAndStageElement(): unknown;
							showTooltip(t: unknown, i: unknown): void;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							unregisterGetElementListener(): void;
							update(): void;
							updateElementAttribute(t: unknown, i: unknown): void;
							updateElementAttributes(t: unknown): void;
							updateElementPosition(t: unknown, i: unknown): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							game: Instance["_game"];
							localTransform: unknown /* too deep */;
							metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
							onDestroy: unknown /* too deep */;
							parent: Instance["_game"]["_state"]["_current"]["off"];
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						previousPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						stage: Instance["_game"]["_add"]["stage"];
						tempDisplayObjectParent: Instance["_game"]["_state"]["_current"]["off"]["bg"]["_tempDisplayObjectParent"];
						texture: Instance["_game"]["_state"]["_current"]["off"]["bg"]["_texture"];
						trackedPointers: Instance["_game"]["_state"]["_current"]["off"]["bg"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_state"]["_current"]["off"]["bg"]["localTransform"];
							pivot: Instance["_game"]["_state"]["_current"]["off"]["bg"]["pivot"];
							position: Instance["_game"]["_state"]["_current"]["off"]["bg"]["position"];
							scale: Instance["_game"]["_state"]["_current"]["off"]["bg"]["scale"];
							skew: Instance["_game"]["_state"]["_current"]["off"]["bg"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						world: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldScale: Instance["_game"]["_state"]["_current"]["off"]["bg"]["scale"];
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					bounds: {
						bottom: number;
						height: number;
						left: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
					};
					btnGroup: Instance["_game"]["_state"]["_current"]["off"]["bg"]["parent"];
					children: Instance["_game"]["_state"]["_current"]["off"]["bg"]["parent"][];
					events: {
						destroy(): void;
						onAddedToGroup: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onAnimationComplete: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onAnimationLoop: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onAnimationStart: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDragStart: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDragStop: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onDragUpdate: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onEnterBounds: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputDown: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputOut: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputOver: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onInputUp: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onOutOfBounds: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onRemovedFromGroup: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						onRemovedFromWorld: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						parent: Instance["_game"]["_state"]["_current"]["off"];
					};
					game: Instance["_game"];
					icon: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						_roundPixels: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						exists: boolean;
						fixedToCamera: boolean;
						inputEnabled: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isLoaded: boolean;
						isMask: boolean;
						isSprite: boolean;
						pendingDestroy: boolean;
						renderable: boolean;
						roundPixels: boolean;
						smoothed: boolean;
						sortableChildren: boolean;
						sortDirty: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_cachedTint: number;
						_eventsCount: number;
						_height: number;
						_lastSortedIndex: number;
						_textureID: number;
						_textureTrimmedID: number;
						_tint: number;
						_tintRGB: number;
						_transformID: number;
						_transformTrimmedID: number;
						_width: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						blendMode: number;
						bottom: number;
						cachedTint: number;
						centerX: number;
						centerY: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						renderId: number;
						right: number;
						rotation: number;
						tabIndex: number;
						tint: number;
						top: number;
						width: number;
						worldAlpha: number;
						worldRotation: number;
						x: number;
						y: number;
						z: number;
						zIndex: number;
						accessiblePointerEvents: string;
						accessibleType: string;
						frameName: string;
						key: string;
						pluginName: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_localBounds: null;
						_mask: null;
						_tintedCanvas: null;
						_tintedTexture: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						loadingTween: null;
						mask: null;
						name: null;
						scaleMax: null;
						scaleMin: null;
						tintedTexture: null;
						transformCallbackContext: null;
						vertexTrimmedData: null;
						forcedHeight: undefined;
						forcedWidth: undefined;
						frame: undefined;
						onTextureLoaded: undefined;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateBounds(): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_onAnchorUpdate(): void;
						_onTextureUpdate(): void;
						_recursivePostUpdateTransform(): void;
						_render(t: unknown): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						_renderCanvas(t: unknown): void;
						_renderWebGL(t: unknown): void;
						addChild(): unknown;
						addChildAt(t: unknown, e: unknown): unknown;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						bringChildToTop(t: unknown): void;
						calculateBounds(): void;
						calculateTrimmedVertices(): unknown;
						calculateVertices(): void;
						checkCallback(): void;
						checkSpriteDimension(): void;
						containerUpdateTransform(): void;
						containsPoint(t: unknown): unknown;
						destroy(): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getChildAt(t: unknown): unknown;
						getChildByName(t: unknown, e: unknown): unknown;
						getChildIndex(t: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getLocalBounds(t: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void;
						loadTexture(t: unknown, i: unknown): void;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						onChildrenChange(t: unknown): void;
						onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
						removeAllListeners(t: unknown): unknown;
						removeChild(): unknown;
						removeChildAt(t: unknown): unknown;
						removeChildren(t: unknown, e: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						render(t: unknown): void;
						renderAdvanced(t: unknown): void;
						renderAdvancedWebGL(t: unknown): void;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						rotateMiddleBased(t: unknown): void;
						sendChildToBack(t: unknown): void;
						setActive(t: unknown): void;
						setChildIndex(t: unknown, e: unknown): void;
						setFrame(t: unknown): void;
						setParent(t: unknown): unknown;
						setTexture(t: unknown, i: unknown): void;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						sortChildren(): void;
						swapChildren(t: unknown, e: unknown): void;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						update(): void;
						updateFrame(i: unknown): void;
						updateTexture(t: unknown): void;
						updateTransform(): void;
						indices: Uint16Array;
						uvs: Float32Array;
						vertexData: Float32Array;
						_anchor: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Instance["_game"]["_state"]["_current"]["off"]["icon"];
						};
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_localBoundsRect: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_texture: {
							noFrame: boolean;
							valid: boolean;
							_eventsCount: number;
							_rotate: number;
							_updateID: number;
							height: number;
							resolution: number;
							rotate: number;
							width: number;
							patternCache: null;
							trim: null;
							uvMatrix: null;
							_updateUvs(): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							castToBaseTexture(): unknown;
							clone(): unknown;
							destroy(t: unknown): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							eventNames(): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							onBaseTextureUpdated(t: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							update(): void;
							updateUvs(): void;
							_events: unknown /* too deep */;
							_frame: unknown /* too deep */;
							_uvs: unknown /* too deep */;
							baseTexture: unknown /* too deep */;
							defaultAnchor: unknown /* too deep */;
							frame: unknown /* too deep */;
							orig: unknown /* too deep */;
							textureCacheIds: unknown /* too deep */;
							tintCache: unknown /* too deep */;
						};
						_trackedPointers: {};
						anchor: Instance["_game"]["_state"]["_current"]["off"]["icon"]["_anchor"];
						animations: never;
						bounds: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						cameraOffset: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						children: never[];
						events: {
							destroy(): void;
							onAddedToGroup: unknown /* too deep */;
							onAnimationComplete: unknown /* too deep */;
							onAnimationLoop: unknown /* too deep */;
							onAnimationStart: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							onDragStart: unknown /* too deep */;
							onDragStop: unknown /* too deep */;
							onDragUpdate: unknown /* too deep */;
							onEnterBounds: unknown /* too deep */;
							onInputDown: unknown /* too deep */;
							onInputOut: unknown /* too deep */;
							onInputOver: unknown /* too deep */;
							onInputUp: unknown /* too deep */;
							onOutOfBounds: unknown /* too deep */;
							onRemovedFromGroup: unknown /* too deep */;
							onRemovedFromWorld: unknown /* too deep */;
							parent: Instance["_game"]["_state"]["_current"]["off"]["icon"];
						};
						game: Instance["_game"];
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						parent: Instance["_game"]["_state"]["_current"]["off"]["bg"]["parent"];
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						previousPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						stage: Instance["_game"]["_add"]["stage"];
						tempDisplayObjectParent: Instance["_game"]["_state"]["_current"]["off"]["icon"]["_tempDisplayObjectParent"];
						texture: Instance["_game"]["_state"]["_current"]["off"]["icon"]["_texture"];
						trackedPointers: Instance["_game"]["_state"]["_current"]["off"]["icon"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_state"]["_current"]["off"]["icon"]["localTransform"];
							pivot: Instance["_game"]["_state"]["_current"]["off"]["icon"]["pivot"];
							position: Instance["_game"]["_state"]["_current"]["off"]["icon"]["position"];
							scale: Instance["_game"]["_state"]["_current"]["off"]["icon"]["scale"];
							skew: Instance["_game"]["_state"]["_current"]["off"]["icon"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						world: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldScale: Instance["_game"]["_state"]["_current"]["off"]["icon"]["scale"];
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					localTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
					metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
					onDestroy: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Instance["_game"]["_state"]["_current"]["off"]["onDestroy"]["_bindings"];
					};
					parent: Instance["_game"]["_state"]["_current"]["_background"]["_legacyTransform"]["_group"];
					pivot: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_state"]["_current"]["off"]["localTransform"];
							pivot: Instance["_game"]["_state"]["_current"]["off"]["pivot"];
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
					};
					position: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_state"]["_current"]["off"]["pivot"]["scope"];
					};
					scale: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_state"]["_current"]["off"]["pivot"]["scope"];
					};
					skew: {
						_x: number;
						_y: number;
						x: number;
						y: number;
						cb(): void;
						clone(e: unknown, r: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
						scope: Instance["_game"]["_state"]["_current"]["off"]["pivot"]["scope"];
					};
					stage: Instance["_game"]["_add"]["stage"];
					tempDisplayObjectParent: Instance["_game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"];
					text: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						exists: boolean;
						fixedToCamera: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						pendingDestroy: boolean;
						renderable: boolean;
						sortableChildren: boolean;
						sortDirty: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_defaultFontSize: number;
						_eventsCount: number;
						_lastSortedIndex: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						bottom: number;
						boundsWidth: number;
						centerX: number;
						centerY: number;
						fontID: number;
						fontSize: number;
						height: number;
						iconOffsetY: number;
						left: number;
						length: number;
						lines: number;
						numberOfLines: number;
						offsetX: number;
						offsetY: number;
						renderId: number;
						right: number;
						rotation: number;
						tabIndex: number;
						top: number;
						width: number;
						worldAlpha: number;
						worldRotation: number;
						x: number;
						y: number;
						z: number;
						zIndex: number;
						_sortProperty: string;
						accessiblePointerEvents: string;
						accessibleType: string;
						alignment: string;
						fontName: string;
						name: string;
						text: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_element: null;
						_enabledFilters: null;
						_mask: null;
						accessibleHint: null;
						accessibleTitle: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						lineHeight: undefined;
						monoSpace: undefined;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateBounds(): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_recursivePostUpdateTransform(): void;
						_render(t: unknown): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						_renderCanvas(t: unknown): void;
						_renderWebGL(t: unknown): void;
						add(t: unknown, i: unknown): unknown;
						addAt(t: unknown, i: unknown): unknown;
						addChild(): unknown;
						addChildAt(t: unknown, e: unknown): unknown;
						addClickCallback(t: unknown, i: unknown, n: unknown): void;
						addElementClass(t: unknown): void;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						ascendingSortHandler(t: unknown, i: unknown): unknown;
						bringChildToTop(t: unknown): void;
						calculateBounds(): void;
						callAll(t: unknown, i: unknown): void;
						callbackFromArray(t: unknown, i: unknown): unknown;
						containerUpdateTransform(): void;
						descendingSortHandler(t: unknown, i: unknown): unknown;
						destroy(i: unknown): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getAt(t: unknown): unknown;
						getAutomationSignature(): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getByName(t: unknown): unknown;
						getChildAt(t: unknown): unknown;
						getChildByName(t: unknown, e: unknown): unknown;
						getChildElements(): unknown;
						getChildIndex(t: unknown): unknown;
						getClassName(): unknown;
						getElement(): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getIndex(t: unknown): unknown;
						getLocalBounds(e: unknown, r: unknown): unknown;
						iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						moveDown(t: unknown): unknown;
						moveUp(t: unknown): unknown;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						onChildrenChange(t: unknown): void;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						removeAllListeners(t: unknown): unknown;
						removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
						removeChild(): unknown;
						removeChildAt(t: unknown): unknown;
						removeChildren(t: unknown, e: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						render(t: unknown): void;
						renderAdvanced(t: unknown): void;
						renderAdvancedWebGL(t: unknown): void;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						sendChildToBack(t: unknown): void;
						setChildIndex(t: unknown, e: unknown): void;
						setParent(t: unknown): unknown;
						setText(t: unknown): void;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						shouldCreateAndStageElement(): unknown;
						sort(t: unknown, i: unknown): void;
						sortChildren(): void;
						swap(t: unknown, i: unknown): void;
						swapChildren(t: unknown, e: unknown): void;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						update(): void;
						updateElementAttribute(t: unknown, i: unknown): void;
						updateElementAttributes(t: unknown): void;
						updateElementPosition(t: unknown, i: unknown): void;
						updateTransform(): void;
						updateZ(): void;
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_game: Instance["_game"];
						_localBounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_localBoundsRect: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							localTransform: unknown /* too deep */;
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						_trackedPointers: {};
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bounds: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						children: unknown /* too deep */[];
						events: {
							destroy(): void;
							onAddedToGroup: unknown /* too deep */;
							onAnimationComplete: unknown /* too deep */;
							onAnimationLoop: unknown /* too deep */;
							onAnimationStart: unknown /* too deep */;
							onDestroy: unknown /* too deep */;
							onDragStart: unknown /* too deep */;
							onDragStop: unknown /* too deep */;
							onDragUpdate: unknown /* too deep */;
							onEnterBounds: unknown /* too deep */;
							onInputDown: unknown /* too deep */;
							onInputOut: unknown /* too deep */;
							onInputOver: unknown /* too deep */;
							onInputUp: unknown /* too deep */;
							onOutOfBounds: unknown /* too deep */;
							onRemovedFromGroup: unknown /* too deep */;
							onRemovedFromWorld: unknown /* too deep */;
							parent: Instance["_game"]["_state"]["_current"]["off"]["text"];
						};
						letters: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_element: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addElementClass(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getAutomationSignature(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildElements(): unknown;
							getChildIndex(t: unknown): unknown;
							getClassName(): unknown;
							getElement(): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							hasTooltip(): unknown;
							highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
							isHighlighted(): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							onGetUIElement(t: unknown): unknown;
							registerGetElementListener(): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setRenderState(t: unknown, i: unknown): void;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							shouldCreateAndStageElement(): unknown;
							showTooltip(t: unknown, i: unknown): void;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							unregisterGetElementListener(): void;
							update(): void;
							updateElementAttribute(t: unknown, i: unknown): void;
							updateElementAttributes(t: unknown): void;
							updateElementPosition(t: unknown, i: unknown): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: unknown /* too deep */;
							_events: unknown /* too deep */;
							_game: Instance["_game"];
							_localBounds: unknown /* too deep */;
							_localBoundsRect: unknown /* too deep */;
							_tempDisplayObjectParent: unknown /* too deep */;
							_trackedPointers: unknown /* too deep */;
							anchor: unknown /* too deep */;
							bounds: unknown /* too deep */;
							children: unknown /* too deep */;
							events: unknown /* too deep */;
							game: Instance["_game"];
							localTransform: unknown /* too deep */;
							metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
							onDestroy: unknown /* too deep */;
							parent: Instance["_game"]["_state"]["_current"]["off"]["text"];
							pivot: unknown /* too deep */;
							position: unknown /* too deep */;
							scale: unknown /* too deep */;
							skew: unknown /* too deep */;
							stage: Instance["_game"]["_add"]["stage"];
							tempDisplayObjectParent: unknown /* too deep */;
							trackedPointers: unknown /* too deep */;
							transform: unknown /* too deep */;
							world: unknown /* too deep */;
							worldGamePosition: unknown /* too deep */;
							worldPosition: unknown /* too deep */;
							worldScale: unknown /* too deep */;
							worldTransform: unknown /* too deep */;
						};
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: unknown /* too deep */;
							bindings: unknown /* too deep */;
						};
						parent: Instance["_game"]["_state"]["_current"]["off"]["bg"]["parent"];
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: unknown /* too deep */;
						};
						sprites: unknown /* too deep */[];
						stage: Instance["_game"]["_add"]["stage"];
						tempDisplayObjectParent: Instance["_game"]["_state"]["_current"]["off"]["text"]["_tempDisplayObjectParent"];
						trackedPointers: Instance["_game"]["_state"]["_current"]["off"]["text"]["_trackedPointers"];
						transform: {
							_currentLocalID: number;
							_cx: number;
							_cy: number;
							_localID: number;
							_parentID: number;
							_rotation: number;
							_sx: number;
							_sy: number;
							_worldID: number;
							rotation: number;
							onChange(): void;
							setFromMatrix(t: unknown): void;
							updateLocalTransform(): void;
							updateSkew(): void;
							updateTransform(t: unknown): void;
							localTransform: Instance["_game"]["_state"]["_current"]["off"]["text"]["localTransform"];
							pivot: Instance["_game"]["_state"]["_current"]["off"]["text"]["pivot"];
							position: Instance["_game"]["_state"]["_current"]["off"]["text"]["position"];
							scale: Instance["_game"]["_state"]["_current"]["off"]["text"]["scale"];
							skew: Instance["_game"]["_state"]["_current"]["off"]["text"]["skew"];
							worldTransform: unknown /* too deep */;
						};
						world: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldGamePosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldScale: Instance["_game"]["_state"]["_current"]["off"]["text"]["scale"];
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
					trackedPointers: Instance["_game"]["_state"]["_current"]["off"]["_trackedPointers"];
					transform: Instance["_game"]["_state"]["_current"]["off"]["pivot"]["scope"];
					world: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					worldGamePosition: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					worldPosition: {
						x: number;
						y: number;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						equals(t: unknown): unknown;
						set(t: unknown, e: unknown): unknown;
					};
					worldScale: Instance["_game"]["_state"]["_current"]["off"]["scale"];
					worldTransform: {
						a: number;
						b: number;
						c: number;
						d: number;
						tx: number;
						ty: number;
						array: null;
						append(t: unknown): unknown;
						apply(t: unknown, e: unknown): unknown;
						applyInverse(t: unknown, e: unknown): unknown;
						clone(): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						decompose(t: unknown): unknown;
						fromArray(t: unknown): void;
						identity(): unknown;
						invert(): unknown;
						prepend(t: unknown): unknown;
						rotate(t: unknown): unknown;
						scale(t: unknown, e: unknown): unknown;
						set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						toArray(t: unknown, e: unknown): unknown;
						translate(t: unknown, e: unknown): unknown;
					};
				};
				opaque: Instance["_game"]["_state"]["_current"]["_opaque"]["_legacyTransform"]["_group"];
				overlay: Instance["_game"]["_state"]["_current"]["_overlay"]["_legacyTransform"]["_group"];
				prodigyGame: Instance["_game"];
				screenData: { full: number; id: number; name: string; meta: unknown /* too deep */; }[];
				stage: Instance["_game"]["_add"]["stage"];
				uiLayer: Instance["_game"]["_state"]["_current"]["_uiLayer"]["_legacyTransform"]["_group"];
			};
			_initArgs: never[];
			_onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_game"]["_state"]["_onStateChange"]["_bindings"];
			};
			game: Instance["_game"];
			onStateChange: Instance["_game"]["_state"]["_onStateChange"];
		};
		_time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
		_tweens: {
			add(t: unknown, i: unknown, n: unknown): unknown;
			create(t: unknown, i: unknown, n: unknown): unknown;
			destroy(): void;
			findOwnerForTween(t: unknown): unknown;
			getAll(): unknown;
			pauseAll(): void;
			remove(t: unknown): void;
			removeAll(): void;
			removeAllFromOwner(t: unknown): void;
			removeFrom(t: unknown, i: unknown): void;
			removeTweenFromOwner(t: unknown): unknown;
			resumeAll(): void;
			update(): unknown;
			_owners: Map<{ _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; arrow: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _gsap: { id: number; harness: undefined; get(t: unknown, i: unknown): unknown; set(t: unknown, i: unknown): unknown; target: unknown /* too deep */; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; uvMatrix: null; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; tintCache: unknown /* too deep */; trim: unknown /* too deep */; }; _trackedPointers: {}; anchor: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; animations: never; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; cameraOffset: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; children: never[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; arrow: unknown /* too deep */; bg: unknown /* too deep */; bounds: unknown /* too deep */; btnGroup: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_state"]["_current"]["contentA"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; text: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; previousPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; uvMatrix: null; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; tintCache: unknown /* too deep */; trim: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; bg: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _texture: Instance["_game"]["_state"]["_current"]["off"]["bg"]["_texture"]; _trackedPointers: {}; anchor: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; animations: never; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; cameraOffset: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; children: never[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; input: { _dragDistancePass: boolean; _dragPhase: boolean; _dragTimePass: boolean; _pendingDrag: boolean; _setHandCursor: boolean; _wasEnabled: boolean; allowHorizontalDrag: boolean; allowVerticalDrag: boolean; bringToTop: boolean; checked: boolean; dragFromCenter: boolean; draggable: boolean; dragStopBlocksInputUp: boolean; enabled: boolean; isDragged: boolean; snapOnDrag: boolean; snapOnRelease: boolean; useHandCursor: boolean; dragDistanceThreshold: number; dragTimeThreshold: number; priorityID: number; snapOffsetX: number; snapOffsetY: number; snapX: number; snapY: number; boundsRect: null; boundsSprite: null; _pointerOutHandler(t: unknown, i: unknown): void; _pointerOverHandler(t: unknown, i: unknown): void; _releasedHandler(t: unknown): void; _touchedHandler(t: unknown): unknown; addedToGroup(): void; checkBoundsRect(): void; checkBoundsSprite(): void; checkPointerDown(t: unknown): unknown; checkPointerOver(t: unknown, i: unknown): unknown; destroy(): void; disableDrag(): void; disableSnap(): void; downDuration(t: unknown): unknown; dragTimeElapsed(t: unknown): void; enableDrag(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; enableSnap(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void; globalToLocal(t: unknown): unknown; justOut(t: unknown, i: unknown): unknown; justOver(t: unknown, i: unknown): unknown; justPressed(t: unknown, i: unknown): unknown; justReleased(t: unknown, i: unknown): unknown; overDuration(t: unknown): unknown; pointerDown(t: unknown): unknown; pointerDragged(t: unknown): unknown; pointerOut(t: unknown): unknown; pointerOver(t: unknown): unknown; pointerTimeDown(t: unknown): unknown; pointerTimeOut(t: unknown): unknown; pointerTimeOver(t: unknown): unknown; pointerTimeUp(t: unknown): unknown; pointerUp(t: unknown): unknown; pointerX(t: unknown): unknown; pointerY(t: unknown): unknown; removedFromGroup(): void; reset(): void; setDragLock(t: unknown, i: unknown): void; start(t: unknown, i: unknown): unknown; startDrag(t: unknown): void; stop(): void; stopDrag(t: unknown): void; update(t: unknown): unknown; updateDrag(t: unknown, i: unknown): unknown; validForInput(t: unknown): unknown; _dragPoint: unknown /* too deep */; _pointerData: unknown /* too deep */; _tempPoint: unknown /* too deep */; downPoint: unknown /* too deep */; dragOffset: unknown /* too deep */; dragStartPoint: unknown /* too deep */; game: Instance["_game"]; snapOffset: unknown /* too deep */; snapPoint: unknown /* too deep */; sprite: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; previousPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; texture: Instance["_game"]["_state"]["_current"]["off"]["bg"]["_texture"]; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; btnGroup: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; arrow: unknown /* too deep */; bg: unknown /* too deep */; bounds: unknown /* too deep */; btnGroup: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_state"]["_current"]["contentA"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; text: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onAnimationComplete: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onAnimationLoop: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onAnimationStart: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDragStart: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDragStop: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDragUpdate: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onEnterBounds: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onInputDown: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onInputOut: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onInputOver: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onInputUp: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onOutOfBounds: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onRemovedFromGroup: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onRemovedFromWorld: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; arrow: unknown /* too deep */; bg: unknown /* too deep */; bounds: unknown /* too deep */; btnGroup: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_state"]["_current"]["contentA"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; text: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }; game: Instance["_game"]; icon: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; trim: null; uvMatrix: null; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; tintCache: unknown /* too deep */; }; _trackedPointers: {}; anchor: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; animations: never; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; cameraOffset: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; children: never[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Instance["_game"]; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; previousPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; texture: { noFrame: boolean; valid: boolean; _eventsCount: number; _rotate: number; _updateID: number; height: number; resolution: number; rotate: number; width: number; patternCache: null; trim: null; uvMatrix: null; _updateUvs(): void; addListener(t: unknown, e: unknown, r: unknown): unknown; castToBaseTexture(): unknown; clone(): unknown; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; onBaseTextureUpdated(t: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; update(): void; updateUvs(): void; _events: unknown /* too deep */; _frame: unknown /* too deep */; _uvs: unknown /* too deep */; baseTexture: unknown /* too deep */; defaultAnchor: unknown /* too deep */; frame: unknown /* too deep */; orig: unknown /* too deep */; textureCacheIds: unknown /* too deep */; tintCache: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */[]; bindings: unknown /* too deep */[]; }; parent: Instance["_game"]["_state"]["_current"]["contentA"]; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; text: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _defaultFontSize: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; boundsWidth: number; centerX: number; centerY: number; fontID: number; fontSize: number; height: number; iconOffsetY: number; left: number; length: number; lines: number; numberOfLines: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; alignment: string; fontName: string; name: string; text: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; lineHeight: undefined; monoSpace: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addClickCallback(t: unknown, i: unknown, n: unknown): void; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Instance["_game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; letters: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; sprites: unknown /* too deep */[]; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }, Set<{ isDestroyed: boolean; isPaused: boolean; isRunning: boolean; killed: boolean; pendingDelete: boolean; reverse: boolean; timeScale: number; totalDuration: number; chainedTween: null; chain(): unknown; delay(t: unknown): unknown; destroy(): void; duration(t: unknown): unknown; fixDeprecatedRelativeValues(t: unknown): unknown; from(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; getDelay(): unknown; getDuration(): unknown; getRepeat(): unknown; getYoyo(): unknown; loop(t: unknown): unknown; onCompleteCallback(): void; onUpdateCallback(t: unknown, i: unknown): unknown; pause(): unknown; remove(): void; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; resume(): unknown; start(): unknown; stop(t: unknown): unknown; to(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; yoyo(t: unknown): unknown; _rootTween: { _from: boolean; _overwrite: boolean; _ps: boolean; _yoyo: boolean; _act: number; _delay: number; _dirty: number; _dur: number; _end: number; _initted: number; _lazy: number; _onInit: number; _op: number; _prom: number; _rDelay: number; _repeat: number; _rts: number; _start: number; _startAt: number; _tDur: number; _time: number; _ts: number; _tTime: number; _yEase: number; _zTime: number; ratio: number; timeline: number; _next: undefined; _onUpdate: undefined; _prev: undefined; data: undefined; _ease(t: unknown): unknown; delay(t: unknown): unknown; duration(t: unknown): unknown; endTime(t: unknown): unknown; eventCallback(t: unknown, i: unknown, n: unknown): unknown; invalidate(): unknown; isActive(t: unknown): unknown; iteration(t: unknown, i: unknown): unknown; kill(t: unknown, i: unknown): unknown; pause(t: unknown, i: unknown): unknown; paused(t: unknown): unknown; play(t: unknown, i: unknown): unknown; progress(t: unknown, i: unknown): unknown; rawTime(t: unknown): unknown; render(t: unknown, i: unknown, n: unknown): unknown; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; restart(t: unknown, i: unknown): unknown; resume(): unknown; reverse(t: unknown, i: unknown): unknown; reversed(t: unknown): unknown; seek(t: unknown, i: unknown): unknown; startTime(t: unknown): unknown; targets(): unknown; then(t: unknown): unknown; time(t: unknown, i: unknown): unknown; timeScale(t: unknown): unknown; totalDuration(t: unknown): unknown; totalProgress(t: unknown, i: unknown): unknown; totalTime(t: unknown, i: unknown): unknown; yoyo(t: unknown): unknown; _dp: unknown /* too deep */; _pt: unknown /* too deep */; _ptLookup: unknown /* too deep */; _targets: unknown /* too deep */; parent: unknown /* too deep */; vars: unknown /* too deep */; }; _target: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _gsap: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _timeline: { _act: boolean; _ps: boolean; _sort: boolean; _yoyo: boolean; autoRemoveChildren: boolean; smoothChildTiming: boolean; _delay: number; _dirty: number; _dur: number; _end: number; _forcing: number; _hasPause: number; _initted: number; _lock: number; _prom: number; _rDelay: number; _repeat: number; _rts: number; _start: number; _tDur: number; _time: number; _ts: number; _tTime: number; _zTime: number; ratio: number; _next: undefined; _prev: undefined; data: undefined; _onUpdate(): void; add(t: unknown, i: unknown): unknown; addLabel(t: unknown, i: unknown): unknown; addPause(t: unknown, i: unknown, n: unknown): unknown; call(t: unknown, i: unknown, n: unknown): unknown; clear(t: unknown): unknown; currentLabel(t: unknown): unknown; delay(t: unknown): unknown; duration(t: unknown): unknown; endTime(t: unknown): unknown; eventCallback(t: unknown, i: unknown, n: unknown): unknown; from(t: unknown, i: unknown, n: unknown): unknown; fromTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getById(t: unknown): unknown; getChildren(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getTweensOf(t: unknown, i: unknown): unknown; invalidate(): unknown; isActive(t: unknown): unknown; iteration(t: unknown, i: unknown): unknown; kill(): void; killTweensOf(t: unknown, i: unknown, n: unknown): unknown; nextLabel(t: unknown): unknown; pause(t: unknown, i: unknown): unknown; paused(t: unknown): unknown; play(t: unknown, i: unknown): unknown; previousLabel(t: unknown): unknown; progress(t: unknown, i: unknown): unknown; rawTime(t: unknown): unknown; recent(): unknown; remove(t: unknown): unknown; removeLabel(t: unknown): unknown; removePause(t: unknown): void; render(t: unknown, i: unknown, n: unknown): unknown; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; restart(t: unknown, i: unknown): unknown; resume(): unknown; reverse(t: unknown, i: unknown): unknown; reversed(t: unknown): unknown; seek(t: unknown, i: unknown): unknown; set(t: unknown, i: unknown, n: unknown): unknown; shiftChildren(t: unknown, i: unknown, n: unknown): unknown; staggerFrom(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; staggerFromTo(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown; staggerTo(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; startTime(t: unknown): unknown; then(t: unknown): unknown; time(t: unknown, i: unknown): unknown; timeScale(t: unknown): unknown; to(t: unknown, i: unknown, n: unknown): unknown; totalDuration(t: unknown): unknown; totalProgress(t: unknown, i: unknown): unknown; totalTime(i: unknown, n: unknown): unknown; tweenFromTo(t: unknown, i: unknown, n: unknown): unknown; tweenTo(t: unknown, i: unknown): unknown; yoyo(t: unknown): unknown; _dp: unknown /* too deep */; _first: unknown /* too deep */; _last: unknown /* too deep */; _recent: unknown /* too deep */; labels: unknown /* too deep */; parent: unknown /* too deep */; vars: unknown /* too deep */; }; game: Instance["_game"]; manager: Instance["_game"]["_tweens"]; onChildComplete: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLoop: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onRepeat: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onStart: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onTweenComplete: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onUpdate: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; owner: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; arrow: unknown /* too deep */; bg: unknown /* too deep */; bounds: unknown /* too deep */; btnGroup: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_state"]["_current"]["contentA"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; text: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; properties: { overwrite: boolean; delay: number; duration: number; y: number; ease: string; }; target: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _gsap: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }>>;
			_tweens: { isDestroyed: boolean; isPaused: boolean; isRunning: boolean; killed: boolean; pendingDelete: boolean; reverse: boolean; timeScale: number; totalDuration: number; chainedTween: null; chain(): unknown; delay(t: unknown): unknown; destroy(): void; duration(t: unknown): unknown; fixDeprecatedRelativeValues(t: unknown): unknown; from(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; getDelay(): unknown; getDuration(): unknown; getRepeat(): unknown; getYoyo(): unknown; loop(t: unknown): unknown; onCompleteCallback(): void; onUpdateCallback(t: unknown, i: unknown): unknown; pause(): unknown; remove(): void; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; resume(): unknown; start(): unknown; stop(t: unknown): unknown; to(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; yoyo(t: unknown): unknown; _rootTween: { _from: boolean; _overwrite: boolean; _ps: boolean; _yoyo: boolean; _act: number; _delay: number; _dirty: number; _dur: number; _end: number; _initted: number; _lazy: number; _onInit: number; _op: number; _prom: number; _rDelay: number; _repeat: number; _rts: number; _start: number; _startAt: number; _tDur: number; _time: number; _ts: number; _tTime: number; _yEase: number; _zTime: number; ratio: number; timeline: number; _next: undefined; _onUpdate: undefined; _prev: undefined; data: undefined; _ease(t: unknown): unknown; delay(t: unknown): unknown; duration(t: unknown): unknown; endTime(t: unknown): unknown; eventCallback(t: unknown, i: unknown, n: unknown): unknown; invalidate(): unknown; isActive(t: unknown): unknown; iteration(t: unknown, i: unknown): unknown; kill(t: unknown, i: unknown): unknown; pause(t: unknown, i: unknown): unknown; paused(t: unknown): unknown; play(t: unknown, i: unknown): unknown; progress(t: unknown, i: unknown): unknown; rawTime(t: unknown): unknown; render(t: unknown, i: unknown, n: unknown): unknown; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; restart(t: unknown, i: unknown): unknown; resume(): unknown; reverse(t: unknown, i: unknown): unknown; reversed(t: unknown): unknown; seek(t: unknown, i: unknown): unknown; startTime(t: unknown): unknown; targets(): unknown; then(t: unknown): unknown; time(t: unknown, i: unknown): unknown; timeScale(t: unknown): unknown; totalDuration(t: unknown): unknown; totalProgress(t: unknown, i: unknown): unknown; totalTime(t: unknown, i: unknown): unknown; yoyo(t: unknown): unknown; _dp: unknown /* too deep */; _pt: unknown /* too deep */; _ptLookup: unknown /* too deep */; _targets: unknown /* too deep */; parent: unknown /* too deep */; vars: unknown /* too deep */; }; _target: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _gsap: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _timeline: { _act: boolean; _ps: boolean; _sort: boolean; _yoyo: boolean; autoRemoveChildren: boolean; smoothChildTiming: boolean; _delay: number; _dirty: number; _dur: number; _end: number; _forcing: number; _hasPause: number; _initted: number; _lock: number; _prom: number; _rDelay: number; _repeat: number; _rts: number; _start: number; _tDur: number; _time: number; _ts: number; _tTime: number; _zTime: number; ratio: number; _next: undefined; _prev: undefined; data: undefined; _onUpdate(): void; add(t: unknown, i: unknown): unknown; addLabel(t: unknown, i: unknown): unknown; addPause(t: unknown, i: unknown, n: unknown): unknown; call(t: unknown, i: unknown, n: unknown): unknown; clear(t: unknown): unknown; currentLabel(t: unknown): unknown; delay(t: unknown): unknown; duration(t: unknown): unknown; endTime(t: unknown): unknown; eventCallback(t: unknown, i: unknown, n: unknown): unknown; from(t: unknown, i: unknown, n: unknown): unknown; fromTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getById(t: unknown): unknown; getChildren(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getTweensOf(t: unknown, i: unknown): unknown; invalidate(): unknown; isActive(t: unknown): unknown; iteration(t: unknown, i: unknown): unknown; kill(): void; killTweensOf(t: unknown, i: unknown, n: unknown): unknown; nextLabel(t: unknown): unknown; pause(t: unknown, i: unknown): unknown; paused(t: unknown): unknown; play(t: unknown, i: unknown): unknown; previousLabel(t: unknown): unknown; progress(t: unknown, i: unknown): unknown; rawTime(t: unknown): unknown; recent(): unknown; remove(t: unknown): unknown; removeLabel(t: unknown): unknown; removePause(t: unknown): void; render(t: unknown, i: unknown, n: unknown): unknown; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; restart(t: unknown, i: unknown): unknown; resume(): unknown; reverse(t: unknown, i: unknown): unknown; reversed(t: unknown): unknown; seek(t: unknown, i: unknown): unknown; set(t: unknown, i: unknown, n: unknown): unknown; shiftChildren(t: unknown, i: unknown, n: unknown): unknown; staggerFrom(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; staggerFromTo(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown; staggerTo(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; startTime(t: unknown): unknown; then(t: unknown): unknown; time(t: unknown, i: unknown): unknown; timeScale(t: unknown): unknown; to(t: unknown, i: unknown, n: unknown): unknown; totalDuration(t: unknown): unknown; totalProgress(t: unknown, i: unknown): unknown; totalTime(i: unknown, n: unknown): unknown; tweenFromTo(t: unknown, i: unknown, n: unknown): unknown; tweenTo(t: unknown, i: unknown): unknown; yoyo(t: unknown): unknown; _dp: unknown /* too deep */; _first: unknown /* too deep */; _last: unknown /* too deep */; _recent: unknown /* too deep */; labels: unknown /* too deep */; parent: unknown /* too deep */; vars: unknown /* too deep */; }; game: Instance["_game"]; manager: Instance["_game"]["_tweens"]; onChildComplete: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onLoop: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onRepeat: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onStart: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onTweenComplete: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onUpdate: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; owner: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Instance["_game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; arrow: unknown /* too deep */; bg: unknown /* too deep */; bounds: unknown /* too deep */; btnGroup: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: Instance["_game"]["_state"]["_current"]["contentA"]; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; text: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; properties: { overwrite: boolean; delay: number; duration: number; y: number; ease: string; }; target: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _gsap: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Instance["_game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Instance["_game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }[];
			game: Instance["_game"];
		};
		add: Instance["_game"]["_add"];
		app: Instance["_game"]["_app"];
		broadcaster: {
			broadcastIdCount: number;
			addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			broadcast(t: unknown, i: unknown, n: unknown): unknown;
			clear(): void;
			hashContext(t: unknown): unknown;
			removeAppListener(t: unknown, i: unknown, n: unknown): void;
			callbacks: {
				bId0: {
					"Prodigy.Events.FlyingStars.DONE": (() => void)[];
					"Prodigy.Events.Screen.ADD_CHILD": ((arg0: unknown) => void)[];
					"Prodigy.Events.Screen.ENABLE_BACKGROUND": ((arg0: unknown) => void)[];
					"Prodigy.Events.Screen.ENABLE_CONTENT": ((arg0: unknown) => void)[];
					"Prodigy.Events.Screen.GET_LAYER": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.ANONYMOUS_GAME_COMPLETE_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.ANONYMOUS_GAME_DISCOVERY": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.EXTERNAL_ANALYTICS": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_AVATAR_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_BATTLE_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_COMPLETE_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_DISCOVERY_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_QUESTION_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_SESSION_END_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_SESSION_START_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_SINK_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_SOCIAL_V3": ((arg0: unknown) => void)[];
					"Prodigy.Events.Telemetry.GAME_SOURCE_V3": ((arg0: unknown) => void)[];
				};
				bId2: {
					"Prodigy.Events.Creature.LEVEL_UP": ((arg0: unknown) => void)[];
					"Prodigy.Events.Creature.STARS_ADDED": (() => void)[];
				};
				Card: {
					"Prodigy.Events.FriendsList.CANCEL_REQUEST": ((arg0: unknown) => void)[];
					"Prodigy.Events.FriendsList.REMOVE_FRIEND": ((arg0: unknown) => void)[];
					"Prodigy.Events.FriendsList.SEND_REQUEST": ((arg0: unknown) => void)[];
				};
				FriendsList: {
					"Prodigy.Events.FriendsList.CLEAR_FRIEND_REQUESTS_CACHE": (() => void)[];
					"Prodigy.Events.FriendsList.GET_FRIENDS_LIST": (() => void)[];
					"Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": ((arg0: unknown) => void)[];
					"Prodigy.Events.FriendsList.REMOVE_FRIEND": ((arg0: unknown) => void)[];
				};
				NetworkHandlers: {};
				ProdigyMailer: {
					"Prodigy.Events.Mailer.DELETE_MAIL": ((arg0: unknown) => void)[];
					"Prodigy.Events.Mailer.GET_ALL_MAIL": ((arg0: unknown) => void)[];
					"Prodigy.Events.Mailer.GET_TOTAL_MAIL": ((arg0: unknown) => void)[];
				};
				ProdigyMailerButton: {
					"Prodigy.Events.Mailer.GET_TOTAL_MAIL": ((arg0: unknown) => void)[];
				};
				ProdigyMailView: {
					"Prodigy.Events.Mailer.MARK_AS_READ": ((arg0: unknown) => void)[];
				};
				UI: {
					"Prodigy.Events.House.CLICKED_HOUSE_ICON": (() => void)[];
				};
			};
			game: Instance["_game"];
			listeners: {
				bId0: {
					"Prodigy.Events.FlyingStars.DONE": unknown /* too deep */[];
					"Prodigy.Events.Screen.ADD_CHILD": Instance["_game"]["_state"]["_current"][];
					"Prodigy.Events.Screen.ENABLE_BACKGROUND": Instance["_game"]["_state"]["_current"][];
					"Prodigy.Events.Screen.ENABLE_CONTENT": Instance["_game"]["_state"]["_current"][];
					"Prodigy.Events.Screen.GET_LAYER": Instance["_game"]["_state"]["_current"][];
					"Prodigy.Events.Telemetry.ANONYMOUS_GAME_COMPLETE_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.ANONYMOUS_GAME_DISCOVERY": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.EXTERNAL_ANALYTICS": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_AVATAR_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_BATTLE_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_COMPLETE_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_DISCOVERY_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_QUESTION_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_SESSION_END_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_SESSION_START_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_SINK_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_SOCIAL_V3": unknown /* too deep */[];
					"Prodigy.Events.Telemetry.GAME_SOURCE_V3": unknown /* too deep */[];
				};
				bId2: {
					"Prodigy.Events.Creature.LEVEL_UP": unknown /* too deep */[];
					"Prodigy.Events.Creature.STARS_ADDED": unknown /* too deep */[];
				};
				Card: {
					"Prodigy.Events.FriendsList.CANCEL_REQUEST": unknown /* too deep */[];
					"Prodigy.Events.FriendsList.REMOVE_FRIEND": unknown /* too deep */[];
					"Prodigy.Events.FriendsList.SEND_REQUEST": unknown /* too deep */[];
				};
				FriendsList: {
					"Prodigy.Events.FriendsList.CLEAR_FRIEND_REQUESTS_CACHE": unknown /* too deep */[];
					"Prodigy.Events.FriendsList.GET_FRIENDS_LIST": unknown /* too deep */[];
					"Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": unknown /* too deep */[];
					"Prodigy.Events.FriendsList.REMOVE_FRIEND": unknown /* too deep */[];
				};
				NetworkHandlers: {};
				ProdigyMailer: {
					"Prodigy.Events.Mailer.DELETE_MAIL": unknown /* too deep */[];
					"Prodigy.Events.Mailer.GET_ALL_MAIL": unknown /* too deep */[];
					"Prodigy.Events.Mailer.GET_TOTAL_MAIL": unknown /* too deep */[];
				};
				ProdigyMailerButton: {
					"Prodigy.Events.Mailer.GET_TOTAL_MAIL": unknown /* too deep */[];
				};
				ProdigyMailView: {
					"Prodigy.Events.Mailer.MARK_AS_READ": unknown /* too deep */[];
				};
				UI: {
					"Prodigy.Events.House.CLICKED_HOUSE_ICON": unknown /* too deep */[];
				};
			};
		};
		cache: Instance["_game"]["_cache"];
		config: Instance["_game"]["_config"];
		device: Instance["_game"]["_device"];
		fps: {
			_isPendingResumeRecordFPS: boolean;
			_record: boolean;
			record: boolean;
			_framerate: number;
			_frames: number;
			_prevTime: number;
			_rollingCount: number;
			_rollingSum: number;
			endFrame(): void;
			getAverageFramerate(): unknown;
			getFramerate(): unknown;
			timeNow(): unknown;
		};
		frameWorkManager: {
			_frameWorkDone: boolean;
			_frameStartTime: number;
			frameBudget: number;
			frameBudgetRemaining: number;
			frameTimeElapsed: number;
			_now(): void;
			awaitFreeTime(t: unknown, i: unknown): void;
			cancelWork(): unknown;
			flushWorkQueue(): void;
			markFrameEnd(): void;
			markFrameStart(): void;
			_workPromises: never[];
		};
		input: Instance["_game"]["_input"];
		inputDispatcher: {
			dispatchKeyboardEvent(t: unknown, i: unknown): void;
			dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void;
			dispatchMouseEvent(t: unknown, i: unknown): void;
			game: Instance["_game"];
		};
		load: Instance["_game"]["_load"];
		onPause: Instance["_game"]["_onPause"];
		onResume: Instance["_game"]["_onResume"];
		renderer: Instance["_game"]["_app"]["renderer"];
		rnd: Instance["_game"]["_rnd"];
		scale: Instance["_game"]["_scale"];
		seededRandom: {
			frac(t: unknown): unknown;
			pick(t: unknown, i: unknown): unknown;
			shuffleArray(t: unknown, i: unknown): unknown;
			randomDataGenerator: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
		};
		sound: Instance["_game"]["_sound"];
		stage: Instance["_game"]["_add"]["stage"];
		state: Instance["_game"]["_state"];
		time: Instance["_game"]["_input"]["activePointer"]["backButton"]["time"];
		tweens: Instance["_game"]["_tweens"];
		world: Instance["_game"]["_add"]["stage"];
	};
	_prodigy: {
		previousNow: number;
		updateCount: number;
		version: string;
		_inputBlocker: null;
		automation: null;
		spinner: null;
		cleanup(): void;
		init(): void;
		initializeBreadcrumbs(): void;
		initializeInjectionContainer(): void;
		loading(t: unknown, i: unknown): void;
		postCacheInit(): void;
		postPIXIGameInit(): void;
		start(t: unknown, i: unknown, n: unknown): void;
		startCoOp(t: unknown): void;
		startPrefabScene(t: unknown, i: unknown): void;
		update(): void;
		achievements: {
			getCompletionText(t: unknown): unknown;
			getCurrent(t: unknown): unknown;
			getData(t: unknown): unknown;
			getDesc(t: unknown): unknown;
			getName(t: unknown): unknown;
			getProgress(t: unknown): unknown;
			getTarget(t: unknown): unknown;
			getZero(): unknown;
			process(): unknown;
			processValue(t: unknown): unknown;
			game: Instance["_game"];
		};
		animation: {
			fade(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			float(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			hop(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			rotate(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			shake(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			translate(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			game: Instance["_game"];
		};
		assets: {
			appendAssets(t: unknown): void;
			getAsset(t: unknown): unknown;
			getImageBounds(t: unknown): unknown;
			getImagePivots(t: unknown): unknown;
			assets: {
				"player-boot-68": null;
				"atlas-10": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-110": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-144": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-157": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-161": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-169": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-179": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-18": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-181": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-189": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-19": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-21": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-8": {
					v: number;
					filename: string;
					type: string;
				};
				"atlas-9": {
					v: number;
					filename: string;
					type: string;
				};
				"battle-academy-classroom": {
					base: string;
					type: string;
					url: string;
				};
				"battle-academy-gh-stairs": {
					base: string;
					type: string;
					url: string;
				};
				"battle-ancient-ruins": {
					base: string;
					type: string;
					url: string;
				};
				"battle-ancient-ruins-guardian": {
					base: string;
					type: string;
					url: string;
				};
				"battle-archives": {
					base: string;
					type: string;
					url: string;
				};
				"battle-bonfire-inside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-bonfire-lava": {
					base: string;
					type: string;
					url: string;
				};
				"battle-bonfire-outside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-coliseum-outside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-forest-generic": {
					base: string;
					type: string;
					url: string;
				};
				"battle-forest-outside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-lamplight-outside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-lamplight-outside-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"battle-lamplight-outside-starlight": {
					base: string;
					type: string;
					url: string;
				};
				"battle-lamplight-outside-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"battle-shipwreck-outside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-shipwreck-underwater": {
					base: string;
					type: string;
					url: string;
				};
				"battle-shiverchill-inside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-shiverchill-outside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-skywatch-inside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-skywatch-outside": {
					base: string;
					type: string;
					url: string;
				};
				"battle-tower-inside": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-endmap-1-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-endmap-1-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-endmap-2-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-endmap-2-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-endmap-3-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-endmap-3-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-guardianmap-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-guardianmap-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-hubmap-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-hubmap-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-1-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-1-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-2-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-2-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-3-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-3-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-4-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-4-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-5-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-5-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-6-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-6-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-7-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-middlemap-7-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-startmap-1-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-startmap-1-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-startmap-2-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-startmap-2-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-startmap-3-background": {
					base: string;
					type: string;
					url: string;
				};
				"bounty-run-startmap-3-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"crystal-caverns-phase-1-background": {
					base: string;
					type: string;
					url: string;
				};
				"crystal-caverns-phase-1-farback": {
					base: string;
					type: string;
					url: string;
				};
				"crystal-caverns-phase-1-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"crystal-caverns-phase-2-background": {
					base: string;
					type: string;
					url: string;
				};
				"crystal-caverns-phase-2-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"crystal-caverns-phase-3-background": {
					base: string;
					type: string;
					url: string;
				};
				"crystal-caverns-phase-3-foreground": {
					base: string;
					type: string;
					url: string;
				};
				"feature-flag-data": {
					fullURL: string;
					type: string;
				};
				"female-outfit-46": {
					v: number;
					type: string;
					leftArm: {
						x: number;
						y: number;
						handIK: {
							x: number;
							y: number;
						};
						pivot: {
							x: number;
							y: number;
						};
					};
					legs: {
						x: number;
						y: number;
						pivot: {
							x: number;
							y: number;
						};
					};
					rightArm: {
						x: number;
						y: number;
						pivot: {
							x: number;
							y: number;
						};
					};
					shirt: {
						x: number;
						y: number;
						pivot: {
							x: number;
							y: number;
						};
					};
				};
				"map-academy-cr1": {
					base: string;
					type: string;
					url: string;
				};
				"map-academy-cr2": {
					base: string;
					type: string;
					url: string;
				};
				"map-academy-gh1": {
					base: string;
					type: string;
					url: string;
				};
				"map-academy-gh2": {
					base: string;
					type: string;
					url: string;
				};
				"map-academy-gh3": {
					base: string;
					type: string;
					url: string;
				};
				"map-activity_zone-a1": {
					base: string;
					type: string;
					url: string;
				};
				"map-activity_zone-a2": {
					base: string;
					type: string;
					url: string;
				};
				"map-activity_zone-b1": {
					base: string;
					type: string;
					url: string;
				};
				"map-activity_zone-b2": {
					base: string;
					type: string;
					url: string;
				};
				"map-activity_zone-b3": {
					base: string;
					type: string;
					url: string;
				};
				"map-activity_zone-c1": {
					base: string;
					type: string;
					url: string;
				};
				"map-activity_zone-c2": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-1": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-2": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-3": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-4": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-5": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-6": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-end": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m1": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m2": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m3": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m4": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m5": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m6": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m7": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m8": {
					base: string;
					type: string;
					url: string;
				};
				"map-archives-m9": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-a1": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-a4": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-b1": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-b2": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-b4": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-b5": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-c1": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-c2": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-c3": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-c4": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-c6": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-d1": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-d2": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-d3": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-d4": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-d5": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-d6": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-e5": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-e6": {
					base: string;
					type: string;
					url: string;
				};
				"map-bonfire_spire-titan": {
					base: string;
					type: string;
					url: string;
				};
				"map-crystal_caverns-dungeonhub": {
					base: string;
					type: string;
					url: string;
				};
				"map-darktower-a1": {
					base: string;
					type: string;
					url: string;
				};
				"map-darktower-a2": {
					base: string;
					type: string;
					url: string;
				};
				"map-darktower-a3": {
					base: string;
					type: string;
					url: string;
				};
				"map-dyno-a0": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-1": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-10": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-11": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-12": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-13": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-14": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-15": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-2": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-3": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-4": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-5": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-6": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-7": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-8": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-9": {
					base: string;
					type: string;
					url: string;
				};
				"map-earth-tower-end": {
					base: string;
					type: string;
					url: string;
				};
				"map-earthtower-cr": {
					base: string;
					type: string;
					url: string;
				};
				"map-earthtower-wr": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-a3": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-a4": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-a5": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-b5": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-b6": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-b7": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-b8": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-c4": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-c7": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-c8": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-d3": {
					base: string;
					type: string;
					url: string;
				};
				"map-forest-titan": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-cool-cave": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-cool-cave-unique-1": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-cool-cave-unique-2": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-exit": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-exterior": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-fire-pit": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-fire-pit-2": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-fire-pit-3": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-forest": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-house-large-3": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-house-large-4": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-icecaves": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-large-0": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-large-1": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-medium-0": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-medium-1": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-small-0": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-small-1": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-suburbs": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-treehouse": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-treehouse-unique-1": {
					base: string;
					type: string;
					url: string;
				};
				"map-house-treehouse-unique-2": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a1-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a2": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a2-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a2-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a2-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a2-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a2-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a3": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a3-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a3-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a3-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a3-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a3-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a4": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a4-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a4-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a4-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-a4-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b0": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b0-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b0-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b0-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b0-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b1": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b1-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b1-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b1-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b1-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b2": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b2-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b2-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b2-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b2-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b2-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b3": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b3-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b3-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b3-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b3-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b3-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b4": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b4-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b4-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b4-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b4-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b4-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b5": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b5-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b5-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b5-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-b5-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c1": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c2": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c2-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c2-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c2-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c2-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c2-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c3": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c3-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c3-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c3-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c3-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c3-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c4": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c4-pumpkinfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c4-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c4-starlight_festival": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c4-summerfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-c4-winterfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-coliseum": {
					base: string;
					type: string;
					url: string;
				};
				"map-lamplight-d3-springfest": {
					base: string;
					type: string;
					url: string;
				};
				"map-pathing": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-a1": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-a2": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-a3": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-a4": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-a5": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-a7": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b10": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b11": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b12": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b13": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b2": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b4": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b5": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b6": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b7": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-b8": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-c10": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-c11": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-c12": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-c6": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-c7": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-c8": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-c9": {
					base: string;
					type: string;
					url: string;
				};
				"map-shipwreck_shore-titan": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a10": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a11": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a2": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a3": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a4": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a5": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a6": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a7": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-a9": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b1": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b10": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b2": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b3": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b6": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b7": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b8": {
					base: string;
					type: string;
					url: string;
				};
				"map-shiverchill-b9": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-a0": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-a1": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-b1": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-b2": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-b3": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-c1": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-c2": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-c3": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-c4": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-c5": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-d1": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-d2": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-d3": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-e1": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-e2": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-e3": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-e4": {
					base: string;
					type: string;
					url: string;
				};
				"map-skywatch-e5": {
					base: string;
					type: string;
					url: string;
				};
				"map-toyzone-a1": {
					base: string;
					type: string;
					url: string;
				};
				"map-toyzone-b1": {
					base: string;
					type: string;
					url: string;
				};
				"map-toyzone-b2": {
					base: string;
					type: string;
					url: string;
				};
				"monster-small-125": {};
				"monster-small-126": {};
				"monster-small-127": {};
				"monster-small-128": {};
				"monster-small-129": {};
				"player-face-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"player-hair-1": {
					v: number;
					vIcon: number;
					x: number;
					y: number;
					type: string;
					pivot: {
						x: number;
						y: number;
					};
				};
				"player-hat-24": {
					v: number;
					vIcon: number;
					x: number;
					y: number;
					hideReplace: string;
					type: string;
					hairHide: number[];
					pivot: {
						x: number;
						y: number;
					};
				};
				"player-head-1": {
					v: number;
					type: string;
				};
				"player-neck-1": {
					v: number;
					type: string;
				};
				"player-weapon-5": {
					angle: number;
					size: number;
					v: number;
					vIcon: number;
					type: string;
					anchor: {
						x: number;
						y: number;
					};
				};
				"sfx-18": {
					v: number;
					filename: string;
					type: string;
				};
				"sfx-46": {
					v: number;
					filename: string;
					type: string;
				};
				"singleImage-5": {
					v: number;
					filename: string;
					type: string;
				};
				"tileset-academy": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-academy-sup": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-ancient-ruins": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-ancient-ruins-statue": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-archives": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-bonfire": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-classroom": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-classroom-firefly": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-cloud": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-cloud-new": {
					extruded: boolean;
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-cloud-no-collisions": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-collisions": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-darktower": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-exterior-general": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-firefly-new": {
					extruded: boolean;
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-firepit": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-forest": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-forest-new": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-generic": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-generic-new": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-generic-snow": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-icecave": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-icecave-new": {
					extruded: boolean;
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-iceruins": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-infinity-tower-construction": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-interior": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-interior-general": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-interior-icecave": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-interior-treehouse": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-math-tower-basic": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-minecarts": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-outside": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-outsidesnow": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-railruins": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-ship-exterior": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-ship-interior": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-shiverchill": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-shiverchill-footsteppath": {
					extruded: boolean;
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-shiverchill-new": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-skywatch": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-skywatch-buildings": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-skywatch-factory": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-springfest": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-towertown-basic": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-town": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-town-december": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-town-new": {
					extruded: boolean;
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-town-november": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-town-october": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-town-summerfest": {
					extruded: boolean;
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-toy-ruins-test": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-toyzone": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-toyzone-dragons": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-tutorial-subspace": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-twilight-arcade": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-UI": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-volcano": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-volcano-new": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-wall-collisions": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"tileset-water-new": {
					h: number;
					w: number;
					base: string;
					type: string;
					url: string;
				};
				"towertown-default-1": {
					base: string;
					type: string;
					url: string;
				};
				"towertown-default-2": {
					base: string;
					type: string;
					url: string;
				};
				"towertown-tutorial": {
					base: string;
					type: string;
					url: string;
				};
				"tt-deco-ammonitefossil": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-babygargoyle": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bigredbow": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-birdbath": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-ammonitefossil": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-babygargoyle": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-bigredbow": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-birdbath": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-clamshell": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-conflictedmask": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-crystalflake": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-gingerbreadman": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-grapes": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-happyflowercoconut": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-happystar": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-happysun": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-hummingfeeder": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-lantern": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-lifesaver": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-orangeflower": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-pinkflowerbasket": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-pinklotus": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-piratewheel": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-planet": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-puffyskates": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-redgrassmushroom": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-starswithcrescentmoon": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-steellantern": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-stuffedfish": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-teengargoyle": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-toyeggnest": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-windowsillcoolingpie": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-woodenclock": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-bp-woodenoctopus": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-clamshell": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-conflictedmask": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-crystalflake": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-gingerbreadman": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-grapes": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-happyflowercoconut": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-happystar": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-happysun": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-hummingfeeder": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-lantern": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-lifesaver": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-orangeflower": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-pinkflowerbasket": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-pinklotus": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-piratewheel": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-planet": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-puffyskates": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-redgrassmushroom": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-starswithcrescentmoon": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-steellantern": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-stuffedfish": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-teengargoyle": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-toyeggnest": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-windowsillcoolingpie": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-woodenclock": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-deco-woodenoctopus": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-fire-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-fire-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-fire-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-fire-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-fire-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-ice-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-ice-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-ice-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-ice-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-ice-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-plant-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-plant-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-plant-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-plant-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-plant-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-storm-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-storm-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-storm-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-storm-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-storm-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-water-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-water-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-water-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-water-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-bp-water-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-fire-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-fire-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-fire-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-fire-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-fire-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-ice-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-ice-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-ice-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-ice-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-ice-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-plant-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-plant-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-plant-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-plant-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-plant-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-storm-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-storm-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-storm-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-storm-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-storm-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-water-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-water-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-water-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-water-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-frame-water-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-fire-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-fire-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-fire-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-fire-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-fire-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-ice-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-ice-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-ice-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-ice-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-ice-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-plant-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-plant-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-plant-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-plant-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-plant-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-storm-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-storm-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-storm-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-storm-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-storm-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-water-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-water-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-water-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-water-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-bp-water-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-fire-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-fire-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-fire-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-fire-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-fire-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-ice-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-ice-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-ice-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-ice-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-ice-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-plant-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-plant-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-plant-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-plant-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-plant-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-storm-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-storm-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-storm-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-storm-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-storm-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-water-1": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-water-2": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-water-3": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-water-4": {
					v: number;
					vIcon: number;
					type: string;
				};
				"tt-interior-water-5": {
					v: number;
					vIcon: number;
					type: string;
				};
				"voice-0": {
					v: number;
					type: string;
				};
				"voice-1-1": {
					v: number;
					type: string;
				};
				"voice-1-10": {
					v: number;
					type: string;
				};
				"voice-1-11": {
					v: number;
					type: string;
				};
				"voice-1-12": {
					v: number;
					type: string;
				};
				"voice-1-13": {
					v: number;
					type: string;
				};
				"voice-1-14": {
					v: number;
					type: string;
				};
				"voice-1-15": {
					v: number;
					type: string;
				};
				"voice-1-2": {
					v: number;
					type: string;
				};
				"voice-1-3": {
					v: number;
					type: string;
				};
				"voice-1-4": {
					v: number;
					type: string;
				};
				"voice-1-5": {
					v: number;
					type: string;
				};
				"voice-1-6": {
					v: number;
					type: string;
				};
				"voice-1-7": {
					v: number;
					type: string;
				};
				"voice-1-8": {
					v: number;
					type: string;
				};
				"voice-1-9": {
					v: number;
					type: string;
				};
				"voice-10-1": {
					v: number;
					type: string;
				};
				"voice-10-10": {
					v: number;
					type: string;
				};
				"voice-10-11": {
					v: number;
					type: string;
				};
				"voice-10-12": {
					v: number;
					type: string;
				};
				"voice-10-13": {
					v: number;
					type: string;
				};
				"voice-10-14": {
					v: number;
					type: string;
				};
				"voice-10-15": {
					v: number;
					type: string;
				};
				"voice-10-16": {
					v: number;
					type: string;
				};
				"voice-10-17": {
					v: number;
					type: string;
				};
				"voice-10-18": {
					v: number;
					type: string;
				};
				"voice-10-19": {
					v: number;
					type: string;
				};
				"voice-10-2": {
					v: number;
					type: string;
				};
				"voice-10-20": {
					v: number;
					type: string;
				};
				"voice-10-21": {
					v: number;
					type: string;
				};
				"voice-10-22": {
					v: number;
					type: string;
				};
				"voice-10-23": {
					v: number;
					type: string;
				};
				"voice-10-24": {
					v: number;
					type: string;
				};
				"voice-10-25": {
					v: number;
					type: string;
				};
				"voice-10-26": {
					v: number;
					type: string;
				};
				"voice-10-27": {
					v: number;
					type: string;
				};
				"voice-10-28": {
					v: number;
					type: string;
				};
				"voice-10-29": {
					v: number;
					type: string;
				};
				"voice-10-3": {
					v: number;
					type: string;
				};
				"voice-10-30": {
					v: number;
					type: string;
				};
				"voice-10-31": {
					v: number;
					type: string;
				};
				"voice-10-32": {
					v: number;
					type: string;
				};
				"voice-10-33": {
					v: number;
					type: string;
				};
				"voice-10-34": {
					v: number;
					type: string;
				};
				"voice-10-35": {
					v: number;
					type: string;
				};
				"voice-10-36": {
					v: number;
					type: string;
				};
				"voice-10-37": {
					v: number;
					type: string;
				};
				"voice-10-38": {
					v: number;
					type: string;
				};
				"voice-10-39": {
					v: number;
					type: string;
				};
				"voice-10-4": {
					v: number;
					type: string;
				};
				"voice-10-40": {
					v: number;
					type: string;
				};
				"voice-10-41": {
					v: number;
					type: string;
				};
				"voice-10-42": {
					v: number;
					type: string;
				};
				"voice-10-43": {
					v: number;
					type: string;
				};
				"voice-10-44": {
					v: number;
					type: string;
				};
				"voice-10-45": {
					v: number;
					type: string;
				};
				"voice-10-46": {
					v: number;
					type: string;
				};
				"voice-10-47": {
					v: number;
					type: string;
				};
				"voice-10-48": {
					v: number;
					type: string;
				};
				"voice-10-49": {
					v: number;
					type: string;
				};
				"voice-10-5": {
					v: number;
					type: string;
				};
				"voice-10-50": {
					v: number;
					type: string;
				};
				"voice-10-51": {
					v: number;
					type: string;
				};
				"voice-10-52": {
					v: number;
					type: string;
				};
				"voice-10-53": {
					v: number;
					type: string;
				};
				"voice-10-54": {
					v: number;
					type: string;
				};
				"voice-10-55": {
					v: number;
					type: string;
				};
				"voice-10-56": {
					v: number;
					type: string;
				};
				"voice-10-57": {
					v: number;
					type: string;
				};
				"voice-10-58": {
					v: number;
					type: string;
				};
				"voice-10-59": {
					v: number;
					type: string;
				};
				"voice-10-6": {
					v: number;
					type: string;
				};
				"voice-10-60": {
					v: number;
					type: string;
				};
				"voice-10-61": {
					v: number;
					type: string;
				};
				"voice-10-62": {
					v: number;
					type: string;
				};
				"voice-10-63": {
					v: number;
					type: string;
				};
				"voice-10-64": {
					v: number;
					type: string;
				};
				"voice-10-65": {
					v: number;
					type: string;
				};
				"voice-10-66": {
					v: number;
					type: string;
				};
				"voice-10-67": {
					v: number;
					type: string;
				};
				"voice-10-68": {
					v: number;
					type: string;
				};
				"voice-10-69": {
					v: number;
					type: string;
				};
				"voice-10-7": {
					v: number;
					type: string;
				};
				"voice-10-70": {
					v: number;
					type: string;
				};
				"voice-10-71": {
					v: number;
					type: string;
				};
				"voice-10-72": {
					v: number;
					type: string;
				};
				"voice-10-73": {
					v: number;
					type: string;
				};
				"voice-10-74": {
					v: number;
					type: string;
				};
				"voice-10-75": {
					v: number;
					type: string;
				};
				"voice-10-76": {
					v: number;
					type: string;
				};
				"voice-10-77": {
					v: number;
					type: string;
				};
				"voice-10-78": {
					v: number;
					type: string;
				};
				"voice-10-79": {
					v: number;
					type: string;
				};
				"voice-10-8": {
					v: number;
					type: string;
				};
				"voice-10-80": {
					v: number;
					type: string;
				};
				"voice-10-81": {
					v: number;
					type: string;
				};
				"voice-10-82": {
					v: number;
					type: string;
				};
				"voice-10-83": {
					v: number;
					type: string;
				};
				"voice-10-84": {
					v: number;
					type: string;
				};
				"voice-10-85": {
					v: number;
					type: string;
				};
				"voice-10-86": {
					v: number;
					type: string;
				};
				"voice-10-87": {
					v: number;
					type: string;
				};
				"voice-10-88": {
					v: number;
					type: string;
				};
				"voice-10-89": {
					v: number;
					type: string;
				};
				"voice-10-9": {
					v: number;
					type: string;
				};
				"voice-10-90": {
					v: number;
					type: string;
				};
				"voice-10-91": {
					v: number;
					type: string;
				};
				"voice-10-92": {
					v: number;
					type: string;
				};
				"voice-10-93": {
					v: number;
					type: string;
				};
				"voice-10-94": {
					v: number;
					type: string;
				};
				"voice-10-95": {
					v: number;
					type: string;
				};
				"voice-10-96": {
					v: number;
					type: string;
				};
				"voice-10-97": {
					v: number;
					type: string;
				};
				"voice-10-98": {
					v: number;
					type: string;
				};
				"voice-10-99": {
					v: number;
					type: string;
				};
				"voice-11": {
					v: number;
					type: string;
				};
				"voice-11-1": {
					v: number;
					type: string;
				};
				"voice-11-2": {
					v: number;
					type: string;
				};
				"voice-11-3": {
					v: number;
					type: string;
				};
				"voice-12-1": {
					v: number;
					type: string;
				};
				"voice-12-10": {
					v: number;
					type: string;
				};
				"voice-12-11": {
					v: number;
					type: string;
				};
				"voice-12-12": {
					v: number;
					type: string;
				};
				"voice-12-13": {
					v: number;
					type: string;
				};
				"voice-12-14": {
					v: number;
					type: string;
				};
				"voice-12-15": {
					v: number;
					type: string;
				};
				"voice-12-16": {
					v: number;
					type: string;
				};
				"voice-12-17": {
					v: number;
					type: string;
				};
				"voice-12-18": {
					v: number;
					type: string;
				};
				"voice-12-2": {
					v: number;
					type: string;
				};
				"voice-12-3": {
					v: number;
					type: string;
				};
				"voice-12-4": {
					v: number;
					type: string;
				};
				"voice-12-5": {
					v: number;
					type: string;
				};
				"voice-12-6": {
					v: number;
					type: string;
				};
				"voice-12-7": {
					v: number;
					type: string;
				};
				"voice-12-8": {
					v: number;
					type: string;
				};
				"voice-12-9": {
					v: number;
					type: string;
				};
				"voice-13-1": {
					v: number;
					type: string;
				};
				"voice-14-1": {
					v: number;
					type: string;
				};
				"voice-14-2": {
					v: number;
					type: string;
				};
				"voice-15-1": {
					v: number;
					type: string;
				};
				"voice-15-10": {
					v: number;
					type: string;
				};
				"voice-15-11": {
					v: number;
					type: string;
				};
				"voice-15-12": {
					v: number;
					type: string;
				};
				"voice-15-13": {
					v: number;
					type: string;
				};
				"voice-15-14": {
					v: number;
					type: string;
				};
				"voice-15-15": {
					v: number;
					type: string;
				};
				"voice-15-16": {
					v: number;
					type: string;
				};
				"voice-15-17": {
					v: number;
					type: string;
				};
				"voice-15-18": {
					v: number;
					type: string;
				};
				"voice-15-2": {
					v: number;
					type: string;
				};
				"voice-15-3": {
					v: number;
					type: string;
				};
				"voice-15-4": {
					v: number;
					type: string;
				};
				"voice-15-5": {
					v: number;
					type: string;
				};
				"voice-15-6": {
					v: number;
					type: string;
				};
				"voice-15-7": {
					v: number;
					type: string;
				};
				"voice-15-8": {
					v: number;
					type: string;
				};
				"voice-15-9": {
					v: number;
					type: string;
				};
				"voice-16-1": {
					v: number;
					type: string;
				};
				"voice-16-2": {
					v: number;
					type: string;
				};
				"voice-16-3": {
					v: number;
					type: string;
				};
				"voice-17-1": {
					v: number;
					type: string;
				};
				"voice-17-2": {
					v: number;
					type: string;
				};
				"voice-17-3": {
					v: number;
					type: string;
				};
				"voice-17-4": {
					v: number;
					type: string;
				};
				"voice-18-1": {
					v: number;
					type: string;
				};
				"voice-18-2": {
					v: number;
					type: string;
				};
				"voice-18-3": {
					v: number;
					type: string;
				};
				"voice-18-4": {
					v: number;
					type: string;
				};
				"voice-18-5": {
					v: number;
					type: string;
				};
				"voice-19-1": {
					v: number;
					type: string;
				};
				"voice-2": {
					v: number;
					type: string;
				};
				"voice-20-1": {
					v: number;
					type: string;
				};
				"voice-20-2": {
					v: number;
					type: string;
				};
				"voice-21-1": {
					v: number;
					type: string;
				};
				"voice-21-2": {
					v: number;
					type: string;
				};
				"voice-22-1": {
					v: number;
					type: string;
				};
				"voice-22-2": {
					v: number;
					type: string;
				};
				"voice-23-1": {
					v: number;
					type: string;
				};
				"voice-23-2": {
					v: number;
					type: string;
				};
				"voice-23-3": {
					v: number;
					type: string;
				};
				"voice-24-1": {
					v: number;
					type: string;
				};
				"voice-25-1": {
					v: number;
					type: string;
				};
				"voice-26-1": {
					v: number;
					type: string;
				};
				"voice-27-1": {
					v: number;
					type: string;
				};
				"voice-28-1": {
					v: number;
					type: string;
				};
				"voice-29-1": {
					v: number;
					type: string;
				};
				"voice-3": {
					v: number;
					type: string;
				};
				"voice-30-1": {
					v: number;
					type: string;
				};
				"voice-31-1": {
					v: number;
					type: string;
				};
				"voice-31-10": {
					v: number;
					type: string;
				};
				"voice-31-11": {
					v: number;
					type: string;
				};
				"voice-31-2": {
					v: number;
					type: string;
				};
				"voice-31-3": {
					v: number;
					type: string;
				};
				"voice-31-4": {
					v: number;
					type: string;
				};
				"voice-31-5": {
					v: number;
					type: string;
				};
				"voice-31-6": {
					v: number;
					type: string;
				};
				"voice-31-7": {
					v: number;
					type: string;
				};
				"voice-31-8": {
					v: number;
					type: string;
				};
				"voice-31-9": {
					v: number;
					type: string;
				};
				"voice-32-1": {
					v: number;
					type: string;
				};
				"voice-33-1": {
					v: number;
					type: string;
				};
				"voice-34-1": {
					v: number;
					type: string;
				};
				"voice-35-1": {
					v: number;
					type: string;
				};
				"voice-36-1": {
					v: number;
					type: string;
				};
				"voice-37-1": {
					v: number;
					type: string;
				};
				"voice-38-1": {
					v: number;
					type: string;
				};
				"voice-39-1": {
					v: number;
					type: string;
				};
				"voice-39-2": {
					v: number;
					type: string;
				};
				"voice-39-3": {
					v: number;
					type: string;
				};
				"voice-39-4": {
					v: number;
					type: string;
				};
				"voice-4": {
					v: number;
					type: string;
				};
				"voice-5": {
					v: number;
					type: string;
				};
				"voice-6": {
					v: number;
					type: string;
				};
				"voice-7": {
					v: number;
					type: string;
				};
				"voice-8-1": {
					v: number;
					type: string;
				};
				"voice-8-10": {
					v: number;
					type: string;
				};
				"voice-8-11": {
					v: number;
					type: string;
				};
				"voice-8-12": {
					v: number;
					type: string;
				};
				"voice-8-13": {
					v: number;
					type: string;
				};
				"voice-8-14": {
					v: number;
					type: string;
				};
				"voice-8-2": {
					v: number;
					type: string;
				};
				"voice-8-3": {
					v: number;
					type: string;
				};
				"voice-8-4": {
					v: number;
					type: string;
				};
				"voice-8-5": {
					v: number;
					type: string;
				};
				"voice-8-6": {
					v: number;
					type: string;
				};
				"voice-8-7": {
					v: number;
					type: string;
				};
				"voice-8-8": {
					v: number;
					type: string;
				};
				"voice-8-9": {
					v: number;
					type: string;
				};
				"voice-9": {
					v: number;
					type: string;
				};
			};
		};
		attacks: {
			calculateDamage(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			getAttack(t: unknown): unknown;
			getAttackPriority(t: unknown): unknown;
			getBestAttack(t: unknown, i: unknown, n: unknown): unknown;
			getHealingAttack(t: unknown): unknown;
			isStrong(t: unknown, i: unknown): unknown;
			isWeak(t: unknown, i: unknown): unknown;
		};
		audio: {
			_doNotResume: boolean;
			_dialogueBGM: number;
			_bgmFadeTween: null;
			_targetBGMVolume: null;
			currentBgm: null;
			currentVoice: null;
			clearOldSounds(): void;
			getBGMVolume(): unknown;
			getSFXVolume(): unknown;
			getVoiceVolume(): unknown;
			isBGMPlaying(t: unknown): unknown;
			isVoicePlaying(t: unknown): unknown;
			onVisibilityChanged(t: unknown): void;
			pauseBGM(): void;
			playBGM(t: unknown, i: unknown): void;
			playSFX(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			playSound(t: unknown, i: unknown): unknown;
			playVoice(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			resumeBGM(): void;
			setBGMVolume(t: unknown, i: unknown): void;
			setMute(t: unknown): void;
			setSFXVolume(t: unknown): void;
			setVoiceVolume(t: unknown): void;
			stopVoice(): void;
			game: Instance["_game"];
		};
		battle: {
			battleScore(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			chooseAction(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			chooseRandomMonster(i: unknown): unknown;
			endEpicArena(t: unknown, i: unknown): void;
			getBattleLevel(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			initBackupEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initBattle(t: unknown, i: unknown): unknown;
			initEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initMainEnemy(t: unknown, i: unknown): unknown;
			initMetrics(): void;
			initWizardOpponent(t: unknown): unknown;
			onEndBattle(): void;
			replaceOpponentTeam(i: unknown, n: unknown): unknown;
			start(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			startEpicArena(t: unknown, i: unknown, n: unknown): unknown;
			battleStats: {
				endHealth: number;
				endTime: number;
				enemySpellsCast: number;
				enemySpellsCastFail: number;
				energy: number;
				energyCost: number;
				spellsCast: number;
				spellsFailed: number;
				startHealth: number;
				startTime: number;
				type: string;
				epicAttack: null;
				spellEnergyCost: null;
				battleCustomMeta: {};
				consumablesUsed: never[];
				pets: never[];
				petsRescued: never[];
				rescuesSuccessful: never[];
			};
			game: Instance["_game"];
			metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
		};
		bounty: {
			MAX_BOUNTIES: number;
			checkValidBounty(t: unknown, i: unknown): unknown;
			compareBounties(t: unknown, i: unknown): unknown;
			completeBounty(t: unknown): void;
			generateBounties(t: unknown): void;
			getAveragePetTeamLevel(): unknown;
			getBounties(): unknown;
			getBounty(t: unknown): unknown;
			getCoord(t: unknown): unknown;
			getLevel(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getMode(t: unknown): unknown;
			getMonster(t: unknown): unknown;
			getName(t: unknown): unknown;
			getReward(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			getText(t: unknown): unknown;
			getZoneName(t: unknown): unknown;
			hasBounty(t: unknown, i: unknown): unknown;
			placeBounty(t: unknown, i: unknown, n: unknown): void;
			placeBountyHere(t: unknown, i: unknown, n: unknown, e: unknown): void;
			game: Instance["_game"];
			mode: string[];
			postName: string[];
			preName: string[];
			reward: number[];
			titleName: string[];
			zones: string[];
		};
		breadcrumbManager: {
			completeBreadcrumb(t: unknown, i: unknown): unknown;
			init(t: unknown, i: unknown): void;
			isBreadcrumbComplete(t: unknown, i: unknown): unknown;
			resetBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
			resetBreadcrumbs(t: unknown): void;
			_onBreadcrumbCompleted: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Instance["_prodigy"]["breadcrumbManager"]["_onBreadcrumbCompleted"]["_bindings"];
			};
			breadcrumbConfig: {
				addFeature(t: unknown): unknown;
				setup(): void;
				features: {
					BREADCRUMB_CLICKED_DAB: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_CLICKED_DAB_DAB_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_DAB_DANCE_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_DAB_EMOTE_BUTTON: unknown /* too deep */;
						};
					};
					BREADCRUMB_FEATURE_DUNGEONS: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_STARTED_CRYSTAL_CAVERNS: unknown /* too deep */;
						};
					};
					BREADCRUMB_TITAN_INTRO: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_TITAN_HARVEY_TALKED: unknown /* too deep */;
							BREADCRUMB_TITAN_WATCHED_INTRO: unknown /* too deep */;
						};
					};
					BREADCRUMB_TITAN_UNLOCKED_HUD_BUTTON: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_TITAN_UNLOCKED_BUTTONS: unknown /* too deep */;
							BREADCRUMB_TITAN_UNLOCKED_DIALOGUE: unknown /* too deep */;
							BREADCRUMB_TITAN_UNLOCKED_HUD_BUTTON: unknown /* too deep */;
						};
					};
					BREADCRUMB_UNLOCK_ACADEMY: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_CLICKED_WORLD_MAP_BUTTON: unknown /* too deep */;
							BREADCRUMB_UNLOCK_ACADEMY_NOOT_DIALOGUE: unknown /* too deep */;
						};
					};
					FEATURE_ACADEMY: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_ACADEMY_SECOND_FLOOR: unknown /* too deep */;
							BREADCRUMB_BONFIRE_KEYSTONE: unknown /* too deep */;
							BREADCRUMB_FOREST_KEYSTONE: unknown /* too deep */;
							BREADCRUMB_SHIPWRECK_KEYSTONE: unknown /* too deep */;
							BREADCRUMB_SHIVERCHILL_KEYSTONE: unknown /* too deep */;
							BREADCRUMB_SKYWATCH_KEYSTONE: unknown /* too deep */;
						};
					};
					FEATURE_ACADEMY_TOWERS: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_ACADEMY_NO_KEYSTONES: unknown /* too deep */;
							BREADCRUMB_ACADEMY_UNPLACED_KEYSTONES: unknown /* too deep */;
							BREADCRUMB_ACADEMY_VISITED: unknown /* too deep */;
							BREADCRUMB_CLICKED_WORLD_MAP_BUTTON: unknown /* too deep */;
							BREADCRUMB_EARTHTOWER_COMPLETED_ELEVATOR: unknown /* too deep */;
						};
					};
					FEATURE_BADGES: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_CLICKED_BADGES_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_SOCIAL_BUTTON: unknown /* too deep */;
						};
					};
					FEATURE_BATTLE_TUTORIAL: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_AUTO_ATTACK_TUTORIAL: unknown /* too deep */;
							BREADCRUMB_FIRST_AOA_CHARGED: unknown /* too deep */;
							BREADCRUMB_FIRST_AOA_USED: unknown /* too deep */;
							BREADCRUMB_FIRST_AOE_READY: unknown /* too deep */;
							BREADCRUMB_FIRST_BATTLE_FINISHED: unknown /* too deep */;
							BREADCRUMB_FIRST_BATTLE_STARTED: unknown /* too deep */;
							BREADCRUMB_FIRST_ENEMY_HURT: unknown /* too deep */;
							BREADCRUMB_FIRST_ENERGY_GAINED: unknown /* too deep */;
							BREADCRUMB_FIRST_NEAR_DEFEAT: unknown /* too deep */;
							BREADCRUMB_FIRST_NFACTOR_BONUS: unknown /* too deep */;
							BREADCRUMB_FIRST_PET_RESCUABLE: unknown /* too deep */;
							BREADCRUMB_FIRST_PET_RESCUED: unknown /* too deep */;
							BREADCRUMB_FREE_RESCUE: unknown /* too deep */;
						};
					};
					FEATURE_CLOUD_MOUNT: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_CLOUD_MOUNT_TOGGLED: unknown /* too deep */;
						};
					};
					FEATURE_COOP_BATTLE: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_COOP_BATTLE_START: unknown /* too deep */;
							BREADCRUMB_COOP_CRYSTAL_INTRO: unknown /* too deep */;
							BREADCRUMB_COOP_PARTY_SELECT: unknown /* too deep */;
						};
					};
					FEATURE_ELEMENTAL_GUARDIAN: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_EG_FTUE_COMPLETED: unknown /* too deep */;
							BREADCRUMB_EG_ISLAND_UNLOCKED: unknown /* too deep */;
							BREADCRUMB_FIRST_ENTRY_HARD_PATH_BOUNTY_RUN: unknown /* too deep */;
							BREADCRUMB_GUARDIAN_LOADOUT_FTUE: unknown /* too deep */;
							BREADCRUMB_RUNE_RUN_BOARD_FTUE: unknown /* too deep */;
						};
					};
					FEATURE_HOUSE_MOVING: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_CLICKED_HOUSE_MOVE_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_WORLD_MAP_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_WORLD_MAP_HOUSE: unknown /* too deep */;
						};
					};
					FEATURE_HOUSE_VISITING: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_CLICKED_CARD_VISIT_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_HOUSE_LOCK_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_WORLD_MAP_BUTTON: unknown /* too deep */;
							BREADCRUMB_CLICKED_WORLD_MAP_HOUSE: unknown /* too deep */;
						};
					};
					FEATURE_PUMPKINFEST_CUTSCENES: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_PUMPKINFEST_INTRO: unknown /* too deep */;
						};
					};
					FEATURE_SOCIAL_FEED: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_SOCIAL_FEED_OPENED: unknown /* too deep */;
						};
					};
					FEATURE_SPRINGFEST_CUTSCENES: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_FIRST_SPRINGFEST_DON_ZORRO_CLICK: unknown /* too deep */;
							BREADCRUMB_FIRST_SPRINGFEST_HARRIET_HOOD_CLICK: unknown /* too deep */;
							BREADCRUMB_SPRINGFEST_INTRO: unknown /* too deep */;
						};
					};
					FEATURE_STARLIGHT_CUTSCENES: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_STARLIGHT_INTRO: unknown /* too deep */;
						};
					};
					FEATURE_STYLIST: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_CLICKED_CARD_STYLIST_BUTTON: unknown /* too deep */;
						};
					};
					FEATURE_SUMMERFEST_CUTSCENES: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_FIRST_SUMMERFEST_NICKNAMER_CLICK: unknown /* too deep */;
							BREADCRUMB_FIRST_SUMMERFEST_STYLIST_CLICK: unknown /* too deep */;
							BREADCRUMB_FIRST_SUMMERFEST_WHEEL_CLICK: unknown /* too deep */;
							BREADCRUMB_SUMMERFEST_INTRO: unknown /* too deep */;
						};
					};
					FEATURE_TOWERS_PROMPT: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							FIRST_TIME_PROMPT: unknown /* too deep */;
							NOOT_TOWER_PROMPT: unknown /* too deep */;
						};
					};
					FEATURE_WINTERFEST_CUTSCENES: {
						name: string;
						addBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
						getBreadcrumbMask(t: unknown): unknown;
						breadcrumbs: {
							BREADCRUMB_WINTERFEST_INTRO: unknown /* too deep */;
						};
					};
				};
			};
			dataSource: {
				_updated: boolean;
				updated: boolean;
				get(t: unknown): unknown;
				getCompletedQuests(t: unknown): unknown;
				getDataAndClear(): unknown;
				getDungeonSchema(t: unknown): unknown;
				getDungeonState(t: unknown, i: unknown): unknown;
				getZoneVars(t: unknown, i: unknown, n: unknown): unknown;
				set(t: unknown, i: unknown): void;
				setData(t: unknown): void;
				_dungeonStates: {};
				data: {
					breadcrumbs: {
						FEATURE_BADGES: number;
					};
					dungeons: {
						crystal_caverns: {
							persistentData: unknown /* too deep */;
						};
					};
					towers: {
						earthtower: {
							boss: boolean;
							wardenSaved: boolean;
							achievementMonstersCount: number;
							achievementPagesCount: number;
							floors: number;
						};
					};
					tutorial: {
						"0": number;
					};
					world: {
						bounties: number[];
						dailyQuests: {
							"0": unknown /* too deep */;
						};
					};
					zone: {
						academy: {
							quest: unknown /* too deep */;
						};
						house: {
							quest: unknown /* too deep */;
						};
						lamplight: {
							"2": string;
						};
						shiverchill: {
							"11": unknown /* too deep */;
						};
					};
				};
			};
			onBreadcrumbCompleted: Instance["_prodigy"]["breadcrumbManager"]["_onBreadcrumbCompleted"];
		};
		classModeController: {
			getInClassDisabledZones(): unknown;
			isClassMode(): unknown;
			isLockedZone(t: unknown): unknown;
			onClassMode(t: unknown, i: unknown): void;
			setClassMode(): void;
			lockedMaps: never[];
			lockedZones: string[];
		};
		colorReplaceController: {
			checkColorAsset(t: unknown, i: unknown, n: unknown, e: unknown): void;
			clearCache(t: unknown): void;
			clearEntries(t: unknown): unknown;
			generateAssetName(t: unknown, i: unknown): unknown;
			generateNewColor(t: unknown, i: unknown, n: unknown, e: unknown): void;
			getColorReplacedSprite(i: unknown, n: unknown, e: unknown, s: unknown): void;
			getColorReplacedSpriteGL(t: unknown, i: unknown, n: unknown): void;
			onBaseColorReady(t: unknown, i: unknown, n: unknown): void;
			pixelColorReplace(t: unknown): unknown;
			safeCallback(t: unknown, i: unknown): void;
			textureGenerated(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			baseColor: never[];
			baseDictionary: {};
			game: Instance["_game"];
			isBaseReady: {};
			isColorReady: {};
			newColor: never[];
		};
		create: {
			achievement(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			advButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			animatedSpineNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			animatedSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			aspenFrostBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bonfireBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			button(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown): unknown;
			character(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
			cloudBoss(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			conjureCubeButton(t: unknown, i: unknown, n: unknown): unknown;
			dungeonIndicator(t: unknown, i: unknown): unknown;
			element(t: unknown, i: unknown, n: unknown): unknown;
			fillBar(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
			follow(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			font(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			forestBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			houseItem(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			hudButton(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			indicator(t: unknown, i: unknown): unknown;
			item(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			monster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			monsterEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, c: unknown, a: unknown, f: unknown, b: unknown): unknown;
			nameFont(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			nicknamerPedestal(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			panel(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			panelButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			player(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown): unknown;
			progressBar(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			scrollBar(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			shadowWyrmBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			shiverchillBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			slider(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			snow(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spineNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			spriteLite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			stackButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			textButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			timer(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			timerControl(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			titanIndicator(t: unknown, i: unknown): unknown;
			game: Instance["_game"];
		};
		dialogue: {
			create(): unknown;
			game: Instance["_game"];
		};
		dialogues: {
			get(t: unknown, i: unknown): unknown;
			data: {
				"bargo-bunny": { face: number; textKey: string; }[];
				benni: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; })[];
				bok: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; })[];
				broccolina: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { anim: number; face: number; textKey: string; })[];
				cebollini: { anim: number; face: number; textKey: string; audio: unknown /* too deep */; }[];
				"don-zorro": { face: number; textKey: string; }[];
				eugene: { anim: number; face: number; textKey: string; audio: unknown /* too deep */; }[];
				eve: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; })[];
				flora: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; })[];
				florian: ({ dimmed: boolean; anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; })[];
				gale: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; } | { anim: number; face: number; textKey: string; })[];
				harriet: { face: number; textKey: string; }[];
				harvey: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; })[];
				howard_cornelius: { anim: number; face: number; textKey: string; audio: unknown /* too deep */; }[];
				jim: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; })[];
				julia_ghoulia: { anim: number; face: number; textKey: string; audio: unknown /* too deep */; }[];
				mama_star: { anim: number; face: number; textKey: string; audio: unknown /* too deep */; }[];
				merchant: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; } | { textKey: string; } | { face: number; textKey: string; })[];
				"mozza-ella": { face: number; textKey: string; }[];
				noot: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; } | { anim: number; face: number; textKey: string; })[];
				pippet: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { anim: number; face: number; textKey: string; })[];
				potion: { face: number; textKey: string; }[];
				professor_scoog: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; } | { anim: number; face: number; textKey: string; })[];
				puppetmaster: ({ face: number; textKey: string; audio: unknown /* too deep */; } | { anim: number; face: number; textKey: string; audio: unknown /* too deep */; })[];
				"sir-vey": { anim: number; face: number; textKey: string; }[];
				slime_guard: { anim: number; face: number; textKey: string; audio: unknown /* too deep */; }[];
				slime_queen: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { anim: number; face: number; textKey: string; })[];
				slime_worker: { anim: number; face: number; textKey: string; audio: unknown /* too deep */; }[];
				slurpy: ({ anim: number; face: number; textKey: string; audio: unknown /* too deep */; } | { anim: number; face: number; textKey: string; })[];
				swoopy: { face: number; textKey: string; }[];
				toy: ({ face: number; textKey: string; audio: unknown /* too deep */; } | { face: number; textKey: string; })[];
				verna: { face: number; textKey: string; }[];
				winterfest: { textKey: string; audio: unknown /* too deep */; }[];
			};
		};
		education: {
			isNew: boolean;
			originalBGMVolume: null;
			rankUpArray: null;
			answerQuestion(t: unknown, i: unknown, n: unknown): void;
			closeFull(): void;
			closeQuestion(): void;
			createVideoLesson(t: unknown, i: unknown): unknown;
			disableLogging(): void;
			doesSkillIDHaveLesson(t: unknown): unknown;
			enableLogging(): void;
			finishAssignment(t: unknown): void;
			finishGrade(t: unknown): void;
			finishPlacement(t: unknown): void;
			getAllTopicBadges(): unknown;
			getAvailableLessonReport(): unknown;
			getCurrentAlgorithm(): unknown;
			getEducationSystemAPI(): unknown;
			getMasteredSkills(): unknown;
			getRankUpBadges(): unknown;
			getStudentData(t: unknown): unknown;
			getVideoLessonSignedUrls(t: unknown): void;
			initialize(t: unknown): void;
			instantWinDialogueCallback(t: unknown): void;
			isVideoLessonActive(): unknown;
			openFull(): void;
			processAnswerResponses(): void;
			question(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			reduceBGMVolumeBeforeQuestion(): void;
			restoreBGMVolumeAfterQuestion(): void;
			sendEducationEvent(t: unknown): void;
			showBannerComplete(): void;
			showGameChallenge(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): void;
			showProgressBar(t: unknown, i: unknown): void;
			updateBreadcrumbs(t: unknown): unknown;
			updatePlanStudent(t: unknown): void;
			updateStrandBasedPlacementTest(t: unknown): void;
			updateUser(t: unknown): void;
			game: Instance["_game"];
		};
		effects: {
			batworks(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			bountyComplete(t: unknown, i: unknown): void;
			characterImage(t: unknown, i: unknown, n: unknown): void;
			characterText(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
			chatBubble(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			cleanup(t: unknown): void;
			confetti(t: unknown, i: unknown, n: unknown): void;
			do2DParabolicTween(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): void;
			do3DParabolicTween(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): void;
			explode(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): void;
			fadeFlyingImage(t: unknown, i: unknown, n: unknown, e: unknown): void;
			fire(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): void;
			firework(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			flashText(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): unknown;
			goldWork(t: unknown, i: unknown, n: unknown): void;
			icyworks(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			playFX(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): void;
			portalEffect(t: unknown, i: unknown, n: unknown): void;
			pumpkipuff(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			resizeContainer(t: unknown, i: unknown, n: unknown): void;
			setSource(t: unknown): void;
			shake(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			snowball(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			spellLearned(t: unknown, i: unknown, n: unknown): void;
			waterBalloon(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			game: Instance["_game"];
			screen: Instance["_game"]["_state"]["_current"];
		};
		event: {
			eventID: number;
			create(): unknown;
			game: Instance["_game"];
		};
		eventBroadcaster: {
			broadcast(t: unknown): void;
			game: Instance["_game"];
			listeners: ({ getEventName(): unknown; getGame(): unknown; onEventReceived(t: unknown): void; game: Instance["_game"]; } | { getEventName(): unknown; onEventReceived(t: unknown): void; _game: Instance["_game"]; })[];
		};
		friendsListNetworkHandler: {
			hasReceivedClass: boolean;
			hasReceivedFriends: boolean;
			hasReceivedFriendsAppearance: boolean;
			hasReceivedFriendsAppearanceOfActualFriends: boolean;
			friendsCap: number;
			pendingRequests: number;
			acceptFriendRequest(t: unknown, i: unknown): void;
			acceptFriendRequestSuccess(t: unknown, n: unknown, e: unknown): void;
			broadcastSocialEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			cancelFriendRequest(t: unknown): void;
			cancelFriendRequestSuccess(t: unknown, n: unknown): void;
			clearFriendRequestsCache(): void;
			fetchClassmates(): void;
			getFriend(t: unknown): unknown;
			getFriendQuestProgress(t: unknown): unknown;
			getFriendRequestList(t: unknown, i: unknown): void;
			getFriendRequestListSuccess(t: unknown): void;
			getFriendsCap(): unknown;
			getFriendsList(): void;
			getFriendsListSuccess(t: unknown): void;
			getTotalFriendRequests(t: unknown): void;
			getTotalFriendRequestsFailure(): void;
			getTotalFriendRequestsSuccess(t: unknown, i: unknown): void;
			getUserAppearance(t: unknown, i: unknown): void;
			getUserData(t: unknown): void;
			hasPendingRequests(): unknown;
			isClassmatesListDownloaded(): unknown;
			isFriendsListDownloaded(): unknown;
			networkCallFailure(t: unknown, i: unknown): void;
			onCancelFriendRequestClose(t: unknown): void;
			onGetUserAppearance(t: unknown, i: unknown): void;
			processClassmates(t: unknown): void;
			rejectFriendRequest(t: unknown, i: unknown): void;
			rejectFriendRequestSuccess(t: unknown, n: unknown, e: unknown): void;
			removeFriend(t: unknown): void;
			removeFriendSuccess(t: unknown, n: unknown): void;
			sendFriendRequest(t: unknown): void;
			sendFriendRequestSuccess(t: unknown, i: unknown): void;
			setup(): void;
			shouldFetchClassmates(): unknown;
			showGenericNetworkError(): void;
			classList: { userID: number; }[];
			friendRequestList: never[];
			friendsList: never[];
			game: Instance["_game"];
		};
		game: Instance["_game"];
		gameContainer: {
			bind(t: unknown): unknown;
			get(t: unknown): unknown;
			hasBinding(t: unknown): unknown;
			rebind(t: unknown): unknown;
			resolve(t: unknown): unknown;
			unbind(t: unknown): void;
			unbindAll(): void;
			inversifyContainer: {
				guid: string;
				_middleware: null;
				parent: null;
				_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
				_planAndResolve(): unknown;
				applyCustomMetadataReader(t: unknown): void;
				applyMiddleware(): unknown;
				bind(t: unknown): unknown;
				createChild(): unknown;
				get(t: unknown): unknown;
				getAll(t: unknown): unknown;
				getAllNamed(t: unknown, n: unknown): unknown;
				getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
				getNamed(t: unknown, n: unknown): unknown;
				getTagged(t: unknown, n: unknown, e: unknown): unknown;
				isBound(t: unknown): unknown;
				isBoundNamed(t: unknown, n: unknown): unknown;
				isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
				load(): unknown;
				rebind(t: unknown): unknown;
				resolve(n: unknown): unknown;
				restore(): void;
				snapshot(): void;
				unbind(t: unknown): void;
				unbindAll(): void;
				unload(): unknown;
				_bindingDictionary: {
					add(t: unknown, n: unknown): void;
					clone(): unknown;
					get(t: unknown): unknown;
					getMap(): unknown;
					hasKey(t: unknown): unknown;
					remove(t: unknown): void;
					removeByCondition(t: unknown): unknown;
					traverse(t: unknown): void;
					_map: Map<string, unknown /* too deep */[]>;
				};
				_metadataReader: {
					getConstructorMetadata(t: unknown): unknown;
					getPropertiesMetadata(t: unknown): unknown;
				};
				_snapshots: never[];
				options: {
					autoBindInjectable: boolean;
					defaultScope: string;
				};
			};
			SourceContainer: Instance["_prodigy"]["gameContainer"]["inversifyContainer"];
		};
		giftBoxController: {
			completeOpenConjureCube(t: unknown, i: unknown): void;
			failedOpenConjureCube(t: unknown): void;
			getGiftBoxesCount(t: unknown): unknown;
			getUnopenedConjureCubesCount(): unknown;
			hasConjureCubes(): unknown;
			isConjureCubeGiftBox(t: unknown): unknown;
			openConjureCube(t: unknown): void;
			receiveGiftBox(t: unknown, i: unknown): void;
			setupGiftBoxes(t: unknown): void;
			game: Instance["_game"];
			giftBoxes: {};
			giftBoxesToOpen: never[];
		};
		giftBoxNetworkHandler: {
			getGiftBoxes(): void;
			getGiftBoxesFailure(): void;
			getGiftBoxesSuccess(t: unknown): void;
			setup(): void;
			startListeners(): void;
			stopListeners(): void;
			game: Instance["_game"];
		};
		hints: {};
		icon: {
			createFromData(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown): unknown;
			createFromDataAdvanced(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			createIcon(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			createWithQuantity(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			gold(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			iconKey(t: unknown): unknown;
			game: Instance["_game"];
		};
		load: {
			flagProvider: undefined;
			assets(t: unknown, n: unknown): unknown;
			fileWasCompleted(t: unknown, i: unknown, n: unknown, e: unknown): void;
			fileWasStarted(t: unknown, i: unknown, n: unknown): void;
			isFileLoaded(t: unknown): unknown;
			loadComplete(t: unknown): void;
			loadSpritesheet(t: unknown, i: unknown, n: unknown): void;
			postUpdate(t: unknown): void;
			process(): void;
			processCompletedCallbacks(): void;
			processFile(t: unknown): void;
			processPackCallbacks(t: unknown, i: unknown): void;
			removeAllAssets(t: unknown, i: unknown): void;
			removeAssets(t: unknown): void;
			removeSpine(t: unknown): unknown;
			reset(t: unknown): void;
			sendDownloadMetric(t: unknown): void;
			setLoader(): void;
			_assetsArray: never[];
			_fileDownloadTimes: {
				"atlas-10": {
					end: number;
					size: number;
					start: number;
				};
				"atlas-110": {
					end: number;
					size: number;
					start: number;
				};
				"atlas-144": {
					start: number;
				};
				"atlas-157": {
					start: number;
				};
				"atlas-161": {
					start: number;
				};
				"atlas-169": {
					end: number;
					size: number;
					start: number;
				};
				"atlas-179": {
					start: number;
				};
				"atlas-18": {
					start: number;
				};
				"atlas-181": {
					start: number;
				};
				"atlas-189": {
					start: number;
				};
				"atlas-19": {
					end: number;
					size: number;
					start: number;
				};
				"atlas-21": {
					end: number;
					size: number;
					start: number;
				};
				"atlas-8": {
					end: number;
					size: number;
					start: number;
				};
				"atlas-9": {
					end: number;
					size: number;
					start: number;
				};
				"female-outfit-46": {
					end: number;
					size: number;
					start: number;
				};
				"player-face-2": {
					end: number;
					size: number;
					start: number;
				};
				"player-hair-1": {
					end: number;
					size: number;
					start: number;
				};
				"player-hat-24": {
					end: number;
					size: number;
					start: number;
				};
				"player-head-1": {
					end: number;
					size: number;
					start: number;
				};
				"player-neck-1": {
					end: number;
					size: number;
					start: number;
				};
				"player-weapon-5": {
					end: number;
					size: number;
					start: number;
				};
				"sfx-18": {
					start: number;
				};
				"sfx-46": {
					start: number;
				};
				"singleImage-5": {
					end: number;
					size: number;
					start: number;
				};
			};
			_flagProvider: {
				getClassCodePromptCurriculumBlacklist(): unknown;
				getDataURI(): unknown;
				getFeatureRevisionsURIs(): unknown;
				getMultiplayerClusterForWorld(t: unknown): unknown;
				getValue(t: unknown, i: unknown): unknown;
				getWorkerPath(t: unknown): unknown;
				initializeWithJson(t: unknown): void;
				isEventEnabled(t: unknown): unknown;
				isFeatureEnabled(t: unknown): unknown;
				environment: {
					getCurrentEnvironment(): unknown;
					getCurrentEnvironmentByHost(): unknown;
					getEnvironmentString(): unknown;
					getWindowHost(): unknown;
					getWindowQueryString(): unknown;
				};
				jsonData: {
					allOutAttackDisabled: boolean;
					autoAttackDisabled: boolean;
					coOpTitanDisabled: boolean;
					disableMembershipVideoAdDuringSchoolHours: boolean;
					disableParentAttach5: boolean;
					disableTrialMembership: boolean;
					enableMembershipVideoAd: boolean;
					enableVerboseAnalytics: boolean;
					enableVerboseGameServer: boolean;
					enableYouTubeAd: boolean;
					enableYouTubeTimeCheck: boolean;
					experimentLE2: boolean;
					experimentLE3LaneB: boolean;
					experimentLE3LaneC: boolean;
					"loader-allowedOverrideIps": boolean;
					"loader-gameClientOverride": boolean;
					"loader-phaserPIXI": boolean;
					maintenance: boolean;
					removeAssets: boolean;
					useServerTimeForVideoLockout: boolean;
					videoLessonInstantWin: boolean;
					gameDataVersion: number;
					gameServerRollout: number;
					"loader-gameDataVersionOverride": number;
					"loader-pixiCanary": number;
					"loader-pixiDataVersion": number;
					maintenanceMessage: number;
					sentrySampleRate: number;
					setFest: number;
					surveyCheckIntervalMinutes: number;
					debugPassword: string;
					gameClientVersion: string;
					gameCodePath: string;
					gameDataPath: string;
					gameLibPath: string;
					"loader-gameCodePathOverride": string;
					"loader-pixiClientVersion": string;
					ServerGameVersion: string;
					splashScreen: string;
					classCodePromptCurriculumBlacklist: number[];
					enabledEvents: {
						anonymous_game_complete_v3: boolean;
						anonymous_game_discovery: boolean;
						"battle-start-type": boolean;
						"conversion-funnel-event": boolean;
						"create-character": boolean;
						education_lesson_encounter_v3: boolean;
						education_question_interface_v3: boolean;
						epicAttacks: boolean;
						game_avatar: boolean;
						game_avatar_v3: boolean;
						game_battle_v3: boolean;
						game_complete: boolean;
						game_complete_v3: boolean;
						game_discovery_v3: boolean;
						game_level_up: boolean;
						game_mod: boolean;
						game_question_v3: boolean;
						game_session_start: boolean;
						game_session_start_v3: boolean;
						game_sink: boolean;
						game_sink_v3: boolean;
						game_social: boolean;
						game_social_v3: boolean;
						game_source: boolean;
						game_source_v3: boolean;
						"item-change-event": boolean;
						login: boolean;
						"member-ad": boolean;
						"new-member": boolean;
						PVP: boolean;
						"pvp-season-reward": boolean;
						"survey-results": boolean;
						"toy-event": boolean;
						"zone-event": boolean;
					};
					googleLoginSettings: {
						amazon: boolean;
						google: boolean;
					};
					"loader-allowedIps": string[];
					"loader-windowVarBlacklist": string[];
					lockoutTrial: {
						trialLengthDays: number;
						endDate: string;
						startDate: string;
					};
					multiplayerClusterLocations: unknown /* too deep */[];
					parentAttachTrial: {
						trialLengthDays: number;
						endDate: string;
						startDate: string;
						exclusionLanes: number[];
					};
					prodigyGameFlags: {
						allOutAttackDisabled: boolean;
						autoAttackDisabled: boolean;
						coOpTitanDisabled: boolean;
						disableMembershipVideoAdDuringSchoolHours: boolean;
						disableParentAttach5: boolean;
						disableTrialMembership: boolean;
						enableMembershipVideoAd: boolean;
						enableVerboseAnalytics: boolean;
						enableVerboseGameServer: boolean;
						enableYouTubeAd: boolean;
						enableYouTubeTimeCheck: boolean;
						experimentLE2: boolean;
						experimentLE3LaneB: boolean;
						experimentLE3LaneC: boolean;
						"loader-allowedOverrideIps": boolean;
						"loader-gameClientOverride": boolean;
						"loader-phaserPIXI": boolean;
						removeAssets: boolean;
						useServerTimeForVideoLockout: boolean;
						videoLessonInstantWin: boolean;
						gameDataVersion: number;
						gameServerRollout: number;
						"loader-gameDataVersionOverride": number;
						"loader-pixiCanary": number;
						"loader-pixiDataVersion": number;
						sentrySampleRate: number;
						setFest: number;
						surveyCheckIntervalMinutes: number;
						debugPassword: string;
						gameDataPath: string;
						"loader-gameCodePathOverride": string;
						"loader-pixiClientVersion": string;
						splashScreen: string;
						classCodePromptCurriculumBlacklist: Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["classCodePromptCurriculumBlacklist"];
						enabledEvents: Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["enabledEvents"];
						googleLoginSettings: Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["googleLoginSettings"];
						"loader-allowedIps": Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["loader-allowedIps"];
						"loader-windowVarBlacklist": Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["loader-windowVarBlacklist"];
						lockoutTrial: Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["lockoutTrial"];
						multiplayerClusterLocations: Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["multiplayerClusterLocations"];
						parentAttachTrial: Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["parentAttachTrial"];
						recordingFeatures: {
							"archives-run": boolean;
							"post-tutorial": boolean;
						};
					};
					recordingFeatures: Instance["_prodigy"]["load"]["_flagProvider"]["jsonData"]["prodigyGameFlags"]["recordingFeatures"];
				};
			};
			_loader: Instance["_game"]["_load"];
			game: Instance["_game"];
			loader: Instance["_game"]["_load"];
		};
		mailNetworkHandler: {
			totalMail: null;
			deleteMail(t: unknown, i: unknown): void;
			deleteMailFailure(): void;
			deleteMailSuccessful(t: unknown, i: unknown): void;
			getAllMail(t: unknown, i: unknown): void;
			getAllMailFailure(): void;
			getAllMailSuccess(t: unknown): void;
			getMailerData(): unknown;
			getTotalMail(t: unknown): void;
			getTotalMailFailure(): void;
			getTotalMailSuccess(t: unknown, i: unknown): void;
			markAsRead(t: unknown, i: unknown): void;
			markAsReadFailure(): void;
			setup(): void;
			game: Instance["_game"];
		};
		messageListener: {
			add(t: unknown, i: unknown, n: unknown): void;
			clear(t: unknown): void;
			onMessage(t: unknown): void;
			receivers: never[];
		};
		metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
		notifications: {
			isPlaying: boolean;
			notificationSocialLogin: boolean;
			timerOverride: boolean;
			fetchTimeout: number;
			currentNotification: null;
			friendNotificationTimer: null;
			getFeedDate: null;
			notificationTimer: null;
			timerDispatch: null;
			broadcastSocialFeedEvent(t: unknown, i: unknown, n: unknown): void;
			canPlayNotification(): unknown;
			clearNotificationDispatch(t: unknown): void;
			clearNotifications(t: unknown): void;
			createUserFeed(t: unknown, i: unknown, n: unknown): void;
			createUserFeedFailure(): void;
			createUserFeedSuccess(t: unknown, i: unknown): void;
			deleteNotification(t: unknown, i: unknown): void;
			deleteUserFeed(t: unknown, i: unknown): void;
			deleteUserFeedSuccess(t: unknown, i: unknown): void;
			getConfig(t: unknown): unknown;
			getSocialNotifications(t: unknown): void;
			getUserFeedFailure(): void;
			getUserFeedSuccess(t: unknown): void;
			initGenericNotification(t: unknown): void;
			initMemberNotification(): void;
			initNotificationWithTimer(t: unknown, i: unknown, n: unknown): unknown;
			initSocialNotification(t: unknown, i: unknown, n: unknown): void;
			isPaused(): unknown;
			likeNotification(t: unknown, i: unknown): void;
			likeUserFeed(t: unknown, i: unknown): void;
			likeUserFeedSuccess(t: unknown, i: unknown): void;
			notificationPlayed(): void;
			onPause(): void;
			onResume(): void;
			pause(t: unknown): void;
			playNextNotification(): void;
			playNootDialogue(t: unknown): void;
			playNotification(t: unknown): void;
			pushNotification(t: unknown): void;
			resume(t: unknown): void;
			shareNotification(t: unknown, i: unknown): void;
			shareUserFeed(t: unknown, i: unknown): void;
			shareUserFeedSuccess(t: unknown, i: unknown): void;
			shouldShareMembership(t: unknown, i: unknown): void;
			startFriendTimer(): void;
			startTimer(i: unknown): void;
			stopFriendTimer(): void;
			stopTimer(): void;
			notificationBlockers: Set<never>;
			friendNotificationQueue: never[];
			game: Instance["_game"];
			notificationQueue: never[];
		};
		open: {
			chatMenu: null;
			advancedNameChange(t: unknown, i: unknown, n: unknown): void;
			adventureComplete(): unknown;
			adventureContinueRestart(t: unknown): unknown;
			adventureMap(t: unknown, i: unknown): unknown;
			alert(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			archiveEntranceMenu(t: unknown, i: unknown): unknown;
			arena(): void;
			backpack(): void;
			bannerDialog(t: unknown): void;
			battlePotionSelect(t: unknown, i: unknown): unknown;
			boostSelect(t: unknown, i: unknown): void;
			bossRewards(t: unknown, i: unknown, n: unknown): unknown;
			bountyBoard(): void;
			bountyStore(): void;
			card(t: unknown, i: unknown, n: unknown): void;
			character(): void;
			characterDialogue(t: unknown, i: unknown, n: unknown): unknown;
			chat(t: unknown): void;
			choosePet(t: unknown, i: unknown): void;
			classModeMessage(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): void;
			cleanup(): void;
			close(t: unknown): void;
			closeChat(): void;
			confirmationDialog(t: unknown): unknown;
			confirmationDialogNoIconButtons(t: unknown): unknown;
			confirmationDialogWideButtons(t: unknown): unknown;
			confirmPotionUse(t: unknown): void;
			conjureCube(t: unknown): void;
			coOpModal(t: unknown): unknown;
			coOpTeamSelect(t: unknown, i: unknown): unknown;
			dailyQuestionsMenu(t: unknown, i: unknown, n: unknown): unknown;
			dungeonExitMenu(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			dungeonPrizesMenu(t: unknown, i: unknown, n: unknown): unknown;
			dungeonRoulette(t: unknown): unknown;
			epicBoostMachine(t: unknown, i: unknown): void;
			evolutionSummary(t: unknown, i: unknown): unknown;
			firstNameSelector(t: unknown, i: unknown): void;
			friendRequests(t: unknown): void;
			friendsList(): unknown;
			fromFactory(t: unknown): void;
			gotItem(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			heartSummary(t: unknown, i: unknown): unknown;
			hideActiveMenu(): void;
			houseEditorMenu(t: unknown, i: unknown): unknown;
			houseItemInfo(t: unknown, i: unknown, n: unknown): void;
			houseStore(t: unknown, i: unknown, n: unknown): void;
			informationDialog(t: unknown): unknown;
			isMenuOpen(t: unknown): unknown;
			itemInfo(t: unknown, i: unknown, n: unknown): void;
			keystonePedestals(t: unknown): unknown;
			lamplightLevelLock(t: unknown): void;
			learningEfficacySkipPopup(t: unknown, i: unknown, n: unknown): unknown;
			learnMore(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			legacyStore(t: unknown): void;
			mailer(t: unknown, i: unknown, n: unknown): unknown;
			map(t: unknown, i: unknown, n: unknown): void;
			memberAdSuppressionToolTip(t: unknown, i: unknown, n: unknown): unknown;
			membershipInfo(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, o: unknown): unknown;
			membershipParent(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			membershipSchoolAd(t: unknown): unknown;
			membershipSuccess(t: unknown, i: unknown): unknown;
			membershipYouTubeAd(t: unknown, i: unknown, n: unknown): void;
			menuCloseAll(): void;
			menuCloseAllUntil(t: unknown): void;
			menuOpen(t: unknown): void;
			message(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			messageBox(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			messageBoxClose(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			messageBoxGeneric(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			messageBoxOkay(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
			nameChange(t: unknown, i: unknown): void;
			networkError(t: unknown): unknown;
			nicknamer(t: unknown, i: unknown, n: unknown): void;
			openMail(t: unknown): unknown;
			optionsMenu(t: unknown): void;
			orbSelectionMenu(t: unknown): unknown;
			overlayToolTip(t: unknown, i: unknown, n: unknown): unknown;
			parentalLinkAtSchoolPrompt(t: unknown, i: unknown): void;
			parentalLinkSuccessPrompt(t: unknown): unknown;
			parentalLoginPopup(): void;
			petBook(t: unknown): unknown;
			petInfo(t: unknown, i: unknown): unknown;
			pets(): void;
			petsCustomDialog(t: unknown): unknown;
			PopUpModal(t: unknown): unknown;
			pouch(t: unknown, i: unknown, n: unknown): void;
			prefabMenu(t: unknown, i: unknown): unknown;
			pvpPrizes(t: unknown): unknown;
			rating(t: unknown): void;
			registration(t: unknown, i: unknown, n: unknown): void;
			resultsMenu(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			reward(t: unknown, i: unknown): void;
			secureBattleItemInfo(t: unknown, i: unknown, n: unknown): void;
			secureBattlePotionSelect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sendShopLoadEventToGTM(t: unknown, i: unknown, n: unknown): void;
			server(t: unknown, i: unknown, n: unknown): void;
			serverSelectMode(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setActiveMenu(t: unknown): void;
			setActiveRenderMenu(t: unknown): void;
			showVideoPopup(t: unknown, i: unknown): unknown;
			social(t: unknown): void;
			socialFeed(t: unknown, i: unknown): unknown;
			spellSummary(t: unknown, i: unknown): unknown;
			springfestClassModeMessage(t: unknown, i: unknown, n: unknown, e: unknown): void;
			startRegistration(t: unknown, i: unknown): void;
			store(t: unknown, i: unknown, n: unknown): void;
			stylistStore(t: unknown, i: unknown, n: unknown): unknown;
			supportPageDialog(t: unknown): void;
			survey(t: unknown, i: unknown): void;
			titanProgress(t: unknown): unknown;
			topHeavyInformationDialog(t: unknown): unknown;
			towerEntranceMenu(t: unknown, i: unknown): unknown;
			towerExitMenu(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			toyUnlock(t: unknown, i: unknown): void;
			twilightWheelPopup(): void;
			voucherRedemption(t: unknown, i: unknown, n: unknown): unknown;
			wizardNameSelector(t: unknown, i: unknown, n: unknown): void;
			yourPet(t: unknown, i: unknown): unknown;
			yourTeam(t: unknown): unknown;
			zoneProgress(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			_localizer: Instance["_game"]["_state"]["_current"]["_localizer"];
			game: Instance["_game"];
			menuLayer: Instance["_game"]["_state"]["_current"]["_menus"]["_legacyTransform"]["_group"];
			menus: never[];
			menusGameObject: Instance["_game"]["_state"]["_current"]["_menus"];
			renderMenus: never[];
		};
		pvp: {
			battleScore(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			chooseAction(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			chooseRandomMonster(i: unknown): unknown;
			endEpicArena(t: unknown, i: unknown): void;
			getBattleLevel(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			initBackupEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initBattle(t: unknown, i: unknown): unknown;
			initEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initMainEnemy(t: unknown, i: unknown): unknown;
			initMetrics(): void;
			initWizardOpponent(t: unknown): unknown;
			onEndBattle(): void;
			replaceOpponentTeam(i: unknown, n: unknown): unknown;
			start(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			startEpicArena(t: unknown, i: unknown, n: unknown): unknown;
			startPVP(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			battleStats: {
				endHealth: number;
				endTime: number;
				enemySpellsCast: number;
				enemySpellsCastFail: number;
				energy: number;
				energyCost: number;
				spellsCast: number;
				spellsFailed: number;
				startHealth: number;
				startTime: number;
				type: string;
				epicAttack: null;
				spellEnergyCost: null;
				battleCustomMeta: {};
				consumablesUsed: never[];
				pets: never[];
				petsRescued: never[];
				rescuesSuccessful: never[];
			};
			game: Instance["_game"];
			metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
		};
		skin: {
			applyFestFlag(): void;
			applySkin(t: unknown, i: unknown): void;
			checkForExclusiveMap(t: unknown): unknown;
			cleanupSkins(): void;
			getActiveFestivals(): unknown;
			getAssets(t: unknown): unknown;
			getButtons(): unknown;
			getFestival(t: unknown): unknown;
			init(t: unknown, i: unknown): unknown;
			isFestivalActive(t: unknown): unknown;
			active: ({ active(t: unknown): unknown; applySkin(t: unknown): void; cleanup(): void; getAssets(t: unknown): unknown; getButtons(): unknown; getOverrideName(t: unknown): unknown; init(t: unknown, i: unknown): unknown; _assets: never[]; _game: Instance["_game"]; _locations: string[]; _overrideNames: {}; } | { count: number; active(t: unknown): unknown; applySkin(t: unknown, i: unknown): void; cleanup(): void; getAssets(t: unknown): unknown; getButtons(): unknown; getOverrideName(t: unknown): unknown; init(t: unknown): unknown; initListeners(): void; randomizePosition(): unknown; stopListeners(): void; update(): unknown; _assets: never[]; _game: Instance["_game"]; _locations: string[]; _overrideNames: {}; magicParticle: never[]; } | { active(t: unknown): unknown; applySkin(t: unknown, i: unknown): void; cleanup(): void; getAssets(t: unknown): unknown; getButtons(): unknown; getOverrideName(t: unknown): unknown; init(t: unknown): unknown; initBubble(t: unknown, i: unknown, n: unknown): void; _assets: never[]; _game: Instance["_game"]; _locations: string[]; _overrideNames: {}; } | { canDoDaily: boolean; _festivalHub: string; festivalName: string; active(t: unknown): unknown; applySkin(t: unknown): void; cleanup(): void; createHudButton(t: unknown, n: unknown, e: unknown, s: unknown): unknown; dailyBattleComplete(t: unknown): void; getAssets(t: unknown): unknown; getBattleDrops(t: unknown): unknown; getButtons(): unknown; getFestivalCurrency(): unknown; getOverrideName(t: unknown): unknown; init(i: unknown): unknown; onClickCallback(t: unknown, i: unknown): void; openStore(t: unknown, i: unknown): void; placeDaily(t: unknown, i: unknown): unknown; revealDailyMonster(i: unknown, n: unknown): void; runaway(t: unknown): void; setIntroState(t: unknown, i: unknown, n: unknown): void; signOnInputDown(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; startDailyBattle(t: unknown): void; talkToShopkeeper(): void; teleportToEvent(t: unknown): void; _assets: string[]; _battleModsOverride: { screen: string; }; _game: Instance["_game"]; _locations: string[]; _overrideNames: { "lamplight-A2": string; "lamplight-A3": string; "lamplight-A4": string; "lamplight-B0": string; "lamplight-B1": string; "lamplight-B2": string; "lamplight-B3": string; "lamplight-B4": string; "lamplight-B5": string; "lamplight-C2": string; "lamplight-C3": string; "lamplight-C4": string; }; afterBattleSpawn: number[]; dailyDrops: unknown /* too deep */[]; dailyEventSize: { _recalculateMagnitude: boolean; _recalculateMagnitudeSq: boolean; _magnitude: number; _magnitudeSq: number; _x: number; _y: number; x: number; y: number; add(t: unknown): void; angle(t: unknown): unknown; ceil(): void; clamp(t: unknown, i: unknown, n: unknown): void; clip(t: unknown): void; copyFrom(t: unknown): unknown; copyTo(i: unknown): unknown; cross(t: unknown): unknown; divide(t: unknown): void; dot(t: unknown): unknown; equals(t: unknown): unknown; floor(): void; getDistance(t: unknown): unknown; getDistanceSq(t: unknown): unknown; getMagnitude(): unknown; getMagnitudeSq(): unknown; interpolate(t: unknown, i: unknown): void; invert(): void; isNearlyEqual(t: unknown, i: unknown): unknown; isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown; isZero(): unknown; multiply(t: unknown): void; negate(): void; normalize(): void; normalRightHand(): void; perpendicular(t: unknown): void; print(t: unknown): void; project(t: unknown, i: unknown): void; recalculateMagnitude(): void; recalculateMagnitudeSq(): void; rotate(t: unknown, i: unknown, n: unknown): void; round(): void; set(t: unknown, i: unknown): void; setTo(t: unknown, i: unknown): void; setToPolar(t: unknown, i: unknown): void; subtract(t: unknown): void; toString(): unknown; trunc(): void; }; dailyHighlighterOffset: { _recalculateMagnitude: boolean; _recalculateMagnitudeSq: boolean; _magnitude: number; _magnitudeSq: number; _x: number; _y: number; x: number; y: number; add(t: unknown): void; angle(t: unknown): unknown; ceil(): void; clamp(t: unknown, i: unknown, n: unknown): void; clip(t: unknown): void; copyFrom(t: unknown): unknown; copyTo(i: unknown): unknown; cross(t: unknown): unknown; divide(t: unknown): void; dot(t: unknown): unknown; equals(t: unknown): unknown; floor(): void; getDistance(t: unknown): unknown; getDistanceSq(t: unknown): unknown; getMagnitude(): unknown; getMagnitudeSq(): unknown; interpolate(t: unknown, i: unknown): void; invert(): void; isNearlyEqual(t: unknown, i: unknown): unknown; isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown; isZero(): unknown; multiply(t: unknown): void; negate(): void; normalize(): void; normalRightHand(): void; perpendicular(t: unknown): void; print(t: unknown): void; project(t: unknown, i: unknown): void; recalculateMagnitude(): void; recalculateMagnitudeSq(): void; rotate(t: unknown, i: unknown, n: unknown): void; round(): void; set(t: unknown, i: unknown): void; setTo(t: unknown, i: unknown): void; setToPolar(t: unknown, i: unknown): void; subtract(t: unknown): void; toString(): unknown; trunc(): void; }; dailyMonsters: number[]; dailyPlacements: { "lamplight-A2": unknown /* too deep */; "lamplight-A3": unknown /* too deep */; "lamplight-A4": unknown /* too deep */; "lamplight-B2": unknown /* too deep */; "lamplight-B3": unknown /* too deep */; "lamplight-B4": unknown /* too deep */; "lamplight-B5": unknown /* too deep */; "lamplight-C2": unknown /* too deep */; "lamplight-C3": unknown /* too deep */; "lamplight-C4": unknown /* too deep */; }; DEFAULT_BATTLE_MODS: { allowMember: boolean; catch: boolean; dropsDisabled: boolean; invincible: boolean; run: boolean; screen: string; }; })[];
			game: Instance["_game"];
			gameFestivalsData: { destinationMap: string; festivalName: string; exclusiveMap: string[]; }[];
		};
		textureAbove: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: Instance["_game"]["_app"]["renderer"];
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: Instance["_prodigy"]["textureAbove"]["_frame"];
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: Instance["_prodigy"]["textureAbove"]["_frame"];
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: Instance["_prodigy"]["textureAbove"]["baseTexture"];
				colorTextures: Instance["_prodigy"]["textureAbove"]["baseTexture"][];
				disposeRunner: {
					empty: boolean;
					_aliasCount: number;
					_name: string;
					name: string;
					add(t: unknown): unknown;
					contains(t: unknown): unknown;
					destroy(): void;
					dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					ensureNonAliasedItems(): void;
					remove(t: unknown): unknown;
					removeAll(): unknown;
					run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					items: never[];
				};
				glFramebuffers: {};
			};
			orig: Instance["_prodigy"]["textureAbove"]["_frame"];
			size: Instance["_prodigy"]["textureAbove"]["_frame"];
			textureCacheIds: never[];
		};
		textureBelow: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: Instance["_game"]["_app"]["renderer"];
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: Instance["_prodigy"]["textureBelow"]["_frame"];
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: Instance["_prodigy"]["textureBelow"]["_frame"];
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: Instance["_prodigy"]["textureBelow"]["baseTexture"];
				colorTextures: Instance["_prodigy"]["textureBelow"]["baseTexture"][];
				disposeRunner: {
					empty: boolean;
					_aliasCount: number;
					_name: string;
					name: string;
					add(t: unknown): unknown;
					contains(t: unknown): unknown;
					destroy(): void;
					dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					ensureNonAliasedItems(): void;
					remove(t: unknown): unknown;
					removeAll(): unknown;
					run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					items: never[];
				};
				glFramebuffers: {};
			};
			orig: Instance["_prodigy"]["textureBelow"]["_frame"];
			size: Instance["_prodigy"]["textureBelow"]["_frame"];
			textureCacheIds: never[];
		};
		textureMenu: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: Instance["_game"]["_app"]["renderer"];
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: Instance["_prodigy"]["textureMenu"]["_frame"];
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: Instance["_prodigy"]["textureMenu"]["_frame"];
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: Instance["_prodigy"]["textureMenu"]["baseTexture"];
				colorTextures: Instance["_prodigy"]["textureMenu"]["baseTexture"][];
				disposeRunner: {
					empty: boolean;
					_aliasCount: number;
					_name: string;
					name: string;
					add(t: unknown): unknown;
					contains(t: unknown): unknown;
					destroy(): void;
					dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					ensureNonAliasedItems(): void;
					remove(t: unknown): unknown;
					removeAll(): unknown;
					run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
					items: never[];
				};
				glFramebuffers: {};
			};
			orig: Instance["_prodigy"]["textureMenu"]["_frame"];
			size: Instance["_prodigy"]["textureMenu"]["_frame"];
			textureCacheIds: never[];
		};
		timeManager: {
			isServerDeltaSet: boolean;
			_timezoneOffset: number;
			serverTimeDeltaMs: number;
			getIsServerDeltaSet(): unknown;
			getLocalTimeMs(): unknown;
			getServerTimeDeltaMs(): unknown;
			getServerTimeMs(): unknown;
			getUTCOffset(): unknown;
			setServerTime(t: unknown): void;
		};
		titansNetworkHandler: {
			titan: null;
			getTitan(t: unknown, i: unknown): void;
			getTitanFailure(t: unknown): void;
			getTitans(): void;
			getTitansSuccess(t: unknown): void;
			getTitanSuccess(t: unknown, i: unknown): void;
			getTitanUserData(): void;
			hitTitan(t: unknown, i: unknown): void;
			hitTitanSuccess(t: unknown): void;
			isNewTitan(): unknown;
			isTitanAlive(): unknown;
			networkCallFailure(): void;
			setup(): void;
			game: Instance["_game"];
		};
		urlProvider: {
			getAPIRootUrl(): unknown;
			getCDNRootUrl(): unknown;
			getCortexRootURL(): unknown;
			getLoaderUrl(): unknown;
			getWorkerPath(t: unknown): unknown;
			environmentProvider: Instance["_prodigy"]["load"]["_flagProvider"]["environment"];
		};
		world: {
			currentMap: string;
			pippetEncounterDaily: null;
			pippetEncounterSpawn: null;
			_(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			canTeleportInto(t: unknown): unknown;
			enter(): void;
			getCurrentCurrency(): unknown;
			getCurrentMap(): unknown;
			getCurrentZone(): unknown;
			getState(t: unknown): unknown;
			getTownState(t: unknown): unknown;
			getWorldDate(): unknown;
			getZone(t: unknown): unknown;
			goToZoneHub(t: unknown): void;
			inDeprecatedZone(): unknown;
			inRestrictedSocialZone(i: unknown): unknown;
			isMathTowerEnabledForPlayer(t: unknown, i: unknown): unknown;
			isValidLocation(t: unknown): unknown;
			isZoneSinglePlayer(i: unknown): unknown;
			playScene(t: unknown): void;
			process(): void;
			setCurrentMap(t: unknown): void;
			setState(t: unknown, i: unknown): void;
			setTownState(t: unknown, i: unknown): void;
			showZoneLocked(t: unknown, i: unknown): void;
			_metricsManager: Instance["_game"]["_state"]["_current"]["_metricsManager"];
			game: Instance["_game"];
			zones: {
				academy: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					Guardian: undefined;
					anyKeystonesPlaced(): unknown;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getKeystoneState(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(i: unknown, n: unknown, e: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					resetAllKeystones(): void;
					setKeystoneState(t: unknown, i: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						CR1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							localizer: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							onTowerDoorClicked(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, s: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							academyZone: Instance["_prodigy"]["world"]["zones"]["academy"];
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						CR2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						GH1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(n: unknown, e: unknown, s: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							academyZone: Instance["_prodigy"]["world"]["zones"]["academy"];
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						GH2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(n: unknown, e: unknown, s: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						GH3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							moveOffArchiveEntrance(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
					};
					monsters: never[];
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
					};
					scenes: {
						firstKeystone: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							hideHUD(): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							placeKeystone(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						greatHallPt1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						greatHallPt2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						greatHallPt3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							battle(t: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							endBattle(): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						greatHallPt4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						introPt1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							pippet: null;
							portal: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playNextScene(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removePippet(): void;
							resizeContainer(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						introPt2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							gale: null;
							noot: null;
							onLoad: null;
							portal: null;
							tempCollisionData: null;
							trapDoor: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							resizeContainer(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						secondFloor: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
						stairsUnlocked: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["academy"];
						};
					};
					states: string[];
				};
				archives: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					goalCollected: number;
					goalTotal: number;
					monstersDefeated: number;
					prizeWheelId: number;
					battleBG: string;
					dungeonCompleteEvent: string;
					dungeonGenerator: string;
					dungeonGoldenPagesEvent: string;
					dungeonNameEvent: string;
					dungeonStartEvent: string;
					exitMap: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					Guardian: undefined;
					addCollected(t: unknown, i: unknown): void;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					consumeTargetCollectible(t: unknown): void;
					createLoadingData(): void;
					defeatMonster(i: unknown, n: unknown, e: unknown): void;
					enterDungeon(i: unknown): void;
					exitDungeon(t: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					goToEnd(): void;
					handleLeaving(i: unknown, n: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					openWheel(t: unknown, i: unknown): void;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					resetCooldown(): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					teleportInDungeon(t: unknown, i: unknown, n: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					assets: string[];
					game: Instance["_game"];
					maps: {};
					monsters: never[];
					quests: {};
					scenes: {};
					states: string[];
				};
				bonfire_spire: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					guardian: string;
					Guardian: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					bonfireSetStates(t: unknown, i: unknown): void;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					enableLeverElement(t: unknown): void;
					faceLever(t: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					highlightLever(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isLeverLocked(t: unknown): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processLavaLayers(t: unknown): void;
					processLeverQuest(t: unknown, i: unknown): void;
					processLeverRequirements(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					toggleLever(t: unknown, i: unknown, n: unknown, e: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A1: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						A4: {
							isQuestHub: boolean;
							isScene: boolean;
							wasInsideTriggerLastFrame: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							user: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(i: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						B1: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							questNPC: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(n: unknown, e: unknown, s: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						B2: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						B4: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						B5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						C1: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						C2: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						C3: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						C4: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						C6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						D1: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						D2: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						D3: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						D4: {
							isQuestHub: boolean;
							isScene: boolean;
							leverNumber: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						D5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							queen: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							talkToGuard(t: unknown): void;
							talkToQueen(t: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						D6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						E5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						E6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						Titan: {
							catapultBattle: boolean;
							coOpEnabled: boolean;
							isCatapultAnimating: boolean;
							isQuestHub: boolean;
							isScene: boolean;
							partySelectOpen: boolean;
							popupsEnabled: boolean;
							catapultQueue: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							cannonBall: null;
							cannonBallStartPos: null;
							catapultContainer: null;
							catapultSpine: null;
							catapultTweenX: null;
							catapultTweenY: null;
							coOpAvailableTeamsHandler: null;
							crystalContainer: null;
							crystalGuideHand: null;
							currentCoOpTeamHandler: null;
							impactContainer: null;
							impactSpine: null;
							onLoad: null;
							spineContainer: null;
							tempCollisionData: null;
							titanAsset: null;
							titanHealthBar: null;
							titanSpine: null;
							activePlayerCreatedTeam(): void;
							activePlayerJoinedTeam(): void;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addGuestTag(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							blockInputModal(): void;
							callNetworkToStartBattle(): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							endBattle(t: unknown, i: unknown): void;
							extractCoOpPlayerData(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							getTitanHP(): unknown;
							gotTitanCallback(): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							messageReceived(t: unknown): unknown;
							moveToCatapult(): void;
							moveToTitan(): void;
							onCatapultClick(): void;
							onCrystalClick(): unknown;
							onShootCatapult(): void;
							onSignClicked(): void;
							onTitanClicked(): void;
							playCrystalTutorial(): void;
							playCutscene(t: unknown): void;
							playerAddedToScreen(t: unknown): void;
							playImpact(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(i: unknown, n: unknown, e: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							renderHealthBar(): void;
							renderMapElements(): void;
							renderTitan(): void;
							sendGameComplete(t: unknown, i: unknown, n: unknown): void;
							sendTeamJoined(): void;
							setInputBlocking(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							setupCatapult(): void;
							setupCrystal(): void;
							setupSpineHitbox(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, o: unknown): unknown;
							shootCatapult(): void;
							showAllBounties(t: unknown, i: unknown): void;
							showCurrentTeamDisbandMessage(): void;
							showDeleteTeamMessage(): void;
							showJoinTeamFailedMessage(t: unknown): void;
							showLeaveTeamMessage(): void;
							start(i: unknown, n: unknown, e: unknown): void;
							startCatapultBattle(): void;
							startCoOpBattle(): unknown;
							startSoloBattle(): void;
							startTitanBattle(): void;
							titanDeadKick(): void;
							titanDeadTeleport(): void;
							titanDeny(): void;
							titanLoadComplete(t: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							titanMapData: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
					};
					monsters: {};
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"10": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"11": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"12": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							chest: null;
							chestElement: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							openTheChest(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"13": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							bossBattle(t: unknown, i: unknown, n: unknown): void;
							postBattle(t: unknown, i: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"14": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"2": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"3": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"4": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"5": {
							caught: boolean;
							chain: boolean;
							foodPlaced: boolean;
							hover: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							button: null;
							buttonIcon: null;
							cebollini: null;
							cebollini2: null;
							collectionMaps: null;
							cookingPot: null;
							cookingPotHighlight: null;
							food: null;
							pot: null;
							questGiver: null;
							questReceiver: null;
							visionCone: null;
							hideButtonClick(t: unknown, i: unknown): void;
							potClick(t: unknown, i: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							tutorial(t: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"6": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"7": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"8": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
						"9": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							interactSlime(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							slimeNPCHighlights: unknown /* too deep */;
							slimeNPCs: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
					};
					scenes: {
						titanIntro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							titanMap: string;
							zoneName: string;
							master: null;
							noot: null;
							onLoad: null;
							spineContainer: null;
							tempCollisionData: null;
							titanSpine: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							enterTitan(t: unknown): void;
							exitMaster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							gotTitanCallback(t: unknown): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(n: unknown, e: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["bonfire_spire"];
						};
					};
					states: string[];
				};
				crystal_caverns: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					ID: string;
					name: string;
					questHub: string;
					Guardian: undefined;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						"1": number;
						"2": number;
						"3": number;
						DungeonHub: {
							_menuIsOpen: boolean;
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							onFaint: undefined;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							caveClicked(): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isRenderingToCanvas(): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAdventureMap(): void;
							showAllBounties(t: unknown, i: unknown): void;
							showDeviceWarning(): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["crystal_caverns"];
						};
					};
					monsters: {};
					quests: {};
					scenes: {};
					states: never[];
				};
				darktower: {
					debugBounties: boolean;
					bgmID: number;
					battleBG: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					_currentMap: null;
					Guardian: undefined;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					GetOpponent(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(i: unknown, n: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							changeTeam(t: unknown, n: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							openTower(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toFloor(t: unknown, i: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["darktower"];
						};
						A2: {
							cleared: boolean;
							isQuestHub: boolean;
							isScene: boolean;
							_floorsComplete: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							ball: null;
							exitAreaEvent: null;
							lockSprite: null;
							mods: null;
							onLoad: null;
							tempCollisionData: null;
							floor: undefined;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							battle(t: unknown, i: unknown): void;
							blockDoor(): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							handleLeaving(t: unknown): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initListeners(): void;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isOnTopFloorAndNotComplete(): unknown;
							moveAbove(): void;
							npcDialogue(): void;
							onDebugAutoClick(t: unknown): void;
							onDebugAutoClickList(): void;
							onFloorComplete(): void;
							onLeavingDarkTower(t: unknown, i: unknown): void;
							onMiraClick(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setPlayerAsOpponent(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							startBattle(): void;
							stopListeners(): void;
							toBase(): void;
							toFloor(t: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							updateZoneNameFromCurrentFloor(): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["darktower"];
						};
						A3: {
							cleared: boolean;
							isQuestHub: boolean;
							isScene: boolean;
							_floorsComplete: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							ball: null;
							exitAreaEvent: null;
							lockSprite: null;
							mods: null;
							onLoad: null;
							tempCollisionData: null;
							floor: undefined;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							battle(t: unknown, i: unknown): void;
							blockDoor(): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							handleLeaving(t: unknown): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initListeners(): void;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isOnTopFloorAndNotComplete(): unknown;
							moveAbove(): void;
							npcDialogue(): void;
							onDebugAutoClick(t: unknown): void;
							onDebugAutoClickList(): void;
							onFloorComplete(): void;
							onLeavingDarkTower(t: unknown, i: unknown): void;
							onMiraClick(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setPlayerAsOpponent(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							startBattle(): void;
							stopListeners(): void;
							toBase(): void;
							toFloor(t: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							updateZoneNameFromCurrentFloor(): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["darktower"];
						};
					};
					monsters: {};
					quests: {};
					scenes: {};
					states: never[];
				};
				dyno: {
					debugBounties: boolean;
					bgmID: number;
					battleBG: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					Guardian: undefined;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A0: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							onScoogClicked(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toDynoDig(): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							toMuseum(t: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["dyno"];
						};
					};
					monsters: {};
					quests: {};
					scenes: {};
					states: string[];
					store: {
						items: unknown /* too deep */[];
					};
				};
				earthtower: {
					debugBounties: boolean;
					isBossDefeated: boolean;
					isWardenSaved: boolean;
					bgmID: number;
					currency: number;
					CurrentFloor: number;
					dungeonBGM: number;
					FloorStates: number;
					goalCollected: number;
					goalTotal: number;
					monstersDefeated: number;
					prizeWheelId: number;
					wardenRoomKeyID: number;
					WardenRoomKeyID: number;
					battleBG: string;
					dungeonCompleteEvent: string;
					dungeonGenerator: string;
					dungeonNameEvent: string;
					dungeonStartEvent: string;
					exitMap: string;
					ID: string;
					mapPrefix: string;
					name: string;
					onFaint: string;
					questHub: string;
					towerEventName: string;
					wardenName: string;
					Guardian: undefined;
					addCollected(t: unknown, i: unknown): void;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					consumeTargetCollectible(t: unknown): void;
					createLoadingData(): void;
					defeatMonster(n: unknown, e: unknown, s: unknown, r: unknown): void;
					enterDungeon(i: unknown): void;
					exitDungeon(i: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					goToEnd(): void;
					handleLeaving(n: unknown, e: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(i: unknown, n: unknown, e: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					isTowerComplete(): unknown;
					openWheel(t: unknown, i: unknown): void;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					resetCooldown(): void;
					setBossDefeated(t: unknown): void;
					setFloor(t: unknown, n: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					teleportInDungeon(t: unknown, i: unknown, n: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					updatePagesCounter(): void;
					achievementMonsterIDs: number[];
					AchievementMonsterIDS: Instance["_prodigy"]["world"]["zones"]["earthtower"]["achievementMonsterIDs"];
					assets: string[];
					floorGeneratorConfigs: {
						"1": number;
						"2": number;
						"3": number;
						"4": number;
						"5": number;
						"6": number;
						"7": number;
						"8": number;
					};
					game: Instance["_game"];
					maps: {
						CR: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							elevator: null;
							elevatorGuideHand: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							enterTowerFloor(): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							onDoorClicked(t: unknown, i: unknown, n: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["earthtower"];
						};
						WR: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							earthTowerZone: Instance["_prodigy"]["world"]["zones"]["earthtower"];
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["earthtower"];
						};
					};
					monsters: never[];
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: Instance["_prodigy"]["world"]["zones"]["earthtower"]["assets"];
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["earthtower"];
						};
					};
					scenes: {
						battleShadowGerald: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							startGeraldBattle(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["earthtower"];
						};
						freeFlorian: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(i: unknown, n: unknown, e: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							popBubble(): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["earthtower"];
						};
						intro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["earthtower"];
						};
					};
					states: string[];
				};
				elemental_guardian: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					ID: string;
					name: string;
					questHub: string;
					Guardian: undefined;
					abandonBounty(t: unknown): unknown;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(i: unknown, n: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						bounty_run: number;
						guardian_battle: number;
						hub: number;
					};
					monsters: {};
					quests: {};
					scenes: {};
					states: never[];
				};
				forest: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					guardian: string;
					Guardian: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					fireflyOnClick(t: unknown, i: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					interactFirefly(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						A4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						A5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						B5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						B6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						B7: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						B8: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							questNPC: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							chatWithMerchant(t: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						C4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							questNPC: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							chatWithMerchant(t: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						C7: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						C8: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						D3: {
							isQuestHub: boolean;
							isScene: boolean;
							wakeUp: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							checkForGerald(): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							onQuestLine(): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							stayAwake(): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							wakeUpGerald(): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							awakeTween: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							tween: unknown /* too deep */;
							wakeUpTween: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						Titan: {
							catapultBattle: boolean;
							coOpEnabled: boolean;
							isCatapultAnimating: boolean;
							isQuestHub: boolean;
							isScene: boolean;
							partySelectOpen: boolean;
							popupsEnabled: boolean;
							catapultQueue: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							cannonBall: null;
							cannonBallStartPos: null;
							catapultContainer: null;
							catapultSpine: null;
							catapultTweenX: null;
							catapultTweenY: null;
							coOpAvailableTeamsHandler: null;
							crystalContainer: null;
							crystalGuideHand: null;
							currentCoOpTeamHandler: null;
							impactContainer: null;
							impactSpine: null;
							onLoad: null;
							spineContainer: null;
							tempCollisionData: null;
							titanAsset: null;
							titanHealthBar: null;
							titanSpine: null;
							activePlayerCreatedTeam(): void;
							activePlayerJoinedTeam(): void;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addGuestTag(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							blockInputModal(): void;
							callNetworkToStartBattle(): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							endBattle(t: unknown, i: unknown): void;
							extractCoOpPlayerData(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							getTitanHP(): unknown;
							gotTitanCallback(): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							messageReceived(t: unknown): unknown;
							moveToCatapult(): void;
							moveToTitan(): void;
							onCatapultClick(): void;
							onCrystalClick(): unknown;
							onShootCatapult(): void;
							onSignClicked(): void;
							onTitanClicked(): void;
							playCrystalTutorial(): void;
							playCutscene(t: unknown): void;
							playerAddedToScreen(t: unknown): void;
							playImpact(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(i: unknown, n: unknown, e: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							renderHealthBar(): void;
							renderMapElements(): void;
							renderTitan(): void;
							sendGameComplete(t: unknown, i: unknown, n: unknown): void;
							sendTeamJoined(): void;
							setInputBlocking(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							setupCatapult(): void;
							setupCrystal(): void;
							setupSpineHitbox(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, o: unknown): unknown;
							shootCatapult(): void;
							showAllBounties(t: unknown, i: unknown): void;
							showCurrentTeamDisbandMessage(): void;
							showDeleteTeamMessage(): void;
							showJoinTeamFailedMessage(t: unknown): void;
							showLeaveTeamMessage(): void;
							start(i: unknown, n: unknown, e: unknown): void;
							startCatapultBattle(): void;
							startCoOpBattle(): unknown;
							startSoloBattle(): void;
							startTitanBattle(): void;
							titanDeadKick(): void;
							titanDeadTeleport(): void;
							titanDeny(): void;
							titanLoadComplete(t: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							titanMapData: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
					};
					monsters: number[];
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							saveMerchant(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							spawnMonsters(t: unknown, i: unknown, n: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"10": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							clickStump(t: unknown, i: unknown, n: unknown, e: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"11": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							fakeMonster: null;
							questGiver: null;
							questReceiver: null;
							getRemainingQuestAreas(): unknown;
							placeDecoyThief(t: unknown, i: unknown, n: unknown): void;
							placeThief(t: unknown, i: unknown, n: unknown): void;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"12": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							bossBattle(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"2": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"3": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							placeMonsters(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"4": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							placeItems(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"5": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							chatWithMerchant(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"6": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							chatWithNoot(t: unknown, i: unknown): void;
							placeMonsters(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"7": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"8": {
							alreadyBattled: boolean;
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							chatWithNoot(t: unknown, i: unknown, n: unknown): void;
							createTripTropTrio(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							tripTropBattle(t: unknown, i: unknown, n: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							monsters: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
						"9": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
					};
					scenes: {
						titanIntro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							titanMap: string;
							zoneName: string;
							master: null;
							noot: null;
							onLoad: null;
							spineContainer: null;
							tempCollisionData: null;
							titanSpine: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							enterTitan(t: unknown): void;
							exitMaster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							gotTitanCallback(t: unknown): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(n: unknown, e: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["forest"];
						};
					};
					states: string[];
				};
				house: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					maxLevel: number;
					minLevel: number;
					battleBG: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					player: null;
					screen: null;
					Guardian: undefined;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getAllowsVisiting(): unknown;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getHouseMapFromTag(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					gotoPreview(t: unknown): void;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(i: unknown, n: unknown, e: unknown): void;
					initScene(t: unknown, i: unknown): void;
					intializeHouseMaps(): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					onWorldMapHouseIconClick(): void;
					openHouseStore(): void;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setAllowsVisiting(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(i: unknown, n: unknown, e: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(i: unknown, n: unknown, e: unknown): unknown;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						"cool-cave": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"cool-cave-unique-1": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"cool-cave-unique-2": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						exit: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						exterior: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"fire-pit": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"fire-pit-2": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"fire-pit-3": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						forest: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"house-large-3": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"house-large-4": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"large-0": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"large-1": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"medium-0": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"medium-1": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-cool-cave": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-cool-cave-unique-1": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-cool-cave-unique-2": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-fire-pit": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-fire-pit-2": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-fire-pit-3": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-forest": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-house-large-3": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-house-large-4": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-large-0": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-large-1": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-medium-0": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-medium-1": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-small-0": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-small-1": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-suburbs": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-treehouse-unique-1": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"preview-treehouse-unique-2": {
							isQuestHub: boolean;
							isScene: boolean;
							houseID: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getMozzaEllaDialogueIndex(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							onBuyButtonClick(t: unknown, i: unknown): void;
							onMozzaEllaClick(t: unknown): void;
							onPurchaseConfirmation(t: unknown, i: unknown): void;
							placeMozzaElla(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							showPurchasePopup(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"small-0": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"small-1": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						suburbs: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"treehouse-unique-1": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						"treehouse-unique-2": {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							houseTag: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							content: null;
							onLoad: null;
							player: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addHouseItem(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							canPlaceItem(t: unknown): unknown;
							checkOverlap(t: unknown, i: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							closedEditor(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							fadeInPlayerContainer(t: unknown): unknown;
							fadeInPlayerContainerImmediately(t: unknown): void;
							fadeOutPlayerContainer(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							isValidSpace(t: unknown, i: unknown, n: unknown): unknown;
							loadHouseItems(t: unknown): void;
							openedEditor(): void;
							playerEnteredHouse(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							removeHouseItem(t: unknown): void;
							setInputEnabled(t: unknown, i: unknown): void;
							setOwner(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							houseData: unknown /* too deep */;
							houseItems: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						warden: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
					};
					monsters: {};
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							completeTutorial(t: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
					};
					scenes: {
						end: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						frontyardArrows: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							jumpHand(t: unknown, i: unknown, n: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): unknown;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						frontyardBattle: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							battle(t: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						intro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							houseIntro(t: unknown, i: unknown): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
						pets: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							noot: null;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							choosePet(t: unknown, i: unknown, n: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(): void;
							endBattle(): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							makeMonster(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							petsLeave(t: unknown, i: unknown, n: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							rescueBattle(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["house"];
						};
					};
					states: string[];
				};
				lamplight: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					maxLevel: number;
					minLevel: number;
					battleBG: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					Guardian: undefined;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(i: unknown, n: unknown, e: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						A2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						A3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						A4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						B0: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						B1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						B2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						B3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							openDayWheel(t: unknown, i: unknown): void;
							openTwilightWheel(t: unknown, i: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						B4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						B5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						C2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						C3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						C4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						coliseum: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							openArena(t: unknown): void;
							openArenaMenu(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						D3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
					};
					monsters: {
						randDir: boolean;
						encounter: unknown /* too deep */[];
					};
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
					};
					scenes: {
						springfestIntro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpringfestHat(t: unknown, i: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown, n: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							introDialogue(t: unknown, i: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
						summerfestIntro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["lamplight"];
						};
					};
					states: string[];
				};
				shipwreck_shore: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					guardian: string;
					Guardian: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					addBreathingBubbleToPlayerContainer(t: unknown): void;
					addInkGroup(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
					addShortcut(t: unknown, i: unknown, n: unknown): void;
					addSqueak(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
					addUnderwaterWizard(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					addWhirlpool(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					enableShortcut(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
					getArrowOffsetFromHandRotation(t: unknown, i: unknown): unknown;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCompletedStatesCount(t: unknown): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hasWhirlpool(t: unknown): unknown;
					hideFollow(t: unknown): void;
					init(i: unknown, n: unknown, e: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					isUnderwaterMap(t: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					sonicBlastInk(t: unknown, i: unknown, n: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(i: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						A2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						A3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						A4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						A5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							revealChest(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						A7: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B10: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B11: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B12: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							questNPC: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							zoneComplete(t: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B13: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							doorIsLocked(t: unknown): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B7: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							enableShortcut(t: unknown, i: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						B8: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						C10: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						C11: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						C12: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						C6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						C7: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						C8: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						C9: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							questNPC: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							enableShortcut(t: unknown, i: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							interactWithJellyJim(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						Titan: {
							catapultBattle: boolean;
							coOpEnabled: boolean;
							isCatapultAnimating: boolean;
							isQuestHub: boolean;
							isScene: boolean;
							partySelectOpen: boolean;
							popupsEnabled: boolean;
							catapultQueue: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							cannonBall: null;
							cannonBallStartPos: null;
							catapultContainer: null;
							catapultSpine: null;
							catapultTweenX: null;
							catapultTweenY: null;
							coOpAvailableTeamsHandler: null;
							crystalContainer: null;
							crystalGuideHand: null;
							currentCoOpTeamHandler: null;
							impactContainer: null;
							impactSpine: null;
							onLoad: null;
							spineContainer: null;
							tempCollisionData: null;
							titanAsset: null;
							titanHealthBar: null;
							titanSpine: null;
							activePlayerCreatedTeam(): void;
							activePlayerJoinedTeam(): void;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addGuestTag(t: unknown): void;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							blockInputModal(): void;
							callNetworkToStartBattle(): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							endBattle(t: unknown, i: unknown): void;
							extractCoOpPlayerData(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							getTitanHP(): unknown;
							gotTitanCallback(): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							messageReceived(t: unknown): unknown;
							moveToCatapult(): void;
							moveToTitan(): void;
							onCatapultClick(): void;
							onCrystalClick(): unknown;
							onShootCatapult(): void;
							onSignClicked(): void;
							onTitanClicked(): void;
							playCrystalTutorial(): void;
							playCutscene(t: unknown): void;
							playerAddedToScreen(t: unknown): void;
							playImpact(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(i: unknown, n: unknown, e: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							renderHealthBar(): void;
							renderMapElements(): void;
							renderTitan(): void;
							sendGameComplete(t: unknown, i: unknown, n: unknown): void;
							sendTeamJoined(): void;
							setInputBlocking(t: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							setupCatapult(): void;
							setupCrystal(): void;
							setupSpineHitbox(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, o: unknown): unknown;
							shootCatapult(): void;
							showAllBounties(t: unknown, i: unknown): void;
							showCurrentTeamDisbandMessage(): void;
							showDeleteTeamMessage(): void;
							showJoinTeamFailedMessage(t: unknown): void;
							showLeaveTeamMessage(): void;
							start(i: unknown, n: unknown, e: unknown): void;
							startCatapultBattle(): void;
							startCoOpBattle(): unknown;
							startSoloBattle(): void;
							startTitanBattle(): void;
							titanDeadKick(): void;
							titanDeadTeleport(): void;
							titanDeny(): void;
							titanLoadComplete(t: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							titanMapData: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
					};
					monsters: {};
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							mimic1: null;
							mimic2: null;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"10": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							bossKey: null;
							collectionMaps: null;
							collectBossKey(t: unknown, i: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							updateDialogue(t: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"11": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							screen: null;
							squeak: null;
							createSqueak(): void;
							endSequenceA(t: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							sandCloud(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							startSequenceA(t: unknown, i: unknown, n: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"2": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							startSequenceA(t: unknown, i: unknown, n: unknown): void;
							startSequenceB(t: unknown, i: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							updateQuestArea(): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"3": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							ink: null;
							collectInk(t: unknown): void;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"4": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							sonicBlaster: null;
							collectSonicBlaster(t: unknown, i: unknown): void;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"5": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							inkHighlighter: null;
							questGiver: null;
							questReceiver: null;
							process(i: unknown, n: unknown, e: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							showInkHighlighter(t: unknown, i: unknown, n: unknown): void;
							start(t: unknown, i: unknown, n: unknown): unknown;
							startSequenceA(t: unknown, i: unknown, n: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							updateQuestArea(): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"6": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							cameraButton: null;
							collectionMaps: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							startSequenceA(t: unknown, i: unknown, n: unknown): void;
							takePictureOfTunnel(t: unknown, i: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							updateQuestArea(): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"7": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"8": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							isMapB7Cleared(): unknown;
							isMapB8Cleared(): unknown;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							updateQuestArea(t: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							questParams: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
						"9": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							questGiver: string;
							questReceiver: string;
							collectionMaps: null;
							door: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							startSequenceA(t: unknown, i: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							alternateOnStart: unknown /* too deep */;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
					};
					scenes: {
						titanIntro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							titanMap: string;
							zoneName: string;
							master: null;
							noot: null;
							onLoad: null;
							spineContainer: null;
							tempCollisionData: null;
							titanSpine: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							enterTitan(t: unknown): void;
							exitMaster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							gotTitanCallback(t: unknown): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(n: unknown, e: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shipwreck_shore"];
						};
					};
					states: string[];
				};
				shiverchill: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					guardian: string;
					Guardian: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					doorClick(t: unknown, i: unknown, n: unknown): void;
					frozenSomethingOnClick(t: unknown, i: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					interactFrozenSomething(t: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					smoke(t: unknown, i: unknown, n: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A10: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A11: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							checkFurnaces(t: unknown, i: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A5: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							checkFurnaces(t: unknown, i: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A7: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							chatWithMerchant(t: unknown, i: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							setupNPC(t: unknown, i: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						A9: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							checkFurnace(t: unknown, i: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							setupFrozenLoot(t: unknown, i: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B10: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							furnaceClick(t: unknown, i: unknown, n: unknown, e: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							highlightFurnace(t: unknown): void;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processFurnaces(t: unknown): void;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							checkFurnaces(t: unknown, i: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B6: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B7: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(n: unknown, e: unknown, s: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B8: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						B9: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							dailyCoordinates: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
					};
					monsters: number[];
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"10": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"11": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							cutscene(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"12": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"13": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							bossBattle(t: unknown, i: unknown, n: unknown): void;
							endBattle(t: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"14": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"15": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"2": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							monsters: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"3": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"4": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"5": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"6": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							ambush(t: unknown, i: unknown, n: unknown): void;
							endBattle(t: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							talkToMerchant(t: unknown, i: unknown, n: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"7": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							bossBattle(t: unknown, i: unknown, n: unknown): void;
							endBattle(t: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"8": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
						"9": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["shiverchill"];
						};
					};
					scenes: {};
					states: string[];
				};
				skywatch: {
					debugBounties: boolean;
					bgmID: number;
					currency: number;
					battleBG: string;
					guardian: string;
					Guardian: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					animateElevatorClose(t: unknown, i: unknown, n: unknown): void;
					animateElevatorOpen(t: unknown, i: unknown, n: unknown): void;
					animateTrolley(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown): void;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					changePosition(t: unknown, i: unknown): void;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					createVines(t: unknown): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					elevator(t: unknown, i: unknown, n: unknown, e: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					interactTrolley(t: unknown, i: unknown, n: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					shrinkVines(t: unknown): void;
					start(i: unknown, n: unknown, e: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A0: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						A1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(n: unknown, e: unknown, s: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						B1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						B2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						B3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							createIceBlock(t: unknown, i: unknown, n: unknown): void;
							createIceBlocks(t: unknown, i: unknown): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							makeSnow(t: unknown, n: unknown, e: unknown, s: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							plugIn(): void;
							plugOut(): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						C1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						C2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(t: unknown, i: unknown, n: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						C3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						C4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							plugIn(t: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						D1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							trolley2: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						D2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							trolley2: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							coord: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						D3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							displayStationaryFanribbons(t: unknown, i: unknown): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							plugIn(t: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							unplug(t: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						E1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						E2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						E3: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						E4: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						E5: {
							insideTrigger: boolean;
							isQuestHub: boolean;
							isScene: boolean;
							lastFrameInsideTrigger: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							user: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(i: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
					};
					monsters: number[];
					quests: {
						"1": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"10": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"11": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							monstersAmbushEugene(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							rescuedEugene(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"12": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"13": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"2": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							thief: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							thiefBattle(t: unknown): void;
							thiefDefeated(t: unknown): void;
							thiefFailsEscape(t: unknown, i: unknown, n: unknown): void;
							thiefFlees(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown): void;
							thiefStealsTheWeatherometre(t: unknown, i: unknown, n: unknown): void;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"3": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							foundBroccolina(t: unknown, i: unknown, n: unknown): void;
							nootFindsTheNote(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"4": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							boss: null;
							collectionMaps: null;
							element: null;
							eyes: null;
							questGiver: null;
							questReceiver: null;
							bossEnter(t: unknown): void;
							bossExit(t: unknown, i: unknown, n: unknown): void;
							clearVinesD1(t: unknown, i: unknown, n: unknown): void;
							clearVinesD2(t: unknown, i: unknown, n: unknown): void;
							cutsceneD3(t: unknown, i: unknown, n: unknown): void;
							enableD1Trolley2(t: unknown, i: unknown): void;
							hideBoss(): void;
							highlightD1(t: unknown, i: unknown, n: unknown): void;
							highlightD2(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(i: unknown, n: unknown, e: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"5": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							collectionMaps: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"6": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							ambusher1: null;
							ambusher2: null;
							ambusher3: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							ambush(t: unknown, i: unknown, n: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"7": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							monsters: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"8": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
						"9": {
							chain: boolean;
							ID: number;
							descCacheKey: string;
							descKey: string;
							alternateOnStart: null;
							collectionMaps: null;
							questGiver: null;
							questReceiver: null;
							process(t: unknown, i: unknown, n: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							start(t: unknown, i: unknown, n: unknown): unknown;
							update(t: unknown, i: unknown, n: unknown): void;
							area: unknown /* too deep */;
							areaCache: unknown /* too deep */;
							assets: unknown /* too deep */;
							onComplete: unknown /* too deep */;
							onProc: unknown /* too deep */;
							onStart: unknown /* too deep */;
							req: unknown /* too deep */;
							reward: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["skywatch"];
						};
					};
					scenes: {};
					states: string[];
				};
				tower_town: {
					debugBounties: boolean;
					bgmID: number;
					battleBG: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					Guardian: undefined;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A0: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							characterController: undefined;
							pageCamera: undefined;
							townRenderer: undefined;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							generateTown(t: unknown): void;
							generateTownUpdateSummary(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							onCloseInfinityTowerOpenDialog(): void;
							onCloseTowerTownOpenDialog(): void;
							onGoToInfinityButtonClicked(): void;
							onGoToTowerTownClicked(): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							refreshVisibleTown(): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							setupCameraController(): void;
							setupCharacterController(): void;
							showAllBounties(t: unknown, i: unknown): void;
							showInfinityTowerDialog(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							_breadcrumbManager: unknown /* too deep */;
							_mathTower: unknown /* too deep */;
							_prefabLoader: unknown /* too deep */;
							_storeManager: unknown /* too deep */;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							breadCrumbManager: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							storeManager: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["tower_town"];
						};
						A1: {
							isQuestHub: boolean;
							isScene: boolean;
							_awakeFloatlings: number;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							cameraHUDInterface: undefined;
							characterController: undefined;
							pageCamera: undefined;
							townRenderer: undefined;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCurrentTownAssets(): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							beginFloatlingWander(): unknown;
							checkFlingBreadcrumb(t: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							disableFlingButton(): void;
							disableNavigation(): void;
							enableFlingButton(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							enableNavigation(): void;
							generateTown(i: unknown): void;
							generateTownUpdateSummary(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							onCloseInfinityTowerOpenDialog(): void;
							onCloseTowerTownOpenDialog(): void;
							onEducationNotification(t: unknown): void;
							onGoToInfinityButtonClicked(): void;
							onGoToTowerTownClicked(): void;
							onTownNotification(t: unknown): void;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							processTownUpdates(): void;
							refreshVisibleTown(): void;
							setAllFloatlingsLastThrownTime(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): unknown;
							setupCameraController(): void;
							setupCharacterController(): void;
							setupFTUEElements(): void;
							setupHUD(): void;
							setupInfinityTowerListener(): void;
							setupNavButtons(t: unknown): void;
							setupNotifications(): void;
							setupRenderers(): void;
							setupStateManager(): void;
							showAllBounties(t: unknown, i: unknown): void;
							showInfinityTowerDialog(t: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							startGame(): void;
							startNewGradeSequence(): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							_breadcrumbManager: unknown /* too deep */;
							_mathTower: unknown /* too deep */;
							_prefabLoader: unknown /* too deep */;
							_storeManager: unknown /* too deep */;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							breadCrumbManager: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							storeManager: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["tower_town"];
						};
					};
					monsters: {};
					quests: {};
					scenes: {
						intro: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							puppetMaster: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							end(t: unknown, i: unknown): void;
							enterScene(t: unknown, i: unknown, n: unknown): void;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							tweenPuppetMaster(): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							loadingData: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["tower_town"];
						};
					};
					states: string[];
				};
				toyzone: {
					debugBounties: boolean;
					bgmID: number;
					battleBG: string;
					ID: string;
					name: string;
					onFaint: string;
					questHub: string;
					Guardian: undefined;
					cacheZoneAssets(i: unknown): void;
					canTeleport(t: unknown): unknown;
					cleanup(): void;
					completeQuest(t: unknown): unknown;
					completeSequence(t: unknown, i: unknown): void;
					createLoadingData(): void;
					defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void;
					getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown;
					getBattleMods(): unknown;
					getCurrentQuest(): unknown;
					getCurrentQuestID(): unknown;
					getDailyMaps(): unknown;
					getDailyQuestDescription(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getQuest(t: unknown): unknown;
					getQuestState(): unknown;
					getRemainingQuestAreas(t: unknown): unknown;
					getRemainingQuestObjectives(): unknown;
					getScene(t: unknown): unknown;
					getState(t: unknown): unknown;
					handleLeaving(t: unknown, i: unknown): void;
					hasDaily(t: unknown): unknown;
					hasDailyQuestExpired(): unknown;
					hideFollow(t: unknown): void;
					init(t: unknown, i: unknown, n: unknown): void;
					initScene(t: unknown, i: unknown): void;
					isDailyQuestComplete(): unknown;
					isOnQuest(t: unknown): unknown;
					isOnSequence(t: unknown, i: unknown): unknown;
					isQuestComplete(t: unknown): unknown;
					isQuestProcessed(t: unknown): unknown;
					isQuestStarted(t: unknown): unknown;
					isSequenceComplete(t: unknown, i: unknown): unknown;
					placeDaily(t: unknown, i: unknown, n: unknown): void;
					playScene(t: unknown): void;
					process(t: unknown, i: unknown, n: unknown): void;
					processQuest(t: unknown): void;
					setState(t: unknown, i: unknown): unknown;
					setup(t: unknown, i: unknown, n: unknown): unknown;
					showZoneLocked(t: unknown): void;
					start(t: unknown, i: unknown, n: unknown): void;
					startNewDailyQuest(t: unknown, i: unknown): void;
					startQuest(t: unknown): unknown;
					teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void;
					teleportLoad(): void;
					teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void;
					testQuest(t: unknown, i: unknown, n: unknown): void;
					update(t: unknown, i: unknown, n: unknown): void;
					updateDailyQuest(t: unknown): void;
					game: Instance["_game"];
					maps: {
						A1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							clickedPortal(t: unknown, i: unknown, n: unknown): void;
							clickedToy(t: unknown, n: unknown): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							spawnToys(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							TOY_SPAWN_DATA: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["toyzone"];
						};
						B1: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							animateHand(t: unknown, i: unknown, n: unknown): void;
							cleanup(): void;
							cleanupMap(): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							start(i: unknown, n: unknown, e: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["toyzone"];
						};
						B2: {
							isQuestHub: boolean;
							isScene: boolean;
							x: number;
							y: number;
							battleBG: string;
							file: string;
							name: string;
							nameKey: string;
							onFaint: string;
							tag: string;
							zoneName: string;
							onLoad: null;
							tempCollisionData: null;
							addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
							addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
							addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
							addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown;
							addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void;
							addSpriteToLayer(t: unknown, i: unknown, n: unknown): void;
							addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
							cleanup(): void;
							cleanupMap(): void;
							clickedPortal(t: unknown, i: unknown, n: unknown): void;
							clickedToy(t: unknown, n: unknown): void;
							enableLayerID(t: unknown, i: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocation(): unknown;
							getName(): unknown;
							getTag(): unknown;
							getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown;
							getTileProperties(t: unknown, i: unknown, n: unknown): unknown;
							getTileset(t: unknown, i: unknown): unknown;
							init(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
							initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void;
							playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							process(t: unknown, i: unknown, n: unknown): void;
							processAnimations(t: unknown, i: unknown): void;
							processDynamicLayers(t: unknown, i: unknown): unknown;
							processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							processTileAnimUpdate(t: unknown, i: unknown): void;
							setup(i: unknown, n: unknown, e: unknown): void;
							showAllBounties(t: unknown, i: unknown): void;
							spawnToys(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown, n: unknown): void;
							toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void;
							update(t: unknown): void;
							validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void;
							animatedSprites: unknown /* too deep */;
							assets: unknown /* too deep */;
							container: Instance["_prodigy"]["gameContainer"];
							contentLayerContainers: unknown /* too deep */;
							disabledLayerIDs: unknown /* too deep */;
							disabledLayers: unknown /* too deep */;
							dynamicLayerContainers: unknown /* too deep */;
							dynamicSprites: unknown /* too deep */;
							locations: unknown /* too deep */;
							mapMonsters: unknown /* too deep */;
							questParams: unknown /* too deep */;
							TOY_SPAWN_DATA: unknown /* too deep */;
							zone: Instance["_prodigy"]["world"]["zones"]["toyzone"];
						};
					};
					monsters: {};
					quests: {};
					scenes: {};
					states: string[];
				};
			};
		};
	};
	game: Instance["_game"];
	prodigy: Instance["_prodigy"];
}