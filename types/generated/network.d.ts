export interface Network {
	_characterProcessed: boolean;
	_isTokenExpiredMessageOpen: boolean;
	characterProcessed: boolean;
	expiredToken: boolean;
	hasFailedUpdate: boolean;
	isActivityDialogOpen: boolean;
	loggedIn: boolean;
	processFriendsList: boolean;
	processPlayer: boolean;
	saving: boolean;
	socketConnected: boolean;
	inactiveTimer: number;
	_retryTimer: null;
	lastUpdate: null;
	offlineMessage: null;
	offlineTimer: null;
	saveCallback: null;
	updateFailedTime: null;
	zone: null;
	acceptFriendRequest(t: unknown, i: unknown, n: unknown): unknown;
	addGiftBox(t: unknown, i: unknown, n: unknown): unknown;
	answerQuestion(t: unknown): unknown;
	attachClassCode(t: unknown, i: unknown, n: unknown): unknown;
	cancelFriendRequest(t: unknown, i: unknown, n: unknown): unknown;
	canUseMP(): unknown;
	completeAssignment(t: unknown): void;
	createCharacterAppearance(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
	createUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
	deleteMail(t: unknown, i: unknown, n: unknown): unknown;
	deleteUserFeed(t: unknown, i: unknown, n: unknown): unknown;
	emitMessage(t: unknown): unknown;
	finishPlacement(t: unknown): unknown;
	generalErrorHandler(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
	getAllMail(t: unknown, i: unknown, n: unknown, e: unknown): void;
	getCharacter(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
	getCharData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
	getClassCodes(): unknown;
	getClassLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
	getCurrentClassCode(): unknown;
	getErrorMessage(t: unknown, i: unknown, n: unknown): unknown;
	getFriendRequestList(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
	getFriendsList(t: unknown, i: unknown): unknown;
	getGiftBoxes(t: unknown, i: unknown): unknown;
	getSeasonLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
	getTitan(t: unknown, i: unknown, n: unknown): unknown;
	getTitans(t: unknown, i: unknown): unknown;
	getTitanUserData(t: unknown, i: unknown): unknown;
	getTotalFriendRequests(t: unknown, i: unknown): unknown;
	getTotalMail(t: unknown, i: unknown): unknown;
	getUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): unknown;
	getUserLeaderboard(t: unknown, i: unknown): unknown;
	getUserRank(t: unknown, i: unknown, n: unknown): unknown;
	getVideoLessonSignedUrls(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
	getWorldList(t: unknown, i: unknown): unknown;
	hitTitan(t: unknown, i: unknown, n: unknown): unknown;
	initGoingOffline(): void;
	initUserLeaderboard(t: unknown, i: unknown): unknown;
	joinMultiplayerServer(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
	joinSuccess(t: unknown, i: unknown): void;
	joinZone(t: unknown): void;
	leaveZone(): void;
	likeUserFeed(t: unknown, i: unknown, n: unknown): unknown;
	loadEducation(t: unknown, i: unknown): unknown;
	login(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown;
	logout(): void;
	markAsRead(t: unknown, i: unknown, n: unknown, e: unknown): void;
	nt(t: unknown, i: unknown, n: unknown): unknown;
	onDisconnect(t: unknown, i: unknown): void;
	onError(t: unknown, i: unknown): void;
	onInactivityPopupButtonPress(): void;
	onMessage(t: unknown): void;
	onPlayerJoined(t: unknown): void;
	onPlayerLeft(t: unknown): void;
	onPlayerList(t: unknown): void;
	onUpdateCharacterFailure(t: unknown): void;
	onUpdateCharacterSuccess(t: unknown): void;
	processCharacterFailure(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
	processCharacterSuccess(t: unknown, i: unknown, n: unknown, e: unknown): void;
	processLoginFailure(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
	processLoginSuccess(t: unknown, i: unknown, n: unknown, e: unknown): void;
	processUpdate(t: unknown, i: unknown, n: unknown): void;
	quitMatchmaking(t: unknown, i: unknown): unknown;
	rejectFriendRequest(t: unknown, i: unknown, n: unknown): unknown;
	removeFriend(t: unknown, i: unknown, n: unknown): unknown;
	sendConversionFunnelEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
	sendFriendRequest(t: unknown, i: unknown, n: unknown): unknown;
	sendGiftBoxEvent(): void;
	sendItemChangeEvent(t: unknown, i: unknown, n: unknown): void;
	sendZoneEvent(t: unknown): void;
	setSaveCallback(t: unknown): void;
	setZone(t: unknown): void;
	shareUserFeed(t: unknown, i: unknown, n: unknown): unknown;
	showInactiveDialog(): void;
	showTokenExpiredPopup(): void;
	startInactiveTimer(): void;
	startMatchmaking(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
	stopInactiveTimer(): void;
	updateCharacter(): unknown;
	updateGiftBox(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
	updatePlanStudent(t: unknown): void;
	updatePlayerGrade(t: unknown): unknown;
	updateStrandBasedPlacementTest(t: unknown): unknown;
	updateUser(t: unknown, i: unknown, n: unknown): unknown;
	versionError(): void;
	_identityAuthProvider: {
		userID: number;
		addAccessTokenBody(t: unknown): void;
		addAccessTokenHeader(t: unknown): void;
		addAuthorizationHeader(t: unknown): void;
		addValuesToBody(t: unknown): void;
		addValuesToHeader(t: unknown): void;
		authenticateRequest(t: unknown): void;
		createAccessTokenBodyClosure(t: unknown): void;
		createAccessTokenHeaderClosure(t: unknown): void;
		createAuthorizationHeaderClosure(t: unknown): void;
		isLoggedIn(): unknown;
		logout(): void;
		setAuthorizationData(t: unknown, i: unknown): void;
	};
	_playerDataProvider: {
		addStars(t: unknown): void;
		dispatchStatChange(t: unknown, i: unknown, n: unknown): void;
		getAppearance(): unknown;
		getBaseHearts(): unknown;
		getFirstName(): unknown;
		getLastName(): unknown;
		getLevel(): unknown;
		getMiddleName(): unknown;
		getNickname(): unknown;
		getPlayer(): unknown;
		getStars(): unknown;
		getUserID(): unknown;
		giveItem(t: unknown, i: unknown, n: unknown): void;
		hasParentLinkedEmail(): unknown;
		initialize(t: unknown): void;
		isMember(): unknown;
		logout(): void;
		setSavingEnabled(t: unknown): void;
		_player: {
			_isFocusModeEnabled: boolean;
			_saveEnabled: boolean;
			appearanceChanged: boolean;
			earlyBirdLastChance: boolean;
			hasGrade: boolean;
			hasUsedTicket: boolean;
			immortal: boolean;
			inPVP: boolean;
			isClassCodeAttached: boolean;
			isFocusModeEnabled: boolean;
			isOpponent: boolean;
			justLeveled: boolean;
			memberPrompt: boolean;
			parentalLink: boolean;
			saveEnabled: boolean;
			showHealthBar: boolean;
			tt: boolean;
			tutorialCompletedThisSession: boolean;
			updated: boolean;
			aoaTier: number;
			broadcastId: number;
			catchAttempt: number;
			grade: number;
			pvpHP: number;
			spellStreak: number;
			starsEarned: number;
			starsReward: number;
			starsRewardBase: number;
			starsToProcess: number;
			userID: number;
			_locationSelectionType: string;
			_userDataPlatform: string;
			curriculumTreeID: string;
			locationSelectionType: string;
			parentEmail: string;
			type: string;
			userDataPlatform: string;
			username: string;
			_goalId: null;
			_playerContainer: null;
			chatID: null;
			coOpTeam: null;
			currentVideoSkillId: null;
			danceID: null;
			emoteID: null;
			goalId: null;
			lastVisited: null;
			memberShareDate: null;
			playerContainer: null;
			primaryParentID: null;
			source: null;
			transformID: null;
			world: null;
			memberEndDate: undefined;
			memberStartDate: undefined;
			team: undefined;
			addAsset(t: unknown): void;
			addAssets(t: unknown): void;
			addBattle(): void;
			addBountyScore(t: unknown): void;
			addLoss(): void;
			addSpell(t: unknown): void;
			addStars(i: unknown, n: unknown, e: unknown): unknown;
			addWin(): void;
			anyPetsAboveLevel(t: unknown): unknown;
			canCatch(): unknown;
			canSpin(t: unknown): unknown;
			castSpell(t: unknown): void;
			changeCurrentHearts(t: unknown, i: unknown): void;
			changeCurrentHeartsPercent(t: unknown): void;
			changeEnergy(t: unknown): void;
			changeGold(t: unknown, i: unknown): void;
			checkVersion(): unknown;
			completeDaily(t: unknown, i: unknown): void;
			completeTower(t: unknown): void;
			createDataClone(): unknown;
			createRandom(): void;
			diffAttackSlots(t: unknown): unknown;
			equip(t: unknown, i: unknown): unknown;
			evolve(t: unknown, i: unknown): void;
			forceSaveCharacter(): void;
			getAllAttacks(): unknown;
			getAllowsHouseVisitors(): unknown;
			getArenaPoints(): unknown;
			getAttacks(t: unknown): unknown;
			getAvailableEvolutions(): unknown;
			getBamSpells(t: unknown): unknown;
			getBaseMaxHearts(i: unknown): unknown;
			getBattles(): unknown;
			getBountyScore(): unknown;
			getColiseum(): unknown;
			getCurrentBamSpells(): unknown;
			getCurrentHearts(): unknown;
			getDailyQuestions(): unknown;
			getDamageBonus(): unknown;
			getDataAndClear(): unknown;
			getDrops(): unknown;
			getElement(): unknown;
			getEnergy(): unknown;
			getEquipmentSpell(t: unknown): unknown;
			getFirstName(): unknown;
			getGold(): unknown;
			getHeartBonus(): unknown;
			getID(): unknown;
			getLatestClassIDLegacy(): unknown;
			getLevel(): unknown;
			getLevelingCurve(t: unknown): unknown;
			getLosses(): unknown;
			getMaxHearts(t: unknown): unknown;
			getMaxTimeForCurrentMorphMarbleEffect(): unknown;
			getName(): unknown;
			getNameWithoutNickname(): unknown;
			getNativeSpell(t: unknown, i: unknown): unknown;
			getNumAttacks(): unknown;
			getNumRelics(): unknown;
			getPercentToLevel(): unknown;
			getPlayerClass(): unknown;
			getPlayerData(): unknown;
			getRegisterDate(): unknown;
			getSettings(): unknown;
			getSpellAssets(): unknown;
			getSpellStreak(): unknown;
			getStarReward(): unknown;
			getStarRewardByDamage(t: unknown): unknown;
			getStars(): unknown;
			getStarsToLevel(): unknown;
			getStatHealth(): unknown;
			getStatPower(): unknown;
			getTeamScore(): unknown;
			getTowerProgress(): unknown;
			getUpdatedData(t: unknown, i: unknown): unknown;
			getWins(): unknown;
			hasCompletedTowerTownTutorial(): unknown;
			hasCompletedTutorial(): unknown;
			hasHouseItem(t: unknown): unknown;
			hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
			hasMembership(): unknown;
			hasValidatedParentEmail(): unknown;
			hasValidatedTeacherEmail(): unknown;
			heal(): void;
			healTeam(t: unknown): void;
			healTeamMember(t: unknown, i: unknown, n: unknown): void;
			init(i: unknown): unknown;
			initEducation(): void;
			initFromProtobuf(t: unknown): void;
			isBlockedByDarkTowerMemberGate(): unknown;
			isItemOwned(t: unknown): unknown;
			isKnockedOut(): unknown;
			isPlayerTransformed(): unknown;
			isPlayingAtSchool(): unknown;
			onEducationLoaded(t: unknown): void;
			onTutorialComplete(): void;
			originalHasMembership(): unknown;
			processDeserter(): unknown;
			processStars(): void;
			registerIncomingAttack(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeTeam(): void;
			resetAccount(): unknown;
			resetModifiers(): void;
			rewardMembershipPrizes(t: unknown): unknown;
			sendInitialGTMEvents(): void;
			setAllowsHouseVisitors(i: unknown): void;
			setBGMVolume(t: unknown): void;
			setColiseum(t: unknown): void;
			setCurrentHearts(t: unknown, i: unknown): void;
			setData(t: unknown): void;
			setDefault(t: unknown, i: unknown): void;
			setEducation(t: unknown, i: unknown): void;
			setEnergy(i: unknown): void;
			setLocation(t: unknown): void;
			setMembership(t: unknown): void;
			setParentEmail(t: unknown): void;
			setPlayerClass(t: unknown): void;
			setSFXVolume(t: unknown): void;
			setSpinDate(t: unknown): void;
			setVoiceVolume(t: unknown): void;
			setZone(t: unknown): void;
			spinWheel(t: unknown): void;
			swapSpells(t: unknown, i: unknown): void;
			transformPlayer(i: unknown, n: unknown, e: unknown): void;
			unEquip(t: unknown): unknown;
			unlockMemberItems(): void;
			updateMembershipVideoAdData(): void;
			updateModifier(t: unknown, i: unknown): void;
			validateLevel(): void;
			registerDate: Date;
			_educationData: {
				chosenGrade: number;
				curriculumTreeID: number;
				grade: number;
				placementTestID: number;
				placementTestInstanceID: number;
				goalId: null;
				gradeOverride: null;
				homework: never[];
				placementTestData: {
					placementTestComposition: {
						1: unknown /* too deep */[];
						2: unknown /* too deep */[];
						3: unknown /* too deep */[];
						4: unknown /* too deep */[];
						5: unknown /* too deep */[];
						6: unknown /* too deep */[];
						7: unknown /* too deep */[];
						8: unknown /* too deep */[];
					};
					placementTestStats: {
						potentialPlacementGradeNum: null;
						currentStrandData: {
							gradeNum: null;
							momentum: null;
							skillId: null;
							strandId: null;
						};
						pastStrandData: {
							placed: never[];
						};
						placementTestSkillsEncountered: never[];
					};
				};
				plans: never[];
				skills: never[];
			};
			_remoteLogger: {
				isLoggingEnabled(): unknown;
				logData(t: unknown, i: unknown): void;
				logStat(t: unknown, i: unknown): void;
				authProvider: {
					_renewalFailureWait: number;
					_renewalTimer: number;
					authenticateRequest(t: unknown): void;
					getToken(): unknown;
					handleErrorCallback(): void;
					isLoggedIn(): unknown;
					logout(): void;
					renewToken(): unknown;
					setToken(t: unknown): void;
					validate(t: unknown): unknown;
					_httpClient: {
						_baseURI: string;
						clearDefaultResponseHandler(t: unknown): void;
						getBaseURI(): unknown;
						getDefaultHeaders(): unknown;
						getRequestInitData(t: unknown): unknown;
						retryRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						sendFetchRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						sendRequest(t: unknown): unknown;
						setBaseURI(t: unknown): void;
						setDefaultHeader(t: unknown, i: unknown, n: unknown): void;
						setDefaultResponseHandler(t: unknown, i: unknown, n: unknown): void;
						_defaultHeaders: Map<never, never>;
						_defaultResponseHandler: Map<string, { func(): void; context: unknown /* too deep */; }>;
					};
					_sessionTokenAuth: {
						_userID: number;
						_token: string;
						authenticateRequest(t: unknown): void;
						getSessionToken(): unknown;
						getUserID(): unknown;
						isLoggedIn(): unknown;
						logout(): void;
						setSessionToken(t: unknown, i: unknown): void;
					};
					timeManager: {
						isServerDeltaSet: boolean;
						_timezoneOffset: number;
						serverTimeDeltaMs: number;
						getIsServerDeltaSet(): unknown;
						getLocalTimeMs(): unknown;
						getServerTimeDeltaMs(): unknown;
						getServerTimeMs(): unknown;
						getUTCOffset(): unknown;
						setServerTime(t: unknown): void;
					};
				};
				currentPlayer: Network["_playerDataProvider"];
				featureFlags: {
					getClassCodePromptCurriculumBlacklist(): unknown;
					getDataURI(): unknown;
					getFeatureRevisionsURIs(): unknown;
					getMultiplayerClusterForWorld(t: unknown): unknown;
					getValue(t: unknown, i: unknown): unknown;
					getWorkerPath(t: unknown): unknown;
					initializeWithJson(t: unknown): void;
					isEventEnabled(t: unknown): unknown;
					isFeatureEnabled(t: unknown): unknown;
					environment: {
						getCurrentEnvironment(): unknown;
						getCurrentEnvironmentByHost(): unknown;
						getEnvironmentString(): unknown;
						getWindowHost(): unknown;
						getWindowQueryString(): unknown;
					};
					jsonData: {
						allOutAttackDisabled: boolean;
						autoAttackDisabled: boolean;
						coOpTitanDisabled: boolean;
						disableMembershipVideoAdDuringSchoolHours: boolean;
						disableParentAttach5: boolean;
						disableTrialMembership: boolean;
						enableMembershipVideoAd: boolean;
						enableVerboseAnalytics: boolean;
						enableVerboseGameServer: boolean;
						enableYouTubeAd: boolean;
						enableYouTubeTimeCheck: boolean;
						experimentLE2: boolean;
						experimentLE3LaneB: boolean;
						experimentLE3LaneC: boolean;
						"loader-allowedOverrideIps": boolean;
						"loader-gameClientOverride": boolean;
						"loader-phaserPIXI": boolean;
						maintenance: boolean;
						removeAssets: boolean;
						useServerTimeForVideoLockout: boolean;
						videoLessonInstantWin: boolean;
						gameDataVersion: number;
						gameServerRollout: number;
						"loader-gameDataVersionOverride": number;
						"loader-pixiCanary": number;
						"loader-pixiDataVersion": number;
						maintenanceMessage: number;
						sentrySampleRate: number;
						setFest: number;
						surveyCheckIntervalMinutes: number;
						debugPassword: string;
						gameClientVersion: string;
						gameCodePath: string;
						gameDataPath: string;
						gameLibPath: string;
						"loader-gameCodePathOverride": string;
						"loader-pixiClientVersion": string;
						ServerGameVersion: string;
						splashScreen: string;
						classCodePromptCurriculumBlacklist: number[];
						enabledEvents: {
							anonymous_game_complete_v3: boolean;
							anonymous_game_discovery: boolean;
							"battle-start-type": boolean;
							"conversion-funnel-event": boolean;
							"create-character": boolean;
							education_lesson_encounter_v3: boolean;
							education_question_interface_v3: boolean;
							epicAttacks: boolean;
							game_avatar: boolean;
							game_avatar_v3: boolean;
							game_battle_v3: boolean;
							game_complete: boolean;
							game_complete_v3: boolean;
							game_discovery_v3: boolean;
							game_level_up: boolean;
							game_mod: boolean;
							game_question_v3: boolean;
							game_session_start: boolean;
							game_session_start_v3: boolean;
							game_sink: boolean;
							game_sink_v3: boolean;
							game_social: boolean;
							game_social_v3: boolean;
							game_source: boolean;
							game_source_v3: boolean;
							"item-change-event": boolean;
							login: boolean;
							"member-ad": boolean;
							"new-member": boolean;
							PVP: boolean;
							"pvp-season-reward": boolean;
							"survey-results": boolean;
							"toy-event": boolean;
							"zone-event": boolean;
						};
						googleLoginSettings: {
							amazon: boolean;
							google: boolean;
						};
						"loader-allowedIps": string[];
						"loader-windowVarBlacklist": string[];
						lockoutTrial: {
							trialLengthDays: number;
							endDate: string;
							startDate: string;
						};
						multiplayerClusterLocations: unknown /* too deep */[];
						parentAttachTrial: {
							trialLengthDays: number;
							endDate: string;
							startDate: string;
							exclusionLanes: number[];
						};
						prodigyGameFlags: {
							allOutAttackDisabled: boolean;
							autoAttackDisabled: boolean;
							coOpTitanDisabled: boolean;
							disableMembershipVideoAdDuringSchoolHours: boolean;
							disableParentAttach5: boolean;
							disableTrialMembership: boolean;
							enableMembershipVideoAd: boolean;
							enableVerboseAnalytics: boolean;
							enableVerboseGameServer: boolean;
							enableYouTubeAd: boolean;
							enableYouTubeTimeCheck: boolean;
							experimentLE2: boolean;
							experimentLE3LaneB: boolean;
							experimentLE3LaneC: boolean;
							"loader-allowedOverrideIps": boolean;
							"loader-gameClientOverride": boolean;
							"loader-phaserPIXI": boolean;
							removeAssets: boolean;
							useServerTimeForVideoLockout: boolean;
							videoLessonInstantWin: boolean;
							gameDataVersion: number;
							gameServerRollout: number;
							"loader-gameDataVersionOverride": number;
							"loader-pixiCanary": number;
							"loader-pixiDataVersion": number;
							sentrySampleRate: number;
							setFest: number;
							surveyCheckIntervalMinutes: number;
							debugPassword: string;
							gameDataPath: string;
							"loader-gameCodePathOverride": string;
							"loader-pixiClientVersion": string;
							splashScreen: string;
							classCodePromptCurriculumBlacklist: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["classCodePromptCurriculumBlacklist"];
							enabledEvents: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["enabledEvents"];
							googleLoginSettings: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["googleLoginSettings"];
							"loader-allowedIps": Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["loader-allowedIps"];
							"loader-windowVarBlacklist": Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["loader-windowVarBlacklist"];
							lockoutTrial: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["lockoutTrial"];
							multiplayerClusterLocations: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["multiplayerClusterLocations"];
							parentAttachTrial: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["parentAttachTrial"];
							recordingFeatures: {
								"archives-run": boolean;
								"post-tutorial": boolean;
							};
						};
						recordingFeatures: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["jsonData"]["prodigyGameFlags"]["recordingFeatures"];
					};
				};
				httpClient: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["_httpClient"];
			};
			achievements: {
				updated: boolean;
				complete(t: unknown): void;
				get(t: unknown): unknown;
				getDataAndClear(): unknown;
				getProgress(t: unknown): unknown;
				increment(t: unknown, i: unknown): void;
				init(t: unknown): void;
				set(t: unknown, i: unknown): void;
				data: {
					progress: {};
				};
			};
			appearance: {
				updated: boolean;
				eyeColor: number;
				face: number;
				hairColor: number;
				hairStyle: number;
				skinColor: number;
				gender: string;
				generateRandom(): void;
				getData(): unknown;
				getDataAndClear(): unknown;
				getEyeColor(): unknown;
				getFace(): unknown;
				getGender(): unknown;
				getHair(): unknown;
				getName(): unknown;
				getSkinColor(): unknown;
				init(i: unknown): void;
				randomize(): void;
				setEyeColor(i: unknown): void;
				setFace(i: unknown): void;
				setGender(i: unknown): void;
				setHair(i: unknown, n: unknown): void;
				setName(t: unknown): void;
				setSkinColor(i: unknown): void;
				_name: {
					firstName: number;
					lastName: number;
					middleName: number;
					nickname: null;
					getFirstName(): unknown;
					getLastName(): unknown;
					getMiddleName(): unknown;
					getNickname(): unknown;
					isValid(): unknown;
					setFirstName(t: unknown): void;
					setLastName(t: unknown): void;
					setMiddleName(t: unknown): void;
					setNickname(t: unknown): void;
				};
				name: Network["_playerDataProvider"]["_player"]["appearance"]["_name"];
				playerService: {
					getAppearance(t: unknown): unknown;
					getPlayer(t: unknown): unknown;
					factoriesContainer: {
						guid: string;
						_middleware: null;
						parent: null;
						_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
						_planAndResolve(): unknown;
						applyCustomMetadataReader(t: unknown): void;
						applyMiddleware(): unknown;
						bind(t: unknown): unknown;
						createChild(): unknown;
						get(t: unknown): unknown;
						getAll(t: unknown): unknown;
						getAllNamed(t: unknown, n: unknown): unknown;
						getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
						getNamed(t: unknown, n: unknown): unknown;
						getTagged(t: unknown, n: unknown, e: unknown): unknown;
						isBound(t: unknown): unknown;
						isBoundNamed(t: unknown, n: unknown): unknown;
						isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
						load(): unknown;
						rebind(t: unknown): unknown;
						resolve(n: unknown): unknown;
						restore(): void;
						snapshot(): void;
						unbind(t: unknown): void;
						unbindAll(): void;
						unload(): unknown;
						_bindingDictionary: {
							add(t: unknown, n: unknown): void;
							clone(): unknown;
							get(t: unknown): unknown;
							getMap(): unknown;
							hasKey(t: unknown): unknown;
							remove(t: unknown): void;
							removeByCondition(t: unknown): unknown;
							traverse(t: unknown): void;
							_map: Map<string, unknown /* too deep */>;
						};
						_metadataReader: {
							getConstructorMetadata(t: unknown): unknown;
							getPropertiesMetadata(t: unknown): unknown;
						};
						_snapshots: never[];
						options: {
							autoBindInjectable: boolean;
							defaultScope: string;
						};
					};
				};
			};
			backpack: {
				updated: boolean;
				add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addBountyNote(t: unknown, i: unknown, n: unknown): void;
				addKeyItem(t: unknown, i: unknown, n: unknown): unknown;
				canCraft(t: unknown, i: unknown): unknown;
				consume(t: unknown, i: unknown, n: unknown): unknown;
				consumeLegacyBounties(): void;
				craft(t: unknown, i: unknown): void;
				getBackpackItemsByType(t: unknown): unknown;
				getBattleItems(t: unknown): unknown;
				getDataAndClear(): unknown;
				getItem(t: unknown, i: unknown): unknown;
				getItemCount(t: unknown): unknown;
				getItemData(t: unknown, i: unknown): unknown;
				getKeyItemData(t: unknown, i: unknown): unknown;
				getTotalUnique(): unknown;
				hasItem(t: unknown, i: unknown): unknown;
				hasItems(t: unknown): unknown;
				hasMaxQuantityOfItem(t: unknown, i: unknown): unknown;
				setItemData(t: unknown, i: unknown, n: unknown): void;
				setItems(t: unknown): void;
				setKeyItemData(t: unknown, i: unknown, n: unknown): void;
				unlockAllItems(): void;
				data: {
					boots: never[];
					currency: never[];
					follow: never[];
					fossil: never[];
					hat: never[];
					item: never[];
					key: never[];
					mount: never[];
					outfit: never[];
					relic: never[];
					spellRelic: never[];
					weapon: never[];
				};
			};
			classIDs: string[];
			daily: {
				_isComplete: boolean;
				_updated: boolean;
				isComplete: boolean;
				updated: boolean;
				_festivalName: undefined;
				_location: undefined;
				_monsterID: undefined;
				festivalName: undefined;
				location: undefined;
				monsterID: undefined;
				complete(): void;
				getData(): unknown;
				getDataAndClear(): unknown;
				init(t: unknown): void;
				isExpired(t: unknown): unknown;
				reset(): void;
				start(t: unknown, i: unknown, n: unknown): void;
				_lastStarted: Date;
				lastStarted: Date;
			};
			dailyQuestions: {
				currentDay: number;
				previousData: null;
				adjustNumAnswered(t: unknown): void;
				clearPreviousData(): void;
				createValidData(i: unknown): unknown;
				getCurrentDay(): unknown;
				getDataAndClear(t: unknown): unknown;
				getNumAnsweredToday(): unknown;
				getNumRequired(i: unknown): unknown;
				getNumRequiredToday(): unknown;
				getPreviousNumAnsweredToday(): unknown;
				getResetDayIndex(): unknown;
				getRewards(t: unknown, i: unknown): unknown;
				getStartedChallenge(): unknown;
				giveReward(t: unknown, i: unknown, n: unknown, e: unknown): void;
				hasPreviousData(): unknown;
				init(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): void;
				isCurrentDayComplete(): unknown;
				isDayComplete(t: unknown): unknown;
				onQuestonAnswered(t: unknown, i: unknown, n: unknown, r: unknown): void;
				postNotification(t: unknown): void;
				processDate(i: unknown, n: unknown): void;
				resetData(): void;
				setCurrentDay(t: unknown): void;
				setDayComplete(t: unknown, i: unknown): void;
				setNumQuestionsAnswered(t: unknown): void;
				setStartedChallenge(t: unknown): void;
				data: {
					startedChallenge: boolean;
					completedDays: number;
					numAnsweredToday: number;
				};
				onDataUpdated: {
					_shouldPropagate: boolean;
					active: boolean;
					memorize: boolean;
					_addBinding(t: unknown): void;
					_boundDispatch(): unknown;
					_indexOfListener(t: unknown, i: unknown): unknown;
					add(t: unknown, i: unknown, n: unknown): unknown;
					addOnce(t: unknown, i: unknown, n: unknown): unknown;
					boundDispatch(): unknown;
					dispatch(): void;
					dispose(): void;
					forget(): void;
					getNumListeners(): unknown;
					halt(): void;
					has(t: unknown, i: unknown): unknown;
					registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					toString(): unknown;
					validateListener(t: unknown, i: unknown): void;
					_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; context: null; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Network["_playerDataProvider"]["_player"]["dailyQuestions"]["onDataUpdated"]; }[];
					bindings: Network["_playerDataProvider"]["_player"]["dailyQuestions"]["onDataUpdated"]["_bindings"];
				};
				rewards: {
					resetDayIndex: number;
					name: string;
					days: { numRequiredQuestions: number; rewards: unknown /* too deep */; }[];
				};
			};
			data: {
				allowsHouseVisitors: boolean;
				hp: number;
				level: number;
				nm: number;
				stars: number;
				startDate: number;
				storedMemberStars: number;
				team: number;
				versionID: number;
				school: string;
				zone: string;
				daily: {
					isComplete: boolean;
					lastStarted: number;
				};
				settings: {
					bgmVolume: number;
					sfxVolume: number;
					voiceVolume: number;
				};
			};
			educationData: Network["_playerDataProvider"]["_player"]["_educationData"];
			encounters: {
				updated: boolean;
				addToPetTimesBattled(t: unknown, i: unknown): void;
				addToPetTimesRescued(t: unknown, i: unknown): void;
				clearAdData(): void;
				createNewPetEncounter(t: unknown): void;
				getAllTotalPetsRecused(): unknown;
				getDataAndClear(): unknown;
				getPetEncounterByID(t: unknown): unknown;
				getPetTimesBattled(t: unknown): unknown;
				getPetTimesRescued(t: unknown): unknown;
				hasPetBeenEncountered(t: unknown): unknown;
				hasSeenAd(t: unknown): unknown;
				markAdSeen(t: unknown): void;
				onPetEncountered(t: unknown): void;
				removeAd(t: unknown): unknown;
				setData(t: unknown): void;
				_data: {
					ads: never[];
					pets: { firstSeenDate: number; ID: number; timesBattled: number; timesRescued: number; }[];
				};
				_timeManager: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["timeManager"];
			};
			equipment: {
				updated: boolean;
				boots: number;
				follow: number;
				hat: number;
				outfit: number;
				weapon: number;
				mount: undefined;
				spellRelic: undefined;
				calculateAffixBonus(t: unknown): unknown;
				clearData(): void;
				getAffixes(t: unknown, i: unknown): unknown;
				getBoots(): unknown;
				getDamageBonuses(): unknown;
				getData(): unknown;
				getDataAndClear(): unknown;
				getEquipment(t: unknown): unknown;
				getFollow(): unknown;
				getHat(): unknown;
				getHeartBonuses(): unknown;
				getMount(): unknown;
				getOutfit(): unknown;
				getSpellRelic(): unknown;
				getWeapon(): unknown;
				handleItemEquip(t: unknown, i: unknown, n: unknown): void;
				handleItemUnequip(): void;
				init(t: unknown): void;
				randomize(): void;
				setBoots(i: unknown, n: unknown, e: unknown): void;
				setFollow(i: unknown): void;
				setHat(i: unknown, n: unknown, e: unknown): void;
				setMount(i: unknown, n: unknown, e: unknown): void;
				setOutfit(i: unknown, n: unknown, e: unknown): void;
				setSpellRelic(i: unknown, n: unknown, e: unknown): void;
				setWeapon(i: unknown, n: unknown, e: unknown): void;
				unequipLevelLockedItem(t: unknown, i: unknown): void;
				unequipLevelLockedItems(): void;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: {
					audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
					bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
					existing(t: unknown): unknown;
					graphics(t: unknown, i: unknown, n: unknown): unknown;
					group(t: unknown, i: unknown, n: unknown): unknown;
					image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
					renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
					sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
					spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
					sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
					text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
					tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
					tween(t: unknown, i: unknown, n: unknown): unknown;
					game: Network["_playerDataProvider"]["_player"]["game"];
					stage: {
						_accessibleActive: boolean;
						_cacheAsBitmap: boolean;
						_destroyed: boolean;
						accessible: boolean;
						accessibleChildren: boolean;
						buttonMode: boolean;
						cacheAsBitmap: boolean;
						disableVisibilityChange: boolean;
						exists: boolean;
						fixedToCamera: boolean;
						interactive: boolean;
						interactiveChildren: boolean;
						isMask: boolean;
						isSprite: boolean;
						pendingDestroy: boolean;
						renderable: boolean;
						sortableChildren: boolean;
						sortDirty: boolean;
						visible: boolean;
						worldVisible: boolean;
						_boundsID: number;
						_eventsCount: number;
						_lastSortedIndex: number;
						_zIndex: number;
						alpha: number;
						angle: number;
						bottom: number;
						centerX: number;
						centerY: number;
						height: number;
						left: number;
						length: number;
						offsetX: number;
						offsetY: number;
						renderId: number;
						right: number;
						rotation: number;
						tabIndex: number;
						top: number;
						width: number;
						worldAlpha: number;
						worldRotation: number;
						x: number;
						y: number;
						z: number;
						zIndex: number;
						_hiddenVar: string;
						_sortProperty: string;
						accessiblePointerEvents: string;
						accessibleType: string;
						name: string;
						_accessibleDiv: null;
						_boundsRect: null;
						_cacheData: null;
						_enabledFilters: null;
						_mask: null;
						accessibleHint: null;
						accessibleTitle: null;
						camera: null;
						cursor: null;
						filterArea: null;
						filters: null;
						hitArea: null;
						mask: null;
						_cacheAsBitmapDestroy(t: unknown): void;
						_calculateBounds(): void;
						_calculateCachedBounds(): void;
						_destroyCachedDisplayObject(): void;
						_getCachedLocalBounds(): unknown;
						_initCachedDisplayObject(t: unknown): void;
						_initCachedDisplayObjectCanvas(t: unknown): void;
						_recursivePostUpdateTransform(): void;
						_render(t: unknown): void;
						_renderCached(t: unknown): void;
						_renderCachedCanvas(t: unknown): void;
						_renderCanvas(t: unknown): void;
						_renderWebGL(t: unknown): void;
						add(t: unknown, i: unknown): unknown;
						addAt(t: unknown, i: unknown): unknown;
						addChild(): unknown;
						addChildAt(t: unknown, e: unknown): unknown;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						ascendingSortHandler(t: unknown, i: unknown): unknown;
						boot(): void;
						bringChildToTop(t: unknown): void;
						calculateBounds(): void;
						callAll(t: unknown, i: unknown): void;
						callbackFromArray(t: unknown, i: unknown): unknown;
						checkVisibility(): void;
						containerUpdateTransform(): void;
						descendingSortHandler(t: unknown, i: unknown): unknown;
						destroy(): void;
						disableTempParent(t: unknown): void;
						displayObjectUpdateTransform(): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						enableTempParent(): unknown;
						eventNames(): unknown;
						getAt(t: unknown): unknown;
						getBounds(t: unknown, e: unknown): unknown;
						getByName(t: unknown): unknown;
						getChildAt(t: unknown): unknown;
						getChildByName(t: unknown, e: unknown): unknown;
						getChildIndex(t: unknown): unknown;
						getGlobalPosition(t: unknown, e: unknown): unknown;
						getIndex(t: unknown): unknown;
						getLocalBounds(e: unknown, r: unknown): unknown;
						iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						moveDown(t: unknown): unknown;
						moveUp(t: unknown): unknown;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						onChildrenChange(t: unknown): void;
						parseConfig(t: unknown): void;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						removeAllListeners(t: unknown): unknown;
						removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
						removeChild(): unknown;
						removeChildAt(t: unknown): unknown;
						removeChildren(t: unknown, e: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						render(t: unknown): void;
						renderAdvanced(t: unknown): void;
						renderAdvancedWebGL(t: unknown): void;
						renderCanvas(t: unknown): void;
						renderWebGL(t: unknown): void;
						sendChildToBack(t: unknown): void;
						setBackgroundColor(t: unknown): void;
						setChildIndex(t: unknown, e: unknown): void;
						setParent(t: unknown): unknown;
						setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
						sort(t: unknown, i: unknown): void;
						sortChildren(): void;
						swap(t: unknown, i: unknown): void;
						swapChildren(t: unknown, e: unknown): void;
						toGlobal(t: unknown, e: unknown, r: unknown): unknown;
						toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						update(): void;
						updateTransform(): void;
						updateZ(): void;
						visibilityChange(t: unknown): unknown;
						_bounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_events: {};
						_game: Network["_playerDataProvider"]["_player"]["game"];
						_localBounds: {
							maxX: number;
							maxY: number;
							minX: number;
							minY: number;
							updateID: number;
							rect: null;
							addBounds(t: unknown): void;
							addBoundsArea(t: unknown, e: unknown): void;
							addBoundsMask(t: unknown, e: unknown): void;
							addBoundsMatrix(t: unknown, e: unknown): void;
							addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
							addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							addPoint(t: unknown): void;
							addQuad(t: unknown): void;
							addVertexData(t: unknown, e: unknown, r: unknown): void;
							addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
							addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							clear(): void;
							getRectangle(t: unknown): unknown;
							isEmpty(): unknown;
							pad(t: unknown, e: unknown): void;
						};
						_localBoundsRect: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						_tempDisplayObjectParent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_localBounds: null;
							_localBoundsRect: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							sortDirty: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							destroy(t: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(t: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							removeAllListeners(t: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						_trackedPointers: {};
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bounds: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						children: unknown /* too deep */[];
						events: {
							destroy(): void;
							onAddedToGroup: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onAnimationComplete: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onAnimationLoop: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onAnimationStart: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDragStart: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDragStop: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDragUpdate: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onEnterBounds: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onInputDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onInputOut: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onInputOver: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onInputUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onOutOfBounds: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onRemovedFromGroup: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onRemovedFromWorld: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
						};
						game: Network["_playerDataProvider"]["_player"]["game"];
						localTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
						onDestroy: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: never[];
							bindings: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["onDestroy"]["_bindings"];
						};
						parent: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							height: number;
							renderId: number;
							rotation: number;
							tabIndex: number;
							width: number;
							worldAlpha: number;
							x: number;
							y: number;
							zIndex: number;
							accessiblePointerEvents: string;
							accessibleType: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							name: null;
							parent: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							calculateBounds(): void;
							containerUpdateTransform(): void;
							destroy(e: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sortChildren(): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							updateTransform(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							children: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"][];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						pivot: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["pivot"];
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
						};
						position: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["pivot"]["scope"];
						};
						scale: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["pivot"]["scope"];
						};
						skew: {
							_x: number;
							_y: number;
							x: number;
							y: number;
							cb(): void;
							clone(e: unknown, r: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
							scope: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["pivot"]["scope"];
						};
						stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
						tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_tempDisplayObjectParent"];
						trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["_trackedPointers"];
						transform: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["pivot"]["scope"];
						world: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldGamePosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldPosition: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						worldScale: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["scale"];
						worldTransform: {
							a: number;
							b: number;
							c: number;
							d: number;
							tx: number;
							ty: number;
							array: null;
							append(t: unknown): unknown;
							apply(t: unknown, e: unknown): unknown;
							applyInverse(t: unknown, e: unknown): unknown;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							decompose(t: unknown): unknown;
							fromArray(t: unknown): void;
							identity(): unknown;
							invert(): unknown;
							prepend(t: unknown): unknown;
							rotate(t: unknown): unknown;
							scale(t: unknown, e: unknown): unknown;
							set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							toArray(t: unknown, e: unknown): unknown;
							translate(t: unknown, e: unknown): unknown;
						};
					};
				};
				_app: {
					_resizeId: null;
					_resizeTo: null;
					cancelResize(): void;
					destroy(e: unknown, r: unknown): void;
					queueResize(): unknown;
					render(): void;
					resize(): void;
					start(): void;
					stop(): void;
					view: HTMLCanvasElement;
					_ticker: {
						_protected: boolean;
						autoStart: boolean;
						started: boolean;
						_lastFrame: number;
						_maxElapsedMS: number;
						_minElapsedMS: number;
						_requestId: number;
						count: number;
						deltaMS: number;
						deltaTime: number;
						elapsedMS: number;
						FPS: number;
						lastTime: number;
						maxFPS: number;
						minFPS: number;
						speed: number;
						_addListener(t: unknown): unknown;
						_cancelIfNeeded(): void;
						_requestIfNeeded(): void;
						_startIfPossible(): void;
						_tick(e: unknown): void;
						add(e: unknown, r: unknown, i: unknown): unknown;
						addOnce(e: unknown, r: unknown, i: unknown): unknown;
						destroy(): void;
						remove(t: unknown, e: unknown): unknown;
						start(): void;
						stop(): void;
						update(t: unknown): unknown;
						_head: {
							_destroyed: boolean;
							once: boolean;
							priority: number;
							context: null;
							fn: null;
							previous: null;
							connect(t: unknown): void;
							destroy(t: unknown): unknown;
							emit(t: unknown): unknown;
							match(t: unknown, e: unknown): unknown;
							next: {
								_destroyed: boolean;
								once: boolean;
								priority: number;
								connect(t: unknown): void;
								destroy(t: unknown): unknown;
								emit(t: unknown): unknown;
								fn(i: unknown): void;
								match(t: unknown, e: unknown): unknown;
								context: Network["_playerDataProvider"]["_player"]["game"];
								next: unknown /* too deep */;
								previous: Network["_playerDataProvider"]["_player"]["game"]["_app"]["_ticker"]["_head"];
							};
						};
					};
					loader: {
						_protected: boolean;
						loading: boolean;
						concurrency: number;
						progress: number;
						baseUrl: string;
						defaultQueryString: string;
						_boundLoadResource(t: unknown, e: unknown): unknown;
						_loadResource(t: unknown, e: unknown): void;
						_onComplete(): void;
						_onLoad(t: unknown): void;
						_onStart(): void;
						_prepareUrl(t: unknown): unknown;
						add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						destroy(): void;
						load(t: unknown): unknown;
						off(t: unknown): void;
						on(t: unknown): void;
						once(t: unknown): void;
						pre(t: unknown): unknown;
						reset(): unknown;
						use(t: unknown): unknown;
						_afterMiddleware: (((t: unknown, e: unknown) => unknown) | ((t: unknown, e: unknown) => void) | ((e: unknown, r: unknown) => void) | ((e: unknown, n: unknown) => unknown))[];
						_beforeMiddleware: ((t: unknown, e: unknown) => void)[];
						_queue: {
							paused: boolean;
							started: boolean;
							buffer: number;
							concurrency: number;
							drain(): void;
							empty(): void;
							error(): void;
							idle(): unknown;
							kill(): void;
							length(): unknown;
							pause(): void;
							process(): void;
							push(t: unknown, e: unknown): void;
							resume(): void;
							running(): unknown;
							saturated(): void;
							unsaturated(): void;
							unshift(t: unknown, e: unknown): void;
							_tasks: never[];
						};
						_resourcesParsing: never[];
						onComplete: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onError: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onLoad: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onProgress: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onStart: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						resources: {};
					};
					renderer: {
						autoDensity: boolean;
						autoResize: boolean;
						clearBeforeRender: boolean;
						preserveDrawingBuffer: boolean;
						renderingToScreen: boolean;
						transparent: boolean;
						_backgroundColor: number;
						_eventsCount: number;
						backgroundColor: number;
						CONTEXT_UID: number;
						height: number;
						resolution: number;
						type: number;
						width: number;
						_backgroundColorString: string;
						addListener(t: unknown, e: unknown, r: unknown): unknown;
						addSystem(t: unknown, e: unknown): unknown;
						clear(): void;
						destroy(t: unknown): void;
						emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
						eventNames(): unknown;
						generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						initPlugins(t: unknown): void;
						listenerCount(t: unknown): unknown;
						listeners(t: unknown): unknown;
						off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						on(t: unknown, e: unknown, r: unknown): unknown;
						once(t: unknown, e: unknown, r: unknown): unknown;
						removeAllListeners(t: unknown): unknown;
						removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
						render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
						reset(): unknown;
						resize(t: unknown, r: unknown): void;
						gl: WebGL2RenderingContext;
						view: HTMLCanvasElement;
						_backgroundColorRgba: number[];
						_events: {
							prerender: {
								once: boolean;
								fn(): void;
								context: unknown /* too deep */;
							};
						};
						_lastObjectRendered: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"];
						batch: {
							boundArray(t: unknown, e: unknown, r: unknown, i: unknown): void;
							copyBoundTextures(t: unknown, e: unknown): void;
							destroy(): void;
							flush(): void;
							reset(): void;
							setObjectRenderer(t: unknown): void;
							currentRenderer: {
								_aIndex: number;
								_bufferSize: number;
								_dcIndex: number;
								_flushId: number;
								_iIndex: number;
								_indexCount: number;
								_packedGeometryPoolSize: number;
								_vertexCount: number;
								MAX_TEXTURES: number;
								size: number;
								vertexSize: number;
								bindAndClearTexArray(t: unknown): void;
								buildDrawCalls(t: unknown, e: unknown, i: unknown): void;
								buildTexturesAndDrawCalls(): void;
								contextChange(): void;
								destroy(): void;
								drawBatches(): void;
								flush(): void;
								geometryClass(r: unknown): unknown;
								getAttributeBuffer(t: unknown): unknown;
								getIndexBuffer(t: unknown): unknown;
								initFlushBuffers(): void;
								onPrerender(): void;
								packInterleavedGeometry(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								render(t: unknown): void;
								start(): void;
								stop(): void;
								updateGeometry(): void;
								_indexBuffer: Uint16Array;
								_aBuffers: unknown /* too deep */;
								_attributeBuffer: unknown /* too deep */;
								_bufferedElements: unknown /* too deep */;
								_bufferedTextures: unknown /* too deep */;
								_iBuffers: unknown /* too deep */;
								_packedGeometries: unknown /* too deep */;
								_shader: unknown /* too deep */;
								_tempBoundTextures: unknown /* too deep */;
								renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
								shaderGenerator: unknown /* too deep */;
								state: unknown /* too deep */;
							};
							emptyRenderer: {
								destroy(): void;
								flush(): void;
								render(t: unknown): void;
								start(): void;
								stop(): void;
								renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							};
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						context: {
							isLost: boolean;
							webGLVersion: number;
							contextChange(t: unknown): void;
							createContext(e: unknown, r: unknown): unknown;
							destroy(): void;
							getExtensions(): void;
							handleContextLost(arg0: unknown): void;
							handleContextRestored(): void;
							initFromContext(t: unknown): void;
							initFromOptions(t: unknown): void;
							postrender(): void;
							validateContext(t: unknown): void;
							gl: WebGL2RenderingContext;
							extensions: {
								anisotropicFiltering: unknown /* too deep */;
								colorBufferFloat: unknown /* too deep */;
								floatTextureLinear: unknown /* too deep */;
							};
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							supports: {
								uint32Indices: boolean;
							};
						};
						extract: {
							base64(t: unknown, e: unknown, r: unknown): unknown;
							canvas(e: unknown): unknown;
							destroy(): void;
							image(t: unknown, e: unknown, r: unknown): unknown;
							pixels(e: unknown): unknown;
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						filter: {
							forceClear: boolean;
							useMaxPadding: boolean;
							applyFilter(e: unknown, r: unknown, i: unknown, n: unknown): void;
							bindAndClear(e: unknown, r: unknown): void;
							calculateNormalizedScreenSpaceMatrix(t: unknown): unknown;
							calculateScreenSpaceMatrix(t: unknown): unknown;
							calculateSpriteMatrix(t: unknown, e: unknown): unknown;
							destroy(): void;
							emptyPool(): void;
							getFilterTexture(t: unknown, e: unknown): unknown;
							getOptimalFilterTexture(t: unknown, e: unknown, r: unknown): unknown;
							getRenderTarget(t: unknown, e: unknown): unknown;
							pop(): unknown;
							push(t: unknown, e: unknown): void;
							resize(): void;
							returnFilterTexture(t: unknown): unknown;
							returnRenderTarget(t: unknown): unknown;
							activeState: {
								legacy: boolean;
								resolution: number;
								filters: null;
								renderTexture: null;
								target: null;
								clear(): void;
								destinationFrame: unknown /* too deep */;
								sourceFrame: unknown /* too deep */;
							};
							defaultFilterStack: unknown /* too deep */[];
							globalUniforms: {
								group: boolean;
								static: boolean;
								dirtyId: number;
								id: number;
								add(e: unknown, r: unknown, i: unknown): void;
								update(): void;
								syncUniforms: unknown /* too deep */;
								uniforms: unknown /* too deep */;
							};
							quad: {
								instanced: boolean;
								id: number;
								instanceCount: number;
								refCount: number;
								addAttribute(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								addIndex(t: unknown): unknown;
								clone(): unknown;
								destroy(): void;
								dispose(): void;
								getAttribute(t: unknown): unknown;
								getBuffer(t: unknown): unknown;
								getIndex(): unknown;
								getSize(): unknown;
								interleave(): unknown;
								attributes: unknown /* too deep */;
								buffers: unknown /* too deep */;
								disposeRunner: unknown /* too deep */;
								glVertexArrayObjects: unknown /* too deep */;
								indexBuffer: unknown /* too deep */;
							};
							quadUv: {
								instanced: boolean;
								id: number;
								instanceCount: number;
								refCount: number;
								addAttribute(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								addIndex(t: unknown): unknown;
								clone(): unknown;
								destroy(): void;
								dispose(): void;
								getAttribute(t: unknown): unknown;
								getBuffer(t: unknown): unknown;
								getIndex(): unknown;
								getSize(): unknown;
								interleave(): unknown;
								invalidate(): unknown;
								map(t: unknown, e: unknown): unknown;
								uvs: Float32Array;
								vertices: Float32Array;
								attributes: unknown /* too deep */;
								buffers: unknown /* too deep */;
								disposeRunner: unknown /* too deep */;
								glVertexArrayObjects: unknown /* too deep */;
								indexBuffer: unknown /* too deep */;
								uvBuffer: unknown /* too deep */;
								vertexBuffer: unknown /* too deep */;
							};
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							statePool: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["filter"]["activeState"][];
							tempRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							texturePool: {
								enableFullScreen: boolean;
								_pixelsHeight: number;
								_pixelsWidth: number;
								clear(t: unknown): void;
								createTexture(t: unknown, e: unknown): unknown;
								getFilterTexture(t: unknown, e: unknown): unknown;
								getOptimalTexture(e: unknown, r: unknown, i: unknown): unknown;
								returnFilterTexture(t: unknown): unknown;
								returnTexture(t: unknown): void;
								setScreenSize(e: unknown): void;
								textureOptions: unknown /* too deep */;
								texturePool: unknown /* too deep */;
							};
						};
						framebuffer: {
							hasMRT: boolean;
							writeDepthTexture: boolean;
							CONTEXT_UID: number;
							current: null;
							bind(t: unknown, e: unknown): void;
							blit(t: unknown, e: unknown, r: unknown): unknown;
							clear(e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
							contextChange(): unknown;
							destroy(): void;
							detectSamples(e: unknown): unknown;
							disposeAll(t: unknown): void;
							disposeFramebuffer(t: unknown, e: unknown): void;
							forceStencil(): void;
							initFramebuffer(t: unknown): unknown;
							reset(): void;
							resizeFramebuffer(t: unknown): void;
							setViewport(t: unknown, e: unknown, r: unknown, i: unknown): void;
							updateFramebuffer(t: unknown): void;
							gl: WebGL2RenderingContext;
							msaaSamples: Int32Array;
							managedFramebuffers: unknown /* too deep */[];
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							size: {
								height: number;
								width: number;
								x: number;
								y: number;
							};
							unknownFramebuffer: {
								depth: boolean;
								stencil: boolean;
								dirtyFormat: number;
								dirtyId: number;
								dirtySize: number;
								height: number;
								multisample: number;
								width: number;
								depthTexture: null;
								colorTexture: undefined;
								addColorTexture(e: unknown, r: unknown): unknown;
								addDepthTexture(e: unknown): unknown;
								destroyDepthTexture(): void;
								dispose(): void;
								enableDepth(): unknown;
								enableStencil(): unknown;
								resize(t: unknown, e: unknown): void;
								colorTextures: unknown /* too deep */;
								disposeRunner: unknown /* too deep */;
								glFramebuffers: unknown /* too deep */;
							};
							viewport: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
						};
						geometry: {
							canUseUInt32ElementIndex: boolean;
							hasInstance: boolean;
							hasVao: boolean;
							CONTEXT_UID: number;
							activateVao(t: unknown, e: unknown): void;
							bind(t: unknown, e: unknown): void;
							checkCompatibility(t: unknown, e: unknown): void;
							contextChange(): unknown;
							destroy(): void;
							disposeAll(t: unknown): void;
							disposeBuffer(t: unknown, e: unknown): void;
							disposeGeometry(t: unknown, e: unknown): void;
							draw(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							getSignature(t: unknown, e: unknown): unknown;
							initGeometryVao(t: unknown, e: unknown): unknown;
							reset(): void;
							unbind(): void;
							updateBuffers(): void;
							_activeVao: WebGLVertexArrayObject;
							gl: WebGL2RenderingContext;
							_activeGeometry: {
								instanced: boolean;
								id: number;
								instanceCount: number;
								refCount: number;
								addAttribute(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								addIndex(t: unknown): unknown;
								clone(): unknown;
								destroy(): void;
								dispose(): void;
								getAttribute(t: unknown): unknown;
								getBuffer(t: unknown): unknown;
								getIndex(): unknown;
								getSize(): unknown;
								interleave(): unknown;
								_buffer: unknown /* too deep */;
								_indexBuffer: unknown /* too deep */;
								attributes: unknown /* too deep */;
								buffers: unknown /* too deep */;
								disposeRunner: unknown /* too deep */;
								glVertexArrayObjects: unknown /* too deep */;
								indexBuffer: unknown /* too deep */;
							};
							_boundBuffer: {
								byteLength: number;
								refCount: number;
								updateID: number;
								buffer: WebGLBuffer;
							};
							managedBuffers: {
								2: unknown /* too deep */;
								3: unknown /* too deep */;
								4: unknown /* too deep */;
								5: unknown /* too deep */;
								6: unknown /* too deep */;
								7: unknown /* too deep */;
								8: unknown /* too deep */;
								9: unknown /* too deep */;
							};
							managedGeometries: {
								1: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["filter"]["quadUv"];
								2: unknown /* too deep */;
								3: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["geometry"]["_activeGeometry"];
							};
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						globalUniforms: {
							group: boolean;
							static: boolean;
							dirtyId: number;
							id: number;
							add(e: unknown, r: unknown, i: unknown): void;
							update(): void;
							syncUniforms: {
								0(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								1(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								2(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								3(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
							};
							uniforms: {
								projectionMatrix: unknown /* too deep */;
							};
						};
						mask: {
							enableScissor: boolean;
							alphaMaskIndex: number;
							destroy(): void;
							detect(e: unknown): void;
							pop(e: unknown): void;
							popSpriteMask(): void;
							push(e: unknown, r: unknown): void;
							pushSpriteMask(t: unknown): void;
							setMaskStack(t: unknown): void;
							alphaMaskPool: never[];
							maskDataPool: never[];
							maskStack: never[];
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						options: {
							antialias: boolean;
							autoDensity: boolean;
							autoStart: boolean;
							clearBeforeRender: boolean;
							forceCanvas: boolean;
							legacy: boolean;
							preserveDrawingBuffer: boolean;
							sharedTicker: boolean;
							transparent: boolean;
							height: number;
							resolution: number;
							width: number;
							backgroundColor: undefined;
							powerPreference: undefined;
							resizeTo: undefined;
							sharedLoader: undefined;
							view: HTMLCanvasElement;
						};
						plugins: {
							accessibility: {
								_isActive: boolean;
								_isMobileAccessibility: boolean;
								debug: boolean;
								isActive: boolean;
								isMobileAccessibility: boolean;
								androidUpdateCount: number;
								androidUpdateFrequency: number;
								renderId: number;
								_hookDiv: null;
								_onClick(t: unknown): void;
								_onFocus(t: unknown): void;
								_onFocusOut(t: unknown): void;
								_onKeyDown(arg0: unknown): void;
								_onMouseMove(arg0: unknown): void;
								activate(): void;
								addChild(t: unknown): void;
								capHitArea(t: unknown): void;
								createTouchHook(): void;
								deactivate(): void;
								destroy(): void;
								destroyTouchHook(): void;
								update(): void;
								updateAccessibleObjects(t: unknown): void;
								updateDebugHTML(t: unknown): void;
								div: HTMLDivElement;
								children: unknown /* too deep */;
								pool: unknown /* too deep */;
								renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							};
							batch: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["batch"]["currentRenderer"];
							extract: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["extract"];
							interaction: never;
							particle: {
								_generateOneMoreBuffer(t: unknown): unknown;
								destroy(): void;
								flush(): void;
								generateBuffers(t: unknown): unknown;
								render(t: unknown): void;
								start(): void;
								stop(): void;
								uploadPosition(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								uploadRotation(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								uploadTint(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								uploadUvs(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								uploadVertices(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								properties: unknown /* too deep */;
								renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
								shader: unknown /* too deep */;
								state: unknown /* too deep */;
								tempMatrix: unknown /* too deep */;
							};
							prepare: {
								ticking: boolean;
								add(t: unknown): unknown;
								delayedTick(): void;
								destroy(): void;
								prepareItems(): void;
								registerFindHook(t: unknown): unknown;
								registerUploadHook(t: unknown): unknown;
								tick(): void;
								upload(e: unknown, r: unknown): void;
								addHooks: unknown /* too deep */;
								completes: unknown /* too deep */;
								limiter: unknown /* too deep */;
								queue: unknown /* too deep */;
								renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
								uploadHookHelper: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
								uploadHooks: unknown /* too deep */;
							};
							tilingSprite: {
								destroy(): void;
								flush(): void;
								render(e: unknown): void;
								start(): void;
								stop(): void;
								quad: unknown /* too deep */;
								renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
								shader: unknown /* too deep */;
								simpleShader: unknown /* too deep */;
								state: unknown /* too deep */;
							};
						};
						projection: {
							defaultFrame: null;
							transform: null;
							calculateProjection(t: unknown, e: unknown, r: unknown, i: unknown): void;
							destroy(): void;
							setTransform(t: unknown): void;
							update(t: unknown, e: unknown, r: unknown, i: unknown): void;
							destinationFrame: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							projectionMatrix: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
								array: Float32Array;
							};
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							sourceFrame: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["projection"]["destinationFrame"];
						};
						renderTexture: {
							current: null;
							bind(t: unknown, e: unknown, r: unknown): void;
							clear(t: unknown, e: unknown): void;
							destroy(): void;
							reset(): void;
							resize(): void;
							clearColor: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["_backgroundColorRgba"];
							defaultMaskStack: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["mask"]["maskStack"];
							destinationFrame: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							sourceFrame: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
						};
						runners: {
							contextChange: {
								empty: boolean;
								_aliasCount: number;
								_name: string;
								name: string;
								add(t: unknown): unknown;
								contains(t: unknown): unknown;
								destroy(): void;
								dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								ensureNonAliasedItems(): void;
								remove(t: unknown): unknown;
								removeAll(): unknown;
								run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								items: unknown /* too deep */;
							};
							destroy: {
								empty: boolean;
								_aliasCount: number;
								_name: string;
								name: string;
								add(t: unknown): unknown;
								contains(t: unknown): unknown;
								destroy(): void;
								dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								ensureNonAliasedItems(): void;
								remove(t: unknown): unknown;
								removeAll(): unknown;
								run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								items: unknown /* too deep */;
							};
							postrender: {
								empty: boolean;
								_aliasCount: number;
								_name: string;
								name: string;
								add(t: unknown): unknown;
								contains(t: unknown): unknown;
								destroy(): void;
								dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								ensureNonAliasedItems(): void;
								remove(t: unknown): unknown;
								removeAll(): unknown;
								run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								items: unknown /* too deep */;
							};
							prerender: {
								empty: boolean;
								_aliasCount: number;
								_name: string;
								name: string;
								add(t: unknown): unknown;
								contains(t: unknown): unknown;
								destroy(): void;
								dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								ensureNonAliasedItems(): void;
								remove(t: unknown): unknown;
								removeAll(): unknown;
								run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								items: unknown /* too deep */;
							};
							reset: {
								empty: boolean;
								_aliasCount: number;
								_name: string;
								name: string;
								add(t: unknown): unknown;
								contains(t: unknown): unknown;
								destroy(): void;
								dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								ensureNonAliasedItems(): void;
								remove(t: unknown): unknown;
								removeAll(): unknown;
								run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								items: unknown /* too deep */;
							};
							resize: {
								empty: boolean;
								_aliasCount: number;
								_name: string;
								name: string;
								add(t: unknown): unknown;
								contains(t: unknown): unknown;
								destroy(): void;
								dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								ensureNonAliasedItems(): void;
								remove(t: unknown): unknown;
								removeAll(): unknown;
								run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								items: unknown /* too deep */;
							};
							update: {
								empty: boolean;
								_aliasCount: number;
								_name: string;
								name: string;
								add(t: unknown): unknown;
								contains(t: unknown): unknown;
								destroy(): void;
								dispatch(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								emit(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								ensureNonAliasedItems(): void;
								remove(t: unknown): unknown;
								removeAll(): unknown;
								run(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown): unknown;
								items: unknown /* too deep */;
							};
						};
						scissor: {
							glConst: number;
							_useCurrent(): void;
							destroy(): void;
							getStackLength(): unknown;
							pop(): void;
							push(t: unknown): void;
							setMaskStack(t: unknown): void;
							maskStack: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["mask"]["maskStack"];
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						screen: {
							bottom: number;
							height: number;
							left: number;
							right: number;
							top: number;
							type: number;
							width: number;
							x: number;
							y: number;
							ceil(t: unknown, e: unknown): unknown;
							clone(): unknown;
							contains(t: unknown, e: unknown): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							enlarge(t: unknown): unknown;
							fit(t: unknown): unknown;
							pad(t: unknown, e: unknown): unknown;
						};
						shader: {
							destroyed: boolean;
							id: number;
							bind(t: unknown, e: unknown): unknown;
							contextChange(t: unknown): void;
							createSyncGroups(t: unknown): unknown;
							destroy(): void;
							generateShader(t: unknown): unknown;
							getglProgram(): unknown;
							getSignature(t: unknown, e: unknown): unknown;
							reset(): void;
							setUniforms(t: unknown): void;
							syncUniformGroup(t: unknown, e: unknown): void;
							syncUniforms(t: unknown, e: unknown, r: unknown): void;
							systemCheck(): unknown;
							gl: WebGL2RenderingContext;
							cache: {
								"epsilon-float-originalColors-vec3-targetColors-vec3-uSampler-sampler2D-filterGlobals-globals"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								"globals-uMapCoord-mat3-uClampFrame-vec4-uClampOffset-vec2-uTransform-mat3-uColor-vec4-translationMatrix-mat3-uSampler-sampler2D"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								"outputFrame-inputSize-inputPixel-inputClamp-resolution-filterArea-filterClamp"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								"projectionMatrix-mat3"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								"tint-vec4-translationMatrix-mat3-default-globals"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
								"uSamplers-sampler2D"(ud: unknown, uv: unknown, renderer: unknown, syncData: unknown): void;
							};
							program: {
								id: number;
								fragmentSrc: string;
								vertexSrc: string;
								syncUniforms: null;
								extractData(t: unknown, e: unknown): void;
								getAttributeData(t: unknown, e: unknown): unknown;
								getUniformData(t: unknown, e: unknown): unknown;
								attributeData: unknown /* too deep */;
								glPrograms: unknown /* too deep */;
								uniformData: unknown /* too deep */;
							};
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							shader: {
								checkUniformExists(t: unknown, e: unknown): unknown;
								destroy(): void;
								program: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["shader"]["program"];
								uniformGroup: unknown /* too deep */;
								uniforms: unknown /* too deep */;
							};
						};
						state: {
							_blendEq: boolean;
							blendMode: number;
							polygonOffset: number;
							stateId: number;
							contextChange(e: unknown): unknown;
							destroy(): void;
							forceState(t: unknown): void;
							reset(): void;
							set(t: unknown): void;
							setBlend(t: unknown): void;
							setBlendMode(t: unknown): void;
							setCullFace(t: unknown): void;
							setDepthTest(t: unknown): void;
							setFrontFace(t: unknown): void;
							setOffset(t: unknown): void;
							setPolygonOffset(t: unknown, e: unknown): void;
							setState(t: unknown): unknown;
							updateCheck(t: unknown, e: unknown): void;
							gl: WebGL2RenderingContext;
							blendModes: unknown /* too deep */[];
							checks: ((t: unknown, e: unknown) => void)[];
							defaultState: {
								blend: boolean;
								clockwiseFrontFace: boolean;
								culling: boolean;
								depthTest: boolean;
								offsets: boolean;
								_blendMode: number;
								_polygonOffset: number;
								blendMode: number;
								data: number;
								polygonOffset: number;
							};
							map: ((t: unknown) => void)[];
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						stencil: {
							glConst: number;
							_getBitwiseMask(): unknown;
							_useCurrent(): void;
							destroy(): void;
							getStackLength(): unknown;
							pop(t: unknown): void;
							push(t: unknown): void;
							setMaskStack(t: unknown): void;
							maskStack: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["mask"]["maskStack"];
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						texture: {
							_unknownBoundTextures: boolean;
							CONTEXT_UID: number;
							currentLocation: number;
							webGLVersion: number;
							bind(t: unknown, e: unknown): unknown;
							contextChange(): void;
							destroy(): void;
							destroyTexture(t: unknown, e: unknown): void;
							initTexture(t: unknown): unknown;
							initTextureType(e: unknown, r: unknown): void;
							reset(): void;
							setStyle(e: unknown, r: unknown): void;
							unbind(t: unknown): void;
							updateTexture(t: unknown): void;
							updateTextureStyle(e: unknown): void;
							gl: WebGL2RenderingContext;
							boundTextures: (unknown /* too deep */ | null)[];
							emptyTextures: {
								34067: unknown /* too deep */;
								3553: unknown /* too deep */;
							};
							managedTextures: unknown /* too deep */[];
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
							unknownTexture: never;
						};
						textureGC: {
							checkCount: number;
							checkCountMax: number;
							count: number;
							maxIdle: number;
							mode: number;
							destroy(): void;
							postrender(): void;
							run(): void;
							unload(t: unknown): void;
							renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
						};
						textureManager: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["texture"];
					};
					screen: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"]["screen"];
					stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]["parent"];
				};
				_cache: {
					addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
					addImage(t: unknown, i: unknown, n: unknown): void;
					addItem(t: unknown, i: unknown, n: unknown): void;
					addJSON(t: unknown, i: unknown): void;
					addRenderTexture(t: unknown, i: unknown): void;
					addSound(t: unknown, i: unknown): void;
					addSpine(t: unknown, i: unknown): void;
					addText(t: unknown, i: unknown): void;
					addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
					checkBitmapDataKey(t: unknown): unknown;
					checkFrameData(t: unknown): unknown;
					checkImageKey(t: unknown): unknown;
					checkJSONKey(t: unknown): unknown;
					checkRenderTextureKey(t: unknown): unknown;
					checkSoundKey(t: unknown): unknown;
					checkSpineKey(t: unknown): unknown;
					checkTextKey(t: unknown): unknown;
					deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
					destroy(): void;
					getBitmapData(t: unknown): unknown;
					getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
					getFrameData(t: unknown, i: unknown): unknown;
					getImage(t: unknown): unknown;
					getJSON(t: unknown): unknown;
					getKeys(t: unknown): unknown;
					getMap(t: unknown): unknown;
					getRenderTexture(t: unknown): unknown;
					getSound(t: unknown): unknown;
					getSpine(t: unknown): unknown;
					getText(t: unknown): unknown;
					getTexture(t: unknown, i: unknown): unknown;
					hasMap(t: unknown): unknown;
					isSoundDecoded(t: unknown): unknown;
					removeAllItems(): void;
					removeAllItemsOfType(t: unknown): void;
					removeBitmapData(t: unknown): void;
					removeImage(t: unknown): void;
					removeItem(t: unknown, i: unknown): void;
					removeJSON(t: unknown): void;
					removeRenderTexture(t: unknown): void;
					removeSound(t: unknown): void;
					removeSpine(t: unknown): void;
					removeText(t: unknown): void;
					removeTextureAtlas(t: unknown): void;
					_cacheMap: Map<number, (Map<string, { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Network["_playerDataProvider"]["_player"]["game"]; subTextures: unknown /* too deep */; texture: unknown /* too deep */; }> | Map<string, { _destroyed: boolean; destroyed: boolean; imageKey: string; key: string; destroy(): void; frameData: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; }> | Map<never, never> | Map<string, { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; game: Network["_playerDataProvider"]["_player"]["game"]; sound: unknown /* too deep */; }>)>;
					cacheMap: Map<number, (Map<string, { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; image: HTMLImageElement; game: Network["_playerDataProvider"]["_player"]["game"]; subTextures: unknown /* too deep */; texture: unknown /* too deep */; }> | Map<string, { _destroyed: boolean; destroyed: boolean; imageKey: string; key: string; destroy(): void; frameData: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; }> | Map<never, never> | Map<string, { _destroyed: boolean; destroyed: boolean; key: string; destroy(): void; game: Network["_playerDataProvider"]["_player"]["game"]; sound: unknown /* too deep */; }>)>;
					_game: Network["_playerDataProvider"]["_player"]["game"];
					game: Network["_playerDataProvider"]["_player"]["game"];
				};
				_config: {
					failIfMajorPerformanceCaveat: boolean;
					roundPixels: boolean;
					height: number;
					width: number;
					parent: string;
				};
				_consoleLogger: {
					_shouldColorCodeLogs: boolean;
					_minimumLogLevel: number;
					_minimumStackTraceLogLevel: number;
					getLogStyle(t: unknown): unknown;
					getTextSytle(): unknown;
					log(t: unknown, i: unknown): void;
					setColoredLogsEnabled(t: unknown): void;
					setLogLevel(t: unknown): void;
				};
				_device: {
					android: boolean;
					fullscreenKeyboard: boolean;
					iOS: boolean;
					isFullScreenSupported: boolean;
					isInitialized: boolean;
					pointerLock: boolean;
					touch: boolean;
					webAudio: boolean;
					browser: number;
					deviceReadyAt: number;
					os: number;
					cancelFullscreen: string;
					requestFullscreen: string;
					wheelEvent: string;
					mspointer: undefined;
					checkFullScreen(): void;
					dispatchSignals(): void;
					isAndroidStockBrowser(): unknown;
					needsTouchUnlock(): unknown;
					readyCheck(): void;
					whenReady(t: unknown, i: unknown): void;
					callbacks: never[];
					onInitialized: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_device"]["onInitialized"]["_bindings"];
					};
				};
				_input: {
					enabled: boolean;
					pollLocked: boolean;
					recordPointerHistory: boolean;
					resetLocked: boolean;
					_pollCounter: number;
					_x: number;
					_y: number;
					doubleTapRate: number;
					holdRate: number;
					justPressedRate: number;
					justReleasedRate: number;
					maxPointers: number;
					minPriorityID: number;
					multiInputOverride: number;
					pollRate: number;
					recordLimit: number;
					recordRate: number;
					tapRate: number;
					totalActivePointers: number;
					totalInactivePointers: number;
					worldX: number;
					worldY: number;
					x: number;
					y: number;
					customCandidateHandler: null;
					customCandidateHandlerContext: null;
					addMoveCallback(t: unknown, i: unknown): void;
					addPointer(): unknown;
					addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
					boot(t: unknown): void;
					clearEnterCallback(): void;
					countActivePointers(t: unknown): unknown;
					deleteMoveCallback(t: unknown, i: unknown): void;
					destroy(): void;
					executeTouchLockCallbacks(t: unknown, i: unknown): void;
					getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
					getPointer(t: unknown): unknown;
					getPointerFromId(t: unknown): unknown;
					getPointerFromIdentifier(t: unknown): unknown;
					hitTest(t: unknown, i: unknown): unknown;
					preUpdate(): void;
					removeTouchLockCallback(t: unknown, i: unknown): unknown;
					reset(t: unknown): void;
					resetSpeed(t: unknown, i: unknown): void;
					setEnterCallback(t: unknown): void;
					setInteractiveCandidateHandler(t: unknown, i: unknown): void;
					startPointer(t: unknown): unknown;
					stopPointer(t: unknown, i: unknown): unknown;
					update(): void;
					updateChildren(t: unknown): void;
					updateInteractiveItems(): void;
					updatePointer(t: unknown): unknown;
					hitCanvas: HTMLCanvasElement;
					hitContext: CanvasRenderingContext2D;
					_oldPosition: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					activePointer: {
						_holdSent: boolean;
						_stateReset: boolean;
						active: boolean;
						dirty: boolean;
						exists: boolean;
						isDown: boolean;
						isMouse: boolean;
						isUp: boolean;
						withinGame: boolean;
						_nextDrop: number;
						button: number;
						clientX: number;
						clientY: number;
						duration: number;
						id: number;
						movementX: number;
						movementY: number;
						msSinceLastClick: number;
						pageX: number;
						pageY: number;
						pointerMode: number;
						previousTapTime: number;
						rawMovementX: number;
						rawMovementY: number;
						screenX: number;
						screenY: number;
						timeDown: number;
						timeUp: number;
						totalTouches: number;
						worldX: number;
						worldY: number;
						x: number;
						y: number;
						_trampolineTargetObject: null;
						identifier: null;
						pointerId: null;
						targetObject: null;
						justPressed(t: unknown): unknown;
						justReleased(t: unknown): unknown;
						leave(t: unknown): void;
						move(t: unknown, i: unknown): unknown;
						processButtonsDown(t: unknown, i: unknown): void;
						processButtonsUp(t: unknown, i: unknown): void;
						processButtonsUpDown(t: unknown, i: unknown): void;
						processInteractiveObjects(t: unknown): unknown;
						reset(): void;
						resetButtons(): void;
						resetMovement(): void;
						start(t: unknown): unknown;
						stop(t: unknown, i: unknown): unknown;
						swapTarget(t: unknown, i: unknown): void;
						update(): void;
						updateButtons(t: unknown): void;
						_history: never[];
						backButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"];
							time: {
								_deltaMS: number;
								_pauseStarted: number;
								_prevTimeMS: number;
								_started: number;
								_timeMS: number;
								deltaMS: number;
								desiredFps: number;
								pauseDuration: number;
								prevTimeMS: number;
								timeMS: number;
								timeToCall: number;
								add(t: unknown): unknown;
								boot(): void;
								create(t: unknown): unknown;
								elapsedSecondsSince(t: unknown): unknown;
								elapsedSince(t: unknown): unknown;
								gamePaused(): void;
								gameResumed(): void;
								removeAll(): void;
								reset(): void;
								setTime(t: unknown): void;
								totalElapsedSeconds(): unknown;
								update(t: unknown): void;
								updateTimers(): void;
								_timers: unknown /* too deep */;
								events: unknown /* too deep */;
								game: Network["_playerDataProvider"]["_player"]["game"];
							};
						};
						circle: {
							_diameter: number;
							_radius: number;
							circumference: number;
							diameter: number;
							radius: number;
							x: number;
							y: number;
							circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
							getBounds(): unknown;
							setTo(t: unknown, i: unknown, n: unknown): unknown;
						};
						eraserButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						forwardButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						game: Network["_playerDataProvider"]["_player"]["game"];
						interactiveCandidates: never[];
						leftButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						middleButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						position: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						positionDown: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						positionUp: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						rightButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
					};
					circle: {
						_diameter: number;
						_radius: number;
						circumference: number;
						diameter: number;
						radius: number;
						x: number;
						y: number;
						circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
						getBounds(): unknown;
						setTo(t: unknown, i: unknown, n: unknown): unknown;
					};
					game: Network["_playerDataProvider"]["_player"]["game"];
					interactiveItems: {
						_cursor: number;
						total: number;
						add(t: unknown): unknown;
						callAll(t: unknown): void;
						exists(t: unknown): unknown;
						getByKey(t: unknown, i: unknown): unknown;
						getIndex(t: unknown): unknown;
						remove(t: unknown): unknown;
						removeAll(t: unknown): void;
						reset(): void;
						setAll(t: unknown, i: unknown): void;
						_list: unknown /* too deep */[];
						first: {
							_dragDistancePass: boolean;
							_dragPhase: boolean;
							_dragTimePass: boolean;
							_pendingDrag: boolean;
							_setHandCursor: boolean;
							_wasEnabled: boolean;
							allowHorizontalDrag: boolean;
							allowVerticalDrag: boolean;
							bringToTop: boolean;
							checked: boolean;
							dragFromCenter: boolean;
							draggable: boolean;
							dragStopBlocksInputUp: boolean;
							enabled: boolean;
							isDragged: boolean;
							snapOnDrag: boolean;
							snapOnRelease: boolean;
							useHandCursor: boolean;
							dragDistanceThreshold: number;
							dragTimeThreshold: number;
							priorityID: number;
							snapOffsetX: number;
							snapOffsetY: number;
							snapX: number;
							snapY: number;
							boundsRect: null;
							boundsSprite: null;
							_pointerOutHandler(t: unknown, i: unknown): void;
							_pointerOverHandler(t: unknown, i: unknown): void;
							_releasedHandler(t: unknown): void;
							_touchedHandler(t: unknown): unknown;
							addedToGroup(): void;
							checkBoundsRect(): void;
							checkBoundsSprite(): void;
							checkPointerDown(t: unknown): unknown;
							checkPointerOver(t: unknown, i: unknown): unknown;
							destroy(): void;
							disableDrag(): void;
							disableSnap(): void;
							downDuration(t: unknown): unknown;
							dragTimeElapsed(t: unknown): void;
							enableDrag(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							enableSnap(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
							globalToLocal(t: unknown): unknown;
							justOut(t: unknown, i: unknown): unknown;
							justOver(t: unknown, i: unknown): unknown;
							justPressed(t: unknown, i: unknown): unknown;
							justReleased(t: unknown, i: unknown): unknown;
							overDuration(t: unknown): unknown;
							pointerDown(t: unknown): unknown;
							pointerDragged(t: unknown): unknown;
							pointerOut(t: unknown): unknown;
							pointerOver(t: unknown): unknown;
							pointerTimeDown(t: unknown): unknown;
							pointerTimeOut(t: unknown): unknown;
							pointerTimeOver(t: unknown): unknown;
							pointerTimeUp(t: unknown): unknown;
							pointerUp(t: unknown): unknown;
							pointerX(t: unknown): unknown;
							pointerY(t: unknown): unknown;
							removedFromGroup(): void;
							reset(): void;
							setDragLock(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown): unknown;
							startDrag(t: unknown): void;
							stop(): void;
							stopDrag(t: unknown): void;
							update(t: unknown): unknown;
							updateDrag(t: unknown, i: unknown): unknown;
							validForInput(t: unknown): unknown;
							_dragPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							_pointerData: unknown /* too deep */[];
							_tempPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							downPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							dragOffset: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							dragStartPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							game: Network["_playerDataProvider"]["_player"]["game"];
							snapOffset: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							snapPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							sprite: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								_roundPixels: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								exists: boolean;
								fixedToCamera: boolean;
								inputEnabled: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								pendingDestroy: boolean;
								renderable: boolean;
								roundPixels: boolean;
								smoothed: boolean;
								sortableChildren: boolean;
								sortDirty: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_cachedTint: number;
								_eventsCount: number;
								_height: number;
								_lastSortedIndex: number;
								_textureID: number;
								_textureTrimmedID: number;
								_tint: number;
								_tintRGB: number;
								_transformID: number;
								_transformTrimmedID: number;
								_width: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								blendMode: number;
								bottom: number;
								cachedTint: number;
								centerX: number;
								centerY: number;
								height: number;
								left: number;
								offsetX: number;
								offsetY: number;
								renderId: number;
								right: number;
								rotation: number;
								tabIndex: number;
								tint: number;
								top: number;
								width: number;
								worldAlpha: number;
								worldRotation: number;
								x: number;
								y: number;
								z: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								frameName: string;
								key: string;
								pluginName: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_mask: null;
								_tintedCanvas: null;
								_tintedTexture: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								scaleMax: null;
								scaleMin: null;
								tintedTexture: null;
								transformCallbackContext: null;
								vertexTrimmedData: null;
								frame: undefined;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateBounds(): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_onAnchorUpdate(): void;
								_onTextureUpdate(): void;
								_recursivePostUpdateTransform(): void;
								_render(t: unknown): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								_renderCanvas(t: unknown): void;
								_renderWebGL(t: unknown): void;
								addChild(): unknown;
								addChildAt(t: unknown, e: unknown): unknown;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								bringChildToTop(t: unknown): void;
								calculateBounds(): void;
								calculateTrimmedVertices(): unknown;
								calculateVertices(): void;
								containerUpdateTransform(): void;
								containsPoint(t: unknown): unknown;
								destroy(i: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getChildAt(t: unknown): unknown;
								getChildByName(t: unknown, e: unknown): unknown;
								getChildIndex(t: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								loadTexture(t: unknown, i: unknown): void;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								onChildrenChange(t: unknown): void;
								removeAllListeners(t: unknown): unknown;
								removeChild(): unknown;
								removeChildAt(t: unknown): unknown;
								removeChildren(t: unknown, e: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								render(t: unknown): void;
								renderAdvanced(t: unknown): void;
								renderAdvancedWebGL(t: unknown): void;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								sendChildToBack(t: unknown): void;
								setChildIndex(t: unknown, e: unknown): void;
								setFrame(t: unknown): void;
								setParent(t: unknown): unknown;
								setTexture(t: unknown, i: unknown): void;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								sortChildren(): void;
								swapChildren(t: unknown, e: unknown): void;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								update(): void;
								updateFrame(t: unknown): void;
								updateTexture(t: unknown): void;
								updateTransform(): void;
								indices: Uint16Array;
								uvs: Float32Array;
								vertexData: Float32Array;
								_anchor: unknown /* too deep */;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_localBoundsRect: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_texture: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								anchor: unknown /* too deep */;
								animations: unknown /* too deep */;
								bounds: unknown /* too deep */;
								cameraOffset: unknown /* too deep */;
								children: unknown /* too deep */;
								events: unknown /* too deep */;
								game: Network["_playerDataProvider"]["_player"]["game"];
								input: Network["_playerDataProvider"]["_player"]["game"]["_input"]["interactiveItems"]["first"];
								localTransform: unknown /* too deep */;
								parent: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								previousPosition: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								tempDisplayObjectParent: unknown /* too deep */;
								texture: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								world: unknown /* too deep */;
								worldPosition: unknown /* too deep */;
								worldScale: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
						};
						list: Network["_playerDataProvider"]["_player"]["game"]["_input"]["interactiveItems"]["_list"];
						next: {
							_dragDistancePass: boolean;
							_dragPhase: boolean;
							_dragTimePass: boolean;
							_pendingDrag: boolean;
							_setHandCursor: boolean;
							_wasEnabled: boolean;
							allowHorizontalDrag: boolean;
							allowVerticalDrag: boolean;
							bringToTop: boolean;
							checked: boolean;
							dragFromCenter: boolean;
							draggable: boolean;
							dragStopBlocksInputUp: boolean;
							enabled: boolean;
							isDragged: boolean;
							snapOnDrag: boolean;
							snapOnRelease: boolean;
							useHandCursor: boolean;
							dragDistanceThreshold: number;
							dragTimeThreshold: number;
							priorityID: number;
							snapOffsetX: number;
							snapOffsetY: number;
							snapX: number;
							snapY: number;
							boundsRect: null;
							boundsSprite: null;
							_pointerOutHandler(t: unknown, i: unknown): void;
							_pointerOverHandler(t: unknown, i: unknown): void;
							_releasedHandler(t: unknown): void;
							_touchedHandler(t: unknown): unknown;
							addedToGroup(): void;
							checkBoundsRect(): void;
							checkBoundsSprite(): void;
							checkPointerDown(t: unknown): unknown;
							checkPointerOver(t: unknown, i: unknown): unknown;
							destroy(): void;
							disableDrag(): void;
							disableSnap(): void;
							downDuration(t: unknown): unknown;
							dragTimeElapsed(t: unknown): void;
							enableDrag(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
							enableSnap(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
							globalToLocal(t: unknown): unknown;
							justOut(t: unknown, i: unknown): unknown;
							justOver(t: unknown, i: unknown): unknown;
							justPressed(t: unknown, i: unknown): unknown;
							justReleased(t: unknown, i: unknown): unknown;
							overDuration(t: unknown): unknown;
							pointerDown(t: unknown): unknown;
							pointerDragged(t: unknown): unknown;
							pointerOut(t: unknown): unknown;
							pointerOver(t: unknown): unknown;
							pointerTimeDown(t: unknown): unknown;
							pointerTimeOut(t: unknown): unknown;
							pointerTimeOver(t: unknown): unknown;
							pointerTimeUp(t: unknown): unknown;
							pointerUp(t: unknown): unknown;
							pointerX(t: unknown): unknown;
							pointerY(t: unknown): unknown;
							removedFromGroup(): void;
							reset(): void;
							setDragLock(t: unknown, i: unknown): void;
							start(t: unknown, i: unknown): unknown;
							startDrag(t: unknown): void;
							stop(): void;
							stopDrag(t: unknown): void;
							update(t: unknown): unknown;
							updateDrag(t: unknown, i: unknown): unknown;
							validForInput(t: unknown): unknown;
							_dragPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							_pointerData: unknown /* too deep */[];
							_tempPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							downPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							dragOffset: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							dragStartPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							game: Network["_playerDataProvider"]["_player"]["game"];
							snapOffset: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							snapPoint: {
								_recalculateMagnitude: boolean;
								_recalculateMagnitudeSq: boolean;
								_magnitude: number;
								_magnitudeSq: number;
								_x: number;
								_y: number;
								x: number;
								y: number;
								add(t: unknown): void;
								angle(t: unknown): unknown;
								ceil(): void;
								clamp(t: unknown, i: unknown, n: unknown): void;
								clip(t: unknown): void;
								copyFrom(t: unknown): unknown;
								copyTo(i: unknown): unknown;
								cross(t: unknown): unknown;
								divide(t: unknown): void;
								dot(t: unknown): unknown;
								equals(t: unknown): unknown;
								floor(): void;
								getDistance(t: unknown): unknown;
								getDistanceSq(t: unknown): unknown;
								getMagnitude(): unknown;
								getMagnitudeSq(): unknown;
								interpolate(t: unknown, i: unknown): void;
								invert(): void;
								isNearlyEqual(t: unknown, i: unknown): unknown;
								isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
								isZero(): unknown;
								multiply(t: unknown): void;
								negate(): void;
								normalize(): void;
								normalRightHand(): void;
								perpendicular(t: unknown): void;
								print(t: unknown): void;
								project(t: unknown, i: unknown): void;
								recalculateMagnitude(): void;
								recalculateMagnitudeSq(): void;
								rotate(t: unknown, i: unknown, n: unknown): void;
								round(): void;
								set(t: unknown, i: unknown): void;
								setTo(t: unknown, i: unknown): void;
								setToPolar(t: unknown, i: unknown): void;
								subtract(t: unknown): void;
								toString(): unknown;
								trunc(): void;
							};
							sprite: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								_roundPixels: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								exists: boolean;
								fixedToCamera: boolean;
								inputEnabled: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								pendingDestroy: boolean;
								renderable: boolean;
								roundPixels: boolean;
								smoothed: boolean;
								sortableChildren: boolean;
								sortDirty: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_cachedTint: number;
								_eventsCount: number;
								_height: number;
								_lastSortedIndex: number;
								_textureID: number;
								_textureTrimmedID: number;
								_tint: number;
								_tintRGB: number;
								_transformID: number;
								_transformTrimmedID: number;
								_width: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								blendMode: number;
								bottom: number;
								cachedTint: number;
								centerX: number;
								centerY: number;
								height: number;
								left: number;
								offsetX: number;
								offsetY: number;
								renderId: number;
								right: number;
								rotation: number;
								tabIndex: number;
								tint: number;
								top: number;
								width: number;
								worldAlpha: number;
								worldRotation: number;
								x: number;
								y: number;
								z: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								frameName: string;
								key: string;
								pluginName: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_mask: null;
								_tintedCanvas: null;
								_tintedTexture: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								scaleMax: null;
								scaleMin: null;
								tintedTexture: null;
								transformCallbackContext: null;
								vertexTrimmedData: null;
								frame: undefined;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateBounds(): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_onAnchorUpdate(): void;
								_onTextureUpdate(): void;
								_recursivePostUpdateTransform(): void;
								_render(t: unknown): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								_renderCanvas(t: unknown): void;
								_renderWebGL(t: unknown): void;
								addChild(): unknown;
								addChildAt(t: unknown, e: unknown): unknown;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								bringChildToTop(t: unknown): void;
								calculateBounds(): void;
								calculateTrimmedVertices(): unknown;
								calculateVertices(): void;
								containerUpdateTransform(): void;
								containsPoint(t: unknown): unknown;
								destroy(i: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getChildAt(t: unknown): unknown;
								getChildByName(t: unknown, e: unknown): unknown;
								getChildIndex(t: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								loadTexture(t: unknown, i: unknown): void;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								onChildrenChange(t: unknown): void;
								removeAllListeners(t: unknown): unknown;
								removeChild(): unknown;
								removeChildAt(t: unknown): unknown;
								removeChildren(t: unknown, e: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								render(t: unknown): void;
								renderAdvanced(t: unknown): void;
								renderAdvancedWebGL(t: unknown): void;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								sendChildToBack(t: unknown): void;
								setChildIndex(t: unknown, e: unknown): void;
								setFrame(t: unknown): void;
								setParent(t: unknown): unknown;
								setTexture(t: unknown, i: unknown): void;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								sortChildren(): void;
								swapChildren(t: unknown, e: unknown): void;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								update(): void;
								updateFrame(t: unknown): void;
								updateTexture(t: unknown): void;
								updateTransform(): void;
								indices: Uint16Array;
								uvs: Float32Array;
								vertexData: Float32Array;
								_anchor: unknown /* too deep */;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_localBoundsRect: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_texture: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								anchor: unknown /* too deep */;
								animations: unknown /* too deep */;
								bounds: unknown /* too deep */;
								cameraOffset: unknown /* too deep */;
								children: unknown /* too deep */;
								events: unknown /* too deep */;
								game: Network["_playerDataProvider"]["_player"]["game"];
								input: Network["_playerDataProvider"]["_player"]["game"]["_input"]["interactiveItems"]["next"];
								localTransform: unknown /* too deep */;
								parent: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								previousPosition: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								tempDisplayObjectParent: unknown /* too deep */;
								texture: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								world: unknown /* too deep */;
								worldPosition: unknown /* too deep */;
								worldScale: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
						};
					};
					keyboard: {
						active: boolean;
						enabled: boolean;
						_i: number;
						_k: number;
						event: null;
						lastChar: null;
						pressEvent: null;
						lastKey: undefined;
						_onKeyDown(i: unknown): void;
						_onKeyPress(i: unknown): void;
						_onKeyUp(i: unknown): void;
						addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
						addKey(t: unknown): unknown;
						addKeyCapture(t: unknown): void;
						addKeys(t: unknown): unknown;
						clearCaptures(): void;
						createCursorKeys(): unknown;
						destroy(): void;
						downDuration(t: unknown, i: unknown): unknown;
						isDown(t: unknown): unknown;
						justPressed(t: unknown): unknown;
						justReleased(t: unknown): unknown;
						onDownCallback(arg0: unknown): void;
						onPressCallback(arg0: unknown): void;
						onUpCallback(arg0: unknown): void;
						processKeyDown(t: unknown): void;
						processKeyPress(t: unknown): void;
						processKeyUp(t: unknown): void;
						removeCallbacks(): void;
						removeKey(t: unknown): void;
						removeKeyCapture(t: unknown): void;
						reset(t: unknown): void;
						start(): unknown;
						stop(): void;
						update(): void;
						upDuration(t: unknown, i: unknown): unknown;
						_capture: boolean[];
						_keys: never[];
						callbackContext: Network["_playerDataProvider"]["_player"]["game"]["_input"]["keyboard"];
						game: Network["_playerDataProvider"]["_player"]["game"];
					};
					mouse: {
						active: boolean;
						capture: boolean;
						enabled: boolean;
						stopOnGameOut: boolean;
						wheelDelta: number;
						_onMouseDown(i: unknown): void;
						_onMouseMove(i: unknown): void;
						_onMouseOut(i: unknown): void;
						_onMouseOutGlobal(i: unknown): void;
						_onMouseOver(i: unknown): void;
						_onMouseUp(i: unknown): void;
						_onMouseUpGlobal(i: unknown): void;
						addMouseWheelCallback(t: unknown): unknown;
						onMouseDown(t: unknown): void;
						onMouseMove(t: unknown): void;
						onMouseOut(t: unknown): void;
						onMouseOutGlobal(t: unknown): void;
						onMouseOver(t: unknown): void;
						onMouseUp(t: unknown): void;
						onMouseUpGlobal(t: unknown): void;
						removeMouseWheelCallback(t: unknown): void;
						start(): unknown;
						stop(): void;
						event: MouseEvent;
						callbackContext: Network["_playerDataProvider"]["_player"]["game"];
						game: Network["_playerDataProvider"]["_player"]["game"];
						input: Network["_playerDataProvider"]["_player"]["game"]["_input"];
					};
					mousePointer: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"];
					mouseWheel: {
						active: boolean;
						preventDefault: boolean;
						delta: number;
						wheelEventName: string;
						boundOnWheelHandler(arg0: unknown): void;
						onWheelHandler(t: unknown): void;
						start(): unknown;
						stop(): void;
						element: HTMLCanvasElement;
						callbackContext: Network["_playerDataProvider"]["_player"]["game"];
						callbacks: ((arg0: unknown) => void)[];
						game: Network["_playerDataProvider"]["_player"]["game"];
					};
					mspointer: {
						active: boolean;
						pointerDownCallback: null;
						pointerMoveCallback: null;
						pointerUpCallback: null;
						onPointerDown(i: unknown): void;
						onPointerMove(i: unknown): void;
						onPointerOut(i: unknown): void;
						onPointerOver(i: unknown): void;
						onPointerUp(i: unknown): void;
						onPointerUpGlobal(i: unknown): void;
						start(): unknown;
						stop(): void;
						callbackContext: Network["_playerDataProvider"]["_player"]["game"];
						game: Network["_playerDataProvider"]["_player"]["game"];
						input: Network["_playerDataProvider"]["_player"]["game"]["_input"];
					};
					onDown: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["onDown"]["_bindings"];
					};
					onHold: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["onHold"]["_bindings"];
					};
					onPointerMove: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_prevParams: null;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["onPointerMove"]["_bindings"];
					};
					onTap: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["onTap"]["_bindings"];
					};
					onTouchEndEvent: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_prevParams: null;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["onTouchEndEvent"]["_bindings"];
					};
					onTouchStartEvent: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_prevParams: null;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["onTouchStartEvent"]["_bindings"];
					};
					onUp: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["onUp"]["_bindings"];
					};
					pointer1: {
						_holdSent: boolean;
						_stateReset: boolean;
						active: boolean;
						dirty: boolean;
						exists: boolean;
						isDown: boolean;
						isMouse: boolean;
						isUp: boolean;
						withinGame: boolean;
						_nextDrop: number;
						clientX: number;
						clientY: number;
						duration: number;
						id: number;
						movementX: number;
						movementY: number;
						msSinceLastClick: number;
						pageX: number;
						pageY: number;
						pointerMode: number;
						previousTapTime: number;
						rawMovementX: number;
						rawMovementY: number;
						screenX: number;
						screenY: number;
						timeDown: number;
						timeUp: number;
						totalTouches: number;
						worldX: number;
						worldY: number;
						x: number;
						y: number;
						_trampolineTargetObject: null;
						identifier: null;
						pointerId: null;
						targetObject: null;
						justPressed(t: unknown): unknown;
						justReleased(t: unknown): unknown;
						leave(t: unknown): void;
						move(t: unknown, i: unknown): unknown;
						processButtonsDown(t: unknown, i: unknown): void;
						processButtonsUp(t: unknown, i: unknown): void;
						processButtonsUpDown(t: unknown, i: unknown): void;
						processInteractiveObjects(t: unknown): unknown;
						reset(): void;
						resetButtons(): void;
						resetMovement(): void;
						start(t: unknown): unknown;
						stop(t: unknown, i: unknown): unknown;
						swapTarget(t: unknown, i: unknown): void;
						update(): void;
						updateButtons(t: unknown): void;
						_history: never[];
						backButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer1"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						circle: {
							_diameter: number;
							_radius: number;
							circumference: number;
							diameter: number;
							radius: number;
							x: number;
							y: number;
							circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
							getBounds(): unknown;
							setTo(t: unknown, i: unknown, n: unknown): unknown;
						};
						eraserButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer1"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						forwardButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer1"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						game: Network["_playerDataProvider"]["_player"]["game"];
						interactiveCandidates: never[];
						leftButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer1"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						middleButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer1"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						position: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						positionDown: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						positionUp: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						rightButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer1"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
					};
					pointer2: {
						_holdSent: boolean;
						_stateReset: boolean;
						active: boolean;
						dirty: boolean;
						exists: boolean;
						isDown: boolean;
						isMouse: boolean;
						isUp: boolean;
						withinGame: boolean;
						_nextDrop: number;
						clientX: number;
						clientY: number;
						duration: number;
						id: number;
						movementX: number;
						movementY: number;
						msSinceLastClick: number;
						pageX: number;
						pageY: number;
						pointerMode: number;
						previousTapTime: number;
						rawMovementX: number;
						rawMovementY: number;
						screenX: number;
						screenY: number;
						timeDown: number;
						timeUp: number;
						totalTouches: number;
						worldX: number;
						worldY: number;
						x: number;
						y: number;
						_trampolineTargetObject: null;
						identifier: null;
						pointerId: null;
						targetObject: null;
						justPressed(t: unknown): unknown;
						justReleased(t: unknown): unknown;
						leave(t: unknown): void;
						move(t: unknown, i: unknown): unknown;
						processButtonsDown(t: unknown, i: unknown): void;
						processButtonsUp(t: unknown, i: unknown): void;
						processButtonsUpDown(t: unknown, i: unknown): void;
						processInteractiveObjects(t: unknown): unknown;
						reset(): void;
						resetButtons(): void;
						resetMovement(): void;
						start(t: unknown): unknown;
						stop(t: unknown, i: unknown): unknown;
						swapTarget(t: unknown, i: unknown): void;
						update(): void;
						updateButtons(t: unknown): void;
						_history: never[];
						backButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer2"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						circle: {
							_diameter: number;
							_radius: number;
							circumference: number;
							diameter: number;
							radius: number;
							x: number;
							y: number;
							circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
							getBounds(): unknown;
							setTo(t: unknown, i: unknown, n: unknown): unknown;
						};
						eraserButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer2"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						forwardButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer2"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						game: Network["_playerDataProvider"]["_player"]["game"];
						interactiveCandidates: never[];
						leftButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer2"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						middleButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer2"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
						position: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						positionDown: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						positionUp: {
							_recalculateMagnitude: boolean;
							_recalculateMagnitudeSq: boolean;
							_magnitude: number;
							_magnitudeSq: number;
							_x: number;
							_y: number;
							x: number;
							y: number;
							add(t: unknown): void;
							angle(t: unknown): unknown;
							ceil(): void;
							clamp(t: unknown, i: unknown, n: unknown): void;
							clip(t: unknown): void;
							copyFrom(t: unknown): unknown;
							copyTo(i: unknown): unknown;
							cross(t: unknown): unknown;
							divide(t: unknown): void;
							dot(t: unknown): unknown;
							equals(t: unknown): unknown;
							floor(): void;
							getDistance(t: unknown): unknown;
							getDistanceSq(t: unknown): unknown;
							getMagnitude(): unknown;
							getMagnitudeSq(): unknown;
							interpolate(t: unknown, i: unknown): void;
							invert(): void;
							isNearlyEqual(t: unknown, i: unknown): unknown;
							isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
							isZero(): unknown;
							multiply(t: unknown): void;
							negate(): void;
							normalize(): void;
							normalRightHand(): void;
							perpendicular(t: unknown): void;
							print(t: unknown): void;
							project(t: unknown, i: unknown): void;
							recalculateMagnitude(): void;
							recalculateMagnitudeSq(): void;
							rotate(t: unknown, i: unknown, n: unknown): void;
							round(): void;
							set(t: unknown, i: unknown): void;
							setTo(t: unknown, i: unknown): void;
							setToPolar(t: unknown, i: unknown): void;
							subtract(t: unknown): void;
							toString(): unknown;
							trunc(): void;
						};
						rightButton: {
							altKey: boolean;
							ctrlKey: boolean;
							isDown: boolean;
							isUp: boolean;
							shiftKey: boolean;
							buttonCode: number;
							duration: number;
							timeDown: number;
							timeUp: number;
							value: number;
							event: null;
							destroy(): void;
							justPressed(t: unknown): unknown;
							justReleased(t: unknown): unknown;
							reset(): void;
							start(t: unknown, i: unknown): void;
							startStop(t: unknown, i: unknown, n: unknown): void;
							stop(t: unknown, i: unknown): void;
							onDown: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onUp: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer2"];
							time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
						};
					};
					pointerLock: {
						active: boolean;
						locked: boolean;
						pointerlockchange: undefined;
						pointerLockElement: undefined;
						pointerlockerror: undefined;
						boundOnChangeHandler(arg0: unknown): void;
						boundOnErrorHandler(arg0: unknown): void;
						exit(): void;
						onChangeHandler(t: unknown): void;
						onErrorHandler(t: unknown): void;
						request(): void;
						start(): unknown;
						stop(): void;
						element: HTMLCanvasElement;
						game: Network["_playerDataProvider"]["_player"]["game"];
						onChange: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: never[];
							bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointerLock"]["onChange"]["_bindings"];
						};
						onError: {
							_shouldPropagate: boolean;
							active: boolean;
							memorize: boolean;
							_addBinding(t: unknown): void;
							_boundDispatch(): unknown;
							_indexOfListener(t: unknown, i: unknown): unknown;
							add(t: unknown, i: unknown, n: unknown): unknown;
							addOnce(t: unknown, i: unknown, n: unknown): unknown;
							boundDispatch(): unknown;
							dispatch(): void;
							dispose(): void;
							forget(): void;
							getNumListeners(): unknown;
							halt(): void;
							has(t: unknown, i: unknown): unknown;
							registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							toString(): unknown;
							validateListener(t: unknown, i: unknown): void;
							_bindings: never[];
							bindings: Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointerLock"]["onError"]["_bindings"];
						};
					};
					pointers: (Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer1"] | Network["_playerDataProvider"]["_player"]["game"]["_input"]["pointer2"])[];
					position: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					scale: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					speed: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					touch: {
						active: boolean;
						enabled: boolean;
						consumeDocumentTouches(): void;
						onTouchCancel(t: unknown): void;
						onTouchEnd(t: unknown): void;
						onTouchEnter(t: unknown): void;
						onTouchLeave(t: unknown): void;
						onTouchMove(t: unknown): void;
						onTouchStart(t: unknown): void;
						start(): unknown;
						stop(): void;
						callbackContext: Network["_playerDataProvider"]["_player"]["game"];
						game: Network["_playerDataProvider"]["_player"]["game"];
					};
				};
				_load: {
					isLoading: boolean;
					_crossOrigin: string;
					baseURL: string;
					crossOrigin: string;
					addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
					atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
					audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
					destroy(): void;
					fileCompleteCallback(t: unknown, i: unknown): void;
					fileStartCallback(t: unknown): void;
					getMaxParallelDownloads(): unknown;
					getNumLoadedFiles(): unknown;
					image(t: unknown, i: unknown, n: unknown, e: unknown): void;
					json(t: unknown, i: unknown, n: unknown, e: unknown): void;
					processImage(t: unknown, i: unknown, n: unknown): void;
					processJSON(t: unknown, i: unknown, n: unknown): void;
					processScript(t: unknown, i: unknown): void;
					processSound(t: unknown, i: unknown, n: unknown): void;
					processSpine(t: unknown, i: unknown, n: unknown): void;
					processSpritesheet(t: unknown, i: unknown, n: unknown): void;
					processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
					reset(t: unknown): void;
					script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
					setupFileCallbacks(t: unknown): void;
					spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
					spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
					start(): void;
					totalQueuedFiles(): unknown;
					_loader: {
						_protected: boolean;
						loading: boolean;
						concurrency: number;
						progress: number;
						baseUrl: string;
						defaultQueryString: string;
						_boundLoadResource(t: unknown, e: unknown): unknown;
						_loadResource(t: unknown, e: unknown): void;
						_onComplete(): void;
						_onLoad(t: unknown): void;
						_onStart(): void;
						_prepareUrl(t: unknown): unknown;
						add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
						destroy(): void;
						load(t: unknown): unknown;
						off(t: unknown): void;
						on(t: unknown): void;
						once(t: unknown): void;
						pre(t: unknown): unknown;
						reset(): unknown;
						use(t: unknown): unknown;
						_afterMiddleware: (((t: unknown, e: unknown) => unknown) | ((t: unknown, e: unknown) => void) | ((e: unknown, r: unknown) => void) | ((e: unknown, n: unknown) => unknown))[];
						_beforeMiddleware: ((t: unknown, e: unknown) => void)[];
						_queue: {
							paused: boolean;
							started: boolean;
							buffer: number;
							concurrency: number;
							drain(): void;
							empty(): void;
							error(): void;
							idle(): unknown;
							kill(): void;
							length(): unknown;
							pause(): void;
							process(): void;
							push(t: unknown, e: unknown): void;
							resume(): void;
							running(): unknown;
							saturated(): void;
							unsaturated(): void;
							unshift(t: unknown, e: unknown): void;
							_tasks: never[];
						};
						_resourcesParsing: never[];
						onComplete: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onError: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onLoad: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onProgress: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						onStart: {
							_head: undefined;
							_tail: undefined;
							add(t: unknown): unknown;
							detach(t: unknown): unknown;
							detachAll(): unknown;
							dispatch(): unknown;
							handlers(): unknown;
							has(t: unknown): unknown;
							once(t: unknown): unknown;
						};
						resources: {};
					};
					_onFileComplete: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_load"]["_onFileComplete"]["_bindings"];
					};
					_onFileStart: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_load"]["_onFileStart"]["_bindings"];
					};
					_onLoadComplete: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_load"]["_onLoadComplete"]["_bindings"];
					};
					loader: Network["_playerDataProvider"]["_player"]["game"]["_load"]["_loader"];
					onFileComplete: Network["_playerDataProvider"]["_player"]["game"]["_load"]["_onFileComplete"];
					onFileStart: Network["_playerDataProvider"]["_player"]["game"]["_load"]["_onFileStart"];
					onLoadComplete: Network["_playerDataProvider"]["_player"]["game"]["_load"]["_onLoadComplete"];
					onReset: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: unknown /* too deep */[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_load"]["onReset"]["_bindings"];
					};
				};
				_onPause: {
					_shouldPropagate: boolean;
					active: boolean;
					memorize: boolean;
					_addBinding(t: unknown): void;
					_boundDispatch(): unknown;
					_indexOfListener(t: unknown, i: unknown): unknown;
					add(t: unknown, i: unknown, n: unknown): unknown;
					addOnce(t: unknown, i: unknown, n: unknown): unknown;
					boundDispatch(): unknown;
					dispatch(): void;
					dispose(): void;
					forget(): void;
					getNumListeners(): unknown;
					halt(): void;
					has(t: unknown, i: unknown): unknown;
					registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					toString(): unknown;
					validateListener(t: unknown, i: unknown): void;
					_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Network["_playerDataProvider"]["_player"]["game"]["_onPause"]; context: unknown /* too deep */; }[];
					bindings: Network["_playerDataProvider"]["_player"]["game"]["_onPause"]["_bindings"];
				};
				_onResume: {
					_shouldPropagate: boolean;
					active: boolean;
					memorize: boolean;
					_addBinding(t: unknown): void;
					_boundDispatch(): unknown;
					_indexOfListener(t: unknown, i: unknown): unknown;
					add(t: unknown, i: unknown, n: unknown): unknown;
					addOnce(t: unknown, i: unknown, n: unknown): unknown;
					boundDispatch(): unknown;
					dispatch(): void;
					dispose(): void;
					forget(): void;
					getNumListeners(): unknown;
					halt(): void;
					has(t: unknown, i: unknown): unknown;
					registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
					remove(t: unknown, i: unknown): unknown;
					removeAll(t: unknown): void;
					toString(): unknown;
					validateListener(t: unknown, i: unknown): void;
					_bindings: { _isOnce: boolean; active: boolean; _callCount: number; _priority: number; callCount: number; _destroy(): void; _listener(): void; detach(): unknown; execute(t: unknown): unknown; getListener(): unknown; getSignal(): unknown; isBound(): unknown; isOnce(): unknown; toString(): unknown; _args: unknown /* too deep */; _signal: Network["_playerDataProvider"]["_player"]["game"]["_onResume"]; context: unknown /* too deep */; }[];
					bindings: Network["_playerDataProvider"]["_player"]["game"]["_onResume"]["_bindings"];
				};
				_rnd: {
					c: number;
					s0: number;
					s1: number;
					s2: number;
					angle(): unknown;
					frac(): unknown;
					hash(t: unknown): unknown;
					integer(): unknown;
					integerInRange(t: unknown, i: unknown): unknown;
					normal(): unknown;
					pick(t: unknown): unknown;
					real(): unknown;
					realInRange(t: unknown, i: unknown): unknown;
					rnd(): unknown;
					shuffle(t: unknown): unknown;
					sign(): unknown;
					sow(t: unknown): void;
					state(t: unknown): unknown;
					uuid(): unknown;
					weightedPick(t: unknown): unknown;
				};
				_scale: {
					_booted: boolean;
					_pageAlignHorizontally: boolean;
					_pageAlignVertically: boolean;
					forceLandscape: boolean;
					forcePortrait: boolean;
					incorrectOrientation: boolean;
					isFullScreen: boolean;
					isLandscape: boolean;
					isPortrait: boolean;
					pageAlignHorizontally: boolean;
					pageAlignVertically: boolean;
					parentIsWindow: boolean;
					_fullScreenScaleMode: number;
					_lastUpdate: number;
					_scaleMode: number;
					_updateThrottle: number;
					_updateThrottleReset: number;
					aspectRatio: number;
					currentScaleMode: number;
					fullScreenScaleMode: number;
					height: number;
					scaleMode: number;
					sourceAspectRatio: number;
					trackParentInterval: number;
					width: number;
					screenOrientation: string;
					_pendingScaleMode: null;
					onResizeContext: null;
					_fullScreenChange(i: unknown): void;
					_fullScreenError(i: unknown): void;
					_gameResumed(): void;
					_orientationChange(i: unknown): void;
					_windowResize(i: unknown): void;
					align(t: unknown, i: unknown): void;
					alignCanvas(t: unknown, i: unknown): void;
					boot(): void;
					cleanupCreatedTarget(): void;
					createFullScreenTarget(): unknown;
					destroy(): void;
					forceOrientation(t: unknown, i: unknown): void;
					fullScreenChange(t: unknown): void;
					fullScreenError(t: unknown): void;
					getParentBounds(t: unknown, i: unknown): unknown;
					orientationChange(t: unknown): void;
					parseConfig(t: unknown): void;
					pauseUpdate(): void;
					prepScreenMode(i: unknown): void;
					preUpdate(): void;
					queueUpdate(t: unknown): void;
					recalculateCanvasOffset(): void;
					reflowCanvas(): void;
					reflowGame(): void;
					refresh(): void;
					resetCanvas(t: unknown, i: unknown): void;
					setExactFit(): void;
					setGameSize(i: unknown, n: unknown): void;
					setMaximum(): void;
					setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
					setResizeCallback(t: unknown, i: unknown): void;
					setShowAll(t: unknown): void;
					setupScale(t: unknown, i: unknown): void;
					signalSizeChange(): void;
					startFullScreen(t: unknown, i: unknown): unknown;
					stopFullScreen(): unknown;
					updateDimensions(i: unknown, n: unknown, e: unknown): void;
					updateLayout(): void;
					updateOrientationState(): unknown;
					updateScalingAndBounds(): void;
					windowResize(t: unknown): void;
					boundingParent: HTMLDivElement;
					parentNode: HTMLCanvasElement;
					_gameSize: {
						empty: boolean;
						bottom: number;
						centerX: number;
						centerY: number;
						halfHeight: number;
						halfWidth: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
						resize(t: unknown, i: unknown): unknown;
						setPosition(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
					};
					_lastReportedCanvasSize: {
						empty: boolean;
						bottom: number;
						centerX: number;
						centerY: number;
						halfHeight: number;
						halfWidth: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
						resize(t: unknown, i: unknown): unknown;
						setPosition(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
					};
					_lastReportedGameSize: {
						empty: boolean;
						bottom: number;
						centerX: number;
						centerY: number;
						halfHeight: number;
						halfWidth: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
						resize(t: unknown, i: unknown): unknown;
						setPosition(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
					};
					_parentBounds: {
						empty: boolean;
						bottom: number;
						centerX: number;
						centerY: number;
						halfHeight: number;
						halfWidth: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
						resize(t: unknown, i: unknown): unknown;
						setPosition(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
					};
					_tempBounds: {
						empty: boolean;
						bottom: number;
						centerX: number;
						centerY: number;
						halfHeight: number;
						halfWidth: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
						resize(t: unknown, i: unknown): unknown;
						setPosition(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
					};
					bounds: {
						empty: boolean;
						bottom: number;
						centerX: number;
						centerY: number;
						halfHeight: number;
						halfWidth: number;
						height: number;
						left: number;
						offsetX: number;
						offsetY: number;
						right: number;
						top: number;
						type: number;
						width: number;
						x: number;
						y: number;
						ceil(t: unknown, e: unknown): unknown;
						clone(): unknown;
						contains(t: unknown, e: unknown): unknown;
						copy(t: unknown): unknown;
						copyFrom(t: unknown): unknown;
						copyTo(t: unknown): unknown;
						enlarge(t: unknown): unknown;
						fit(t: unknown): unknown;
						intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
						pad(t: unknown, e: unknown): unknown;
						resize(t: unknown, i: unknown): unknown;
						setPosition(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
						anchor: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						bottomRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topLeft: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
						topRight: {
							x: number;
							y: number;
							clone(): unknown;
							copy(t: unknown): unknown;
							copyFrom(t: unknown): unknown;
							copyTo(t: unknown): unknown;
							equals(t: unknown): unknown;
							set(t: unknown, e: unknown): unknown;
						};
					};
					canvasOffset: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					device: Network["_playerDataProvider"]["_player"]["game"]["_device"];
					dom: {
						scrollX: number;
						scrollY: number;
						getOffset(t: unknown, i: unknown): unknown;
						getScreenOrientation(): unknown;
						onDeviceReady(t: unknown): void;
						layoutBounds: {
							height: number;
							width: number;
							x: number;
							y: number;
						};
						visualBounds: {
							height: number;
							width: number;
							x: number;
							y: number;
							_dom: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["dom"];
						};
					};
					enterIncorrectOrientation: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["enterIncorrectOrientation"]["_bindings"];
					};
					game: Network["_playerDataProvider"]["_player"]["game"];
					leaveIncorrectOrientation: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["leaveIncorrectOrientation"]["_bindings"];
					};
					margin: {
						bottom: number;
						left: number;
						right: number;
						top: number;
						x: number;
						y: number;
					};
					onFullScreenChange: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["onFullScreenChange"]["_bindings"];
					};
					onFullScreenError: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["onFullScreenError"]["_bindings"];
					};
					onFullScreenInit: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["onFullScreenInit"]["_bindings"];
					};
					onOrientationChange: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["onOrientationChange"]["_bindings"];
					};
					onSizeChange: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_scale"]["onSizeChange"]["_bindings"];
					};
					parentScaleFactor: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					scaleFactor: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					scaleFactorInverted: {
						_recalculateMagnitude: boolean;
						_recalculateMagnitudeSq: boolean;
						_magnitude: number;
						_magnitudeSq: number;
						_x: number;
						_y: number;
						x: number;
						y: number;
						add(t: unknown): void;
						angle(t: unknown): unknown;
						ceil(): void;
						clamp(t: unknown, i: unknown, n: unknown): void;
						clip(t: unknown): void;
						copyFrom(t: unknown): unknown;
						copyTo(i: unknown): unknown;
						cross(t: unknown): unknown;
						divide(t: unknown): void;
						dot(t: unknown): unknown;
						equals(t: unknown): unknown;
						floor(): void;
						getDistance(t: unknown): unknown;
						getDistanceSq(t: unknown): unknown;
						getMagnitude(): unknown;
						getMagnitudeSq(): unknown;
						interpolate(t: unknown, i: unknown): void;
						invert(): void;
						isNearlyEqual(t: unknown, i: unknown): unknown;
						isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
						isZero(): unknown;
						multiply(t: unknown): void;
						negate(): void;
						normalize(): void;
						normalRightHand(): void;
						perpendicular(t: unknown): void;
						print(t: unknown): void;
						project(t: unknown, i: unknown): void;
						recalculateMagnitude(): void;
						recalculateMagnitudeSq(): void;
						rotate(t: unknown, i: unknown, n: unknown): void;
						round(): void;
						set(t: unknown, i: unknown): void;
						setTo(t: unknown, i: unknown): void;
						setToPolar(t: unknown, i: unknown): void;
						subtract(t: unknown): void;
						toString(): unknown;
						trunc(): void;
					};
					windowConstraints: {
						bottom: string;
						right: string;
					};
				};
				_sound: {
					_codeMuted: boolean;
					_muted: boolean;
					_watching: boolean;
					connectToMaster: boolean;
					mute: boolean;
					muteOnPause: boolean;
					noAudio: boolean;
					touchLocked: boolean;
					baseLatency: number;
					channels: number;
					volume: number;
					_unlockSource: null;
					_watchCallback: null;
					_watchContext: null;
					_onResumeWebAudioOnClick(): void;
					_resumeWebAudioOnClick(): void;
					add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
					boot(): void;
					destroy(): void;
					pauseAll(): void;
					play(t: unknown, i: unknown, n: unknown): unknown;
					remove(t: unknown): unknown;
					removeAll(): void;
					removeByKey(t: unknown): unknown;
					resumeAll(): void;
					resumeWebAudio(): unknown;
					setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
					setMute(): void;
					setTouchLock(): void;
					setTouchUnlock(): void;
					stopAll(): void;
					unlock(): unknown;
					unsetMute(): void;
					update(): void;
					context: AudioContext;
					emptyBuffer: AudioBuffer;
					_sounds: never[];
					_watchList: {
						_cursor: number;
						total: number;
						first: null;
						next: null;
						add(t: unknown): unknown;
						callAll(t: unknown): void;
						exists(t: unknown): unknown;
						getByKey(t: unknown, i: unknown): unknown;
						getIndex(t: unknown): unknown;
						remove(t: unknown): unknown;
						removeAll(t: unknown): void;
						reset(): void;
						setAll(t: unknown, i: unknown): void;
						_list: never[];
						list: Network["_playerDataProvider"]["_player"]["game"]["_sound"]["_watchList"]["_list"];
					};
					game: Network["_playerDataProvider"]["_player"]["game"];
					onMute: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_sound"]["onMute"]["_bindings"];
					};
					onSoundDecode: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_sound"]["onSoundDecode"]["_bindings"];
					};
					onTouchUnlock: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_sound"]["onTouchUnlock"]["_bindings"];
					};
					onUnMute: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_sound"]["onUnMute"]["_bindings"];
					};
					onVolumeChange: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_sound"]["onVolumeChange"]["_bindings"];
					};
					sounds: Network["_playerDataProvider"]["_player"]["game"]["_sound"]["_sounds"];
				};
				_stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
				_state: {
					_clearWorld: boolean;
					current: string;
					_pendingState: null;
					add(t: unknown, i: unknown, n: unknown): unknown;
					boot(): void;
					clearCurrentState(): void;
					destroy(): void;
					get(t: unknown): unknown;
					getCurrentState(): unknown;
					loadComplete(): void;
					pause(): void;
					preUpdate(): unknown;
					remove(t: unknown): void;
					resume(): void;
					setCurrentState(t: unknown): void;
					start(t: unknown, i: unknown): void;
					update(): void;
					_states: Map<string, ({ _isLoaded: boolean; _localizedTextLoaded: boolean; _waitingOnFeatureRevisionsData: boolean; _key: string; key: string; cacheGeolocationData(): void; create(): void; extendInput(): void; featureFlagsLoaded(t: unknown): void; fetchLocalizationData(): unknown; handlePromiseLoadError(t: unknown): void; init(): void; loadedAssets(t: unknown, i: unknown): void; loadedData(t: unknown, e: unknown): unknown; loadedLocalizedData(): unknown; mergeFeatureData(t: unknown, i: unknown): unknown; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; _featureRevisionsData: {}; _gameData: { ad: unknown /* too deep */; affix: unknown /* too deep */; atlas: unknown /* too deep */; bgm: unknown /* too deep */; bitmapFont: unknown /* too deep */; boots: unknown /* too deep */; boss: unknown /* too deep */; bountyName: unknown /* too deep */; bundle: unknown /* too deep */; currency: unknown /* too deep */; dailyReward: unknown /* too deep */; dialogue: unknown /* too deep */; dorm: unknown /* too deep */; dormbg: unknown /* too deep */; dungeon: unknown /* too deep */; emote: unknown /* too deep */; eyeColor: unknown /* too deep */; face: unknown /* too deep */; faceColor: unknown /* too deep */; featureRequirement: unknown /* too deep */; follow: unknown /* too deep */; fontStyle: unknown /* too deep */; fossil: unknown /* too deep */; fsm: unknown /* too deep */; gameFeed: unknown /* too deep */; gender: unknown /* too deep */; generic: unknown /* too deep */; giftBox: unknown /* too deep */; hair: unknown /* too deep */; hairColor: unknown /* too deep */; hat: unknown /* too deep */; item: unknown /* too deep */; itemTable: unknown /* too deep */; key: unknown /* too deep */; mathTownDecor: unknown /* too deep */; mathTownFrame: unknown /* too deep */; mathTownInterior: unknown /* too deep */; mount: unknown /* too deep */; name: unknown /* too deep */; nickname: unknown /* too deep */; orb: unknown /* too deep */; outfit: unknown /* too deep */; particleEffect: unknown /* too deep */; pet: unknown /* too deep */; prefab: unknown /* too deep */; prizeWheel: unknown /* too deep */; relic: unknown /* too deep */; sfx: unknown /* too deep */; singleImage: unknown /* too deep */; skinColor: unknown /* too deep */; spell: unknown /* too deep */; spellRelic: unknown /* too deep */; spine: unknown /* too deep */; streamedMap: unknown /* too deep */; titan: unknown /* too deep */; ui: unknown /* too deep */; weapon: unknown /* too deep */; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | { complete: boolean; isHintPanelShown: boolean; isLoaded: boolean; startTime: number; timeLoadStartedMS: number; _key: string; key: string; _errorMessageBox: null; _hint: null; _mapName: null; completed(): void; create(): void; init(): void; initData(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; onErrorMessageClose(): void; paused(): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: unknown /* too deep */; }; element: never; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; prodigyGame: Network["_playerDataProvider"]["_player"]["game"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | { isHintPanelShown: boolean; _pvpTimeoutTime: number; _key: string; key: string; _battleRoom: null; _closeButton: null; _duelInviteService: null; _errorMessageBox: null; _hint: null; _loadingProgress: null; _mapName: null; timeLoadStartedMS: null; battleRoomMessageReceived(t: unknown): unknown; cancelInvite(): void; completed(): void; create(): void; dispatchBattleTeamMessage(): unknown; dispatchInitialMessages(): void; dispatchPlayerDataMessage(): void; init(): void; initData(t: unknown): void; inviteWasRejected(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; maintenanceModeStarted(): void; onErrorMessageClose(): void; paused(): void; playerJoinedBattleRoom(t: unknown): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; tryLoadingAssets(): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: unknown /* too deep */; }; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; prodigyGame: Network["_playerDataProvider"]["_player"]["game"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | never | { complete: boolean; fadeInSet: boolean; showMenu: boolean; _key: string; key: string; screenName: string; zoneName: string; _blockingOverlay: null; backButton: null; classCode: null; codeField: null; error: null; nextButton: null; spinner: null; callFunctionOrSignal(t: unknown, i: unknown): void; chooseServer(t: unknown, i: unknown): void; classCodeComplete(): void; closeClassCode(): void; create(): void; createLoadingMetricEvent(): void; disableOverlay(t: unknown): void; enableOverlay(t: unknown): void; fadeIn(): void; fadeOut(t: unknown, i: unknown): void; findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown; findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown; getCode(): void; init(): void; initListeners(): void; onAddChild(t: unknown, i: unknown, n: unknown): void; onDebugAutoClickElement(t: unknown): unknown; onDebugAutoClickItem(t: unknown, i: unknown): void; onDebugAutoClickList(): void; onEnableBackground(t: unknown): void; onEnableContent(t: unknown): void; onGetLayer(t: unknown): unknown; openWorlds(): void; paused(): void; preload(): void; resumed(): void; screenSetup(): void; screenUpdate(): void; setCode(t: unknown): void; showClassCode(): void; showContentA(): unknown; showMessage(t: unknown, i: unknown): void; shutdown(): void; start(): void; stopListeners(): void; submit(): unknown; triggerElementClick(t: unknown): void; update(): void; validationComplete(t: unknown): void; _background: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _content: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _dialogue: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _foreground: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _localizer: { getText(t: unknown): unknown; setDataSource(t: unknown): void; dataSource: unknown /* too deep */; }; _menus: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; _opaque: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _overlay: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _root: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; _uiLayer: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; assets: string[]; background: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; backgroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; content: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; contentA: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; totalHeight: number; totalWidth: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; onDown: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; changePanel(t: unknown): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setClickable(t: unknown, i: unknown, n: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; images: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; contentGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; dialogue: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; foreground: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; foregroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; menus: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; off: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bg: unknown /* too deep */; bounds: unknown /* too deep */; btnGroup: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; text: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; opaque: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; overlay: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; prodigyGame: Network["_playerDataProvider"]["_player"]["game"]; screenData: unknown /* too deep */[]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; uiLayer: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; } | { _key: string; key: string; battleLayers: null; rootContext: null; create(): void; createBattleEntities(t: unknown, i: unknown): void; createPlayerTeam(): unknown; createTitanTeam(t: unknown): unknown; init(t: unknown): unknown; paused(): void; preload(): void; resumed(): void; setupHealthBars(): void; setupLayers(): void; shutdown(): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | { _key: string; key: string; _currentScene: null; create(): void; init(t: unknown): void; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; })>;
					states: Map<string, ({ _isLoaded: boolean; _localizedTextLoaded: boolean; _waitingOnFeatureRevisionsData: boolean; _key: string; key: string; cacheGeolocationData(): void; create(): void; extendInput(): void; featureFlagsLoaded(t: unknown): void; fetchLocalizationData(): unknown; handlePromiseLoadError(t: unknown): void; init(): void; loadedAssets(t: unknown, i: unknown): void; loadedData(t: unknown, e: unknown): unknown; loadedLocalizedData(): unknown; mergeFeatureData(t: unknown, i: unknown): unknown; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; _featureRevisionsData: {}; _gameData: { ad: unknown /* too deep */; affix: unknown /* too deep */; atlas: unknown /* too deep */; bgm: unknown /* too deep */; bitmapFont: unknown /* too deep */; boots: unknown /* too deep */; boss: unknown /* too deep */; bountyName: unknown /* too deep */; bundle: unknown /* too deep */; currency: unknown /* too deep */; dailyReward: unknown /* too deep */; dialogue: unknown /* too deep */; dorm: unknown /* too deep */; dormbg: unknown /* too deep */; dungeon: unknown /* too deep */; emote: unknown /* too deep */; eyeColor: unknown /* too deep */; face: unknown /* too deep */; faceColor: unknown /* too deep */; featureRequirement: unknown /* too deep */; follow: unknown /* too deep */; fontStyle: unknown /* too deep */; fossil: unknown /* too deep */; fsm: unknown /* too deep */; gameFeed: unknown /* too deep */; gender: unknown /* too deep */; generic: unknown /* too deep */; giftBox: unknown /* too deep */; hair: unknown /* too deep */; hairColor: unknown /* too deep */; hat: unknown /* too deep */; item: unknown /* too deep */; itemTable: unknown /* too deep */; key: unknown /* too deep */; mathTownDecor: unknown /* too deep */; mathTownFrame: unknown /* too deep */; mathTownInterior: unknown /* too deep */; mount: unknown /* too deep */; name: unknown /* too deep */; nickname: unknown /* too deep */; orb: unknown /* too deep */; outfit: unknown /* too deep */; particleEffect: unknown /* too deep */; pet: unknown /* too deep */; prefab: unknown /* too deep */; prizeWheel: unknown /* too deep */; relic: unknown /* too deep */; sfx: unknown /* too deep */; singleImage: unknown /* too deep */; skinColor: unknown /* too deep */; spell: unknown /* too deep */; spellRelic: unknown /* too deep */; spine: unknown /* too deep */; streamedMap: unknown /* too deep */; titan: unknown /* too deep */; ui: unknown /* too deep */; weapon: unknown /* too deep */; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | { complete: boolean; isHintPanelShown: boolean; isLoaded: boolean; startTime: number; timeLoadStartedMS: number; _key: string; key: string; _errorMessageBox: null; _hint: null; _mapName: null; completed(): void; create(): void; init(): void; initData(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; onErrorMessageClose(): void; paused(): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: unknown /* too deep */; }; element: never; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; prodigyGame: Network["_playerDataProvider"]["_player"]["game"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | { isHintPanelShown: boolean; _pvpTimeoutTime: number; _key: string; key: string; _battleRoom: null; _closeButton: null; _duelInviteService: null; _errorMessageBox: null; _hint: null; _loadingProgress: null; _mapName: null; timeLoadStartedMS: null; battleRoomMessageReceived(t: unknown): unknown; cancelInvite(): void; completed(): void; create(): void; dispatchBattleTeamMessage(): unknown; dispatchInitialMessages(): void; dispatchPlayerDataMessage(): void; init(): void; initData(t: unknown): void; inviteWasRejected(t: unknown): void; isLoadingComplete(): unknown; isTargetingInitialScreen(): unknown; loaded(t: unknown, i: unknown): void; maintenanceModeStarted(): void; onErrorMessageClose(): void; paused(): void; playerJoinedBattleRoom(t: unknown): void; preload(): void; resetData(): void; resumed(): void; showErrorPopup(t: unknown): void; showHintPanel(): void; shutdown(): void; start(): void; startLoading(t: unknown): void; tryLoadingAssets(): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; data: { autoStart: boolean; fadeIn: boolean; fadeOut: boolean; save: boolean; time: number; target: string; title: string; callback: null; assets: unknown /* too deep */; }; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; prodigyGame: Network["_playerDataProvider"]["_player"]["game"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | never | { complete: boolean; fadeInSet: boolean; showMenu: boolean; _key: string; key: string; screenName: string; zoneName: string; _blockingOverlay: null; backButton: null; classCode: null; codeField: null; error: null; nextButton: null; spinner: null; callFunctionOrSignal(t: unknown, i: unknown): void; chooseServer(t: unknown, i: unknown): void; classCodeComplete(): void; closeClassCode(): void; create(): void; createLoadingMetricEvent(): void; disableOverlay(t: unknown): void; enableOverlay(t: unknown): void; fadeIn(): void; fadeOut(t: unknown, i: unknown): void; findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown; findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown; getCode(): void; init(): void; initListeners(): void; onAddChild(t: unknown, i: unknown, n: unknown): void; onDebugAutoClickElement(t: unknown): unknown; onDebugAutoClickItem(t: unknown, i: unknown): void; onDebugAutoClickList(): void; onEnableBackground(t: unknown): void; onEnableContent(t: unknown): void; onGetLayer(t: unknown): unknown; openWorlds(): void; paused(): void; preload(): void; resumed(): void; screenSetup(): void; screenUpdate(): void; setCode(t: unknown): void; showClassCode(): void; showContentA(): unknown; showMessage(t: unknown, i: unknown): void; shutdown(): void; start(): void; stopListeners(): void; submit(): unknown; triggerElementClick(t: unknown): void; update(): void; validationComplete(t: unknown): void; _background: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _content: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _dialogue: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _foreground: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _localizer: { getText(t: unknown): unknown; setDataSource(t: unknown): void; dataSource: unknown /* too deep */; }; _menus: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; timeInLoadingMS: number; timeToPlayMS: number; _renderType: string; crashedLastTime: string; renderType: string; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; _opaque: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _overlay: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _root: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; _uiLayer: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; assets: string[]; background: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; backgroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; content: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; contentA: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; totalHeight: number; totalWidth: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; onDown: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; changePanel(t: unknown): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setClickable(t: unknown, i: unknown, n: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; images: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; contentGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; dialogue: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; foreground: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; foregroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; menus: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; off: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bg: unknown /* too deep */; bounds: unknown /* too deep */; btnGroup: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; text: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; opaque: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; overlay: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; prodigyGame: Network["_playerDataProvider"]["_player"]["game"]; screenData: unknown /* too deep */[]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; uiLayer: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; } | { _key: string; key: string; battleLayers: null; rootContext: null; create(): void; createBattleEntities(t: unknown, i: unknown): void; createPlayerTeam(): unknown; createTitanTeam(t: unknown): unknown; init(t: unknown): unknown; paused(): void; preload(): void; resumed(): void; setupHealthBars(): void; setupLayers(): void; shutdown(): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; } | { _key: string; key: string; _currentScene: null; create(): void; init(t: unknown): void; paused(): void; preload(): void; resumed(): void; shutdown(): void; update(): void; add: Network["_playerDataProvider"]["_player"]["game"]["_add"]; game: Network["_playerDataProvider"]["_player"]["game"]; input: Network["_playerDataProvider"]["_player"]["game"]["_input"]; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; })>;
					_current: {
						complete: boolean;
						fadeInSet: boolean;
						showMenu: boolean;
						_key: string;
						key: string;
						screenName: string;
						zoneName: string;
						_blockingOverlay: null;
						backButton: null;
						classCode: null;
						codeField: null;
						error: null;
						nextButton: null;
						spinner: null;
						callFunctionOrSignal(t: unknown, i: unknown): void;
						chooseServer(t: unknown, i: unknown): void;
						classCodeComplete(): void;
						closeClassCode(): void;
						create(): void;
						createLoadingMetricEvent(): void;
						disableOverlay(t: unknown): void;
						enableOverlay(t: unknown): void;
						fadeIn(): void;
						fadeOut(t: unknown, i: unknown): void;
						findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
						findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
						getCode(): void;
						init(): void;
						initListeners(): void;
						onAddChild(t: unknown, i: unknown, n: unknown): void;
						onDebugAutoClickElement(t: unknown): unknown;
						onDebugAutoClickItem(t: unknown, i: unknown): void;
						onDebugAutoClickList(): void;
						onEnableBackground(t: unknown): void;
						onEnableContent(t: unknown): void;
						onGetLayer(t: unknown): unknown;
						openWorlds(): void;
						paused(): void;
						preload(): void;
						resumed(): void;
						screenSetup(): void;
						screenUpdate(): void;
						setCode(t: unknown): void;
						showClassCode(): void;
						showContentA(): unknown;
						showMessage(t: unknown, i: unknown): void;
						shutdown(): void;
						start(): void;
						stopListeners(): void;
						submit(): unknown;
						triggerElementClick(t: unknown): void;
						update(): void;
						validationComplete(t: unknown): void;
						_background: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: {
								_isActive: boolean;
								_isActiveInHierarchy: boolean;
								active: boolean;
								activeInHierarchy: boolean;
								_layer: string;
								_name: string;
								layer: string;
								name: string;
								_parent: null;
								_transform: null;
								parent: null;
								transform: null;
								activeInHierarchyChanged(): void;
								addChild(t: unknown): void;
								addChildAt(t: unknown, i: unknown): void;
								addComponent(t: unknown, i: unknown): unknown;
								bringToFront(): void;
								destroy(): void;
								dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
								findChildByName(t: unknown): unknown;
								findComponent(t: unknown): unknown;
								findComponentInChildren(t: unknown, i: unknown): unknown;
								findComponentInParent(t: unknown, i: unknown): unknown;
								findComponents(t: unknown): unknown;
								findComponentsInChildren(t: unknown, i: unknown): unknown;
								getRenderOrder(): unknown;
								hasComponent(t: unknown): unknown;
								isActiveInHierarchy(): unknown;
								isInBack(): unknown;
								isInFront(): unknown;
								removeComponent(t: unknown): void;
								removeFromParent(): unknown;
								sendToBack(): void;
								setLayer(t: unknown, i: unknown): void;
								setParent(t: unknown, i: unknown): unknown;
								setRenderOrder(t: unknown): void;
								update(): void;
								_children: unknown /* too deep */;
								_components: unknown /* too deep */;
								_legacyTransform: unknown /* too deep */;
								children: unknown /* too deep */;
								components: unknown /* too deep */;
								legacyTransform: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								onActiveInHierarchyChanged: unknown /* too deep */;
								onChildAdded: unknown /* too deep */;
								onChildRemoved: unknown /* too deep */;
								onComponentAdded: unknown /* too deep */;
								onComponentAddedToHierarchy: unknown /* too deep */;
								onComponentRemoved: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onHierarchyChanged: unknown /* too deep */;
								onLayerChanged: unknown /* too deep */;
							};
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						_content: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_content"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_content"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_content"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_content"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_content"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						_dialogue: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_dialogue"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_dialogue"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_dialogue"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_dialogue"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_dialogue"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						_foreground: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_foreground"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_foreground"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_foreground"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_foreground"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_foreground"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						_localizer: {
							getText(t: unknown): unknown;
							setDataSource(t: unknown): void;
							dataSource: {
								getValue(t: unknown): unknown;
								loadDataFromURL(t: unknown, i: unknown): unknown;
								_httpClient: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["_httpClient"];
								_languageData: unknown /* too deep */;
							};
						};
						_menus: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_menus"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_menus"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_menus"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_menus"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_menus"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						_metricsManager: {
							_supportsWasm: boolean;
							crashedLastLogin: boolean;
							_averageDownloadSpeed: number;
							_networkRequestCount: number;
							_totalAssetDownloadSize: number;
							_totalAssetDownloadTime: number;
							_totalAssetsDownloaded: number;
							timeInLoadingMS: number;
							timeToPlayMS: number;
							_renderType: string;
							crashedLastTime: string;
							renderType: string;
							assetDownloaded(t: unknown, i: unknown): void;
							checkForCrash(): void;
							createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
							getCustomMetrics(): unknown;
							getLastGameSessionStartTime(): unknown;
							increaseNetworkRequestCount(): void;
							objectCreated(t: unknown): void;
							objectDestroyed(t: unknown): void;
							sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
							setInBattle(t: unknown): void;
							setLastGameSessionStartTime(t: unknown): void;
							setLastMapLoadStarted(t: unknown): void;
							deviceInfoProvider: {
								getConnection(): unknown;
								getConnectionDownlinkSpeed(): unknown;
								getConnectionEffectiveType(): unknown;
								getConnectionRTT(): unknown;
								getConnectionType(): unknown;
								getDeviceMemory(): unknown;
								getHardwareConcurrency(): unknown;
								getJSHeapSizeLimit(): unknown;
								getPlatformName(): unknown;
								getScreenHeight(): unknown;
								getScreenWidth(): unknown;
								getUsedJSHeapSize(): unknown;
								isVideoAvailable(): unknown;
								isWebGLAvailable(): unknown;
								isWebSocketAvailable(): unknown;
								isWebWorkerAvailable(): unknown;
							};
							game: Network["_playerDataProvider"]["_player"]["game"];
							gameCompleteDataFactory: {
								buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown;
								create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown;
								getGame(): unknown;
								game: Network["_playerDataProvider"]["_player"]["game"];
								gameEventDataBuilder: unknown /* too deep */;
							};
							loadingMetricProperties: never[];
							objectCountProperties: never[];
						};
						_opaque: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_opaque"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_opaque"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_opaque"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_opaque"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_opaque"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						_overlay: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_overlay"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_overlay"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_overlay"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_overlay"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_overlay"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						_root: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						_uiLayer: {
							_isActive: boolean;
							_isActiveInHierarchy: boolean;
							active: boolean;
							activeInHierarchy: boolean;
							_layer: string;
							_name: string;
							layer: string;
							name: string;
							_transform: null;
							transform: null;
							activeInHierarchyChanged(): void;
							addChild(t: unknown): void;
							addChildAt(t: unknown, i: unknown): void;
							addComponent(t: unknown, i: unknown): unknown;
							bringToFront(): void;
							destroy(): void;
							dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
							findChildByName(t: unknown): unknown;
							findComponent(t: unknown): unknown;
							findComponentInChildren(t: unknown, i: unknown): unknown;
							findComponentInParent(t: unknown, i: unknown): unknown;
							findComponents(t: unknown): unknown;
							findComponentsInChildren(t: unknown, i: unknown): unknown;
							getRenderOrder(): unknown;
							hasComponent(t: unknown): unknown;
							isActiveInHierarchy(): unknown;
							isInBack(): unknown;
							isInFront(): unknown;
							removeComponent(t: unknown): void;
							removeFromParent(): unknown;
							sendToBack(): void;
							setLayer(t: unknown, i: unknown): void;
							setParent(t: unknown, i: unknown): unknown;
							setRenderOrder(t: unknown): void;
							update(): void;
							_children: never[];
							_components: unknown /* too deep */[];
							_legacyTransform: {
								_isCreated: boolean;
								Active: boolean;
								isActive: boolean;
								IsActiveInHierarchy: boolean;
								isCreated: boolean;
								roundRelativeValues: boolean;
								RoundRelativeValues: boolean;
								anchorX: number;
								anchorY: number;
								height: number;
								relativeHeight: number;
								relativeWidth: number;
								relativeX: number;
								relativeY: number;
								roundedHeight: number;
								roundedWidth: number;
								roundedX: number;
								roundedY: number;
								scaleX: number;
								scaleY: number;
								width: number;
								x: number;
								y: number;
								cachedRelativeHeight: null;
								cachedRelativeWidth: null;
								cachedRelativeX: null;
								cachedRelativeY: null;
								dimensionPlaceholder: null;
								create(): void;
								customDeserialize(t: unknown): void;
								destroy(): void;
								onDisable(): void;
								onEnable(): void;
								postCreate(): void;
								postDeserialize(): void;
								reapplyChildRelativeValues(): void;
								update(): void;
								updateGroupVisibility(): void;
								updateParentGroup(): void;
								updatePivotXFromAnchorX(): void;
								updatePivotYFromAnchorY(): void;
								_group: unknown /* too deep */;
								anchor: unknown /* too deep */;
								gameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_uiLayer"];
								GameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_uiLayer"];
								group: unknown /* too deep */;
								onActiveChanged: unknown /* too deep */;
								OnActiveChanged: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								OnDestroy: unknown /* too deep */;
							};
							_parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_uiLayer"]["_children"];
							components: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_uiLayer"]["_components"];
							legacyTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_uiLayer"]["_legacyTransform"];
							onActiveChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onActiveInHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onChildRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAdded: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentAddedToHierarchy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onComponentRemoved: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onHierarchyChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							onLayerChanged: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
						};
						add: Network["_playerDataProvider"]["_player"]["game"]["_add"];
						assets: string[];
						background: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								exists: boolean;
								fixedToCamera: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								pendingDestroy: boolean;
								renderable: boolean;
								sortableChildren: boolean;
								sortDirty: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								bottom: number;
								centerX: number;
								centerY: number;
								height: number;
								left: number;
								length: number;
								offsetX: number;
								offsetY: number;
								renderId: number;
								right: number;
								rotation: number;
								tabIndex: number;
								top: number;
								width: number;
								worldAlpha: number;
								worldRotation: number;
								x: number;
								y: number;
								z: number;
								zIndex: number;
								_sortProperty: string;
								accessiblePointerEvents: string;
								accessibleType: string;
								name: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateBounds(): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_render(t: unknown): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								_renderCanvas(t: unknown): void;
								_renderWebGL(t: unknown): void;
								add(t: unknown, i: unknown): unknown;
								addAt(t: unknown, i: unknown): unknown;
								addChild(): unknown;
								addChildAt(t: unknown, e: unknown): unknown;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								ascendingSortHandler(t: unknown, i: unknown): unknown;
								bringChildToTop(t: unknown): void;
								calculateBounds(): void;
								callAll(t: unknown, i: unknown): void;
								callbackFromArray(t: unknown, i: unknown): unknown;
								containerUpdateTransform(): void;
								descendingSortHandler(t: unknown, i: unknown): unknown;
								destroy(i: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getAt(t: unknown): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getByName(t: unknown): unknown;
								getChildAt(t: unknown): unknown;
								getChildByName(t: unknown, e: unknown): unknown;
								getChildIndex(t: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getIndex(t: unknown): unknown;
								getLocalBounds(e: unknown, r: unknown): unknown;
								iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								moveDown(t: unknown): unknown;
								moveUp(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								onChildrenChange(t: unknown): void;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								removeAllListeners(t: unknown): unknown;
								removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
								removeChild(): unknown;
								removeChildAt(t: unknown): unknown;
								removeChildren(t: unknown, e: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								render(t: unknown): void;
								renderAdvanced(t: unknown): void;
								renderAdvancedWebGL(t: unknown): void;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								sendChildToBack(t: unknown): void;
								setChildIndex(t: unknown, e: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								sort(t: unknown, i: unknown): void;
								sortChildren(): void;
								swap(t: unknown, i: unknown): void;
								swapChildren(t: unknown, e: unknown): void;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								update(): void;
								updateTransform(): void;
								updateZ(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_game: Network["_playerDataProvider"]["_player"]["game"];
								_localBounds: unknown /* too deep */;
								_localBoundsRect: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								anchor: unknown /* too deep */;
								bounds: unknown /* too deep */;
								children: unknown /* too deep */;
								events: unknown /* too deep */;
								gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"]["_parent"];
								localTransform: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								world: unknown /* too deep */;
								worldGamePosition: unknown /* too deep */;
								worldPosition: unknown /* too deep */;
								worldScale: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						backgroundGameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_background"];
						content: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_content"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["parent"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						contentA: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							totalHeight: number;
							totalWidth: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_element: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							onDown: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addElementClass(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							changePanel(t: unknown): void;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getAutomationSignature(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildElements(): unknown;
							getChildIndex(t: unknown): unknown;
							getClassName(): unknown;
							getElement(): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							hasTooltip(): unknown;
							highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
							isHighlighted(): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							onGetUIElement(t: unknown): unknown;
							registerGetElementListener(): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setClickable(t: unknown, i: unknown, n: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setRenderState(t: unknown, i: unknown): void;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							shouldCreateAndStageElement(): unknown;
							showTooltip(t: unknown, i: unknown): void;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							unregisterGetElementListener(): void;
							update(): void;
							updateElementAttribute(t: unknown, i: unknown): void;
							updateElementAttributes(t: unknown): void;
							updateElementPosition(t: unknown, i: unknown): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"];
							};
							game: Network["_playerDataProvider"]["_player"]["game"];
							images: unknown /* too deep */[];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							metricsManager: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_metricsManager"];
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["content"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						contentGameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_content"];
						dialogue: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_dialogue"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["parent"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["dialogue"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						foreground: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_foreground"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["parent"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["foreground"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						foregroundGameObject: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_foreground"];
						game: Network["_playerDataProvider"]["_player"]["game"];
						input: Network["_playerDataProvider"]["_player"]["game"]["_input"];
						menus: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_menus"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["parent"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["menus"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						off: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isActive: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							selected: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_element: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							iconSide: undefined;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addElementClass(t: unknown): void;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callback(): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							deselect(): void;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getAutomationSignature(): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildElements(): unknown;
							getChildIndex(t: unknown): unknown;
							getClassName(): unknown;
							getElement(): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getInjectedValue(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							handleDestroy(): void;
							hasTooltip(): unknown;
							highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
							isHighlighted(): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							onDebugAutoClick(t: unknown): void;
							onDown(): void;
							onGetUIElement(t: unknown): unknown;
							onOut(): void;
							onOver(): void;
							onUp(): void;
							registerGetElementListener(): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							select(): void;
							sendChildToBack(t: unknown): void;
							setActive(): void;
							setChildIndex(t: unknown, e: unknown): void;
							setEnabled(t: unknown): void;
							setIcon(t: unknown): void;
							setInactive(): void;
							setParent(t: unknown): unknown;
							setRenderState(t: unknown, i: unknown): void;
							setText(t: unknown): void;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							shouldCreateAndStageElement(): unknown;
							showTooltip(t: unknown, i: unknown): void;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							tintActive(): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							unregisterGetElementListener(): void;
							update(): void;
							updateElementAttribute(t: unknown, i: unknown): void;
							updateElementAttributes(t: unknown): void;
							updateElementPosition(t: unknown, i: unknown): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bg: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								_roundPixels: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								exists: boolean;
								fixedToCamera: boolean;
								inputEnabled: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isLoaded: boolean;
								isMask: boolean;
								isSprite: boolean;
								pendingDestroy: boolean;
								renderable: boolean;
								roundPixels: boolean;
								smoothed: boolean;
								sortableChildren: boolean;
								sortDirty: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_cachedTint: number;
								_eventsCount: number;
								_height: number;
								_lastSortedIndex: number;
								_textureID: number;
								_textureTrimmedID: number;
								_tint: number;
								_tintRGB: number;
								_transformID: number;
								_transformTrimmedID: number;
								_width: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								blendMode: number;
								bottom: number;
								cachedTint: number;
								centerX: number;
								centerY: number;
								height: number;
								left: number;
								offsetX: number;
								offsetY: number;
								renderId: number;
								right: number;
								rotation: number;
								tabIndex: number;
								tint: number;
								top: number;
								width: number;
								worldAlpha: number;
								worldRotation: number;
								x: number;
								y: number;
								z: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								frameName: string;
								key: string;
								pluginName: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_mask: null;
								_tintedCanvas: null;
								_tintedTexture: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								loadingTween: null;
								mask: null;
								name: null;
								scaleMax: null;
								scaleMin: null;
								tintedTexture: null;
								transformCallbackContext: null;
								vertexTrimmedData: null;
								forcedHeight: undefined;
								forcedWidth: undefined;
								frame: undefined;
								onTextureLoaded: undefined;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateBounds(): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_onAnchorUpdate(): void;
								_onTextureUpdate(): void;
								_recursivePostUpdateTransform(): void;
								_render(t: unknown): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								_renderCanvas(t: unknown): void;
								_renderWebGL(t: unknown): void;
								addChild(): unknown;
								addChildAt(t: unknown, e: unknown): unknown;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								bringChildToTop(t: unknown): void;
								calculateBounds(): void;
								calculateTrimmedVertices(): unknown;
								calculateVertices(): void;
								checkCallback(): void;
								checkSpriteDimension(): void;
								containerUpdateTransform(): void;
								containsPoint(t: unknown): unknown;
								destroy(): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getChildAt(t: unknown): unknown;
								getChildByName(t: unknown, e: unknown): unknown;
								getChildIndex(t: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void;
								loadTexture(t: unknown, i: unknown): void;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								onChildrenChange(t: unknown): void;
								onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
								removeAllListeners(t: unknown): unknown;
								removeChild(): unknown;
								removeChildAt(t: unknown): unknown;
								removeChildren(t: unknown, e: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								render(t: unknown): void;
								renderAdvanced(t: unknown): void;
								renderAdvancedWebGL(t: unknown): void;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								rotateMiddleBased(t: unknown): void;
								sendChildToBack(t: unknown): void;
								setActive(t: unknown): void;
								setChildIndex(t: unknown, e: unknown): void;
								setFrame(t: unknown): void;
								setParent(t: unknown): unknown;
								setTexture(t: unknown, i: unknown): void;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								sortChildren(): void;
								swapChildren(t: unknown, e: unknown): void;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								update(): void;
								updateFrame(i: unknown): void;
								updateTexture(t: unknown): void;
								updateTransform(): void;
								indices: Uint16Array;
								uvs: Float32Array;
								vertexData: Float32Array;
								_anchor: unknown /* too deep */;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_localBoundsRect: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_texture: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								anchor: unknown /* too deep */;
								animations: unknown /* too deep */;
								bounds: unknown /* too deep */;
								cameraOffset: unknown /* too deep */;
								children: unknown /* too deep */;
								events: unknown /* too deep */;
								game: Network["_playerDataProvider"]["_player"]["game"];
								input: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								parent: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								previousPosition: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								tempDisplayObjectParent: unknown /* too deep */;
								texture: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								world: unknown /* too deep */;
								worldPosition: unknown /* too deep */;
								worldScale: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							btnGroup: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								exists: boolean;
								fixedToCamera: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								pendingDestroy: boolean;
								renderable: boolean;
								sortableChildren: boolean;
								sortDirty: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								bottom: number;
								centerX: number;
								centerY: number;
								height: number;
								left: number;
								length: number;
								offsetX: number;
								offsetY: number;
								renderId: number;
								right: number;
								rotation: number;
								tabIndex: number;
								top: number;
								width: number;
								worldAlpha: number;
								worldRotation: number;
								x: number;
								y: number;
								z: number;
								zIndex: number;
								_sortProperty: string;
								accessiblePointerEvents: string;
								accessibleType: string;
								name: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_element: null;
								_enabledFilters: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateBounds(): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_render(t: unknown): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								_renderCanvas(t: unknown): void;
								_renderWebGL(t: unknown): void;
								add(t: unknown, i: unknown): unknown;
								addAt(t: unknown, i: unknown): unknown;
								addChild(): unknown;
								addChildAt(t: unknown, e: unknown): unknown;
								addElementClass(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								ascendingSortHandler(t: unknown, i: unknown): unknown;
								bringChildToTop(t: unknown): void;
								calculateBounds(): void;
								callAll(t: unknown, i: unknown): void;
								callbackFromArray(t: unknown, i: unknown): unknown;
								containerUpdateTransform(): void;
								descendingSortHandler(t: unknown, i: unknown): unknown;
								destroy(i: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getAt(t: unknown): unknown;
								getAutomationSignature(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getByName(t: unknown): unknown;
								getChildAt(t: unknown): unknown;
								getChildByName(t: unknown, e: unknown): unknown;
								getChildElements(): unknown;
								getChildIndex(t: unknown): unknown;
								getClassName(): unknown;
								getElement(): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getIndex(t: unknown): unknown;
								getInjectedValue(t: unknown): unknown;
								getLocalBounds(e: unknown, r: unknown): unknown;
								hasTooltip(): unknown;
								highlight(t: unknown, i: unknown, n: unknown, e: unknown): void;
								isHighlighted(): unknown;
								iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								moveDown(t: unknown): unknown;
								moveUp(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								onChildrenChange(t: unknown): void;
								onGetUIElement(t: unknown): unknown;
								registerGetElementListener(): void;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								removeAllListeners(t: unknown): unknown;
								removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
								removeChild(): unknown;
								removeChildAt(t: unknown): unknown;
								removeChildren(t: unknown, e: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								render(t: unknown): void;
								renderAdvanced(t: unknown): void;
								renderAdvancedWebGL(t: unknown): void;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								sendChildToBack(t: unknown): void;
								setChildIndex(t: unknown, e: unknown): void;
								setParent(t: unknown): unknown;
								setRenderState(t: unknown, i: unknown): void;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								shouldCreateAndStageElement(): unknown;
								showTooltip(t: unknown, i: unknown): void;
								sort(t: unknown, i: unknown): void;
								sortChildren(): void;
								swap(t: unknown, i: unknown): void;
								swapChildren(t: unknown, e: unknown): void;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								unregisterGetElementListener(): void;
								update(): void;
								updateElementAttribute(t: unknown, i: unknown): void;
								updateElementAttributes(t: unknown): void;
								updateElementPosition(t: unknown, i: unknown): void;
								updateTransform(): void;
								updateZ(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_game: Network["_playerDataProvider"]["_player"]["game"];
								_localBounds: unknown /* too deep */;
								_localBoundsRect: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								anchor: unknown /* too deep */;
								bounds: unknown /* too deep */;
								children: unknown /* too deep */;
								events: unknown /* too deep */;
								game: Network["_playerDataProvider"]["_player"]["game"];
								localTransform: unknown /* too deep */;
								metricsManager: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_metricsManager"];
								onDestroy: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"];
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								world: unknown /* too deep */;
								worldGamePosition: unknown /* too deep */;
								worldPosition: unknown /* too deep */;
								worldScale: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							children: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["btnGroup"][];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"];
							};
							game: Network["_playerDataProvider"]["_player"]["game"];
							icon: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								_roundPixels: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								exists: boolean;
								fixedToCamera: boolean;
								inputEnabled: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isLoaded: boolean;
								isMask: boolean;
								isSprite: boolean;
								pendingDestroy: boolean;
								renderable: boolean;
								roundPixels: boolean;
								smoothed: boolean;
								sortableChildren: boolean;
								sortDirty: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_cachedTint: number;
								_eventsCount: number;
								_height: number;
								_lastSortedIndex: number;
								_textureID: number;
								_textureTrimmedID: number;
								_tint: number;
								_tintRGB: number;
								_transformID: number;
								_transformTrimmedID: number;
								_width: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								blendMode: number;
								bottom: number;
								cachedTint: number;
								centerX: number;
								centerY: number;
								height: number;
								left: number;
								offsetX: number;
								offsetY: number;
								renderId: number;
								right: number;
								rotation: number;
								tabIndex: number;
								tint: number;
								top: number;
								width: number;
								worldAlpha: number;
								worldRotation: number;
								x: number;
								y: number;
								z: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								frameName: string;
								key: string;
								pluginName: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_mask: null;
								_tintedCanvas: null;
								_tintedTexture: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								loadingTween: null;
								mask: null;
								name: null;
								scaleMax: null;
								scaleMin: null;
								tintedTexture: null;
								transformCallbackContext: null;
								vertexTrimmedData: null;
								forcedHeight: undefined;
								forcedWidth: undefined;
								frame: undefined;
								onTextureLoaded: undefined;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateBounds(): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_onAnchorUpdate(): void;
								_onTextureUpdate(): void;
								_recursivePostUpdateTransform(): void;
								_render(t: unknown): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								_renderCanvas(t: unknown): void;
								_renderWebGL(t: unknown): void;
								addChild(): unknown;
								addChildAt(t: unknown, e: unknown): unknown;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								bringChildToTop(t: unknown): void;
								calculateBounds(): void;
								calculateTrimmedVertices(): unknown;
								calculateVertices(): void;
								checkCallback(): void;
								checkSpriteDimension(): void;
								containerUpdateTransform(): void;
								containsPoint(t: unknown): unknown;
								destroy(): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getChildAt(t: unknown): unknown;
								getChildByName(t: unknown, e: unknown): unknown;
								getChildIndex(t: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void;
								loadTexture(t: unknown, i: unknown): void;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								onChildrenChange(t: unknown): void;
								onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
								removeAllListeners(t: unknown): unknown;
								removeChild(): unknown;
								removeChildAt(t: unknown): unknown;
								removeChildren(t: unknown, e: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								render(t: unknown): void;
								renderAdvanced(t: unknown): void;
								renderAdvancedWebGL(t: unknown): void;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								rotateMiddleBased(t: unknown): void;
								sendChildToBack(t: unknown): void;
								setActive(t: unknown): void;
								setChildIndex(t: unknown, e: unknown): void;
								setFrame(t: unknown): void;
								setParent(t: unknown): unknown;
								setTexture(t: unknown, i: unknown): void;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								sortChildren(): void;
								swapChildren(t: unknown, e: unknown): void;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								update(): void;
								updateFrame(i: unknown): void;
								updateTexture(t: unknown): void;
								updateTransform(): void;
								indices: Uint16Array;
								uvs: Float32Array;
								vertexData: Float32Array;
								_anchor: unknown /* too deep */;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_localBoundsRect: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_texture: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								anchor: unknown /* too deep */;
								animations: unknown /* too deep */;
								bounds: unknown /* too deep */;
								cameraOffset: unknown /* too deep */;
								children: unknown /* too deep */;
								events: unknown /* too deep */;
								game: Network["_playerDataProvider"]["_player"]["game"];
								localTransform: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["btnGroup"];
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								previousPosition: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								tempDisplayObjectParent: unknown /* too deep */;
								texture: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								world: unknown /* too deep */;
								worldPosition: unknown /* too deep */;
								worldScale: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							metricsManager: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_metricsManager"];
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["_tempDisplayObjectParent"];
							text: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								exists: boolean;
								fixedToCamera: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								pendingDestroy: boolean;
								renderable: boolean;
								sortableChildren: boolean;
								sortDirty: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_defaultFontSize: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								bottom: number;
								boundsWidth: number;
								centerX: number;
								centerY: number;
								fontID: number;
								fontSize: number;
								height: number;
								iconOffsetY: number;
								left: number;
								length: number;
								lines: number;
								numberOfLines: number;
								offsetX: number;
								offsetY: number;
								renderId: number;
								right: number;
								rotation: number;
								tabIndex: number;
								top: number;
								width: number;
								worldAlpha: number;
								worldRotation: number;
								x: number;
								y: number;
								z: number;
								zIndex: number;
								_sortProperty: string;
								accessiblePointerEvents: string;
								accessibleType: string;
								alignment: string;
								fontName: string;
								name: string;
								text: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_element: null;
								_enabledFilters: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								lineHeight: undefined;
								monoSpace: undefined;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateBounds(): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_render(t: unknown): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								_renderCanvas(t: unknown): void;
								_renderWebGL(t: unknown): void;
								add(t: unknown, i: unknown): unknown;
								addAt(t: unknown, i: unknown): unknown;
								addChild(): unknown;
								addChildAt(t: unknown, e: unknown): unknown;
								addClickCallback(t: unknown, i: unknown, n: unknown): void;
								addElementClass(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								ascendingSortHandler(t: unknown, i: unknown): unknown;
								bringChildToTop(t: unknown): void;
								calculateBounds(): void;
								callAll(t: unknown, i: unknown): void;
								callbackFromArray(t: unknown, i: unknown): unknown;
								containerUpdateTransform(): void;
								descendingSortHandler(t: unknown, i: unknown): unknown;
								destroy(i: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getAt(t: unknown): unknown;
								getAutomationSignature(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getByName(t: unknown): unknown;
								getChildAt(t: unknown): unknown;
								getChildByName(t: unknown, e: unknown): unknown;
								getChildElements(): unknown;
								getChildIndex(t: unknown): unknown;
								getClassName(): unknown;
								getElement(): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getIndex(t: unknown): unknown;
								getLocalBounds(e: unknown, r: unknown): unknown;
								iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								moveDown(t: unknown): unknown;
								moveUp(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								onChildrenChange(t: unknown): void;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								removeAllListeners(t: unknown): unknown;
								removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
								removeChild(): unknown;
								removeChildAt(t: unknown): unknown;
								removeChildren(t: unknown, e: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								render(t: unknown): void;
								renderAdvanced(t: unknown): void;
								renderAdvancedWebGL(t: unknown): void;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								sendChildToBack(t: unknown): void;
								setChildIndex(t: unknown, e: unknown): void;
								setParent(t: unknown): unknown;
								setText(t: unknown): void;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								shouldCreateAndStageElement(): unknown;
								sort(t: unknown, i: unknown): void;
								sortChildren(): void;
								swap(t: unknown, i: unknown): void;
								swapChildren(t: unknown, e: unknown): void;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								update(): void;
								updateElementAttribute(t: unknown, i: unknown): void;
								updateElementAttributes(t: unknown): void;
								updateElementPosition(t: unknown, i: unknown): void;
								updateTransform(): void;
								updateZ(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_game: Network["_playerDataProvider"]["_player"]["game"];
								_localBounds: unknown /* too deep */;
								_localBoundsRect: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								anchor: unknown /* too deep */;
								bounds: unknown /* too deep */;
								children: unknown /* too deep */;
								events: unknown /* too deep */;
								letters: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["btnGroup"];
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								sprites: unknown /* too deep */;
								stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								world: unknown /* too deep */;
								worldGamePosition: unknown /* too deep */;
								worldPosition: unknown /* too deep */;
								worldScale: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["off"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						opaque: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_opaque"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["parent"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["opaque"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						overlay: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_overlay"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["parent"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["overlay"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
						prodigyGame: Network["_playerDataProvider"]["_player"]["game"];
						screenData: unknown /* too deep */[];
						stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
						uiLayer: {
							_accessibleActive: boolean;
							_cacheAsBitmap: boolean;
							_destroyed: boolean;
							accessible: boolean;
							accessibleChildren: boolean;
							buttonMode: boolean;
							cacheAsBitmap: boolean;
							exists: boolean;
							fixedToCamera: boolean;
							interactive: boolean;
							interactiveChildren: boolean;
							isMask: boolean;
							isSprite: boolean;
							pendingDestroy: boolean;
							renderable: boolean;
							sortableChildren: boolean;
							sortDirty: boolean;
							visible: boolean;
							worldVisible: boolean;
							_boundsID: number;
							_eventsCount: number;
							_lastSortedIndex: number;
							_zIndex: number;
							alpha: number;
							angle: number;
							bottom: number;
							centerX: number;
							centerY: number;
							height: number;
							left: number;
							length: number;
							offsetX: number;
							offsetY: number;
							renderId: number;
							right: number;
							rotation: number;
							tabIndex: number;
							top: number;
							width: number;
							worldAlpha: number;
							worldRotation: number;
							x: number;
							y: number;
							z: number;
							zIndex: number;
							_sortProperty: string;
							accessiblePointerEvents: string;
							accessibleType: string;
							name: string;
							_accessibleDiv: null;
							_boundsRect: null;
							_cacheData: null;
							_enabledFilters: null;
							_mask: null;
							accessibleHint: null;
							accessibleTitle: null;
							cursor: null;
							filterArea: null;
							filters: null;
							hitArea: null;
							mask: null;
							_cacheAsBitmapDestroy(t: unknown): void;
							_calculateBounds(): void;
							_calculateCachedBounds(): void;
							_destroyCachedDisplayObject(): void;
							_getCachedLocalBounds(): unknown;
							_initCachedDisplayObject(t: unknown): void;
							_initCachedDisplayObjectCanvas(t: unknown): void;
							_recursivePostUpdateTransform(): void;
							_render(t: unknown): void;
							_renderCached(t: unknown): void;
							_renderCachedCanvas(t: unknown): void;
							_renderCanvas(t: unknown): void;
							_renderWebGL(t: unknown): void;
							add(t: unknown, i: unknown): unknown;
							addAt(t: unknown, i: unknown): unknown;
							addChild(): unknown;
							addChildAt(t: unknown, e: unknown): unknown;
							addListener(t: unknown, e: unknown, r: unknown): unknown;
							ascendingSortHandler(t: unknown, i: unknown): unknown;
							bringChildToTop(t: unknown): void;
							calculateBounds(): void;
							callAll(t: unknown, i: unknown): void;
							callbackFromArray(t: unknown, i: unknown): unknown;
							containerUpdateTransform(): void;
							descendingSortHandler(t: unknown, i: unknown): unknown;
							destroy(i: unknown): void;
							disableTempParent(t: unknown): void;
							displayObjectUpdateTransform(): void;
							emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
							enableTempParent(): unknown;
							eventNames(): unknown;
							getAt(t: unknown): unknown;
							getBounds(t: unknown, e: unknown): unknown;
							getByName(t: unknown): unknown;
							getChildAt(t: unknown): unknown;
							getChildByName(t: unknown, e: unknown): unknown;
							getChildIndex(t: unknown): unknown;
							getGlobalPosition(t: unknown, e: unknown): unknown;
							getIndex(t: unknown): unknown;
							getLocalBounds(e: unknown, r: unknown): unknown;
							iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
							listenerCount(t: unknown): unknown;
							listeners(t: unknown): unknown;
							moveDown(t: unknown): unknown;
							moveUp(t: unknown): unknown;
							off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							on(t: unknown, e: unknown, r: unknown): unknown;
							once(t: unknown, e: unknown, r: unknown): unknown;
							onChildrenChange(t: unknown): void;
							remove(t: unknown, i: unknown): unknown;
							removeAll(t: unknown): void;
							removeAllListeners(t: unknown): unknown;
							removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
							removeChild(): unknown;
							removeChildAt(t: unknown): unknown;
							removeChildren(t: unknown, e: unknown): unknown;
							removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
							render(t: unknown): void;
							renderAdvanced(t: unknown): void;
							renderAdvancedWebGL(t: unknown): void;
							renderCanvas(t: unknown): void;
							renderWebGL(t: unknown): void;
							sendChildToBack(t: unknown): void;
							setChildIndex(t: unknown, e: unknown): void;
							setParent(t: unknown): unknown;
							setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
							sort(t: unknown, i: unknown): void;
							sortChildren(): void;
							swap(t: unknown, i: unknown): void;
							swapChildren(t: unknown, e: unknown): void;
							toGlobal(t: unknown, e: unknown, r: unknown): unknown;
							toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
							update(): void;
							updateTransform(): void;
							updateZ(): void;
							_bounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_events: {};
							_game: Network["_playerDataProvider"]["_player"]["game"];
							_localBounds: {
								maxX: number;
								maxY: number;
								minX: number;
								minY: number;
								updateID: number;
								rect: null;
								addBounds(t: unknown): void;
								addBoundsArea(t: unknown, e: unknown): void;
								addBoundsMask(t: unknown, e: unknown): void;
								addBoundsMatrix(t: unknown, e: unknown): void;
								addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
								addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								addPoint(t: unknown): void;
								addQuad(t: unknown): void;
								addVertexData(t: unknown, e: unknown, r: unknown): void;
								addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
								addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
								clear(): void;
								getRectangle(t: unknown): unknown;
								isEmpty(): unknown;
								pad(t: unknown, e: unknown): void;
							};
							_localBoundsRect: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							_tempDisplayObjectParent: {
								_accessibleActive: boolean;
								_cacheAsBitmap: boolean;
								_destroyed: boolean;
								accessible: boolean;
								accessibleChildren: boolean;
								buttonMode: boolean;
								cacheAsBitmap: boolean;
								interactive: boolean;
								interactiveChildren: boolean;
								isMask: boolean;
								isSprite: boolean;
								renderable: boolean;
								visible: boolean;
								worldVisible: boolean;
								_boundsID: number;
								_eventsCount: number;
								_lastSortedIndex: number;
								_zIndex: number;
								alpha: number;
								angle: number;
								renderId: number;
								rotation: number;
								tabIndex: number;
								worldAlpha: number;
								x: number;
								y: number;
								zIndex: number;
								accessiblePointerEvents: string;
								accessibleType: string;
								_accessibleDiv: null;
								_boundsRect: null;
								_cacheData: null;
								_enabledFilters: null;
								_localBounds: null;
								_localBoundsRect: null;
								_mask: null;
								accessibleHint: null;
								accessibleTitle: null;
								cursor: null;
								filterArea: null;
								filters: null;
								hitArea: null;
								mask: null;
								name: null;
								parent: null;
								sortDirty: null;
								_cacheAsBitmapDestroy(t: unknown): void;
								_calculateCachedBounds(): void;
								_destroyCachedDisplayObject(): void;
								_getCachedLocalBounds(): unknown;
								_initCachedDisplayObject(t: unknown): void;
								_initCachedDisplayObjectCanvas(t: unknown): void;
								_recursivePostUpdateTransform(): void;
								_renderCached(t: unknown): void;
								_renderCachedCanvas(t: unknown): void;
								addListener(t: unknown, e: unknown, r: unknown): unknown;
								destroy(t: unknown): void;
								disableTempParent(t: unknown): void;
								displayObjectUpdateTransform(): void;
								emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
								enableTempParent(): unknown;
								eventNames(): unknown;
								getBounds(t: unknown, e: unknown): unknown;
								getGlobalPosition(t: unknown, e: unknown): unknown;
								getLocalBounds(t: unknown): unknown;
								listenerCount(t: unknown): unknown;
								listeners(t: unknown): unknown;
								off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								on(t: unknown, e: unknown, r: unknown): unknown;
								once(t: unknown, e: unknown, r: unknown): unknown;
								removeAllListeners(t: unknown): unknown;
								removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
								renderCanvas(t: unknown): void;
								renderWebGL(t: unknown): void;
								setParent(t: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toGlobal(t: unknown, e: unknown, r: unknown): unknown;
								toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
								updateTransform(): void;
								_bounds: unknown /* too deep */;
								_events: unknown /* too deep */;
								_tempDisplayObjectParent: unknown /* too deep */;
								_trackedPointers: unknown /* too deep */;
								localTransform: unknown /* too deep */;
								pivot: unknown /* too deep */;
								position: unknown /* too deep */;
								scale: unknown /* too deep */;
								skew: unknown /* too deep */;
								tempDisplayObjectParent: unknown /* too deep */;
								trackedPointers: unknown /* too deep */;
								transform: unknown /* too deep */;
								worldTransform: unknown /* too deep */;
							};
							_trackedPointers: {};
							anchor: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							bounds: {
								bottom: number;
								height: number;
								left: number;
								right: number;
								top: number;
								type: number;
								width: number;
								x: number;
								y: number;
								ceil(t: unknown, e: unknown): unknown;
								clone(): unknown;
								contains(t: unknown, e: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								enlarge(t: unknown): unknown;
								fit(t: unknown): unknown;
								pad(t: unknown, e: unknown): unknown;
							};
							children: unknown /* too deep */[];
							events: {
								destroy(): void;
								onAddedToGroup: unknown /* too deep */;
								onAnimationComplete: unknown /* too deep */;
								onAnimationLoop: unknown /* too deep */;
								onAnimationStart: unknown /* too deep */;
								onDestroy: unknown /* too deep */;
								onDragStart: unknown /* too deep */;
								onDragStop: unknown /* too deep */;
								onDragUpdate: unknown /* too deep */;
								onEnterBounds: unknown /* too deep */;
								onInputDown: unknown /* too deep */;
								onInputOut: unknown /* too deep */;
								onInputOver: unknown /* too deep */;
								onInputUp: unknown /* too deep */;
								onOutOfBounds: unknown /* too deep */;
								onRemovedFromGroup: unknown /* too deep */;
								onRemovedFromWorld: unknown /* too deep */;
								parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"];
							};
							gameObjectRef: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_uiLayer"];
							localTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
							onDestroy: {
								_shouldPropagate: boolean;
								active: boolean;
								memorize: boolean;
								_addBinding(t: unknown): void;
								_boundDispatch(): unknown;
								_indexOfListener(t: unknown, i: unknown): unknown;
								add(t: unknown, i: unknown, n: unknown): unknown;
								addOnce(t: unknown, i: unknown, n: unknown): unknown;
								boundDispatch(): unknown;
								dispatch(): void;
								dispose(): void;
								forget(): void;
								getNumListeners(): unknown;
								halt(): void;
								has(t: unknown, i: unknown): unknown;
								registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
								remove(t: unknown, i: unknown): unknown;
								removeAll(t: unknown): void;
								toString(): unknown;
								validateListener(t: unknown, i: unknown): void;
								_bindings: unknown /* too deep */;
								bindings: unknown /* too deep */;
							};
							parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["background"]["parent"];
							pivot: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							position: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							scale: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							skew: {
								_x: number;
								_y: number;
								x: number;
								y: number;
								cb(): void;
								clone(e: unknown, r: unknown): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
								scope: unknown /* too deep */;
							};
							stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
							tempDisplayObjectParent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["_tempDisplayObjectParent"];
							trackedPointers: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["_trackedPointers"];
							transform: {
								_currentLocalID: number;
								_cx: number;
								_cy: number;
								_localID: number;
								_parentID: number;
								_rotation: number;
								_sx: number;
								_sy: number;
								_worldID: number;
								rotation: number;
								onChange(): void;
								setFromMatrix(t: unknown): void;
								updateLocalTransform(): void;
								updateSkew(): void;
								updateTransform(t: unknown): void;
								localTransform: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["localTransform"];
								pivot: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["pivot"];
								position: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["position"];
								scale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["scale"];
								skew: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["skew"];
								worldTransform: unknown /* too deep */;
							};
							world: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldGamePosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldPosition: {
								x: number;
								y: number;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								equals(t: unknown): unknown;
								set(t: unknown, e: unknown): unknown;
							};
							worldScale: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["uiLayer"]["scale"];
							worldTransform: {
								a: number;
								b: number;
								c: number;
								d: number;
								tx: number;
								ty: number;
								array: null;
								append(t: unknown): unknown;
								apply(t: unknown, e: unknown): unknown;
								applyInverse(t: unknown, e: unknown): unknown;
								clone(): unknown;
								copy(t: unknown): unknown;
								copyFrom(t: unknown): unknown;
								copyTo(t: unknown): unknown;
								decompose(t: unknown): unknown;
								fromArray(t: unknown): void;
								identity(): unknown;
								invert(): unknown;
								prepend(t: unknown): unknown;
								rotate(t: unknown): unknown;
								scale(t: unknown, e: unknown): unknown;
								set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
								setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
								toArray(t: unknown, e: unknown): unknown;
								translate(t: unknown, e: unknown): unknown;
							};
						};
					};
					_initArgs: never[];
					_onStateChange: {
						_shouldPropagate: boolean;
						active: boolean;
						memorize: boolean;
						_addBinding(t: unknown): void;
						_boundDispatch(): unknown;
						_indexOfListener(t: unknown, i: unknown): unknown;
						add(t: unknown, i: unknown, n: unknown): unknown;
						addOnce(t: unknown, i: unknown, n: unknown): unknown;
						boundDispatch(): unknown;
						dispatch(): void;
						dispose(): void;
						forget(): void;
						getNumListeners(): unknown;
						halt(): void;
						has(t: unknown, i: unknown): unknown;
						registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
						remove(t: unknown, i: unknown): unknown;
						removeAll(t: unknown): void;
						toString(): unknown;
						validateListener(t: unknown, i: unknown): void;
						_bindings: never[];
						bindings: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_onStateChange"]["_bindings"];
					};
					game: Network["_playerDataProvider"]["_player"]["game"];
					onStateChange: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_onStateChange"];
				};
				_time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
				_tweens: {
					add(t: unknown, i: unknown, n: unknown): unknown;
					create(t: unknown, i: unknown, n: unknown): unknown;
					destroy(): void;
					findOwnerForTween(t: unknown): unknown;
					getAll(): unknown;
					pauseAll(): void;
					remove(t: unknown): void;
					removeAll(): void;
					removeAllFromOwner(t: unknown): void;
					removeFrom(t: unknown, i: unknown): void;
					removeTweenFromOwner(t: unknown): unknown;
					resumeAll(): void;
					update(): unknown;
					_owners: Map<{ _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isActive: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; selected: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; iconSide: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callback(): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; deselect(): void; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; handleDestroy(): void; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onDebugAutoClick(t: unknown): void; onDown(): void; onGetUIElement(t: unknown): unknown; onOut(): void; onOver(): void; onUp(): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; select(): void; sendChildToBack(t: unknown): void; setActive(): void; setChildIndex(t: unknown, e: unknown): void; setEnabled(t: unknown): void; setIcon(t: unknown): void; setInactive(): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; tintActive(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _events: {}; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: { maxX: number; maxY: number; minX: number; minY: number; updateID: number; rect: null; addBounds(t: unknown): void; addBoundsArea(t: unknown, e: unknown): void; addBoundsMask(t: unknown, e: unknown): void; addBoundsMatrix(t: unknown, e: unknown): void; addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; addPoint(t: unknown): void; addQuad(t: unknown): void; addVertexData(t: unknown, e: unknown, r: unknown): void; addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void; addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void; clear(): void; getRectangle(t: unknown): unknown; isEmpty(): unknown; pad(t: unknown, e: unknown): void; }; _localBoundsRect: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; _tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _trackedPointers: {}; anchor: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; arrow: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; vertexTrimmedData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _gsap: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; bg: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; input: unknown /* too deep */; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; bounds: { bottom: number; height: number; left: number; right: number; top: number; type: number; width: number; x: number; y: number; ceil(t: unknown, e: unknown): unknown; clone(): unknown; contains(t: unknown, e: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; enlarge(t: unknown): unknown; fit(t: unknown): unknown; pad(t: unknown, e: unknown): unknown; }; btnGroup: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; localTransform: unknown /* too deep */; metricsManager: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_metricsManager"]; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; children: unknown /* too deep */[]; events: { destroy(): void; onAddedToGroup: unknown /* too deep */; onAnimationComplete: unknown /* too deep */; onAnimationLoop: unknown /* too deep */; onAnimationStart: unknown /* too deep */; onDestroy: unknown /* too deep */; onDragStart: unknown /* too deep */; onDragStop: unknown /* too deep */; onDragUpdate: unknown /* too deep */; onEnterBounds: unknown /* too deep */; onInputDown: unknown /* too deep */; onInputOut: unknown /* too deep */; onInputOver: unknown /* too deep */; onInputUp: unknown /* too deep */; onOutOfBounds: unknown /* too deep */; onRemovedFromGroup: unknown /* too deep */; onRemovedFromWorld: unknown /* too deep */; parent: unknown /* too deep */; }; game: Network["_playerDataProvider"]["_player"]["game"]; icon: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _roundPixels: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; inputEnabled: boolean; interactive: boolean; interactiveChildren: boolean; isLoaded: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; roundPixels: boolean; smoothed: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _cachedTint: number; _eventsCount: number; _height: number; _lastSortedIndex: number; _textureID: number; _textureTrimmedID: number; _tint: number; _tintRGB: number; _transformID: number; _transformTrimmedID: number; _width: number; _zIndex: number; alpha: number; angle: number; blendMode: number; bottom: number; cachedTint: number; centerX: number; centerY: number; height: number; left: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; tint: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; frameName: string; key: string; pluginName: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _mask: null; _tintedCanvas: null; _tintedTexture: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; loadingTween: null; mask: null; name: null; scaleMax: null; scaleMin: null; tintedTexture: null; transformCallbackContext: null; vertexTrimmedData: null; forcedHeight: undefined; forcedWidth: undefined; frame: undefined; onTextureLoaded: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _onAnchorUpdate(): void; _onTextureUpdate(): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; calculateTrimmedVertices(): unknown; calculateVertices(): void; checkCallback(): void; checkSpriteDimension(): void; containerUpdateTransform(): void; containsPoint(t: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; loadNewTexture(t: unknown, i: unknown, n: unknown, e: unknown): void; loadTexture(t: unknown, i: unknown): void; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onSourceAssetLoaded(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; removeAllListeners(t: unknown): unknown; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; rotateMiddleBased(t: unknown): void; sendChildToBack(t: unknown): void; setActive(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setFrame(t: unknown): void; setParent(t: unknown): unknown; setTexture(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sortChildren(): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateFrame(i: unknown): void; updateTexture(t: unknown): void; updateTransform(): void; indices: Uint16Array; uvs: Float32Array; vertexData: Float32Array; _anchor: unknown /* too deep */; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _texture: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; animations: unknown /* too deep */; bounds: unknown /* too deep */; cameraOffset: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; localTransform: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; previousPosition: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; texture: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; localTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; metricsManager: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_metricsManager"]; onDestroy: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; parent: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["contentA"]; pivot: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; position: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; scale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; skew: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; renderable: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; renderId: number; rotation: number; tabIndex: number; worldAlpha: number; x: number; y: number; zIndex: number; accessiblePointerEvents: string; accessibleType: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _localBounds: null; _localBoundsRect: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; name: null; parent: null; sortDirty: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; destroy(t: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getBounds(t: unknown, e: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getLocalBounds(t: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; updateTransform(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; worldTransform: unknown /* too deep */; }; text: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _defaultFontSize: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; boundsWidth: number; centerX: number; centerY: number; fontID: number; fontSize: number; height: number; iconOffsetY: number; left: number; length: number; lines: number; numberOfLines: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; alignment: string; fontName: string; name: string; text: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; lineHeight: undefined; monoSpace: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addClickCallback(t: unknown, i: unknown, n: unknown): void; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setText(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: Network["_playerDataProvider"]["_player"]["game"]; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; letters: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; sprites: unknown /* too deep */; stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"]; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; trackedPointers: {}; transform: { _currentLocalID: number; _cx: number; _cy: number; _localID: number; _parentID: number; _rotation: number; _sx: number; _sy: number; _worldID: number; rotation: number; onChange(): void; setFromMatrix(t: unknown): void; updateLocalTransform(): void; updateSkew(): void; updateTransform(t: unknown): void; localTransform: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; worldTransform: unknown /* too deep */; }; world: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldGamePosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldPosition: { x: number; y: number; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; }; worldScale: { _x: number; _y: number; x: number; y: number; cb(): void; clone(e: unknown, r: unknown): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; equals(t: unknown): unknown; set(t: unknown, e: unknown): unknown; scope: unknown /* too deep */; }; worldTransform: { a: number; b: number; c: number; d: number; tx: number; ty: number; array: null; append(t: unknown): unknown; apply(t: unknown, e: unknown): unknown; applyInverse(t: unknown, e: unknown): unknown; clone(): unknown; copy(t: unknown): unknown; copyFrom(t: unknown): unknown; copyTo(t: unknown): unknown; decompose(t: unknown): unknown; fromArray(t: unknown): void; identity(): unknown; invert(): unknown; prepend(t: unknown): unknown; rotate(t: unknown): unknown; scale(t: unknown, e: unknown): unknown; set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; toArray(t: unknown, e: unknown): unknown; translate(t: unknown, e: unknown): unknown; }; }, Set<{ isDestroyed: boolean; isPaused: boolean; isRunning: boolean; killed: boolean; pendingDelete: boolean; reverse: boolean; timeScale: number; totalDuration: number; chainedTween: null; chain(): unknown; delay(t: unknown): unknown; destroy(): void; duration(t: unknown): unknown; fixDeprecatedRelativeValues(t: unknown): unknown; from(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; getDelay(): unknown; getDuration(): unknown; getRepeat(): unknown; getYoyo(): unknown; loop(t: unknown): unknown; onCompleteCallback(): void; onUpdateCallback(t: unknown, i: unknown): unknown; pause(): unknown; remove(): void; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; resume(): unknown; start(): unknown; stop(t: unknown): unknown; to(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; yoyo(t: unknown): unknown; _rootTween: unknown /* too deep */; _target: unknown /* too deep */; _timeline: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; manager: Network["_playerDataProvider"]["_player"]["game"]["_tweens"]; onChildComplete: unknown /* too deep */; onDestroy: unknown /* too deep */; onLoop: unknown /* too deep */; onRepeat: unknown /* too deep */; onStart: unknown /* too deep */; onTweenComplete: unknown /* too deep */; onUpdate: unknown /* too deep */; owner: unknown /* too deep */; properties: unknown /* too deep */; target: unknown /* too deep */; }>>;
					_tweens: { isDestroyed: boolean; isPaused: boolean; isRunning: boolean; killed: boolean; pendingDelete: boolean; reverse: boolean; timeScale: number; totalDuration: number; chainedTween: null; chain(): unknown; delay(t: unknown): unknown; destroy(): void; duration(t: unknown): unknown; fixDeprecatedRelativeValues(t: unknown): unknown; from(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; getDelay(): unknown; getDuration(): unknown; getRepeat(): unknown; getYoyo(): unknown; loop(t: unknown): unknown; onCompleteCallback(): void; onUpdateCallback(t: unknown, i: unknown): unknown; pause(): unknown; remove(): void; repeat(t: unknown): unknown; repeatDelay(t: unknown): unknown; resume(): unknown; start(): unknown; stop(t: unknown): unknown; to(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; yoyo(t: unknown): unknown; _rootTween: unknown /* too deep */; _target: unknown /* too deep */; _timeline: unknown /* too deep */; game: Network["_playerDataProvider"]["_player"]["game"]; manager: Network["_playerDataProvider"]["_player"]["game"]["_tweens"]; onChildComplete: unknown /* too deep */; onDestroy: unknown /* too deep */; onLoop: unknown /* too deep */; onRepeat: unknown /* too deep */; onStart: unknown /* too deep */; onTweenComplete: unknown /* too deep */; onUpdate: unknown /* too deep */; owner: unknown /* too deep */; properties: unknown /* too deep */; target: unknown /* too deep */; }[];
					game: Network["_playerDataProvider"]["_player"]["game"];
				};
				add: Network["_playerDataProvider"]["_player"]["game"]["_add"];
				app: Network["_playerDataProvider"]["_player"]["game"]["_app"];
				broadcaster: {
					broadcastIdCount: number;
					addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
					broadcast(t: unknown, i: unknown, n: unknown): unknown;
					clear(): void;
					hashContext(t: unknown): unknown;
					removeAppListener(t: unknown, i: unknown, n: unknown): void;
					callbacks: {
						bId0: {
							"Prodigy.Events.FlyingStars.DONE": (() => void)[];
							"Prodigy.Events.Screen.ADD_CHILD": ((arg0: unknown) => void)[];
							"Prodigy.Events.Screen.ENABLE_BACKGROUND": ((arg0: unknown) => void)[];
							"Prodigy.Events.Screen.ENABLE_CONTENT": ((arg0: unknown) => void)[];
							"Prodigy.Events.Screen.GET_LAYER": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.ANONYMOUS_GAME_COMPLETE_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.ANONYMOUS_GAME_DISCOVERY": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.EXTERNAL_ANALYTICS": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_AVATAR_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_BATTLE_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_COMPLETE_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_DISCOVERY_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_QUESTION_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_SESSION_END_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_SESSION_START_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_SINK_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_SOCIAL_V3": ((arg0: unknown) => void)[];
							"Prodigy.Events.Telemetry.GAME_SOURCE_V3": ((arg0: unknown) => void)[];
						};
						bId2: {
							"Prodigy.Events.Creature.LEVEL_UP": ((arg0: unknown) => void)[];
							"Prodigy.Events.Creature.STARS_ADDED": (() => void)[];
						};
						Card: {
							"Prodigy.Events.FriendsList.CANCEL_REQUEST": ((arg0: unknown) => void)[];
							"Prodigy.Events.FriendsList.REMOVE_FRIEND": ((arg0: unknown) => void)[];
							"Prodigy.Events.FriendsList.SEND_REQUEST": ((arg0: unknown) => void)[];
						};
						FriendsList: {
							"Prodigy.Events.FriendsList.CLEAR_FRIEND_REQUESTS_CACHE": (() => void)[];
							"Prodigy.Events.FriendsList.GET_FRIENDS_LIST": (() => void)[];
							"Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": ((arg0: unknown) => void)[];
							"Prodigy.Events.FriendsList.REMOVE_FRIEND": ((arg0: unknown) => void)[];
						};
						NetworkHandlers: {};
						ProdigyMailer: {
							"Prodigy.Events.Mailer.DELETE_MAIL": ((arg0: unknown) => void)[];
							"Prodigy.Events.Mailer.GET_ALL_MAIL": ((arg0: unknown) => void)[];
							"Prodigy.Events.Mailer.GET_TOTAL_MAIL": ((arg0: unknown) => void)[];
						};
						ProdigyMailerButton: {
							"Prodigy.Events.Mailer.GET_TOTAL_MAIL": ((arg0: unknown) => void)[];
						};
						ProdigyMailView: {
							"Prodigy.Events.Mailer.MARK_AS_READ": ((arg0: unknown) => void)[];
						};
						UI: {
							"Prodigy.Events.House.CLICKED_HOUSE_ICON": (() => void)[];
						};
					};
					game: Network["_playerDataProvider"]["_player"]["game"];
					listeners: {
						bId0: {
							"Prodigy.Events.FlyingStars.DONE": unknown /* too deep */[];
							"Prodigy.Events.Screen.ADD_CHILD": Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"][];
							"Prodigy.Events.Screen.ENABLE_BACKGROUND": Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"][];
							"Prodigy.Events.Screen.ENABLE_CONTENT": Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"][];
							"Prodigy.Events.Screen.GET_LAYER": Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"][];
							"Prodigy.Events.Telemetry.ANONYMOUS_GAME_COMPLETE_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.ANONYMOUS_GAME_DISCOVERY": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.EXTERNAL_ANALYTICS": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_AVATAR_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_BATTLE_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_COMPLETE_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_DISCOVERY_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_QUESTION_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_SESSION_END_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_SESSION_START_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_SINK_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_SOCIAL_V3": unknown /* too deep */[];
							"Prodigy.Events.Telemetry.GAME_SOURCE_V3": unknown /* too deep */[];
						};
						bId2: {
							"Prodigy.Events.Creature.LEVEL_UP": unknown /* too deep */[];
							"Prodigy.Events.Creature.STARS_ADDED": unknown /* too deep */[];
						};
						Card: {
							"Prodigy.Events.FriendsList.CANCEL_REQUEST": unknown /* too deep */[];
							"Prodigy.Events.FriendsList.REMOVE_FRIEND": unknown /* too deep */[];
							"Prodigy.Events.FriendsList.SEND_REQUEST": unknown /* too deep */[];
						};
						FriendsList: {
							"Prodigy.Events.FriendsList.CLEAR_FRIEND_REQUESTS_CACHE": unknown /* too deep */[];
							"Prodigy.Events.FriendsList.GET_FRIENDS_LIST": unknown /* too deep */[];
							"Prodigy.Events.FriendsList.GET_TOTAL_FRIEND_REQUESTS": unknown /* too deep */[];
							"Prodigy.Events.FriendsList.REMOVE_FRIEND": unknown /* too deep */[];
						};
						NetworkHandlers: {};
						ProdigyMailer: {
							"Prodigy.Events.Mailer.DELETE_MAIL": unknown /* too deep */[];
							"Prodigy.Events.Mailer.GET_ALL_MAIL": unknown /* too deep */[];
							"Prodigy.Events.Mailer.GET_TOTAL_MAIL": unknown /* too deep */[];
						};
						ProdigyMailerButton: {
							"Prodigy.Events.Mailer.GET_TOTAL_MAIL": unknown /* too deep */[];
						};
						ProdigyMailView: {
							"Prodigy.Events.Mailer.MARK_AS_READ": unknown /* too deep */[];
						};
						UI: {
							"Prodigy.Events.House.CLICKED_HOUSE_ICON": unknown /* too deep */[];
						};
					};
				};
				cache: Network["_playerDataProvider"]["_player"]["game"]["_cache"];
				config: Network["_playerDataProvider"]["_player"]["game"]["_config"];
				device: Network["_playerDataProvider"]["_player"]["game"]["_device"];
				fps: {
					_isPendingResumeRecordFPS: boolean;
					_record: boolean;
					record: boolean;
					_framerate: number;
					_frames: number;
					_prevTime: number;
					_rollingCount: number;
					_rollingSum: number;
					endFrame(): void;
					getAverageFramerate(): unknown;
					getFramerate(): unknown;
					timeNow(): unknown;
				};
				frameWorkManager: {
					_frameWorkDone: boolean;
					_frameStartTime: number;
					frameBudget: number;
					frameBudgetRemaining: number;
					frameTimeElapsed: number;
					_now(): void;
					awaitFreeTime(t: unknown, i: unknown): void;
					cancelWork(): unknown;
					flushWorkQueue(): void;
					markFrameEnd(): void;
					markFrameStart(): void;
					_workPromises: never[];
				};
				input: Network["_playerDataProvider"]["_player"]["game"]["_input"];
				inputDispatcher: {
					dispatchKeyboardEvent(t: unknown, i: unknown): void;
					dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void;
					dispatchMouseEvent(t: unknown, i: unknown): void;
					game: Network["_playerDataProvider"]["_player"]["game"];
				};
				load: Network["_playerDataProvider"]["_player"]["game"]["_load"];
				onPause: Network["_playerDataProvider"]["_player"]["game"]["_onPause"];
				onResume: Network["_playerDataProvider"]["_player"]["game"]["_onResume"];
				renderer: Network["_playerDataProvider"]["_player"]["game"]["_app"]["renderer"];
				rnd: Network["_playerDataProvider"]["_player"]["game"]["_rnd"];
				scale: Network["_playerDataProvider"]["_player"]["game"]["_scale"];
				seededRandom: {
					frac(t: unknown): unknown;
					pick(t: unknown, i: unknown): unknown;
					shuffleArray(t: unknown, i: unknown): unknown;
					randomDataGenerator: {
						c: number;
						s0: number;
						s1: number;
						s2: number;
						angle(): unknown;
						frac(): unknown;
						hash(t: unknown): unknown;
						integer(): unknown;
						integerInRange(t: unknown, i: unknown): unknown;
						normal(): unknown;
						pick(t: unknown): unknown;
						real(): unknown;
						realInRange(t: unknown, i: unknown): unknown;
						rnd(): unknown;
						shuffle(t: unknown): unknown;
						sign(): unknown;
						sow(t: unknown): void;
						state(t: unknown): unknown;
						uuid(): unknown;
						weightedPick(t: unknown): unknown;
					};
				};
				sound: Network["_playerDataProvider"]["_player"]["game"]["_sound"];
				stage: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
				state: Network["_playerDataProvider"]["_player"]["game"]["_state"];
				time: Network["_playerDataProvider"]["_player"]["game"]["_input"]["activePointer"]["backButton"]["time"];
				tweens: Network["_playerDataProvider"]["_player"]["game"]["_tweens"];
				world: Network["_playerDataProvider"]["_player"]["game"]["_add"]["stage"];
			};
			house: {
				updated: boolean;
				add(t: unknown): void;
				getActive(t: unknown): unknown;
				getActiveCount(): unknown;
				getBackground(): unknown;
				getCurrentHouseTag(): unknown;
				getDataAndClear(): unknown;
				getItemCount(): unknown;
				getItems(): unknown;
				getOwned(t: unknown): unknown;
				getSortedActive(): unknown;
				getUnplacedItems(): unknown;
				hasMaxQuantityOfItem(t: unknown): unknown;
				setActive(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
				setAllInactive(): void;
				setCurrentHouseTag(t: unknown): void;
				setInactive(t: unknown): void;
				setItems(t: unknown): void;
				updateActive(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown): void;
				data: {
					currentHouseTag: string;
					active: { anchorY: number; dx: number; dy: number; ID: number; r: number; x: number; y: number; z: number; stack: unknown /* too deep */; }[];
					bg: {
						active: number;
						own: number[];
					};
					items: {
						1: {
							N: number;
							A: never[];
						};
						13: {
							N: number;
							A: never[];
						};
						14: {
							N: number;
							A: never[];
						};
						17: {
							N: number;
							A: never[];
						};
						18: {
							N: number;
							A: never[];
						};
						3: {
							N: number;
							A: never[];
						};
					};
				};
			};
			kennel: {
				updated: boolean;
				addPet(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
				amountOfPet(t: unknown): unknown;
				canSwapPositions(t: unknown, i: unknown): unknown;
				createNewPet(t: unknown): unknown;
				findEmptyTeamIndex(): unknown;
				findFirstFilledIndex(): unknown;
				getDataAndClear(): unknown;
				getNumPets(t: unknown): unknown;
				getPets(t: unknown): unknown;
				getPetTeamIDs(): unknown;
				getTeamPosition(t: unknown): unknown;
				hasMaxNonMemberPets(): unknown;
				hasPet(t: unknown): unknown;
				isCreatureCurrentPlayer(t: unknown): unknown;
				isFull(): unknown;
				populateKennel(t: unknown): void;
				removeAtTeamPosition(t: unknown): void;
				removePet(t: unknown): void;
				setTeamPosition(t: unknown, i: unknown): void;
				swapTeamPositions(t: unknown, i: unknown): void;
				_encounterInfo: Network["_playerDataProvider"]["_player"]["encounters"];
				_petData: never[];
				_petTeam: null[];
				_timeManager: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["timeManager"];
				data: Network["_playerDataProvider"]["_player"]["kennel"]["_petData"];
				petTeam: Network["_playerDataProvider"]["_player"]["kennel"]["_petTeam"];
				player: Network["_playerDataProvider"]["_player"];
			};
			modifiers: {
				damage: number;
				ignoreElement: number;
				maxHearts: number;
				miss: number;
				barrier: null;
				potion: null;
			};
			name: {
				gender: string;
				generateRandomName(): void;
				getData(): unknown;
				getFirstName(): unknown;
				getFullName(): unknown;
				getName(): unknown;
				getNameWithoutNickname(): unknown;
				init(t: unknown, i: unknown): void;
				initFromProtobuf(t: unknown, i: unknown): void;
				validateNameData(): unknown;
				data: Network["_playerDataProvider"]["_player"]["appearance"]["_name"];
				localizer: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_localizer"];
			};
			onHPChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: never[];
				bindings: Network["_playerDataProvider"]["_player"]["onHPChange"]["_bindings"];
			};
			owners: { id: string; ownerID: string; startDate: string; }[];
			playerParents: never[];
			playerTeachers: { id: string; startDate: string; type: string; }[];
			quests: {
				updated: boolean;
				defeatBoss(t: unknown): void;
				defeatMonster(i: unknown, n: unknown, e: unknown): void;
				getDataAndClear(): unknown;
				setQuests(t: unknown): void;
				data: {};
			};
			state: {
				_updated: boolean;
				updated: boolean;
				get(t: unknown): unknown;
				getCompletedQuests(t: unknown): unknown;
				getDataAndClear(): unknown;
				getDungeonSchema(t: unknown): unknown;
				getDungeonState(t: unknown, i: unknown): unknown;
				getZoneVars(t: unknown, i: unknown, n: unknown): unknown;
				set(t: unknown, i: unknown): void;
				setData(t: unknown): void;
				_dungeonStates: {};
				data: {
					breadcrumbs: {
						FEATURE_BADGES: number;
					};
					dungeons: {
						crystal_caverns: {
							persistentData: {
								bossesStatus: number;
							};
						};
					};
					towers: {
						earthtower: {
							boss: boolean;
							wardenSaved: boolean;
							achievementMonstersCount: number;
							achievementPagesCount: number;
							floors: number;
						};
					};
					tutorial: {
						0: number;
					};
					world: {
						bounties: number[];
						dailyQuests: {
							0: {
								dateId: number;
								questId: number;
								questState: number;
							};
						};
					};
					zone: {
						academy: {
							quest: {
								ID: number;
							};
						};
						house: {
							quest: {
								ID: number;
							};
						};
						lamplight: {
							2: string;
						};
						shiverchill: {
							11: {
								rewards: number;
								date: string;
								flags: unknown /* too deep */;
							};
						};
					};
				};
			};
			tutorial: {
				updated: boolean;
				getDataAndClear(): unknown;
				getMenuValue(t: unknown): unknown;
				getValue(t: unknown, i: unknown, n: unknown): unknown;
				setData(t: unknown): void;
				setMenuValue(t: unknown, i: unknown): void;
				setValue(t: unknown, i: unknown, n: unknown, e: unknown): void;
				data: {
					menus: {};
					zones: {};
				};
			};
		};
		onStatChanged: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: never[];
			bindings: Network["_playerDataProvider"]["onStatChanged"]["_bindings"];
		};
		OnStatChanged: Network["_playerDataProvider"]["onStatChanged"];
		player: Network["_playerDataProvider"]["_player"];
	};
	_sessionTokenAuthProvider: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["_sessionTokenAuth"];
	api: {
		wasSocketConnected: boolean;
		disconnectCountInSession: number;
		reconnectAttemptsCount: number;
		userID: number;
		worldID: number;
		clientVersion: string;
		zone: null;
		acceptFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		addGiftBox(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		assignHandlers(i: unknown, n: unknown, e: unknown): unknown;
		attachStudentUsingClassCode(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		cancelFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		completeAssignment(t: unknown, i: unknown): unknown;
		createCharacter(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		createUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown;
		deleteMail(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		deleteUserFeed(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		emitMessage(t: unknown, i: unknown): unknown;
		genericAjaxError(arg0: unknown): void;
		getAllMail(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
		getCharacter(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		getClassCodes(): unknown;
		getClassLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
		getCurrentClassCode(): unknown;
		getFriendList(t: unknown, i: unknown, n: unknown): unknown;
		getFriendRequestList(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		getGiftBoxes(t: unknown, i: unknown, n: unknown): unknown;
		getSeasonLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
		getTitan(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		getTitans(t: unknown, i: unknown, n: unknown): unknown;
		getTitanUserData(t: unknown, i: unknown, n: unknown): unknown;
		getTotalFriendRequests(t: unknown, i: unknown, n: unknown): unknown;
		getTotalMail(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): unknown;
		getUser(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		getUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown): unknown;
		getUserLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		getUserLikes(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		getUserRank(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		getVideoLessonSignedUrls(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		getWorldList(t: unknown, i: unknown, n: unknown): unknown;
		hitTitan(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		initUserLeaderboard(t: unknown, i: unknown, n: unknown): unknown;
		joinMultiplayerServer(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
		joinZone(t: unknown): void;
		leaveZone(): void;
		likeUserFeed(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		login(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown;
		logout(): void;
		nt(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		openMail(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
		processRequestResponse(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
		quitMatchmaking(t: unknown, i: unknown, n: unknown): unknown;
		rejectFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		removeFriend(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		request(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, a: unknown): unknown;
		saveAnswer(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		sendFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		sendGraphQLRequest(t: unknown, i: unknown): unknown;
		setErrorHandler(t: unknown): void;
		shareUserFeed(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		startMatchmaking(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
		trackConnection(t: unknown): void;
		updateCharacter(t: unknown, i: unknown, n: unknown): unknown;
		updateGiftBox(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		updatePlacementTest(t: unknown): unknown;
		updatePlanStudent(t: unknown, i: unknown, n: unknown): void;
		updatePlayerGrade(t: unknown): unknown;
		updateStrandBasedPlacementTest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		updateUser(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
		_identityAuthProvider: Network["_identityAuthProvider"];
		_jwtAuthProvider: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"];
		_remoteLogger: {
			isLoggingEnabled(): unknown;
			logData(t: unknown, i: unknown): void;
			logStat(t: unknown, i: unknown): void;
			authProvider: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"];
			currentPlayer: Network["_playerDataProvider"];
			featureFlags: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"];
			httpClient: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["_httpClient"];
		};
		_tokenAuthProvider: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["_sessionTokenAuth"];
		defaultHandlers: {};
		defaultSettings: {
			clientVersion: string;
			loader: string;
			root: string;
			version: string;
			url: {
				auth: string;
				education: string;
				events: string;
				friend: string;
				gameAPI: string;
				gameFeed: string;
				leaderboard: string;
				mailer: string;
				matchmaking: string;
				multiplayer: string;
				titan: string;
			};
		};
		game: Network["_playerDataProvider"]["_player"]["game"];
		gameContainer: {
			bind(t: unknown): unknown;
			get(t: unknown): unknown;
			hasBinding(t: unknown): unknown;
			rebind(t: unknown): unknown;
			resolve(t: unknown): unknown;
			unbind(t: unknown): void;
			unbindAll(): void;
			inversifyContainer: {
				guid: string;
				_middleware: null;
				parent: null;
				_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
				_planAndResolve(): unknown;
				applyCustomMetadataReader(t: unknown): void;
				applyMiddleware(): unknown;
				bind(t: unknown): unknown;
				createChild(): unknown;
				get(t: unknown): unknown;
				getAll(t: unknown): unknown;
				getAllNamed(t: unknown, n: unknown): unknown;
				getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
				getNamed(t: unknown, n: unknown): unknown;
				getTagged(t: unknown, n: unknown, e: unknown): unknown;
				isBound(t: unknown): unknown;
				isBoundNamed(t: unknown, n: unknown): unknown;
				isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
				load(): unknown;
				rebind(t: unknown): unknown;
				resolve(n: unknown): unknown;
				restore(): void;
				snapshot(): void;
				unbind(t: unknown): void;
				unbindAll(): void;
				unload(): unknown;
				_bindingDictionary: {
					add(t: unknown, n: unknown): void;
					clone(): unknown;
					get(t: unknown): unknown;
					getMap(): unknown;
					hasKey(t: unknown): unknown;
					remove(t: unknown): void;
					removeByCondition(t: unknown): unknown;
					traverse(t: unknown): void;
					_map: Map<string, unknown /* too deep */[]>;
				};
				_metadataReader: {
					getConstructorMetadata(t: unknown): unknown;
					getPropertiesMetadata(t: unknown): unknown;
				};
				_snapshots: never[];
				options: {
					autoBindInjectable: boolean;
					defaultScope: string;
				};
			};
			SourceContainer: Network["api"]["gameContainer"]["inversifyContainer"];
		};
		httpClient: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["_httpClient"];
		jwtAuthProvider: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"];
		socketInterface: {
			id: null;
			addListener(t: unknown, i: unknown): void;
			connect(t: unknown, i: unknown, n: unknown): void;
			disconnect(): void;
			emitEvent(t: unknown, i: unknown): void;
			isConnected(): unknown;
			removeListener(t: unknown, i: unknown): void;
			setQuery(t: unknown): void;
		};
		urlProvider: {
			getAPIRootUrl(): unknown;
			getCDNRootUrl(): unknown;
			getCortexRootURL(): unknown;
			getLoaderUrl(): unknown;
			getWorkerPath(t: unknown): unknown;
			environmentProvider: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["featureFlags"]["environment"];
		};
	};
	game: Network["_playerDataProvider"]["_player"]["game"];
	jwtAuthProvider: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"];
	metricsManager: Network["_playerDataProvider"]["_player"]["game"]["_state"]["_current"]["_metricsManager"];
	onPlayerJoinedSignal: {
		_shouldPropagate: boolean;
		active: boolean;
		memorize: boolean;
		_addBinding(t: unknown): void;
		_boundDispatch(): unknown;
		_indexOfListener(t: unknown, i: unknown): unknown;
		add(t: unknown, i: unknown, n: unknown): unknown;
		addOnce(t: unknown, i: unknown, n: unknown): unknown;
		boundDispatch(): unknown;
		dispatch(): void;
		dispose(): void;
		forget(): void;
		getNumListeners(): unknown;
		halt(): void;
		has(t: unknown, i: unknown): unknown;
		registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		remove(t: unknown, i: unknown): unknown;
		removeAll(t: unknown): void;
		toString(): unknown;
		validateListener(t: unknown, i: unknown): void;
		_bindings: never[];
		bindings: Network["onPlayerJoinedSignal"]["_bindings"];
	};
	OnPlayerJoinedSignal: Network["onPlayerJoinedSignal"];
	onPlayerLeftSignal: {
		_shouldPropagate: boolean;
		active: boolean;
		memorize: boolean;
		_addBinding(t: unknown): void;
		_boundDispatch(): unknown;
		_indexOfListener(t: unknown, i: unknown): unknown;
		add(t: unknown, i: unknown, n: unknown): unknown;
		addOnce(t: unknown, i: unknown, n: unknown): unknown;
		boundDispatch(): unknown;
		dispatch(): void;
		dispose(): void;
		forget(): void;
		getNumListeners(): unknown;
		halt(): void;
		has(t: unknown, i: unknown): unknown;
		registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		remove(t: unknown, i: unknown): unknown;
		removeAll(t: unknown): void;
		toString(): unknown;
		validateListener(t: unknown, i: unknown): void;
		_bindings: never[];
		bindings: Network["onPlayerLeftSignal"]["_bindings"];
	};
	OnPlayerLeftSignal: Network["onPlayerLeftSignal"];
	onPlayerListSignal: {
		_shouldPropagate: boolean;
		active: boolean;
		memorize: boolean;
		_addBinding(t: unknown): void;
		_boundDispatch(): unknown;
		_indexOfListener(t: unknown, i: unknown): unknown;
		add(t: unknown, i: unknown, n: unknown): unknown;
		addOnce(t: unknown, i: unknown, n: unknown): unknown;
		boundDispatch(): unknown;
		dispatch(): void;
		dispose(): void;
		forget(): void;
		getNumListeners(): unknown;
		halt(): void;
		has(t: unknown, i: unknown): unknown;
		registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		remove(t: unknown, i: unknown): unknown;
		removeAll(t: unknown): void;
		toString(): unknown;
		validateListener(t: unknown, i: unknown): void;
		_bindings: never[];
		bindings: Network["onPlayerListSignal"]["_bindings"];
	};
	OnPlayerListSignal: Network["onPlayerListSignal"];
	onSocketMessage: {
		_shouldPropagate: boolean;
		active: boolean;
		memorize: boolean;
		_addBinding(t: unknown): void;
		_boundDispatch(): unknown;
		_indexOfListener(t: unknown, i: unknown): unknown;
		add(t: unknown, i: unknown, n: unknown): unknown;
		addOnce(t: unknown, i: unknown, n: unknown): unknown;
		boundDispatch(): unknown;
		dispatch(): void;
		dispose(): void;
		forget(): void;
		getNumListeners(): unknown;
		halt(): void;
		has(t: unknown, i: unknown): unknown;
		registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
		remove(t: unknown, i: unknown): unknown;
		removeAll(t: unknown): void;
		toString(): unknown;
		validateListener(t: unknown, i: unknown): void;
		_bindings: never[];
		bindings: Network["onSocketMessage"]["_bindings"];
	};
	OnSocketMessage: Network["onSocketMessage"];
	timeManager: Network["_playerDataProvider"]["_player"]["_remoteLogger"]["authProvider"]["timeManager"];
}