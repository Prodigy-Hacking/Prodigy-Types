export interface Localizer {
	getText(t: unknown): unknown;
	setDataSource(t: unknown): void;
	dataSource: {
		getValue(t: unknown): unknown;
		loadDataFromURL(t: unknown, i: unknown): unknown;
		_httpClient: {
			_baseURI: string;
			clearDefaultResponseHandler(t: unknown): void;
			getBaseURI(): unknown;
			getDefaultHeaders(): unknown;
			getRequestInitData(t: unknown): unknown;
			retryRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sendFetchRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sendRequest(t: unknown): unknown;
			setBaseURI(t: unknown): void;
			setDefaultHeader(t: unknown, i: unknown, n: unknown): void;
			setDefaultResponseHandler(t: unknown, i: unknown, n: unknown): void;
			_defaultHeaders: Map<never, never>;
			_defaultResponseHandler: Map<string, { func(): void; context: { _characterProcessed: boolean; _isTokenExpiredMessageOpen: boolean; characterProcessed: boolean; expiredToken: boolean; hasFailedUpdate: boolean; isActivityDialogOpen: boolean; loggedIn: boolean; processFriendsList: boolean; processPlayer: boolean; saving: boolean; socketConnected: boolean; inactiveTimer: number; lastUpdate: number; _retryTimer: null; offlineMessage: null; offlineTimer: null; saveCallback: null; updateFailedTime: null; acceptFriendRequest(t: unknown, i: unknown, n: unknown): unknown; addGiftBox(t: unknown, i: unknown, n: unknown): unknown; answerQuestion(t: unknown): unknown; attachClassCode(t: unknown, i: unknown, n: unknown): unknown; cancelFriendRequest(t: unknown, i: unknown, n: unknown): unknown; canUseMP(): unknown; completeAssignment(t: unknown): void; createCharacterAppearance(t: unknown, i: unknown, n: unknown, e: unknown): unknown; createUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown; deleteMail(t: unknown, i: unknown, n: unknown): unknown; deleteUserFeed(t: unknown, i: unknown, n: unknown): unknown; emitMessage(t: unknown): unknown; finishPlacement(t: unknown): unknown; generalErrorHandler(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown; getAllMail(t: unknown, i: unknown, n: unknown, e: unknown): void; getCharacter(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; getCharData(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getClassCodes(): unknown; getClassLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getCurrentClassCode(): unknown; getErrorMessage(t: unknown, i: unknown, n: unknown): unknown; getFriendRequestList(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getFriendsList(t: unknown, i: unknown): unknown; getGiftBoxes(t: unknown, i: unknown): unknown; getSeasonLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getTitan(t: unknown, i: unknown, n: unknown): unknown; getTitans(t: unknown, i: unknown): unknown; getTitanUserData(t: unknown, i: unknown): unknown; getTotalFriendRequests(t: unknown, i: unknown): unknown; getTotalMail(t: unknown, i: unknown): unknown; getUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): unknown; getUserLeaderboard(t: unknown, i: unknown): unknown; getUserRank(t: unknown, i: unknown, n: unknown): unknown; getVideoLessonSignedUrls(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getWorldList(t: unknown, i: unknown): unknown; hitTitan(t: unknown, i: unknown, n: unknown): unknown; initGoingOffline(): void; initUserLeaderboard(t: unknown, i: unknown): unknown; joinMultiplayerServer(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; joinSuccess(t: unknown, i: unknown): void; joinZone(t: unknown): void; leaveZone(): void; likeUserFeed(t: unknown, i: unknown, n: unknown): unknown; loadEducation(t: unknown, i: unknown): unknown; login(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; logout(): void; markAsRead(t: unknown, i: unknown, n: unknown, e: unknown): void; nt(t: unknown, i: unknown, n: unknown): unknown; onDisconnect(t: unknown, i: unknown): void; onError(t: unknown, i: unknown): void; onInactivityPopupButtonPress(): void; onMessage(t: unknown): void; onPlayerJoined(t: unknown): void; onPlayerLeft(t: unknown): void; onPlayerList(t: unknown): void; onUpdateCharacterFailure(t: unknown): void; onUpdateCharacterSuccess(t: unknown): void; processCharacterFailure(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; processCharacterSuccess(t: unknown, i: unknown, n: unknown, e: unknown): void; processLoginFailure(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown; processLoginSuccess(t: unknown, i: unknown, n: unknown, e: unknown): void; processUpdate(t: unknown, i: unknown, n: unknown): void; quitMatchmaking(t: unknown, i: unknown): unknown; rejectFriendRequest(t: unknown, i: unknown, n: unknown): unknown; removeFriend(t: unknown, i: unknown, n: unknown): unknown; sendConversionFunnelEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; sendFriendRequest(t: unknown, i: unknown, n: unknown): unknown; sendGiftBoxEvent(): void; sendItemChangeEvent(t: unknown, i: unknown, n: unknown): void; sendZoneEvent(t: unknown): void; setSaveCallback(t: unknown): void; setZone(t: unknown): void; shareUserFeed(t: unknown, i: unknown, n: unknown): unknown; showInactiveDialog(): void; showTokenExpiredPopup(): void; startInactiveTimer(): void; startMatchmaking(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown; stopInactiveTimer(): void; updateCharacter(): unknown; updateGiftBox(t: unknown, i: unknown, n: unknown, e: unknown): unknown; updatePlanStudent(t: unknown): void; updatePlayerGrade(t: unknown): unknown; updateStrandBasedPlacementTest(t: unknown): unknown; updateUser(t: unknown, i: unknown, n: unknown): unknown; versionError(): void; _identityAuthProvider: { userID: number; addAccessTokenBody(t: unknown): void; addAccessTokenHeader(t: unknown): void; addAuthorizationHeader(t: unknown): void; addValuesToBody(t: unknown): void; addValuesToHeader(t: unknown): void; authenticateRequest(t: unknown): void; createAccessTokenBodyClosure(t: unknown): void; createAccessTokenHeaderClosure(t: unknown): void; createAuthorizationHeaderClosure(t: unknown): void; isLoggedIn(): unknown; logout(): void; setAuthorizationData(t: unknown, i: unknown): void; }; _playerDataProvider: { addStars(t: unknown): void; dispatchStatChange(t: unknown, i: unknown, n: unknown): void; getAppearance(): unknown; getBaseHearts(): unknown; getFirstName(): unknown; getLastName(): unknown; getLevel(): unknown; getMiddleName(): unknown; getNickname(): unknown; getPlayer(): unknown; getStars(): unknown; getUserID(): unknown; giveItem(t: unknown, i: unknown, n: unknown): void; hasParentLinkedEmail(): unknown; initialize(t: unknown): void; isMember(): unknown; logout(): void; setSavingEnabled(t: unknown): void; _player: { _isFocusModeEnabled: boolean; _saveEnabled: boolean; appearanceChanged: boolean; earlyBirdLastChance: boolean; hasGrade: boolean; hasUsedTicket: boolean; immortal: boolean; inPVP: boolean; isClassCodeAttached: boolean; isFocusModeEnabled: boolean; isOpponent: boolean; justLeveled: boolean; memberPrompt: boolean; parentalLink: boolean; saveEnabled: boolean; showHealthBar: boolean; tt: boolean; tutorialCompletedThisSession: boolean; updated: boolean; aoaTier: number; broadcastId: number; catchAttempt: number; grade: number; pvpHP: number; spellStreak: number; starsEarned: number; starsReward: number; starsRewardBase: number; starsToProcess: number; userID: number; _locationSelectionType: string; _userDataPlatform: string; curriculumTreeID: string; locationSelectionType: string; parentEmail: string; type: string; userDataPlatform: string; username: string; _goalId: null; chatID: null; coOpTeam: null; currentVideoSkillId: null; danceID: null; emoteID: null; goalId: null; lastVisited: null; memberShareDate: null; primaryParentID: null; source: null; transformID: null; memberEndDate: undefined; memberStartDate: undefined; team: undefined; addAsset(t: unknown): void; addAssets(t: unknown): void; addBattle(): void; addBountyScore(t: unknown): void; addLoss(): void; addSpell(t: unknown): void; addStars(i: unknown, n: unknown, e: unknown): unknown; addWin(): void; anyPetsAboveLevel(t: unknown): unknown; canCatch(): unknown; canSpin(t: unknown): unknown; castSpell(t: unknown): void; changeCurrentHearts(t: unknown, i: unknown): void; changeCurrentHeartsPercent(t: unknown): void; changeEnergy(t: unknown): void; changeGold(t: unknown, i: unknown): void; checkVersion(): unknown; completeDaily(t: unknown, i: unknown): void; completeTower(t: unknown): void; createDataClone(): unknown; createRandom(): void; diffAttackSlots(t: unknown): unknown; equip(t: unknown, i: unknown): unknown; evolve(t: unknown, i: unknown): void; forceSaveCharacter(): void; getAllAttacks(): unknown; getAllowsHouseVisitors(): unknown; getArenaPoints(): unknown; getAttacks(t: unknown): unknown; getAvailableEvolutions(): unknown; getBamSpells(t: unknown): unknown; getBaseMaxHearts(i: unknown): unknown; getBattles(): unknown; getBountyScore(): unknown; getColiseum(): unknown; getCurrentBamSpells(): unknown; getCurrentHearts(): unknown; getDailyQuestions(): unknown; getDamageBonus(): unknown; getDataAndClear(): unknown; getDrops(): unknown; getElement(): unknown; getEnergy(): unknown; getEquipmentSpell(t: unknown): unknown; getFirstName(): unknown; getGold(): unknown; getHeartBonus(): unknown; getID(): unknown; getLatestClassIDLegacy(): unknown; getLevel(): unknown; getLevelingCurve(t: unknown): unknown; getLosses(): unknown; getMaxHearts(t: unknown): unknown; getMaxTimeForCurrentMorphMarbleEffect(): unknown; getName(): unknown; getNameWithoutNickname(): unknown; getNativeSpell(t: unknown, i: unknown): unknown; getNumAttacks(): unknown; getNumRelics(): unknown; getPercentToLevel(): unknown; getPlayerClass(): unknown; getPlayerData(): unknown; getRegisterDate(): unknown; getSettings(): unknown; getSpellAssets(): unknown; getSpellStreak(): unknown; getStarReward(): unknown; getStarRewardByDamage(t: unknown): unknown; getStars(): unknown; getStarsToLevel(): unknown; getStatHealth(): unknown; getStatPower(): unknown; getTeamScore(): unknown; getTowerProgress(): unknown; getUpdatedData(t: unknown, i: unknown): unknown; getWins(): unknown; hasCompletedTowerTownTutorial(): unknown; hasCompletedTutorial(): unknown; hasHouseItem(t: unknown): unknown; hasMaxQuantityOfItem(t: unknown, i: unknown): unknown; hasMembership(): unknown; hasValidatedParentEmail(): unknown; hasValidatedTeacherEmail(): unknown; heal(): void; healTeam(t: unknown): void; healTeamMember(t: unknown, i: unknown, n: unknown): void; init(i: unknown): unknown; initEducation(): void; initFromProtobuf(t: unknown): void; isBlockedByDarkTowerMemberGate(): unknown; isItemOwned(t: unknown): unknown; isKnockedOut(): unknown; isPlayerTransformed(): unknown; isPlayingAtSchool(): unknown; onEducationLoaded(t: unknown): void; onTutorialComplete(): void; originalHasMembership(): unknown; processDeserter(): unknown; processStars(): void; registerIncomingAttack(t: unknown, i: unknown, n: unknown, e: unknown): void; removeTeam(): void; resetAccount(): unknown; resetModifiers(): void; rewardMembershipPrizes(t: unknown): unknown; sendInitialGTMEvents(): void; setAllowsHouseVisitors(i: unknown): void; setBGMVolume(t: unknown): void; setColiseum(t: unknown): void; setCurrentHearts(t: unknown, i: unknown): void; setData(t: unknown): void; setDefault(t: unknown, i: unknown): void; setEducation(t: unknown, i: unknown): void; setEnergy(i: unknown): void; setLocation(t: unknown): void; setMembership(t: unknown): void; setParentEmail(t: unknown): void; setPlayerClass(t: unknown): void; setSFXVolume(t: unknown): void; setSpinDate(t: unknown): void; setVoiceVolume(t: unknown): void; setZone(t: unknown): void; spinWheel(t: unknown): void; swapSpells(t: unknown, i: unknown): void; transformPlayer(i: unknown, n: unknown, e: unknown): void; unEquip(t: unknown): unknown; unlockMemberItems(): void; updateMembershipVideoAdData(): void; updateModifier(t: unknown, i: unknown): void; validateLevel(): void; registerDate: Date; _educationData: unknown /* too deep */; _playerContainer: unknown /* too deep */; _remoteLogger: unknown /* too deep */; achievements: unknown /* too deep */; appearance: unknown /* too deep */; backpack: unknown /* too deep */; classIDs: unknown /* too deep */; daily: unknown /* too deep */; dailyQuestions: unknown /* too deep */; data: unknown /* too deep */; educationData: unknown /* too deep */; encounters: unknown /* too deep */; equipment: unknown /* too deep */; game: unknown /* too deep */; house: unknown /* too deep */; kennel: unknown /* too deep */; modifiers: unknown /* too deep */; name: unknown /* too deep */; onHPChange: unknown /* too deep */; owners: unknown /* too deep */; playerContainer: unknown /* too deep */; playerParents: unknown /* too deep */; playerTeachers: unknown /* too deep */; quests: unknown /* too deep */; state: unknown /* too deep */; tutorial: unknown /* too deep */; world: unknown /* too deep */; }; onStatChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; OnStatChanged: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; player: { _isFocusModeEnabled: boolean; _saveEnabled: boolean; appearanceChanged: boolean; earlyBirdLastChance: boolean; hasGrade: boolean; hasUsedTicket: boolean; immortal: boolean; inPVP: boolean; isClassCodeAttached: boolean; isFocusModeEnabled: boolean; isOpponent: boolean; justLeveled: boolean; memberPrompt: boolean; parentalLink: boolean; saveEnabled: boolean; showHealthBar: boolean; tt: boolean; tutorialCompletedThisSession: boolean; updated: boolean; aoaTier: number; broadcastId: number; catchAttempt: number; grade: number; pvpHP: number; spellStreak: number; starsEarned: number; starsReward: number; starsRewardBase: number; starsToProcess: number; userID: number; _locationSelectionType: string; _userDataPlatform: string; curriculumTreeID: string; locationSelectionType: string; parentEmail: string; type: string; userDataPlatform: string; username: string; _goalId: null; chatID: null; coOpTeam: null; currentVideoSkillId: null; danceID: null; emoteID: null; goalId: null; lastVisited: null; memberShareDate: null; primaryParentID: null; source: null; transformID: null; memberEndDate: undefined; memberStartDate: undefined; team: undefined; addAsset(t: unknown): void; addAssets(t: unknown): void; addBattle(): void; addBountyScore(t: unknown): void; addLoss(): void; addSpell(t: unknown): void; addStars(i: unknown, n: unknown, e: unknown): unknown; addWin(): void; anyPetsAboveLevel(t: unknown): unknown; canCatch(): unknown; canSpin(t: unknown): unknown; castSpell(t: unknown): void; changeCurrentHearts(t: unknown, i: unknown): void; changeCurrentHeartsPercent(t: unknown): void; changeEnergy(t: unknown): void; changeGold(t: unknown, i: unknown): void; checkVersion(): unknown; completeDaily(t: unknown, i: unknown): void; completeTower(t: unknown): void; createDataClone(): unknown; createRandom(): void; diffAttackSlots(t: unknown): unknown; equip(t: unknown, i: unknown): unknown; evolve(t: unknown, i: unknown): void; forceSaveCharacter(): void; getAllAttacks(): unknown; getAllowsHouseVisitors(): unknown; getArenaPoints(): unknown; getAttacks(t: unknown): unknown; getAvailableEvolutions(): unknown; getBamSpells(t: unknown): unknown; getBaseMaxHearts(i: unknown): unknown; getBattles(): unknown; getBountyScore(): unknown; getColiseum(): unknown; getCurrentBamSpells(): unknown; getCurrentHearts(): unknown; getDailyQuestions(): unknown; getDamageBonus(): unknown; getDataAndClear(): unknown; getDrops(): unknown; getElement(): unknown; getEnergy(): unknown; getEquipmentSpell(t: unknown): unknown; getFirstName(): unknown; getGold(): unknown; getHeartBonus(): unknown; getID(): unknown; getLatestClassIDLegacy(): unknown; getLevel(): unknown; getLevelingCurve(t: unknown): unknown; getLosses(): unknown; getMaxHearts(t: unknown): unknown; getMaxTimeForCurrentMorphMarbleEffect(): unknown; getName(): unknown; getNameWithoutNickname(): unknown; getNativeSpell(t: unknown, i: unknown): unknown; getNumAttacks(): unknown; getNumRelics(): unknown; getPercentToLevel(): unknown; getPlayerClass(): unknown; getPlayerData(): unknown; getRegisterDate(): unknown; getSettings(): unknown; getSpellAssets(): unknown; getSpellStreak(): unknown; getStarReward(): unknown; getStarRewardByDamage(t: unknown): unknown; getStars(): unknown; getStarsToLevel(): unknown; getStatHealth(): unknown; getStatPower(): unknown; getTeamScore(): unknown; getTowerProgress(): unknown; getUpdatedData(t: unknown, i: unknown): unknown; getWins(): unknown; hasCompletedTowerTownTutorial(): unknown; hasCompletedTutorial(): unknown; hasHouseItem(t: unknown): unknown; hasMaxQuantityOfItem(t: unknown, i: unknown): unknown; hasMembership(): unknown; hasValidatedParentEmail(): unknown; hasValidatedTeacherEmail(): unknown; heal(): void; healTeam(t: unknown): void; healTeamMember(t: unknown, i: unknown, n: unknown): void; init(i: unknown): unknown; initEducation(): void; initFromProtobuf(t: unknown): void; isBlockedByDarkTowerMemberGate(): unknown; isItemOwned(t: unknown): unknown; isKnockedOut(): unknown; isPlayerTransformed(): unknown; isPlayingAtSchool(): unknown; onEducationLoaded(t: unknown): void; onTutorialComplete(): void; originalHasMembership(): unknown; processDeserter(): unknown; processStars(): void; registerIncomingAttack(t: unknown, i: unknown, n: unknown, e: unknown): void; removeTeam(): void; resetAccount(): unknown; resetModifiers(): void; rewardMembershipPrizes(t: unknown): unknown; sendInitialGTMEvents(): void; setAllowsHouseVisitors(i: unknown): void; setBGMVolume(t: unknown): void; setColiseum(t: unknown): void; setCurrentHearts(t: unknown, i: unknown): void; setData(t: unknown): void; setDefault(t: unknown, i: unknown): void; setEducation(t: unknown, i: unknown): void; setEnergy(i: unknown): void; setLocation(t: unknown): void; setMembership(t: unknown): void; setParentEmail(t: unknown): void; setPlayerClass(t: unknown): void; setSFXVolume(t: unknown): void; setSpinDate(t: unknown): void; setVoiceVolume(t: unknown): void; setZone(t: unknown): void; spinWheel(t: unknown): void; swapSpells(t: unknown, i: unknown): void; transformPlayer(i: unknown, n: unknown, e: unknown): void; unEquip(t: unknown): unknown; unlockMemberItems(): void; updateMembershipVideoAdData(): void; updateModifier(t: unknown, i: unknown): void; validateLevel(): void; registerDate: Date; _educationData: unknown /* too deep */; _playerContainer: unknown /* too deep */; _remoteLogger: unknown /* too deep */; achievements: unknown /* too deep */; appearance: unknown /* too deep */; backpack: unknown /* too deep */; classIDs: unknown /* too deep */; daily: unknown /* too deep */; dailyQuestions: unknown /* too deep */; data: unknown /* too deep */; educationData: unknown /* too deep */; encounters: unknown /* too deep */; equipment: unknown /* too deep */; game: unknown /* too deep */; house: unknown /* too deep */; kennel: unknown /* too deep */; modifiers: unknown /* too deep */; name: unknown /* too deep */; onHPChange: unknown /* too deep */; owners: unknown /* too deep */; playerContainer: unknown /* too deep */; playerParents: unknown /* too deep */; playerTeachers: unknown /* too deep */; quests: unknown /* too deep */; state: unknown /* too deep */; tutorial: unknown /* too deep */; world: unknown /* too deep */; }; }; _sessionTokenAuthProvider: { _userID: number; _token: string; authenticateRequest(t: unknown): void; getSessionToken(): unknown; getUserID(): unknown; isLoggedIn(): unknown; logout(): void; setSessionToken(t: unknown, i: unknown): void; }; api: { wasSocketConnected: boolean; disconnectCountInSession: number; reconnectAttemptsCount: number; userID: number; worldID: number; clientVersion: string; zone: string; acceptFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown; addGiftBox(t: unknown, i: unknown, n: unknown, e: unknown): unknown; assignHandlers(i: unknown, n: unknown, e: unknown): unknown; attachStudentUsingClassCode(t: unknown, i: unknown, n: unknown, e: unknown): unknown; cancelFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown; completeAssignment(t: unknown, i: unknown): unknown; createCharacter(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; createUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown; deleteMail(t: unknown, i: unknown, n: unknown, e: unknown): unknown; deleteUserFeed(t: unknown, i: unknown, n: unknown, e: unknown): unknown; emitMessage(t: unknown, i: unknown): unknown; genericAjaxError(arg0: unknown): void; getAllMail(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void; getCharacter(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getClassCodes(): unknown; getClassLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown; getCurrentClassCode(): unknown; getFriendList(t: unknown, i: unknown, n: unknown): unknown; getFriendRequestList(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; getGiftBoxes(t: unknown, i: unknown, n: unknown): unknown; getSeasonLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown; getTitan(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getTitans(t: unknown, i: unknown, n: unknown): unknown; getTitanUserData(t: unknown, i: unknown, n: unknown): unknown; getTotalFriendRequests(t: unknown, i: unknown, n: unknown): unknown; getTotalMail(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): unknown; getUser(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; getUserFeed(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown): unknown; getUserLeaderboard(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getUserLikes(t: unknown, i: unknown, n: unknown, e: unknown): unknown; getUserRank(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; getVideoLessonSignedUrls(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; getWorldList(t: unknown, i: unknown, n: unknown): unknown; hitTitan(t: unknown, i: unknown, n: unknown, e: unknown): unknown; initUserLeaderboard(t: unknown, i: unknown, n: unknown): unknown; joinMultiplayerServer(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown; joinZone(t: unknown): void; leaveZone(): void; likeUserFeed(t: unknown, i: unknown, n: unknown, e: unknown): unknown; login(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, u: unknown): unknown; logout(): void; nt(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; openMail(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; processRequestResponse(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void; quitMatchmaking(t: unknown, i: unknown, n: unknown): unknown; rejectFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown; removeFriend(t: unknown, i: unknown, n: unknown, e: unknown): unknown; request(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, a: unknown): unknown; saveAnswer(t: unknown, i: unknown, n: unknown, e: unknown): unknown; sendFriendRequest(t: unknown, i: unknown, n: unknown, e: unknown): unknown; sendGraphQLRequest(t: unknown, i: unknown): unknown; setErrorHandler(t: unknown): void; shareUserFeed(t: unknown, i: unknown, n: unknown, e: unknown): unknown; startMatchmaking(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown; trackConnection(t: unknown): void; updateCharacter(t: unknown, i: unknown, n: unknown): unknown; updateGiftBox(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; updatePlacementTest(t: unknown): unknown; updatePlanStudent(t: unknown, i: unknown, n: unknown): void; updatePlayerGrade(t: unknown): unknown; updateStrandBasedPlacementTest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; updateUser(t: unknown, i: unknown, n: unknown, e: unknown): unknown; _identityAuthProvider: { userID: number; addAccessTokenBody(t: unknown): void; addAccessTokenHeader(t: unknown): void; addAuthorizationHeader(t: unknown): void; addValuesToBody(t: unknown): void; addValuesToHeader(t: unknown): void; authenticateRequest(t: unknown): void; createAccessTokenBodyClosure(t: unknown): void; createAccessTokenHeaderClosure(t: unknown): void; createAuthorizationHeaderClosure(t: unknown): void; isLoggedIn(): unknown; logout(): void; setAuthorizationData(t: unknown, i: unknown): void; }; _jwtAuthProvider: { _renewalFailureWait: number; _renewalTimer: number; authenticateRequest(t: unknown): void; getToken(): unknown; handleErrorCallback(): void; isLoggedIn(): unknown; logout(): void; renewToken(): unknown; setToken(t: unknown): void; validate(t: unknown): unknown; _httpClient: Localizer["dataSource"]["_httpClient"]; _sessionTokenAuth: unknown /* too deep */; timeManager: unknown /* too deep */; }; _remoteLogger: { isLoggingEnabled(): unknown; logData(t: unknown, i: unknown): void; logStat(t: unknown, i: unknown): void; authProvider: unknown /* too deep */; currentPlayer: unknown /* too deep */; featureFlags: unknown /* too deep */; httpClient: Localizer["dataSource"]["_httpClient"]; }; _tokenAuthProvider: { _userID: number; _token: string; authenticateRequest(t: unknown): void; getSessionToken(): unknown; getUserID(): unknown; isLoggedIn(): unknown; logout(): void; setSessionToken(t: unknown, i: unknown): void; }; defaultHandlers: {}; defaultSettings: { clientVersion: string; loader: string; root: string; version: string; url: unknown /* too deep */; }; game: { _paused: boolean; _pausedByCode: boolean; isBooted: boolean; paused: boolean; pausedByCode: boolean; transparent: boolean; versioned: boolean; _height: number; _width: number; broadcastId: number; height: number; resolution: number; width: number; clientVersion: string; windowHeight: undefined; windowWidth: undefined; boot(): void; bootSystems(): void; createApp(i: unknown, n: unknown): unknown; createSystems(): void; destroy(): void; focusGain(t: unknown): void; focusLoss(t: unknown): void; gamePaused(t: unknown): void; gameResumed(t: unknown): void; init(): void; pauseGame(t: unknown): void; postUpdate(t: unknown): void; showDebugHeader(): void; toggleFpsGraph(): void; update(i: unknown): void; canvas: HTMLCanvasElement; parent: HTMLCanvasElement; _add: unknown /* too deep */; _app: unknown /* too deep */; _cache: unknown /* too deep */; _config: unknown /* too deep */; _consoleLogger: unknown /* too deep */; _device: unknown /* too deep */; _input: unknown /* too deep */; _load: unknown /* too deep */; _onPause: unknown /* too deep */; _onResume: unknown /* too deep */; _rnd: unknown /* too deep */; _scale: unknown /* too deep */; _sound: unknown /* too deep */; _stage: unknown /* too deep */; _state: unknown /* too deep */; _time: unknown /* too deep */; _tweens: unknown /* too deep */; add: unknown /* too deep */; app: unknown /* too deep */; broadcaster: unknown /* too deep */; cache: unknown /* too deep */; config: unknown /* too deep */; device: unknown /* too deep */; fps: unknown /* too deep */; frameWorkManager: unknown /* too deep */; input: unknown /* too deep */; inputDispatcher: unknown /* too deep */; load: unknown /* too deep */; onPause: unknown /* too deep */; onResume: unknown /* too deep */; renderer: unknown /* too deep */; rnd: unknown /* too deep */; scale: unknown /* too deep */; seededRandom: unknown /* too deep */; sound: unknown /* too deep */; stage: unknown /* too deep */; state: unknown /* too deep */; time: unknown /* too deep */; tweens: unknown /* too deep */; world: unknown /* too deep */; }; gameContainer: { bind(t: unknown): unknown; get(t: unknown): unknown; hasBinding(t: unknown): unknown; rebind(t: unknown): unknown; resolve(t: unknown): unknown; unbind(t: unknown): void; unbindAll(): void; inversifyContainer: unknown /* too deep */; SourceContainer: unknown /* too deep */; }; httpClient: Localizer["dataSource"]["_httpClient"]; jwtAuthProvider: { _renewalFailureWait: number; _renewalTimer: number; authenticateRequest(t: unknown): void; getToken(): unknown; handleErrorCallback(): void; isLoggedIn(): unknown; logout(): void; renewToken(): unknown; setToken(t: unknown): void; validate(t: unknown): unknown; _httpClient: Localizer["dataSource"]["_httpClient"]; _sessionTokenAuth: unknown /* too deep */; timeManager: unknown /* too deep */; }; socketInterface: { id: string; addListener(t: unknown, i: unknown): void; connect(t: unknown, i: unknown, n: unknown): void; disconnect(): void; emitEvent(t: unknown, i: unknown): void; isConnected(): unknown; removeListener(t: unknown, i: unknown): void; setQuery(t: unknown): void; socket: unknown /* too deep */; }; urlProvider: { getAPIRootUrl(): unknown; getCDNRootUrl(): unknown; getCortexRootURL(): unknown; getLoaderUrl(): unknown; getWorkerPath(t: unknown): unknown; environmentProvider: unknown /* too deep */; }; }; game: { _paused: boolean; _pausedByCode: boolean; isBooted: boolean; paused: boolean; pausedByCode: boolean; transparent: boolean; versioned: boolean; _height: number; _width: number; broadcastId: number; height: number; resolution: number; width: number; clientVersion: string; windowHeight: undefined; windowWidth: undefined; boot(): void; bootSystems(): void; createApp(i: unknown, n: unknown): unknown; createSystems(): void; destroy(): void; focusGain(t: unknown): void; focusLoss(t: unknown): void; gamePaused(t: unknown): void; gameResumed(t: unknown): void; init(): void; pauseGame(t: unknown): void; postUpdate(t: unknown): void; showDebugHeader(): void; toggleFpsGraph(): void; update(i: unknown): void; canvas: HTMLCanvasElement; parent: HTMLCanvasElement; _add: { audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown; bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown; existing(t: unknown): unknown; graphics(t: unknown, i: unknown, n: unknown): unknown; group(t: unknown, i: unknown, n: unknown): unknown; image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown; sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown; spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown; sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown; tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; tween(t: unknown, i: unknown, n: unknown): unknown; game: unknown /* too deep */; stage: unknown /* too deep */; }; _app: { _resizeId: null; _resizeTo: null; cancelResize(): void; destroy(e: unknown, r: unknown): void; queueResize(): unknown; render(): void; resize(): void; start(): void; stop(): void; view: HTMLCanvasElement; _ticker: unknown /* too deep */; loader: unknown /* too deep */; renderer: unknown /* too deep */; screen: unknown /* too deep */; stage: unknown /* too deep */; }; _cache: { addBitmapData(t: unknown, i: unknown, n: unknown): unknown; addImage(t: unknown, i: unknown, n: unknown): void; addItem(t: unknown, i: unknown, n: unknown): void; addJSON(t: unknown, i: unknown): void; addRenderTexture(t: unknown, i: unknown): void; addSound(t: unknown, i: unknown): void; addSpine(t: unknown, i: unknown): void; addText(t: unknown, i: unknown): void; addTextureAtlas(t: unknown, i: unknown, n: unknown): void; checkBitmapDataKey(t: unknown): unknown; checkFrameData(t: unknown): unknown; checkImageKey(t: unknown): unknown; checkJSONKey(t: unknown): unknown; checkRenderTextureKey(t: unknown): unknown; checkSoundKey(t: unknown): unknown; checkSpineKey(t: unknown): unknown; checkTextKey(t: unknown): unknown; deleteStaleCache(i: unknown, n: unknown, e: unknown): void; destroy(): void; getBitmapData(t: unknown): unknown; getFrameByName(t: unknown, i: unknown, n: unknown): unknown; getFrameData(t: unknown, i: unknown): unknown; getImage(t: unknown): unknown; getJSON(t: unknown): unknown; getKeys(t: unknown): unknown; getMap(t: unknown): unknown; getRenderTexture(t: unknown): unknown; getSound(t: unknown): unknown; getSpine(t: unknown): unknown; getText(t: unknown): unknown; getTexture(t: unknown, i: unknown): unknown; hasMap(t: unknown): unknown; isSoundDecoded(t: unknown): unknown; removeAllItems(): void; removeAllItemsOfType(t: unknown): void; removeBitmapData(t: unknown): void; removeImage(t: unknown): void; removeItem(t: unknown, i: unknown): void; removeJSON(t: unknown): void; removeRenderTexture(t: unknown): void; removeSound(t: unknown): void; removeSpine(t: unknown): void; removeText(t: unknown): void; removeTextureAtlas(t: unknown): void; _cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>; cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>; _game: unknown /* too deep */; game: unknown /* too deep */; }; _config: { failIfMajorPerformanceCaveat: boolean; roundPixels: boolean; height: number; width: number; parent: string; }; _consoleLogger: { _shouldColorCodeLogs: boolean; _minimumLogLevel: number; _minimumStackTraceLogLevel: number; getLogStyle(t: unknown): unknown; getTextSytle(): unknown; log(t: unknown, i: unknown): void; setColoredLogsEnabled(t: unknown): void; setLogLevel(t: unknown): void; }; _device: { android: boolean; fullscreenKeyboard: boolean; iOS: boolean; isFullScreenSupported: boolean; isInitialized: boolean; pointerLock: boolean; touch: boolean; webAudio: boolean; browser: number; deviceReadyAt: number; os: number; cancelFullscreen: string; requestFullscreen: string; wheelEvent: string; mspointer: undefined; checkFullScreen(): void; dispatchSignals(): void; isAndroidStockBrowser(): unknown; needsTouchUnlock(): unknown; readyCheck(): void; whenReady(t: unknown, i: unknown): void; callbacks: unknown /* too deep */; onInitialized: unknown /* too deep */; }; _input: { enabled: boolean; pollLocked: boolean; recordPointerHistory: boolean; resetLocked: boolean; _pollCounter: number; _x: number; _y: number; doubleTapRate: number; holdRate: number; justPressedRate: number; justReleasedRate: number; maxPointers: number; minPriorityID: number; multiInputOverride: number; pollRate: number; recordLimit: number; recordRate: number; tapRate: number; totalActivePointers: number; totalInactivePointers: number; worldX: number; worldY: number; x: number; y: number; customCandidateHandler: null; customCandidateHandlerContext: null; addMoveCallback(t: unknown, i: unknown): void; addPointer(): unknown; addTouchLockCallback(t: unknown, i: unknown, n: unknown): void; boot(t: unknown): void; clearEnterCallback(): void; countActivePointers(t: unknown): unknown; deleteMoveCallback(t: unknown, i: unknown): void; destroy(): void; executeTouchLockCallbacks(t: unknown, i: unknown): void; getLocalPosition(t: unknown, i: unknown, n: unknown): unknown; getPointer(t: unknown): unknown; getPointerFromId(t: unknown): unknown; getPointerFromIdentifier(t: unknown): unknown; hitTest(t: unknown, i: unknown): unknown; preUpdate(): void; removeTouchLockCallback(t: unknown, i: unknown): unknown; reset(t: unknown): void; resetSpeed(t: unknown, i: unknown): void; setEnterCallback(t: unknown): void; setInteractiveCandidateHandler(t: unknown, i: unknown): void; startPointer(t: unknown): unknown; stopPointer(t: unknown, i: unknown): unknown; update(): void; updateChildren(t: unknown): void; updateInteractiveItems(): void; updatePointer(t: unknown): unknown; hitCanvas: HTMLCanvasElement; hitContext: CanvasRenderingContext2D; _oldPosition: unknown /* too deep */; activePointer: unknown /* too deep */; circle: unknown /* too deep */; game: unknown /* too deep */; interactiveItems: unknown /* too deep */; keyboard: unknown /* too deep */; mouse: unknown /* too deep */; mousePointer: unknown /* too deep */; mouseWheel: unknown /* too deep */; mspointer: unknown /* too deep */; onDown: unknown /* too deep */; onHold: unknown /* too deep */; onPointerMove: unknown /* too deep */; onTap: unknown /* too deep */; onTouchEndEvent: unknown /* too deep */; onTouchStartEvent: unknown /* too deep */; onUp: unknown /* too deep */; pointer1: unknown /* too deep */; pointer2: unknown /* too deep */; pointerLock: unknown /* too deep */; pointers: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; speed: unknown /* too deep */; touch: unknown /* too deep */; }; _load: { isLoading: boolean; _crossOrigin: string; baseURL: string; crossOrigin: string; addFile(t: unknown, i: unknown, n: unknown, e: unknown): void; atlasJSONHash(t: unknown, i: unknown, n: unknown): void; audio(t: unknown, i: unknown, n: unknown, e: unknown): void; destroy(): void; fileCompleteCallback(t: unknown, i: unknown): void; fileStartCallback(t: unknown): void; getMaxParallelDownloads(): unknown; getNumLoadedFiles(): unknown; image(t: unknown, i: unknown, n: unknown, e: unknown): void; json(t: unknown, i: unknown, n: unknown, e: unknown): void; processImage(t: unknown, i: unknown, n: unknown): void; processJSON(t: unknown, i: unknown, n: unknown): void; processScript(t: unknown, i: unknown): void; processSound(t: unknown, i: unknown, n: unknown): void; processSpine(t: unknown, i: unknown, n: unknown): void; processSpritesheet(t: unknown, i: unknown, n: unknown): void; processTextureAtlas(t: unknown, i: unknown, n: unknown): void; reset(t: unknown): void; script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; setupFileCallbacks(t: unknown): void; spine(t: unknown, i: unknown, n: unknown, e: unknown): void; spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void; start(): void; totalQueuedFiles(): unknown; _loader: unknown /* too deep */; _onFileComplete: unknown /* too deep */; _onFileStart: unknown /* too deep */; _onLoadComplete: unknown /* too deep */; loader: unknown /* too deep */; onFileComplete: unknown /* too deep */; onFileStart: unknown /* too deep */; onLoadComplete: unknown /* too deep */; onReset: unknown /* too deep */; }; _onPause: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; _onResume: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; _rnd: { c: number; s0: number; s1: number; s2: number; angle(): unknown; frac(): unknown; hash(t: unknown): unknown; integer(): unknown; integerInRange(t: unknown, i: unknown): unknown; normal(): unknown; pick(t: unknown): unknown; real(): unknown; realInRange(t: unknown, i: unknown): unknown; rnd(): unknown; shuffle(t: unknown): unknown; sign(): unknown; sow(t: unknown): void; state(t: unknown): unknown; uuid(): unknown; weightedPick(t: unknown): unknown; }; _scale: { _booted: boolean; _pageAlignHorizontally: boolean; _pageAlignVertically: boolean; forceLandscape: boolean; forcePortrait: boolean; incorrectOrientation: boolean; isFullScreen: boolean; isLandscape: boolean; isPortrait: boolean; pageAlignHorizontally: boolean; pageAlignVertically: boolean; parentIsWindow: boolean; _fullScreenScaleMode: number; _lastUpdate: number; _scaleMode: number; _updateThrottle: number; _updateThrottleReset: number; aspectRatio: number; currentScaleMode: number; fullScreenScaleMode: number; height: number; scaleMode: number; sourceAspectRatio: number; trackParentInterval: number; width: number; screenOrientation: string; _pendingScaleMode: null; onResizeContext: null; _fullScreenChange(i: unknown): void; _fullScreenError(i: unknown): void; _gameResumed(): void; _orientationChange(i: unknown): void; _windowResize(i: unknown): void; align(t: unknown, i: unknown): void; alignCanvas(t: unknown, i: unknown): void; boot(): void; cleanupCreatedTarget(): void; createFullScreenTarget(): unknown; destroy(): void; forceOrientation(t: unknown, i: unknown): void; fullScreenChange(t: unknown): void; fullScreenError(t: unknown): void; getParentBounds(t: unknown, i: unknown): unknown; orientationChange(t: unknown): void; parseConfig(t: unknown): void; pauseUpdate(): void; prepScreenMode(i: unknown): void; preUpdate(): void; queueUpdate(t: unknown): void; recalculateCanvasOffset(): void; reflowCanvas(): void; reflowGame(): void; refresh(): void; resetCanvas(t: unknown, i: unknown): void; setExactFit(): void; setGameSize(i: unknown, n: unknown): void; setMaximum(): void; setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void; setResizeCallback(t: unknown, i: unknown): void; setShowAll(t: unknown): void; setupScale(t: unknown, i: unknown): void; signalSizeChange(): void; startFullScreen(t: unknown, i: unknown): unknown; stopFullScreen(): unknown; updateDimensions(i: unknown, n: unknown, e: unknown): void; updateLayout(): void; updateOrientationState(): unknown; updateScalingAndBounds(): void; windowResize(t: unknown): void; boundingParent: HTMLDivElement; parentNode: HTMLCanvasElement; _gameSize: unknown /* too deep */; _lastReportedCanvasSize: unknown /* too deep */; _lastReportedGameSize: unknown /* too deep */; _parentBounds: unknown /* too deep */; _tempBounds: unknown /* too deep */; bounds: unknown /* too deep */; canvasOffset: unknown /* too deep */; device: unknown /* too deep */; dom: unknown /* too deep */; enterIncorrectOrientation: unknown /* too deep */; game: unknown /* too deep */; leaveIncorrectOrientation: unknown /* too deep */; margin: unknown /* too deep */; onFullScreenChange: unknown /* too deep */; onFullScreenError: unknown /* too deep */; onFullScreenInit: unknown /* too deep */; onOrientationChange: unknown /* too deep */; onSizeChange: unknown /* too deep */; parentScaleFactor: unknown /* too deep */; scaleFactor: unknown /* too deep */; scaleFactorInverted: unknown /* too deep */; windowConstraints: unknown /* too deep */; }; _sound: { _codeMuted: boolean; _muted: boolean; _watching: boolean; connectToMaster: boolean; mute: boolean; muteOnPause: boolean; noAudio: boolean; touchLocked: boolean; baseLatency: number; channels: number; volume: number; _unlockSource: null; _watchCallback: null; _watchContext: null; _onResumeWebAudioOnClick(): void; _resumeWebAudioOnClick(): void; add(t: unknown, i: unknown, n: unknown, e: unknown): unknown; boot(): void; destroy(): void; pauseAll(): void; play(t: unknown, i: unknown, n: unknown): unknown; remove(t: unknown): unknown; removeAll(): void; removeByKey(t: unknown): unknown; resumeAll(): void; resumeWebAudio(): unknown; setDecodedCallback(t: unknown, i: unknown, n: unknown): void; setMute(): void; setTouchLock(): void; setTouchUnlock(): void; stopAll(): void; unlock(): unknown; unsetMute(): void; update(): void; context: AudioContext; emptyBuffer: AudioBuffer; _sounds: unknown /* too deep */; _watchList: unknown /* too deep */; game: unknown /* too deep */; onMute: unknown /* too deep */; onSoundDecode: unknown /* too deep */; onTouchUnlock: unknown /* too deep */; onUnMute: unknown /* too deep */; onVolumeChange: unknown /* too deep */; sounds: unknown /* too deep */; }; _stage: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; disableVisibilityChange: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _hiddenVar: string; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; camera: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; boot(): void; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; checkVisibility(): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; parseConfig(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setBackgroundColor(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; visibilityChange(t: unknown): unknown; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; _state: { _clearWorld: boolean; current: string; _pendingState: null; add(t: unknown, i: unknown, n: unknown): unknown; boot(): void; clearCurrentState(): void; destroy(): void; get(t: unknown): unknown; getCurrentState(): unknown; loadComplete(): void; pause(): void; preUpdate(): unknown; remove(t: unknown): void; resume(): void; setCurrentState(t: unknown): void; start(t: unknown, i: unknown): void; update(): void; _states: Map<string, unknown /* too deep */>; states: Map<string, unknown /* too deep */>; _current: unknown /* too deep */; _initArgs: unknown /* too deep */; _onStateChange: unknown /* too deep */; game: unknown /* too deep */; onStateChange: unknown /* too deep */; }; _time: { _deltaMS: number; _pauseStarted: number; _prevTimeMS: number; _started: number; _timeMS: number; deltaMS: number; desiredFps: number; pauseDuration: number; prevTimeMS: number; timeMS: number; timeToCall: number; add(t: unknown): unknown; boot(): void; create(t: unknown): unknown; elapsedSecondsSince(t: unknown): unknown; elapsedSince(t: unknown): unknown; gamePaused(): void; gameResumed(): void; removeAll(): void; reset(): void; setTime(t: unknown): void; totalElapsedSeconds(): unknown; update(t: unknown): void; updateTimers(): void; _timers: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; }; _tweens: { add(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown): unknown; destroy(): void; findOwnerForTween(t: unknown): unknown; getAll(): unknown; pauseAll(): void; remove(t: unknown): void; removeAll(): void; removeAllFromOwner(t: unknown): void; removeFrom(t: unknown, i: unknown): void; removeTweenFromOwner(t: unknown): unknown; resumeAll(): void; update(): unknown; _owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>; _tweens: unknown /* too deep */; game: unknown /* too deep */; }; add: { audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown; bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown; existing(t: unknown): unknown; graphics(t: unknown, i: unknown, n: unknown): unknown; group(t: unknown, i: unknown, n: unknown): unknown; image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown; sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown; spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown; sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown; tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; tween(t: unknown, i: unknown, n: unknown): unknown; game: unknown /* too deep */; stage: unknown /* too deep */; }; app: { _resizeId: null; _resizeTo: null; cancelResize(): void; destroy(e: unknown, r: unknown): void; queueResize(): unknown; render(): void; resize(): void; start(): void; stop(): void; view: HTMLCanvasElement; _ticker: unknown /* too deep */; loader: unknown /* too deep */; renderer: unknown /* too deep */; screen: unknown /* too deep */; stage: unknown /* too deep */; }; broadcaster: { broadcastIdCount: number; addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void; broadcast(t: unknown, i: unknown, n: unknown): unknown; clear(): void; hashContext(t: unknown): unknown; removeAppListener(t: unknown, i: unknown, n: unknown): void; callbacks: unknown /* too deep */; game: unknown /* too deep */; listeners: unknown /* too deep */; }; cache: { addBitmapData(t: unknown, i: unknown, n: unknown): unknown; addImage(t: unknown, i: unknown, n: unknown): void; addItem(t: unknown, i: unknown, n: unknown): void; addJSON(t: unknown, i: unknown): void; addRenderTexture(t: unknown, i: unknown): void; addSound(t: unknown, i: unknown): void; addSpine(t: unknown, i: unknown): void; addText(t: unknown, i: unknown): void; addTextureAtlas(t: unknown, i: unknown, n: unknown): void; checkBitmapDataKey(t: unknown): unknown; checkFrameData(t: unknown): unknown; checkImageKey(t: unknown): unknown; checkJSONKey(t: unknown): unknown; checkRenderTextureKey(t: unknown): unknown; checkSoundKey(t: unknown): unknown; checkSpineKey(t: unknown): unknown; checkTextKey(t: unknown): unknown; deleteStaleCache(i: unknown, n: unknown, e: unknown): void; destroy(): void; getBitmapData(t: unknown): unknown; getFrameByName(t: unknown, i: unknown, n: unknown): unknown; getFrameData(t: unknown, i: unknown): unknown; getImage(t: unknown): unknown; getJSON(t: unknown): unknown; getKeys(t: unknown): unknown; getMap(t: unknown): unknown; getRenderTexture(t: unknown): unknown; getSound(t: unknown): unknown; getSpine(t: unknown): unknown; getText(t: unknown): unknown; getTexture(t: unknown, i: unknown): unknown; hasMap(t: unknown): unknown; isSoundDecoded(t: unknown): unknown; removeAllItems(): void; removeAllItemsOfType(t: unknown): void; removeBitmapData(t: unknown): void; removeImage(t: unknown): void; removeItem(t: unknown, i: unknown): void; removeJSON(t: unknown): void; removeRenderTexture(t: unknown): void; removeSound(t: unknown): void; removeSpine(t: unknown): void; removeText(t: unknown): void; removeTextureAtlas(t: unknown): void; _cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>; cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>; _game: unknown /* too deep */; game: unknown /* too deep */; }; config: { failIfMajorPerformanceCaveat: boolean; roundPixels: boolean; height: number; width: number; parent: string; }; device: { android: boolean; fullscreenKeyboard: boolean; iOS: boolean; isFullScreenSupported: boolean; isInitialized: boolean; pointerLock: boolean; touch: boolean; webAudio: boolean; browser: number; deviceReadyAt: number; os: number; cancelFullscreen: string; requestFullscreen: string; wheelEvent: string; mspointer: undefined; checkFullScreen(): void; dispatchSignals(): void; isAndroidStockBrowser(): unknown; needsTouchUnlock(): unknown; readyCheck(): void; whenReady(t: unknown, i: unknown): void; callbacks: unknown /* too deep */; onInitialized: unknown /* too deep */; }; fps: { _isPendingResumeRecordFPS: boolean; _record: boolean; record: boolean; _framerate: number; _frames: number; _prevTime: number; _rollingCount: number; _rollingSum: number; endFrame(): void; getAverageFramerate(): unknown; getFramerate(): unknown; timeNow(): unknown; }; frameWorkManager: { _frameWorkDone: boolean; _frameStartTime: number; frameBudget: number; frameBudgetRemaining: number; frameTimeElapsed: number; _now(): void; awaitFreeTime(t: unknown, i: unknown): void; cancelWork(): unknown; flushWorkQueue(): void; markFrameEnd(): void; markFrameStart(): void; _workPromises: unknown /* too deep */; }; input: { enabled: boolean; pollLocked: boolean; recordPointerHistory: boolean; resetLocked: boolean; _pollCounter: number; _x: number; _y: number; doubleTapRate: number; holdRate: number; justPressedRate: number; justReleasedRate: number; maxPointers: number; minPriorityID: number; multiInputOverride: number; pollRate: number; recordLimit: number; recordRate: number; tapRate: number; totalActivePointers: number; totalInactivePointers: number; worldX: number; worldY: number; x: number; y: number; customCandidateHandler: null; customCandidateHandlerContext: null; addMoveCallback(t: unknown, i: unknown): void; addPointer(): unknown; addTouchLockCallback(t: unknown, i: unknown, n: unknown): void; boot(t: unknown): void; clearEnterCallback(): void; countActivePointers(t: unknown): unknown; deleteMoveCallback(t: unknown, i: unknown): void; destroy(): void; executeTouchLockCallbacks(t: unknown, i: unknown): void; getLocalPosition(t: unknown, i: unknown, n: unknown): unknown; getPointer(t: unknown): unknown; getPointerFromId(t: unknown): unknown; getPointerFromIdentifier(t: unknown): unknown; hitTest(t: unknown, i: unknown): unknown; preUpdate(): void; removeTouchLockCallback(t: unknown, i: unknown): unknown; reset(t: unknown): void; resetSpeed(t: unknown, i: unknown): void; setEnterCallback(t: unknown): void; setInteractiveCandidateHandler(t: unknown, i: unknown): void; startPointer(t: unknown): unknown; stopPointer(t: unknown, i: unknown): unknown; update(): void; updateChildren(t: unknown): void; updateInteractiveItems(): void; updatePointer(t: unknown): unknown; hitCanvas: HTMLCanvasElement; hitContext: CanvasRenderingContext2D; _oldPosition: unknown /* too deep */; activePointer: unknown /* too deep */; circle: unknown /* too deep */; game: unknown /* too deep */; interactiveItems: unknown /* too deep */; keyboard: unknown /* too deep */; mouse: unknown /* too deep */; mousePointer: unknown /* too deep */; mouseWheel: unknown /* too deep */; mspointer: unknown /* too deep */; onDown: unknown /* too deep */; onHold: unknown /* too deep */; onPointerMove: unknown /* too deep */; onTap: unknown /* too deep */; onTouchEndEvent: unknown /* too deep */; onTouchStartEvent: unknown /* too deep */; onUp: unknown /* too deep */; pointer1: unknown /* too deep */; pointer2: unknown /* too deep */; pointerLock: unknown /* too deep */; pointers: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; speed: unknown /* too deep */; touch: unknown /* too deep */; }; inputDispatcher: { dispatchKeyboardEvent(t: unknown, i: unknown): void; dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void; dispatchMouseEvent(t: unknown, i: unknown): void; game: unknown /* too deep */; }; load: { isLoading: boolean; _crossOrigin: string; baseURL: string; crossOrigin: string; addFile(t: unknown, i: unknown, n: unknown, e: unknown): void; atlasJSONHash(t: unknown, i: unknown, n: unknown): void; audio(t: unknown, i: unknown, n: unknown, e: unknown): void; destroy(): void; fileCompleteCallback(t: unknown, i: unknown): void; fileStartCallback(t: unknown): void; getMaxParallelDownloads(): unknown; getNumLoadedFiles(): unknown; image(t: unknown, i: unknown, n: unknown, e: unknown): void; json(t: unknown, i: unknown, n: unknown, e: unknown): void; processImage(t: unknown, i: unknown, n: unknown): void; processJSON(t: unknown, i: unknown, n: unknown): void; processScript(t: unknown, i: unknown): void; processSound(t: unknown, i: unknown, n: unknown): void; processSpine(t: unknown, i: unknown, n: unknown): void; processSpritesheet(t: unknown, i: unknown, n: unknown): void; processTextureAtlas(t: unknown, i: unknown, n: unknown): void; reset(t: unknown): void; script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; setupFileCallbacks(t: unknown): void; spine(t: unknown, i: unknown, n: unknown, e: unknown): void; spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void; start(): void; totalQueuedFiles(): unknown; _loader: unknown /* too deep */; _onFileComplete: unknown /* too deep */; _onFileStart: unknown /* too deep */; _onLoadComplete: unknown /* too deep */; loader: unknown /* too deep */; onFileComplete: unknown /* too deep */; onFileStart: unknown /* too deep */; onLoadComplete: unknown /* too deep */; onReset: unknown /* too deep */; }; onPause: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; onResume: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: unknown /* too deep */; bindings: unknown /* too deep */; }; renderer: { autoDensity: boolean; autoResize: boolean; clearBeforeRender: boolean; preserveDrawingBuffer: boolean; renderingToScreen: boolean; transparent: boolean; _backgroundColor: number; _eventsCount: number; backgroundColor: number; CONTEXT_UID: number; height: number; resolution: number; type: number; width: number; _backgroundColorString: string; addListener(t: unknown, e: unknown, r: unknown): unknown; addSystem(t: unknown, e: unknown): unknown; clear(): void; destroy(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; eventNames(): unknown; generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown; initPlugins(t: unknown): void; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; removeAllListeners(t: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void; reset(): unknown; resize(t: unknown, r: unknown): void; gl: WebGL2RenderingContext; view: HTMLCanvasElement; _backgroundColorRgba: unknown /* too deep */; _events: unknown /* too deep */; _lastObjectRendered: unknown /* too deep */; batch: unknown /* too deep */; context: unknown /* too deep */; extract: unknown /* too deep */; filter: unknown /* too deep */; framebuffer: unknown /* too deep */; geometry: unknown /* too deep */; globalUniforms: unknown /* too deep */; mask: unknown /* too deep */; options: unknown /* too deep */; plugins: unknown /* too deep */; projection: unknown /* too deep */; renderTexture: unknown /* too deep */; runners: unknown /* too deep */; scissor: unknown /* too deep */; screen: unknown /* too deep */; shader: unknown /* too deep */; state: unknown /* too deep */; stencil: unknown /* too deep */; texture: unknown /* too deep */; textureGC: unknown /* too deep */; textureManager: unknown /* too deep */; }; rnd: { c: number; s0: number; s1: number; s2: number; angle(): unknown; frac(): unknown; hash(t: unknown): unknown; integer(): unknown; integerInRange(t: unknown, i: unknown): unknown; normal(): unknown; pick(t: unknown): unknown; real(): unknown; realInRange(t: unknown, i: unknown): unknown; rnd(): unknown; shuffle(t: unknown): unknown; sign(): unknown; sow(t: unknown): void; state(t: unknown): unknown; uuid(): unknown; weightedPick(t: unknown): unknown; }; scale: { _booted: boolean; _pageAlignHorizontally: boolean; _pageAlignVertically: boolean; forceLandscape: boolean; forcePortrait: boolean; incorrectOrientation: boolean; isFullScreen: boolean; isLandscape: boolean; isPortrait: boolean; pageAlignHorizontally: boolean; pageAlignVertically: boolean; parentIsWindow: boolean; _fullScreenScaleMode: number; _lastUpdate: number; _scaleMode: number; _updateThrottle: number; _updateThrottleReset: number; aspectRatio: number; currentScaleMode: number; fullScreenScaleMode: number; height: number; scaleMode: number; sourceAspectRatio: number; trackParentInterval: number; width: number; screenOrientation: string; _pendingScaleMode: null; onResizeContext: null; _fullScreenChange(i: unknown): void; _fullScreenError(i: unknown): void; _gameResumed(): void; _orientationChange(i: unknown): void; _windowResize(i: unknown): void; align(t: unknown, i: unknown): void; alignCanvas(t: unknown, i: unknown): void; boot(): void; cleanupCreatedTarget(): void; createFullScreenTarget(): unknown; destroy(): void; forceOrientation(t: unknown, i: unknown): void; fullScreenChange(t: unknown): void; fullScreenError(t: unknown): void; getParentBounds(t: unknown, i: unknown): unknown; orientationChange(t: unknown): void; parseConfig(t: unknown): void; pauseUpdate(): void; prepScreenMode(i: unknown): void; preUpdate(): void; queueUpdate(t: unknown): void; recalculateCanvasOffset(): void; reflowCanvas(): void; reflowGame(): void; refresh(): void; resetCanvas(t: unknown, i: unknown): void; setExactFit(): void; setGameSize(i: unknown, n: unknown): void; setMaximum(): void; setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void; setResizeCallback(t: unknown, i: unknown): void; setShowAll(t: unknown): void; setupScale(t: unknown, i: unknown): void; signalSizeChange(): void; startFullScreen(t: unknown, i: unknown): unknown; stopFullScreen(): unknown; updateDimensions(i: unknown, n: unknown, e: unknown): void; updateLayout(): void; updateOrientationState(): unknown; updateScalingAndBounds(): void; windowResize(t: unknown): void; boundingParent: HTMLDivElement; parentNode: HTMLCanvasElement; _gameSize: unknown /* too deep */; _lastReportedCanvasSize: unknown /* too deep */; _lastReportedGameSize: unknown /* too deep */; _parentBounds: unknown /* too deep */; _tempBounds: unknown /* too deep */; bounds: unknown /* too deep */; canvasOffset: unknown /* too deep */; device: unknown /* too deep */; dom: unknown /* too deep */; enterIncorrectOrientation: unknown /* too deep */; game: unknown /* too deep */; leaveIncorrectOrientation: unknown /* too deep */; margin: unknown /* too deep */; onFullScreenChange: unknown /* too deep */; onFullScreenError: unknown /* too deep */; onFullScreenInit: unknown /* too deep */; onOrientationChange: unknown /* too deep */; onSizeChange: unknown /* too deep */; parentScaleFactor: unknown /* too deep */; scaleFactor: unknown /* too deep */; scaleFactorInverted: unknown /* too deep */; windowConstraints: unknown /* too deep */; }; seededRandom: { frac(t: unknown): unknown; pick(t: unknown, i: unknown): unknown; shuffleArray(t: unknown, i: unknown): unknown; randomDataGenerator: unknown /* too deep */; }; sound: { _codeMuted: boolean; _muted: boolean; _watching: boolean; connectToMaster: boolean; mute: boolean; muteOnPause: boolean; noAudio: boolean; touchLocked: boolean; baseLatency: number; channels: number; volume: number; _unlockSource: null; _watchCallback: null; _watchContext: null; _onResumeWebAudioOnClick(): void; _resumeWebAudioOnClick(): void; add(t: unknown, i: unknown, n: unknown, e: unknown): unknown; boot(): void; destroy(): void; pauseAll(): void; play(t: unknown, i: unknown, n: unknown): unknown; remove(t: unknown): unknown; removeAll(): void; removeByKey(t: unknown): unknown; resumeAll(): void; resumeWebAudio(): unknown; setDecodedCallback(t: unknown, i: unknown, n: unknown): void; setMute(): void; setTouchLock(): void; setTouchUnlock(): void; stopAll(): void; unlock(): unknown; unsetMute(): void; update(): void; context: AudioContext; emptyBuffer: AudioBuffer; _sounds: unknown /* too deep */; _watchList: unknown /* too deep */; game: unknown /* too deep */; onMute: unknown /* too deep */; onSoundDecode: unknown /* too deep */; onTouchUnlock: unknown /* too deep */; onUnMute: unknown /* too deep */; onVolumeChange: unknown /* too deep */; sounds: unknown /* too deep */; }; stage: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; disableVisibilityChange: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _hiddenVar: string; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; camera: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; boot(): void; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; checkVisibility(): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; parseConfig(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setBackgroundColor(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; visibilityChange(t: unknown): unknown; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; state: { _clearWorld: boolean; current: string; _pendingState: null; add(t: unknown, i: unknown, n: unknown): unknown; boot(): void; clearCurrentState(): void; destroy(): void; get(t: unknown): unknown; getCurrentState(): unknown; loadComplete(): void; pause(): void; preUpdate(): unknown; remove(t: unknown): void; resume(): void; setCurrentState(t: unknown): void; start(t: unknown, i: unknown): void; update(): void; _states: Map<string, unknown /* too deep */>; states: Map<string, unknown /* too deep */>; _current: unknown /* too deep */; _initArgs: unknown /* too deep */; _onStateChange: unknown /* too deep */; game: unknown /* too deep */; onStateChange: unknown /* too deep */; }; time: { _deltaMS: number; _pauseStarted: number; _prevTimeMS: number; _started: number; _timeMS: number; deltaMS: number; desiredFps: number; pauseDuration: number; prevTimeMS: number; timeMS: number; timeToCall: number; add(t: unknown): unknown; boot(): void; create(t: unknown): unknown; elapsedSecondsSince(t: unknown): unknown; elapsedSince(t: unknown): unknown; gamePaused(): void; gameResumed(): void; removeAll(): void; reset(): void; setTime(t: unknown): void; totalElapsedSeconds(): unknown; update(t: unknown): void; updateTimers(): void; _timers: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; }; tweens: { add(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown): unknown; destroy(): void; findOwnerForTween(t: unknown): unknown; getAll(): unknown; pauseAll(): void; remove(t: unknown): void; removeAll(): void; removeAllFromOwner(t: unknown): void; removeFrom(t: unknown, i: unknown): void; removeTweenFromOwner(t: unknown): unknown; resumeAll(): void; update(): unknown; _owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>; _tweens: unknown /* too deep */; game: unknown /* too deep */; }; world: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; disableVisibilityChange: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _hiddenVar: string; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; camera: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; boot(): void; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; checkVisibility(): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; parseConfig(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setBackgroundColor(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; visibilityChange(t: unknown): unknown; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; }; jwtAuthProvider: { _renewalFailureWait: number; _renewalTimer: number; authenticateRequest(t: unknown): void; getToken(): unknown; handleErrorCallback(): void; isLoggedIn(): unknown; logout(): void; renewToken(): unknown; setToken(t: unknown): void; validate(t: unknown): unknown; _httpClient: Localizer["dataSource"]["_httpClient"]; _sessionTokenAuth: { _userID: number; _token: string; authenticateRequest(t: unknown): void; getSessionToken(): unknown; getUserID(): unknown; isLoggedIn(): unknown; logout(): void; setSessionToken(t: unknown, i: unknown): void; }; timeManager: { isServerDeltaSet: boolean; _timezoneOffset: number; serverTimeDeltaMs: number; getIsServerDeltaSet(): unknown; getLocalTimeMs(): unknown; getServerTimeDeltaMs(): unknown; getServerTimeMs(): unknown; getUTCOffset(): unknown; setServerTime(t: unknown): void; }; }; metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; lastGameSessionStartTime: number; timeInLoadingMS: number; _renderType: string; crashedLastTime: string; renderType: string; timeToPlayMS: null; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: { getConnection(): unknown; getConnectionDownlinkSpeed(): unknown; getConnectionEffectiveType(): unknown; getConnectionRTT(): unknown; getConnectionType(): unknown; getDeviceMemory(): unknown; getHardwareConcurrency(): unknown; getJSHeapSizeLimit(): unknown; getPlatformName(): unknown; getScreenHeight(): unknown; getScreenWidth(): unknown; getUsedJSHeapSize(): unknown; isVideoAvailable(): unknown; isWebGLAvailable(): unknown; isWebSocketAvailable(): unknown; isWebWorkerAvailable(): unknown; }; game: { _paused: boolean; _pausedByCode: boolean; isBooted: boolean; paused: boolean; pausedByCode: boolean; transparent: boolean; versioned: boolean; _height: number; _width: number; broadcastId: number; height: number; resolution: number; width: number; clientVersion: string; windowHeight: undefined; windowWidth: undefined; boot(): void; bootSystems(): void; createApp(i: unknown, n: unknown): unknown; createSystems(): void; destroy(): void; focusGain(t: unknown): void; focusLoss(t: unknown): void; gamePaused(t: unknown): void; gameResumed(t: unknown): void; init(): void; pauseGame(t: unknown): void; postUpdate(t: unknown): void; showDebugHeader(): void; toggleFpsGraph(): void; update(i: unknown): void; canvas: HTMLCanvasElement; parent: HTMLCanvasElement; _add: unknown /* too deep */; _app: unknown /* too deep */; _cache: unknown /* too deep */; _config: unknown /* too deep */; _consoleLogger: unknown /* too deep */; _device: unknown /* too deep */; _input: unknown /* too deep */; _load: unknown /* too deep */; _onPause: unknown /* too deep */; _onResume: unknown /* too deep */; _rnd: unknown /* too deep */; _scale: unknown /* too deep */; _sound: unknown /* too deep */; _stage: unknown /* too deep */; _state: unknown /* too deep */; _time: unknown /* too deep */; _tweens: unknown /* too deep */; add: unknown /* too deep */; app: unknown /* too deep */; broadcaster: unknown /* too deep */; cache: unknown /* too deep */; config: unknown /* too deep */; device: unknown /* too deep */; fps: unknown /* too deep */; frameWorkManager: unknown /* too deep */; input: unknown /* too deep */; inputDispatcher: unknown /* too deep */; load: unknown /* too deep */; onPause: unknown /* too deep */; onResume: unknown /* too deep */; renderer: unknown /* too deep */; rnd: unknown /* too deep */; scale: unknown /* too deep */; seededRandom: unknown /* too deep */; sound: unknown /* too deep */; stage: unknown /* too deep */; state: unknown /* too deep */; time: unknown /* too deep */; tweens: unknown /* too deep */; world: unknown /* too deep */; }; gameCompleteDataFactory: { buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown; create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown; getGame(): unknown; game: unknown /* too deep */; gameEventDataBuilder: unknown /* too deep */; }; loadingMetricProperties: never[]; objectCountProperties: never[]; }; onPlayerJoinedSignal: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; OnPlayerJoinedSignal: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; onPlayerLeftSignal: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; OnPlayerLeftSignal: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; onPlayerListSignal: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; OnPlayerListSignal: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; onSocketMessage: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; OnSocketMessage: { _shouldPropagate: boolean; active: boolean; memorize: boolean; _addBinding(t: unknown): void; _boundDispatch(): unknown; _indexOfListener(t: unknown, i: unknown): unknown; add(t: unknown, i: unknown, n: unknown): unknown; addOnce(t: unknown, i: unknown, n: unknown): unknown; boundDispatch(): unknown; dispatch(): void; dispose(): void; forget(): void; getNumListeners(): unknown; halt(): void; has(t: unknown, i: unknown): unknown; registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; toString(): unknown; validateListener(t: unknown, i: unknown): void; _bindings: never[]; bindings: never[]; }; timeManager: { isServerDeltaSet: boolean; _timezoneOffset: number; serverTimeDeltaMs: number; getIsServerDeltaSet(): unknown; getLocalTimeMs(): unknown; getServerTimeDeltaMs(): unknown; getServerTimeMs(): unknown; getUTCOffset(): unknown; setServerTime(t: unknown): void; }; zone: { _loadCompleteSent: boolean; complete: boolean; fadeInSet: boolean; hasBroadcastedInfo: boolean; hideHex: boolean; isMapScreen: boolean; showMenu: boolean; walkEnabled: boolean; frameUntilAddNextPlayer: number; startX: number; startY: number; tileSize: number; _key: string; key: string; saveTag: string; screenName: string; zoneName: string; _friendListLoadTimeoutID: null; screenData: null; previousMapData: undefined; previousZone: undefined; addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown; addBlock(t: unknown, i: unknown, n: unknown): unknown; addBounty(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown): unknown; addChest(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; addClickableArea(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; addClickableEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown; addClickableMoveEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown; addCollect(t: unknown, i: unknown, n: unknown, e: unknown): unknown; addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown; addConstructedQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown; addDoor(t: unknown, i: unknown): void; addEvent(t: unknown, i: unknown): void; addEventWithCallback(t: unknown, i: unknown): void; addFireflyEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; addFollow(t: unknown, i: unknown): unknown; addGnome(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; addMimic(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; addMonster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown; addNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; addPathingIcon(t: unknown, i: unknown): void; addPippet(t: unknown, i: unknown, n: unknown): unknown; addPlayer(t: unknown): void; addQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; addWizard(t: unknown, i: unknown, n: unknown, e: unknown): unknown; arePopupsEnabled(): unknown; callFunctionOrSignal(t: unknown, i: unknown): void; canAddUsersToScreen(): unknown; chatPlayer(t: unknown): void; create(): void; createBackground(): void; disableOverlay(t: unknown): void; enableOverlay(t: unknown): void; endFX(): void; fadeIn(): void; fadeOut(t: unknown, i: unknown): void; findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown; findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown; getInjectedValue(t: unknown): unknown; hideChat(t: unknown): void; hideOtherPlayer(t: unknown): unknown; init(): void; initListeners(): void; initMap(t: unknown, i: unknown, n: unknown, e: unknown): void; initScene(t: unknown, i: unknown): void; listener(t: unknown, i: unknown): unknown; movePlayer(t: unknown): void; onAddChild(t: unknown, i: unknown, n: unknown): void; onDebugAutoClick(t: unknown): void; onDebugAutoClickElement(i: unknown): unknown; onDebugAutoClickItem(t: unknown, i: unknown): void; onDebugAutoClickList(): void; onDoorClick(t: unknown, i: unknown): void; onEnableBackground(t: unknown): void; onEnableContent(t: unknown): void; onGetLayer(t: unknown): unknown; onMessage(t: unknown): void; onPlayerFullInfo(t: unknown): void; onPlayerJoined(t: unknown): void; onPlayerLeft(t: unknown): void; onPlayerList(t: unknown): unknown; openFeed(t: unknown): void; paused(): void; playerEffect(t: unknown): void; preload(): void; preprocess(): unknown; process(t: unknown): void; processAddCollect(t: unknown): void; processPopups(t: unknown): unknown; removeFollow(t: unknown): void; removePlayer(t: unknown): void; resumed(): void; screenSetup(): void; screenUpdate(): void; setFakePlayer(t: unknown): void; showCollisions(t: unknown): void; showMessage(t: unknown, i: unknown): void; shutdown(): void; start(i: unknown, n: unknown): unknown; startFX(): void; stopListeners(): void; transformPlayer(t: unknown): void; triggerElementClick(t: unknown): void; update(): void; updatePlayer(t: unknown): void; pendingCoordinates: Map<never, never>; _background: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _bgSprite: never; _content: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _dialogue: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _foreground: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _menus: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _opaque: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _overlay: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _root: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _parent: null; _transform: null; parent: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; }; _uiLayer: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; _world: { currentMap: string; _(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; canTeleportInto(t: unknown): unknown; enter(): void; getCurrentCurrency(): unknown; getCurrentMap(): unknown; getCurrentZone(): unknown; getState(t: unknown): unknown; getTownState(t: unknown): unknown; getWorldDate(): unknown; getZone(t: unknown): unknown; goToZoneHub(t: unknown): void; inDeprecatedZone(): unknown; inRestrictedSocialZone(i: unknown): unknown; isMathTowerEnabledForPlayer(t: unknown, i: unknown): unknown; isValidLocation(t: unknown): unknown; isZoneSinglePlayer(i: unknown): unknown; playScene(t: unknown): void; process(): void; setCurrentMap(t: unknown): void; setState(t: unknown, i: unknown): void; setTownState(t: unknown, i: unknown): void; showZoneLocked(t: unknown, i: unknown): void; _metricsManager: unknown /* too deep */; game: unknown /* too deep */; pippetEncounterDaily: unknown /* too deep */; pippetEncounterSpawn: unknown /* too deep */; zones: unknown /* too deep */; }; above: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; aboveGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; add: { audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown; bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown; existing(t: unknown): unknown; graphics(t: unknown, i: unknown, n: unknown): unknown; group(t: unknown, i: unknown, n: unknown): unknown; image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown; sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown; spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown; sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown; text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown; tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown; tween(t: unknown, i: unknown, n: unknown): unknown; game: unknown /* too deep */; stage: unknown /* too deep */; }; area: unknown /* too deep */[]; assets: string[]; background: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; backgroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; below: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; belowGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; clickAreas: never[]; content: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; contentGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; data: { isQuestHub: boolean; isScene: boolean; x: number; y: number; battleBG: string; file: string; name: string; nameKey: string; onFaint: string; tag: string; zoneName: string; tempCollisionData: null; onLoad: undefined; addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown; addBounty(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown; addChest(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown; addCollisionZone(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown; addMonster(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, f: unknown, b: unknown): unknown; addPippet(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown): void; addSpriteToLayer(t: unknown, i: unknown, n: unknown): void; addWizard(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): unknown; cleanup(): void; cleanupMap(): void; enableLayerID(t: unknown, i: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocation(): unknown; getName(): unknown; getTag(): unknown; getTile(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, a: unknown, l: unknown): unknown; getTileProperties(t: unknown, i: unknown, n: unknown): unknown; getTileset(t: unknown, i: unknown): unknown; init(i: unknown, n: unknown, e: unknown, s: unknown): unknown; initLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; initObjectLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; initTiledLayer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown; onLoadInit(): void; playPortalEffectEnter(t: unknown, i: unknown, n: unknown, e: unknown): void; playPortalEffectExit(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; process(t: unknown, i: unknown, n: unknown): void; processAnimations(t: unknown, i: unknown): void; processDynamicLayers(t: unknown, i: unknown): unknown; processTileAnimations(t: unknown, i: unknown, n: unknown, e: unknown): unknown; processTileAnimUpdate(t: unknown, i: unknown): void; setup(i: unknown, n: unknown, e: unknown): void; showAllBounties(t: unknown, i: unknown): void; start(t: unknown, i: unknown, n: unknown): void; toggleDynamicLayer(t: unknown, i: unknown, n: unknown, e: unknown): void; update(t: unknown): void; validPathTo(t: unknown, i: unknown, n: unknown, e: unknown): void; above: unknown /* too deep */; animatedSprites: unknown /* too deep */; assets: unknown /* too deep */; below: unknown /* too deep */; container: unknown /* too deep */; contentLayerContainers: unknown /* too deep */; disabledLayerIDs: unknown /* too deep */; disabledLayers: unknown /* too deep */; dynamicLayerContainers: unknown /* too deep */; dynamicSprites: unknown /* too deep */; game: unknown /* too deep */; locations: unknown /* too deep */; mapMonsters: unknown /* too deep */; questParams: unknown /* too deep */; screen: unknown /* too deep */; zone: unknown /* too deep */; }; dialogue: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; events: unknown /* too deep */[]; floor: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; foreground: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; foregroundGameObject: { _isActive: boolean; _isActiveInHierarchy: boolean; active: boolean; activeInHierarchy: boolean; _layer: string; _name: string; layer: string; name: string; _transform: null; transform: null; activeInHierarchyChanged(): void; addChild(t: unknown): void; addChildAt(t: unknown, i: unknown): void; addComponent(t: unknown, i: unknown): unknown; bringToFront(): void; destroy(): void; dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void; findChildByName(t: unknown): unknown; findComponent(t: unknown): unknown; findComponentInChildren(t: unknown, i: unknown): unknown; findComponentInParent(t: unknown, i: unknown): unknown; findComponents(t: unknown): unknown; findComponentsInChildren(t: unknown, i: unknown): unknown; getRenderOrder(): unknown; hasComponent(t: unknown): unknown; isActiveInHierarchy(): unknown; isInBack(): unknown; isInFront(): unknown; removeComponent(t: unknown): void; removeFromParent(): unknown; sendToBack(): void; setLayer(t: unknown, i: unknown): void; setParent(t: unknown, i: unknown): unknown; setRenderOrder(t: unknown): void; update(): void; _children: unknown /* too deep */; _components: unknown /* too deep */; _legacyTransform: unknown /* too deep */; _parent: unknown /* too deep */; children: unknown /* too deep */; components: unknown /* too deep */; legacyTransform: unknown /* too deep */; onActiveChanged: unknown /* too deep */; onActiveInHierarchyChanged: unknown /* too deep */; onChildAdded: unknown /* too deep */; onChildRemoved: unknown /* too deep */; onComponentAdded: unknown /* too deep */; onComponentAddedToHierarchy: unknown /* too deep */; onComponentRemoved: unknown /* too deep */; onDestroy: unknown /* too deep */; onHierarchyChanged: unknown /* too deep */; onLayerChanged: unknown /* too deep */; parent: unknown /* too deep */; }; game: { _paused: boolean; _pausedByCode: boolean; isBooted: boolean; paused: boolean; pausedByCode: boolean; transparent: boolean; versioned: boolean; _height: number; _width: number; broadcastId: number; height: number; resolution: number; width: number; clientVersion: string; windowHeight: undefined; windowWidth: undefined; boot(): void; bootSystems(): void; createApp(i: unknown, n: unknown): unknown; createSystems(): void; destroy(): void; focusGain(t: unknown): void; focusLoss(t: unknown): void; gamePaused(t: unknown): void; gameResumed(t: unknown): void; init(): void; pauseGame(t: unknown): void; postUpdate(t: unknown): void; showDebugHeader(): void; toggleFpsGraph(): void; update(i: unknown): void; canvas: HTMLCanvasElement; parent: HTMLCanvasElement; _add: unknown /* too deep */; _app: unknown /* too deep */; _cache: unknown /* too deep */; _config: unknown /* too deep */; _consoleLogger: unknown /* too deep */; _device: unknown /* too deep */; _input: unknown /* too deep */; _load: unknown /* too deep */; _onPause: unknown /* too deep */; _onResume: unknown /* too deep */; _rnd: unknown /* too deep */; _scale: unknown /* too deep */; _sound: unknown /* too deep */; _stage: unknown /* too deep */; _state: unknown /* too deep */; _time: unknown /* too deep */; _tweens: unknown /* too deep */; add: unknown /* too deep */; app: unknown /* too deep */; broadcaster: unknown /* too deep */; cache: unknown /* too deep */; config: unknown /* too deep */; device: unknown /* too deep */; fps: unknown /* too deep */; frameWorkManager: unknown /* too deep */; input: unknown /* too deep */; inputDispatcher: unknown /* too deep */; load: unknown /* too deep */; onPause: unknown /* too deep */; onResume: unknown /* too deep */; renderer: unknown /* too deep */; rnd: unknown /* too deep */; scale: unknown /* too deep */; seededRandom: unknown /* too deep */; sound: unknown /* too deep */; stage: unknown /* too deep */; state: unknown /* too deep */; time: unknown /* too deep */; tweens: unknown /* too deep */; world: unknown /* too deep */; }; input: { enabled: boolean; pollLocked: boolean; recordPointerHistory: boolean; resetLocked: boolean; _pollCounter: number; _x: number; _y: number; doubleTapRate: number; holdRate: number; justPressedRate: number; justReleasedRate: number; maxPointers: number; minPriorityID: number; multiInputOverride: number; pollRate: number; recordLimit: number; recordRate: number; tapRate: number; totalActivePointers: number; totalInactivePointers: number; worldX: number; worldY: number; x: number; y: number; customCandidateHandler: null; customCandidateHandlerContext: null; addMoveCallback(t: unknown, i: unknown): void; addPointer(): unknown; addTouchLockCallback(t: unknown, i: unknown, n: unknown): void; boot(t: unknown): void; clearEnterCallback(): void; countActivePointers(t: unknown): unknown; deleteMoveCallback(t: unknown, i: unknown): void; destroy(): void; executeTouchLockCallbacks(t: unknown, i: unknown): void; getLocalPosition(t: unknown, i: unknown, n: unknown): unknown; getPointer(t: unknown): unknown; getPointerFromId(t: unknown): unknown; getPointerFromIdentifier(t: unknown): unknown; hitTest(t: unknown, i: unknown): unknown; preUpdate(): void; removeTouchLockCallback(t: unknown, i: unknown): unknown; reset(t: unknown): void; resetSpeed(t: unknown, i: unknown): void; setEnterCallback(t: unknown): void; setInteractiveCandidateHandler(t: unknown, i: unknown): void; startPointer(t: unknown): unknown; stopPointer(t: unknown, i: unknown): unknown; update(): void; updateChildren(t: unknown): void; updateInteractiveItems(): void; updatePointer(t: unknown): unknown; hitCanvas: HTMLCanvasElement; hitContext: CanvasRenderingContext2D; _oldPosition: unknown /* too deep */; activePointer: unknown /* too deep */; circle: unknown /* too deep */; game: unknown /* too deep */; interactiveItems: unknown /* too deep */; keyboard: unknown /* too deep */; mouse: unknown /* too deep */; mousePointer: unknown /* too deep */; mouseWheel: unknown /* too deep */; mspointer: unknown /* too deep */; onDown: unknown /* too deep */; onHold: unknown /* too deep */; onPointerMove: unknown /* too deep */; onTap: unknown /* too deep */; onTouchEndEvent: unknown /* too deep */; onTouchStartEvent: unknown /* too deep */; onUp: unknown /* too deep */; pointer1: unknown /* too deep */; pointer2: unknown /* too deep */; pointerLock: unknown /* too deep */; pointers: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; speed: unknown /* too deep */; touch: unknown /* too deep */; }; menuBar: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isHouse: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; ID: number; left: number; length: number; offsetX: number; offsetY: number; page: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addConjureCubeButton(): void; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; centreMenus(t: unknown): void; cleanup(): void; containerUpdateTransform(): void; createMenu(t: unknown): unknown; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; onShowIndicator(): void; open(t: unknown, n: unknown, e: unknown): void; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; show(t: unknown): void; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; menus: unknown /* too deep */; metricsManager: unknown /* too deep */; model: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; menus: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; metricsManager: { _supportsWasm: boolean; crashedLastLogin: boolean; _averageDownloadSpeed: number; _networkRequestCount: number; _totalAssetDownloadSize: number; _totalAssetDownloadTime: number; _totalAssetsDownloaded: number; lastGameSessionStartTime: number; timeInLoadingMS: number; _renderType: string; crashedLastTime: string; renderType: string; timeToPlayMS: null; assetDownloaded(t: unknown, i: unknown): void; checkForCrash(): void; createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown; getCustomMetrics(): unknown; getLastGameSessionStartTime(): unknown; increaseNetworkRequestCount(): void; objectCreated(t: unknown): void; objectDestroyed(t: unknown): void; sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void; setInBattle(t: unknown): void; setLastGameSessionStartTime(t: unknown): void; setLastMapLoadStarted(t: unknown): void; deviceInfoProvider: unknown /* too deep */; game: unknown /* too deep */; gameCompleteDataFactory: unknown /* too deep */; loadingMetricProperties: unknown /* too deep */; objectCountProperties: unknown /* too deep */; }; opaque: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _gsap: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; overlay: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; path: { lowPriorityPathfinderInUse: boolean; size: number; addCallback(t: unknown, i: unknown, n: unknown): void; findNodeBetween(t: unknown, i: unknown): unknown; findPath(t: unknown, i: unknown, n: unknown, e: unknown, h: unknown, o: unknown): void; getCallback(t: unknown, i: unknown, n: unknown): unknown; getNodeValue(t: unknown, i: unknown): unknown; init(t: unknown, i: unknown): void; isNodeOpen(t: unknown, i: unknown): unknown; isPathBlocked(t: unknown, i: unknown, n: unknown, e: unknown): unknown; processPath(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): void; reset(): void; tileToXY(t: unknown, i: unknown): unknown; xyToTile(t: unknown, i: unknown): unknown; area: unknown /* too deep */; callbacks: unknown /* too deep */; }; pendingPlayers: never[]; playerList: {}; playersInfo: {}; prodigyGame: { _paused: boolean; _pausedByCode: boolean; isBooted: boolean; paused: boolean; pausedByCode: boolean; transparent: boolean; versioned: boolean; _height: number; _width: number; broadcastId: number; height: number; resolution: number; width: number; clientVersion: string; windowHeight: undefined; windowWidth: undefined; boot(): void; bootSystems(): void; createApp(i: unknown, n: unknown): unknown; createSystems(): void; destroy(): void; focusGain(t: unknown): void; focusLoss(t: unknown): void; gamePaused(t: unknown): void; gameResumed(t: unknown): void; init(): void; pauseGame(t: unknown): void; postUpdate(t: unknown): void; showDebugHeader(): void; toggleFpsGraph(): void; update(i: unknown): void; canvas: HTMLCanvasElement; parent: HTMLCanvasElement; _add: unknown /* too deep */; _app: unknown /* too deep */; _cache: unknown /* too deep */; _config: unknown /* too deep */; _consoleLogger: unknown /* too deep */; _device: unknown /* too deep */; _input: unknown /* too deep */; _load: unknown /* too deep */; _onPause: unknown /* too deep */; _onResume: unknown /* too deep */; _rnd: unknown /* too deep */; _scale: unknown /* too deep */; _sound: unknown /* too deep */; _stage: unknown /* too deep */; _state: unknown /* too deep */; _time: unknown /* too deep */; _tweens: unknown /* too deep */; add: unknown /* too deep */; app: unknown /* too deep */; broadcaster: unknown /* too deep */; cache: unknown /* too deep */; config: unknown /* too deep */; device: unknown /* too deep */; fps: unknown /* too deep */; frameWorkManager: unknown /* too deep */; input: unknown /* too deep */; inputDispatcher: unknown /* too deep */; load: unknown /* too deep */; onPause: unknown /* too deep */; onResume: unknown /* too deep */; renderer: unknown /* too deep */; rnd: unknown /* too deep */; scale: unknown /* too deep */; seededRandom: unknown /* too deep */; sound: unknown /* too deep */; stage: unknown /* too deep */; state: unknown /* too deep */; time: unknown /* too deep */; tweens: unknown /* too deep */; world: unknown /* too deep */; }; questProgress: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; text: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; hasTooltip(): unknown; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; isHighlighted(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onGetUIElement(t: unknown): unknown; process(t: unknown, i: unknown): unknown; registerGetElementListener(): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setRenderState(t: unknown, i: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; shouldCreateAndStageElement(): unknown; showTooltip(t: unknown, i: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; arrow: unknown /* too deep */; banner: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; icon: unknown /* too deep */; localTransform: unknown /* too deep */; metricsManager: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; state: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; user: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; stage: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; disableVisibilityChange: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _hiddenVar: string; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; camera: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; boot(): void; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; checkVisibility(): void; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; parseConfig(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setBackgroundColor(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; visibilityChange(t: unknown): unknown; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; game: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; uiLayer: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; accessible: boolean; accessibleChildren: boolean; buttonMode: boolean; cacheAsBitmap: boolean; exists: boolean; fixedToCamera: boolean; interactive: boolean; interactiveChildren: boolean; isMask: boolean; isSprite: boolean; pendingDestroy: boolean; renderable: boolean; sortableChildren: boolean; sortDirty: boolean; visible: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; angle: number; bottom: number; centerX: number; centerY: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; tabIndex: number; top: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; name: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; cursor: null; filterArea: null; filters: null; hitArea: null; mask: null; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addListener(t: unknown, e: unknown, r: unknown): unknown; ascendingSortHandler(t: unknown, i: unknown): unknown; bringChildToTop(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; containerUpdateTransform(): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(i: unknown): void; disableTempParent(t: unknown): void; displayObjectUpdateTransform(): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; enableTempParent(): unknown; eventNames(): unknown; getAt(t: unknown): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildIndex(t: unknown): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getIndex(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setParent(t: unknown): unknown; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; sort(t: unknown, i: unknown): void; sortChildren(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; update(): void; updateTransform(): void; updateZ(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; children: unknown /* too deep */; events: unknown /* too deep */; gameObjectRef: unknown /* too deep */; localTransform: unknown /* too deep */; onDestroy: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; position: unknown /* too deep */; scale: unknown /* too deep */; skew: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; user: { _accessibleActive: boolean; _cacheAsBitmap: boolean; _destroyed: boolean; _isCreatedInBackpack: boolean; _mountPending: boolean; accessible: boolean; accessibleChildren: boolean; battleShy: boolean; buttonMode: boolean; cacheAsBitmap: boolean; clickEnabled: boolean; complete: boolean; digSetup: boolean; disableTransform: boolean; evtProc: boolean; exists: boolean; fixedToCamera: boolean; forceWeaponVisual: boolean; headOnly: boolean; hideHat: boolean; hideMount: boolean; interactive: boolean; interactiveChildren: boolean; isInTransformedMode: boolean; isMainPlayer: boolean; isMask: boolean; isSprite: boolean; loading: boolean; outOfDate: boolean; pendingDestroy: boolean; ran: boolean; renderable: boolean; showHandIK: boolean; showTransformationEffect: boolean; sortableChildren: boolean; sortDirty: boolean; transformationCompleted: boolean; transforming: boolean; visible: boolean; walkIntoBattle: boolean; worldVisible: boolean; _boundsID: number; _eventsCount: number; _lastSortedIndex: number; _zIndex: number; alpha: number; anchorOffsetY: number; angle: number; bottom: number; broadcastId: number; castDelay: number; centerX: number; centerY: number; flagsToComplete: number; fxQueue: number; height: number; left: number; length: number; offsetX: number; offsetY: number; renderId: number; right: number; rotation: number; setScale: number; speed: number; tabIndex: number; timerForPlayerDataUpdate: number; top: number; updateTime: number; walkSpeed: number; width: number; worldAlpha: number; worldRotation: number; x: number; y: number; z: number; zIndex: number; _sortProperty: string; accessiblePointerEvents: string; accessibleType: string; animState: string; bootsTag: string; faceTag: string; hairTag: string; hatTag: string; name: string; outfitTag: string; weaponTag: string; _accessibleDiv: null; _boundsRect: null; _cacheData: null; _element: null; _enabledFilters: null; _mask: null; accessibleHint: null; accessibleTitle: null; activeMount: null; bootsMetadata: null; captured: null; cursor: null; filterArea: null; filters: null; hitArea: null; lastSmoothing: null; mask: null; membershipSprite: null; morph: null; pairs: null; potencyIcon: null; potionIcon: null; smoke: null; statusEffects: null; transformationTimer: null; transformID: null; weapon: null; loadedCallback: undefined; _cacheAsBitmapDestroy(t: unknown): void; _calculateBounds(): void; _calculateCachedBounds(): void; _destroyCachedDisplayObject(): void; _getCachedLocalBounds(): unknown; _initCachedDisplayObject(t: unknown): void; _initCachedDisplayObjectCanvas(t: unknown): void; _recursivePostUpdateTransform(): void; _render(t: unknown): void; _renderCached(t: unknown): void; _renderCachedCanvas(t: unknown): void; _renderCanvas(t: unknown): void; _renderWebGL(t: unknown): void; add(t: unknown, i: unknown): unknown; addAt(t: unknown, i: unknown): unknown; addBarrierSpritesheet(t: unknown, i: unknown, n: unknown): void; addChild(): unknown; addChildAt(t: unknown, e: unknown): unknown; addElementClass(t: unknown): void; addListener(t: unknown, e: unknown, r: unknown): unknown; addOnClick(t: unknown): void; ascendingSortHandler(t: unknown, i: unknown): unknown; attack(): void; bringChildToTop(t: unknown): void; broadcastPlayerFullInfo(t: unknown): void; calculateBounds(): void; callAll(t: unknown, i: unknown): void; callbackFromArray(t: unknown, i: unknown): unknown; chat(t: unknown, i: unknown, n: unknown): void; cleanup(): void; clickCallback(arg0: unknown): void; containerUpdateTransform(): void; createActiveMount(t: unknown): void; createHealthBar(t: unknown): unknown; createMountByID(t: unknown): void; damaged(): void; dance(t: unknown, i: unknown): void; descendingSortHandler(t: unknown, i: unknown): unknown; destroy(): void; destroyMount(): void; dig(t: unknown, i: unknown): void; disableMovement(): void; disableTempParent(t: unknown): void; displayDamage(t: unknown, i: unknown, n: unknown, e: unknown): void; displayHeal(t: unknown, i: unknown): void; displayObjectUpdateTransform(): void; doBarrierAnimation(): void; doBarrierBreakAnimation(): void; doesMountMatchCurrentMount(t: unknown): unknown; doPuppetBreakAnimation(t: unknown): void; emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown; emote(t: unknown, i: unknown, n: unknown): unknown; enableLocomotion(t: unknown, i: unknown): void; enableTempParent(): unknown; endChat(): void; eventNames(): unknown; faceToward(t: unknown): void; flip(): void; float(t: unknown): void; forceOutfit(t: unknown): void; getAt(t: unknown): unknown; getAutomationSignature(): unknown; getBounds(t: unknown, e: unknown): unknown; getByName(t: unknown): unknown; getChildAt(t: unknown): unknown; getChildByName(t: unknown, e: unknown): unknown; getChildElements(): unknown; getChildIndex(t: unknown): unknown; getClassName(): unknown; getElement(): unknown; getGlobalPosition(t: unknown, e: unknown): unknown; getHitboxHeight(): unknown; getHitboxLeft(): unknown; getHitboxTop(): unknown; getHitboxWidth(): unknown; getIndex(t: unknown): unknown; getInjectedValue(t: unknown): unknown; getLocalBounds(e: unknown, r: unknown): unknown; getRemainingTransformationTime(): unknown; getSource(): unknown; getTargetingOffset(): unknown; handlePostSprites(): void; hasTooltip(): unknown; hideName(): void; highlight(t: unknown, i: unknown, n: unknown, e: unknown): void; hop(t: unknown, i: unknown, n: unknown, e: unknown): void; initListeners(): void; isDefeated(): unknown; isFacingLeft(): unknown; isHighlighted(): unknown; isMounted(): unknown; isTransformed(): unknown; iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown; listenerCount(t: unknown): unknown; listeners(t: unknown): unknown; moonwalk(): void; mount(t: unknown): void; mountSprites(): void; moveDown(t: unknown): unknown; moveUp(t: unknown): unknown; off(t: unknown, e: unknown, i: unknown, n: unknown): unknown; on(t: unknown, e: unknown, r: unknown): unknown; once(t: unknown, e: unknown, r: unknown): unknown; onChildrenChange(t: unknown): void; onCreatureLevelUp(t: unknown, i: unknown): void; onDebugAutoClick(t: unknown): void; onDebugAutoClickList(): void; onFxAnimationDone(): void; onGetUIElement(t: unknown): unknown; onLoadComplete(): void; onStarsAdded(): void; play(t: unknown, i: unknown): void; playAll(t: unknown): void; playerClicked(): void; postStartLoad(): void; randomSetup(): void; registerGetElementListener(): void; reload(t: unknown): void; remove(t: unknown, i: unknown): unknown; removeAll(t: unknown): void; removeAllListeners(t: unknown): unknown; removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void; removeChild(): unknown; removeChildAt(t: unknown): unknown; removeChildren(t: unknown, e: unknown): unknown; removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown; render(t: unknown): void; renderAdvanced(t: unknown): void; renderAdvancedWebGL(t: unknown): void; renderCanvas(t: unknown): void; renderWebGL(t: unknown): void; resetItemTransformation(t: unknown): void; retreat(t: unknown): void; sendChildToBack(t: unknown): void; setChildIndex(t: unknown, e: unknown): void; setData(): void; setHitbox(t: unknown): void; setNewAnimationState(t: unknown, i: unknown, n: unknown): void; setNewTarget(t: unknown, i: unknown): void; setParent(t: unknown): unknown; setPath(t: unknown, i: unknown, n: unknown): void; setRenderState(t: unknown, i: unknown): void; setSpriteInput(t: unknown): void; setSpritesVisible(t: unknown): void; setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown; setTransformationContainer(t: unknown, i: unknown, n: unknown): void; setTransformTimerVisibility(t: unknown): void; setup(i: unknown, n: unknown): void; setupAnimations(): void; setupAssetsToLoad(): unknown; setupCollisionBlock(): void; setValidPath(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void; shouldCreateAndStageElement(): unknown; shouldPlayRetreatOnDefeat(): unknown; shouldResetArmsOnDance(): unknown; showChat(t: unknown): void; showName(i: unknown): void; showSmoke(): void; showTooltip(t: unknown, i: unknown): void; showTransformationContainer(): void; showTransformationSmoke(t: unknown): void; sort(t: unknown, i: unknown): void; sortChildren(): void; stand(): void; standStill(): void; startChat(t: unknown): void; startLoad(): void; stopAllAnimations(): void; stopAnimation(t: unknown): void; stopListeners(): void; stopMoveTween(): void; stopTweens(): void; swap(t: unknown, i: unknown): void; swapChildren(t: unknown, e: unknown): void; toggleMount(): void; toGlobal(t: unknown, e: unknown, r: unknown): unknown; toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown; transformToItem(t: unknown, i: unknown, n: unknown, e: unknown): void; unmount(): void; unregisterGetElementListener(): void; update(): void; updateElementAttribute(t: unknown, i: unknown): void; updateElementAttributes(t: unknown): void; updateElementPosition(t: unknown, i: unknown): void; updateFace(t: unknown): void; updateHair(t: unknown): void; updateHat(t: unknown): void; updateHead(t: unknown): void; updateLeftArm(t: unknown): void; updateLegs(t: unknown): void; updateNeck(t: unknown): void; updateRightArm(t: unknown): void; updateShirt(t: unknown): void; updateTransform(): void; updateTransformTimer(): void; updateWeapon(t: unknown): void; updateZ(): void; walk(): void; _bounds: unknown /* too deep */; _events: unknown /* too deep */; _game: unknown /* too deep */; _localBounds: unknown /* too deep */; _localBoundsRect: unknown /* too deep */; _onLoad: unknown /* too deep */; _tempDisplayObjectParent: unknown /* too deep */; _trackedPointers: unknown /* too deep */; $: unknown /* too deep */; anchor: unknown /* too deep */; bounds: unknown /* too deep */; chatText: unknown /* too deep */; children: unknown /* too deep */; collisionBody: unknown /* too deep */; collisionHead: unknown /* too deep */; data: unknown /* too deep */; events: unknown /* too deep */; eyes: unknown /* too deep */; faceMetadata: unknown /* too deep */; fixedIKPositions: unknown /* too deep */; follow: unknown /* too deep */; game: unknown /* too deep */; hair: unknown /* too deep */; hairMetadata: unknown /* too deep */; hat: unknown /* too deep */; hatMetadata: unknown /* too deep */; head: unknown /* too deep */; headElement: unknown /* too deep */; headSprites: unknown /* too deep */; indicatorE: unknown /* too deep */; leftArm: unknown /* too deep */; legs: unknown /* too deep */; localTransform: unknown /* too deep */; locomotion: unknown /* too deep */; metricsManager: unknown /* too deep */; nameText: unknown /* too deep */; neck: unknown /* too deep */; onDestroy: unknown /* too deep */; OnLoad: unknown /* too deep */; onPathFound: unknown /* too deep */; onStopped: unknown /* too deep */; onTransformTimerCreate: unknown /* too deep */; OnTransformTimerCreate: unknown /* too deep */; outfitMetadata: unknown /* too deep */; parent: unknown /* too deep */; pivot: unknown /* too deep */; playerDataSchema: unknown /* too deep */; position: unknown /* too deep */; rightArm: unknown /* too deep */; scale: unknown /* too deep */; shirt: unknown /* too deep */; skew: unknown /* too deep */; source: unknown /* too deep */; sprites: unknown /* too deep */; stage: unknown /* too deep */; tempDisplayObjectParent: unknown /* too deep */; trackedPointers: unknown /* too deep */; transform: unknown /* too deep */; tweenAnimations: unknown /* too deep */; weaponMetadata: unknown /* too deep */; world: unknown /* too deep */; worldGamePosition: unknown /* too deep */; worldPosition: unknown /* too deep */; worldScale: unknown /* too deep */; worldTransform: unknown /* too deep */; }; zone: { debugBounties: boolean; bgmID: number; currency: number; battleBG: string; guardian: string; Guardian: string; ID: string; name: string; onFaint: string; questHub: string; cacheZoneAssets(i: unknown): void; canTeleport(t: unknown): unknown; cleanup(): void; completeQuest(t: unknown): unknown; completeSequence(t: unknown, i: unknown): void; createLoadingData(): void; defeatMonster(t: unknown, i: unknown, n: unknown, s: unknown): void; doorClick(t: unknown, i: unknown, n: unknown): void; frozenSomethingOnClick(t: unknown, i: unknown): void; getBattle(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): unknown; getBattleMods(): unknown; getCurrentQuest(): unknown; getCurrentQuestID(): unknown; getDailyMaps(): unknown; getDailyQuestDescription(t: unknown): unknown; getMap(t: unknown): unknown; getQuest(t: unknown): unknown; getQuestState(): unknown; getRemainingQuestAreas(t: unknown): unknown; getRemainingQuestObjectives(): unknown; getScene(t: unknown): unknown; getState(t: unknown): unknown; handleLeaving(t: unknown, i: unknown): void; hasDaily(t: unknown): unknown; hasDailyQuestExpired(): unknown; hideFollow(t: unknown): void; init(t: unknown, i: unknown, n: unknown): void; initScene(t: unknown, i: unknown): void; interactFrozenSomething(t: unknown): void; isDailyQuestComplete(): unknown; isOnQuest(t: unknown): unknown; isOnSequence(t: unknown, i: unknown): unknown; isQuestComplete(t: unknown): unknown; isQuestProcessed(t: unknown): unknown; isQuestStarted(t: unknown): unknown; isSequenceComplete(t: unknown, i: unknown): unknown; placeDaily(t: unknown, i: unknown, n: unknown): void; playScene(t: unknown): void; process(t: unknown, i: unknown, n: unknown): void; processQuest(t: unknown): void; setState(t: unknown, i: unknown): unknown; setup(t: unknown, i: unknown, n: unknown): unknown; showZoneLocked(t: unknown): void; smoke(t: unknown, i: unknown, n: unknown): void; start(t: unknown, i: unknown, n: unknown): void; startNewDailyQuest(t: unknown, i: unknown): void; startQuest(t: unknown): unknown; teleport(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown): void; teleportLoad(): void; teleportPrefabScene(t: unknown, i: unknown, n: unknown, s: unknown): void; testQuest(t: unknown, i: unknown, n: unknown): void; update(t: unknown, i: unknown, n: unknown): void; updateDailyQuest(t: unknown): void; _teleportData: unknown /* too deep */; game: unknown /* too deep */; loadingData: unknown /* too deep */; maps: unknown /* too deep */; monsters: unknown /* too deep */; quests: unknown /* too deep */; scenes: unknown /* too deep */; states: unknown /* too deep */; }; }; }; }>;
		};
		_languageData: {
			"1_YEAR_EPIC_AD_BODY": string;
			"1_YEAR_EPIC_AD_END_DATE": string;
			"1_YEAR_EPIC_AD_TITLE": string;
			"1_YEAR_EPIC_AD_TOOLTIP_BODY": string;
			"1_YEAR_EPIC_AD_TOOLTIP_TITLE": string;
			ABANDON_BOUNTY_SERVER_ERROR: string;
			ABANDON_BOUNTY_SERVER_ERROR_TITLE: string;
			ABOUT: string;
			ACADEMY_TOWER_LOCKED: string;
			ACADEMY_TOWER_NOT_RELEASED: string;
			ACCOUNT_CREATE_PASSWORD: string;
			ACCOUNT_CREATE_PRIVACY_POLICY: string;
			ACCOUNT_CREATE_USERNAME: string;
			ACCOUNT_LOCATION_AUSTRALIA: string;
			ACCOUNT_LOCATION_COLORADO: string;
			ACCOUNT_LOCATION_ENGLAND: string;
			ACCOUNT_LOCATION_FLORIDA: string;
			ACCOUNT_LOCATION_INDIA: string;
			ACCOUNT_LOCATION_NEW_YORK: string;
			ACCOUNT_LOCATION_ONTARIO: string;
			ACCOUNT_LOCATION_OTHER: string;
			ACCOUNT_LOCATION_TENNESSEE: string;
			ACCOUNT_LOCATION_TEXAS: string;
			ACCOUNT_LOCATION_TITLE_CANADA: string;
			ACCOUNT_LOCATION_TITLE_OTHER: string;
			ACCOUNT_LOCATION_TITLE_USA: string;
			ACCOUNT_LOCATION_VIRGINIA: string;
			ACHIEVEMENT_ANTIQUARIAN_DESC: string;
			ACHIEVEMENT_ANTIQUARIAN_NAME: string;
			ACHIEVEMENT_BONFIRE_CHESTS_DESC: string;
			ACHIEVEMENT_BONFIRE_CHESTS_NAME: string;
			ACHIEVEMENT_BONFIRE_DEFEAT_WIZARDS_DESC: string;
			ACHIEVEMENT_BONFIRE_DEFEAT_WIZARDS_NAME: string;
			ACHIEVEMENT_BONFIRE_QUESTS_DESC: string;
			ACHIEVEMENT_BONFIRE_QUESTS_NAME: string;
			ACHIEVEMENT_BONFIRE_SET_DESC: string;
			ACHIEVEMENT_BONFIRE_SET_NAME: string;
			ACHIEVEMENT_CATCH_PET_DESC: string;
			ACHIEVEMENT_CATCH_PET_NAME: string;
			ACHIEVEMENT_CHALLENGER_DESC: string;
			ACHIEVEMENT_CHALLENGER_NAME: string;
			ACHIEVEMENT_CHAMP_DESC: string;
			ACHIEVEMENT_CHAMP_NAME: string;
			ACHIEVEMENT_COIN_COLLECT_DESC: string;
			ACHIEVEMENT_COIN_COLLECT_NAME: string;
			ACHIEVEMENT_COLISEUM_DEFEAT_DESC: string;
			ACHIEVEMENT_COLISEUM_DEFEAT_NAME: string;
			ACHIEVEMENT_COLLECT_PAGES: string;
			ACHIEVEMENT_COLLECT_PAGES_DESC: string;
			ACHIEVEMENT_COMPLETED: string;
			ACHIEVEMENT_DECORATOR_DESC: string;
			ACHIEVEMENT_DECORATOR_NAME: string;
			ACHIEVEMENT_FINISH_TOWER_FLOORS: string;
			ACHIEVEMENT_FINISH_TOWER_FLOORS_DESC: string;
			ACHIEVEMENT_FINISHED: string;
			ACHIEVEMENT_FOREST_CHESTS_DESC: string;
			ACHIEVEMENT_FOREST_CHESTS_NAME: string;
			ACHIEVEMENT_FOREST_DEFEAT_WIZARDS_DESC: string;
			ACHIEVEMENT_FOREST_DEFEAT_WIZARDS_NAME: string;
			ACHIEVEMENT_FOREST_NEEK: string;
			ACHIEVEMENT_FOREST_NEEK_DESC: string;
			ACHIEVEMENT_FOREST_QUESTS_DESC: string;
			ACHIEVEMENT_FOREST_QUESTS_NAME: string;
			ACHIEVEMENT_FOREST_SET_DESC: string;
			ACHIEVEMENT_FOREST_SET_NAME: string;
			ACHIEVEMENT_GROUP_BATTLE: string;
			ACHIEVEMENT_GROUP_BONFIRE: string;
			ACHIEVEMENT_GROUP_EARTHTOWER: string;
			ACHIEVEMENT_GROUP_EDUCATION: string;
			ACHIEVEMENT_GROUP_EXPLORATION: string;
			ACHIEVEMENT_GROUP_FIREFLY: string;
			ACHIEVEMENT_GROUP_GENERAL: string;
			ACHIEVEMENT_GROUP_LAMPLIGHT: string;
			ACHIEVEMENT_GROUP_PVP: string;
			ACHIEVEMENT_GROUP_SHIPWRECK: string;
			ACHIEVEMENT_GROUP_SHIVERCHILL: string;
			ACHIEVEMENT_GROUP_SKYWATCH: string;
			ACHIEVEMENT_MASTER_SKILLS_DESC: string;
			ACHIEVEMENT_MASTER_SKILLS_NAME: string;
			ACHIEVEMENT_MONSTER_HUNTER_DESC: string;
			ACHIEVEMENT_MONSTER_HUNTER_NAME: string;
			ACHIEVEMENT_NEWBIE_DESC: string;
			ACHIEVEMENT_NEWBIE_NAME: string;
			ACHIEVEMENT_PACKRAT_DESC: string;
			ACHIEVEMENT_PACKRAT_NAME: string;
			ACHIEVEMENT_PRODIGY_DESC: string;
			ACHIEVEMENT_PRODIGY_NAME: string;
			ACHIEVEMENT_QUESTIONNAIRE_DESC: string;
			ACHIEVEMENT_QUESTIONNAIRE_NAME: string;
			ACHIEVEMENT_RUNWAY_MODEL_DESC: string;
			ACHIEVEMENT_RUNWAY_MODEL_NAME: string;
			ACHIEVEMENT_SAVE_FLORIAN: string;
			ACHIEVEMENT_SAVE_FLORIAN_DESC: string;
			ACHIEVEMENT_SEQUENCING_DESC: string;
			ACHIEVEMENT_SEQUENCING_NAME: string;
			ACHIEVEMENT_SHIPWRECK_CHESTS_DESC: string;
			ACHIEVEMENT_SHIPWRECK_CHESTS_NAME: string;
			ACHIEVEMENT_SHIPWRECK_CLEAR_INK_DESC: string;
			ACHIEVEMENT_SHIPWRECK_CLEAR_INK_NAME: string;
			ACHIEVEMENT_SHIPWRECK_DEFEAT_WIZARDS_DESC: string;
			ACHIEVEMENT_SHIPWRECK_DEFEAT_WIZARDS_NAME: string;
			ACHIEVEMENT_SHIPWRECK_QUESTS_DESC: string;
			ACHIEVEMENT_SHIPWRECK_QUESTS_NAME: string;
			ACHIEVEMENT_SHIPWRECK_SET_DESC: string;
			ACHIEVEMENT_SHIPWRECK_SET_NAME: string;
			ACHIEVEMENT_SHIVERCHILL_CHESTS_DESC: string;
			ACHIEVEMENT_SHIVERCHILL_CHESTS_NAME: string;
			ACHIEVEMENT_SHIVERCHILL_DEFEAT_WIZARDS_DESC: string;
			ACHIEVEMENT_SHIVERCHILL_DEFEAT_WIZARDS_NAME: string;
			ACHIEVEMENT_SHIVERCHILL_QUESTS_DESC: string;
			ACHIEVEMENT_SHIVERCHILL_QUESTS_NAME: string;
			ACHIEVEMENT_SHIVERCHILL_SET_DESC: string;
			ACHIEVEMENT_SHIVERCHILL_SET_NAME: string;
			ACHIEVEMENT_SHOPAHOLIC_DESC: string;
			ACHIEVEMENT_SHOPAHOLIC_NAME: string;
			ACHIEVEMENT_SKYWATCH_CHESTS_DESC: string;
			ACHIEVEMENT_SKYWATCH_CHESTS_NAME: string;
			ACHIEVEMENT_SKYWATCH_DEFEAT_WIZARDS_DESC: string;
			ACHIEVEMENT_SKYWATCH_DEFEAT_WIZARDS_NAME: string;
			ACHIEVEMENT_SKYWATCH_QUESTS_DESC: string;
			ACHIEVEMENT_SKYWATCH_QUESTS_NAME: string;
			ACHIEVEMENT_SKYWATCH_SET_DESC: string;
			ACHIEVEMENT_SKYWATCH_SET_NAME: string;
			ACHIEVEMENT_SNAKE_BUDDY: string;
			ACHIEVEMENT_SNAKE_BUDDY_DESC: string;
			ACHIEVEMENT_SPELLMASTER_DESC: string;
			ACHIEVEMENT_SPELLMASTER_NAME: string;
			ACHIEVEMENT_TOURIST_DESC: string;
			ACHIEVEMENT_TOURIST_NAME: string;
			ACHIEVEMENT_TOWER_FLOORS_DESC: string;
			ACHIEVEMENT_TOWER_FLOORS_NAME: string;
			ACHIEVEMENT_TURN_UP_HEAT_DESC: string;
			ACHIEVEMENT_TURN_UP_HEAT_NAME: string;
			ACHIEVEMENT_UNLOCKED_TITLE: string;
			AD_CRYSTAL_CAVERNS_LAUNCH_BODY: string;
			AD_CRYSTAL_CAVERNS_LAUNCH_TITLE: string;
			AD_CRYSTAL_CAVERNS_TEASER2_BODY: string;
			AD_CRYSTAL_CAVERNS_TEASER2_TITLE: string;
			AD_PET_LORE_PREVIEW_BODY: string;
			AD_PET_LORE_PREVIEW_BODY_2: string;
			AD_PET_LORE_PREVIEW_TITLE: string;
			AD_PET_LORE_PREVIEW_TITLE_2: string;
			AD_PETBOOK_BODY: string;
			AD_PETBOOK_TITLE: string;
			AD_SUMMER_QUEST_BODY: string;
			AD_SUMMER_QUEST_TITLE: string;
			ADD_FRIEND_PROMPT_USERNAME: string;
			ADVENTURE_CONFIRMATION: string;
			ADVENTURE_LEVEL: string;
			ADVENTURE_REMAINING_REWARDS: string;
			ADVENTURE_REMAINING_REWARDS_SINGLE: string;
			ALREADY_ON_TEAM_TOOLTIP: string;
			ARCHIVES_ENTRANCE_WELCOME: string;
			ARCHIVES_EXIT_PAGES: string;
			ARCHIVES_EXIT_TITLE: string;
			ARCHIVES_EXIT_WARNING: string;
			ARCHIVES_EXIT_WARNING_COLLECTED: string;
			ARCHIVES_PRIZES_MESSAGE: string;
			ARCHIVES_PRIZES_TITLE: string;
			ARCHIVES_TITLE: string;
			ARCHIVES_WHEEL_COMEBACK: string;
			ARENA_CHALLENGE_WIZARDS: string;
			ARENA_CHECK_INTERNET_MESSAGE: string;
			ARENA_CONFIRM_TRAINING: string;
			ARENA_DOWN_MESSAGE: string;
			ARENA_EARN_BRONZE: string;
			ARENA_FIND_CHALLENGER: string;
			ARENA_LEADERBOARD_TOP_PLAYERS: string;
			ARENA_LEADERBOARD_WORLD_TOP_PLAYER: string;
			ARENA_MUST_BE_IN_CLASS: string;
			ARENA_MY_SCORE: string;
			ARENA_OFFLINE_MESSAGE: string;
			ARENA_RANK_UP_FASTER: string;
			ARENA_STORE_DIAMOND_BUTTON_BOT: string;
			ARENA_STORE_DIAMOND_BUTTON_TOP: string;
			ARENA_STORE_GOLD_BUTTON_BOT: string;
			ARENA_STORE_GOLD_BUTTON_TOP: string;
			ARENA_STORE_PLATINUM_BUTTON_BOT: string;
			ARENA_STORE_PLATINUM_BUTTON_TOP: string;
			ARENA_STORE_SILVER_BUTTON_BOT: string;
			ARENA_STORE_SILVER_BUTTON_TOP: string;
			ARENA_TITLE: string;
			ATTACK_SELECT_ACTIONS: string;
			ATTACK_SELECT_ATTACK: string;
			ATTACK_SELECT_CAPTURE: string;
			ATTACK_SELECT_ELEMENTS: string;
			ATTACK_SELECT_EPIC_SPELLS: string;
			ATTACK_SELECT_ESCAPE: string;
			ATTACK_SELECT_LEVEL: string;
			ATTACK_SELECT_MY_TEAM: string;
			ATTACK_SELECT_SPELLS: string;
			AWARDS_TITLE: string;
			BACKPACK_BUTTON_BOOTS: string;
			BACKPACK_BUTTON_BUDDIES: string;
			BACKPACK_BUTTON_CURRENCY: string;
			BACKPACK_BUTTON_HATS: string;
			BACKPACK_BUTTON_ITEMS: string;
			BACKPACK_BUTTON_OUTFITS: string;
			BACKPACK_BUTTON_RELICS: string;
			BACKPACK_BUTTON_WANDS: string;
			BATTLE_API_MAINTENANCE_MESSAGE: string;
			BATTLE_INTRO: string;
			BATTLE_REQUEST_ACCEPT: string;
			BATTLE_REQUEST_NAME: string;
			BATTLE_STATUS_ALL_OUT_ATTACK: string;
			BATTLE_STATUS_LEVEL: string;
			BONFIRE_GUARDIAN: string;
			BOOST_DESCRIPTION_DIG_FASTER: string;
			BOOST_DESCRIPTION_MORE_FOSSILS: string;
			BOOST_DESCRIPTION_MORE_GEARS: string;
			BOOST_DESCRIPTION_MULTIPLIER: string;
			BOOST_DESCRIPTION_SLOW_TIME: string;
			BOOST_DESCRIPTION_WALK_FASTER: string;
			BOOST_MENU_BUTTON_NONE: string;
			BOOST_MENU_TITLE: string;
			BOSS_NAME_GLACIAS: string;
			BOSS_NAME_YETI: string;
			BOUNTIES_INCREASE_RANK: string;
			BOUNTY_BOARD_ANCIENT_REWARD: string;
			BOUNTY_BOARD_BOUNTY_TITLE: string;
			BOUNTY_BOARD_BUTTON_BOT: string;
			BOUNTY_BOARD_BUTTON_TOP: string;
			BOUNTY_BOARD_COMPLETED: string;
			BOUNTY_BOARD_COMPLETED_TURN_IN: string;
			BOUNTY_BOARD_GO_TO_LAMPLIGHT: string;
			BOUNTY_BOARD_MEMBER_BUTTON_BOT: string;
			BOUNTY_BOARD_MEMBER_BUTTON_TOP: string;
			BOUNTY_BOARD_POSSIBLE_REWARDS: string;
			BOUNTY_BOARD_PREPARE_TEAM: string;
			BOUNTY_BOARD_TITLE: string;
			BOUNTY_BOARD_UNLOCK_MESSAGE: string;
			BOUNTY_DEFEAT_MONSTER_TEXT_0_A: string;
			BOUNTY_DEFEAT_MONSTER_TEXT_0_AN: string;
			BOUNTY_DEFEAT_MONSTER_TEXT_1: string;
			BOUNTY_DEFEAT_MONSTER_TEXT_2: string;
			BOUNTY_DEFEAT_MONSTER_TEXT_3: string;
			BOUNTY_DEFEAT_MONSTER_TEXT_4: string;
			BOUNTY_FOUND: string;
			BOUNTY_POINTS_100: string;
			BOUNTY_POINTS_20: string;
			BOUNTY_POINTS_5: string;
			BOUNTY_POINTS_50: string;
			BOUNTY_RUN_ABANDON_WARNING: string;
			BOUNTY_RUN_ABANDON_WARNING_TITLE: string;
			BOUNTY_RUN_BOSS_BUFF: string;
			BOUNTY_RUN_BUFF_CRITICAL: string;
			BOUNTY_RUN_BUFF_DAMAGE: string;
			BOUNTY_RUN_BUFF_HEALTH: string;
			BOUNTY_RUN_CLOSE_MENU: string;
			BOUNTY_RUN_RARE: string;
			BOUNTY_RUN_SELECT_BOUNTY: string;
			BOUNTY_RUN_START_RUN: string;
			BOUNTY_RUN_TIME_REMAINING: string;
			BUTTON_APPLY: string;
			BUTTON_BACK: string;
			BUTTON_BACK_CAPITAL: string;
			BUTTON_CANCEL: string;
			BUTTON_CANCEL_UPPERCASE: string;
			BUTTON_CLICK_HERE: string;
			BUTTON_CLOSE: string;
			BUTTON_DELETE_TEAM: string;
			BUTTON_DONE: string;
			BUTTON_GO_BACK: string;
			BUTTON_KEEP_TEAM: string;
			BUTTON_LEAVE_TEAM: string;
			BUTTON_NEXT: string;
			BUTTON_NEXT_CAPITAL: string;
			BUTTON_NO: string;
			BUTTON_NO_UPPERCASE: string;
			BUTTON_OK_EXCLAMATION: string;
			BUTTON_OK_UPPERCASE: string;
			BUTTON_OKAY: string;
			BUTTON_OKAY_CAPITAL: string;
			BUTTON_OKAY_EXCLAMATION: string;
			BUTTON_OKAY_UPPERCASE: string;
			BUTTON_QUIT_CAPITAL: string;
			BUTTON_QUIT_QUESTION: string;
			BUTTON_STAY_TEAM: string;
			BUTTON_YES: string;
			BUTTON_YES_UPPERCASE: string;
			BUY_TOY_ASK_PARENT: string;
			BUY_TOY_BUY_NOW: string;
			BUY_TOY_EPIC_ATTACK: string;
			BUY_TOY_MESSAGE: string;
			BUY_TOY_REQUIRE_COMPUTER_MESSAGE: string;
			CANCEL: string;
			CHARACTER_CREATE_EYE_COLOR: string;
			CHARACTER_CREATE_HAIR_COLOR: string;
			CHARACTER_CREATE_HAIR_STYLE: string;
			CHARACTER_CREATE_SKIN_COLOR: string;
			CHARACTER_SELECT_ADD_CHARACTER: string;
			CHARACTER_SELECT_ENTER_CLASS: string;
			CHARACTER_SELECT_ERROR_INVALID_CLASS_CODE: string;
			CHARACTER_SELECT_ERROR_NO_CLASS_CODE: string;
			CHARACTER_SELECT_LEARN: string;
			CHARACTER_SELECT_NEW_CLASS_BODY: string;
			CHARACTER_SELECT_NEW_CLASS_TITLE: string;
			CHARACTER_SELECT_NEW_TEACHER: string;
			CHARACTER_SELECT_NO_CLASS_CODE: string;
			CHARACTER_SELECT_TOYS: string;
			CHARACTER_SELECT_UPDATE: string;
			CHAT_ABRACA_DAB_RA: string;
			CHAT_ABRACADABRA: string;
			CHAT_ALL_GOOD: string;
			CHAT_ALL_RIGHT: string;
			CHAT_ANIMALS: string;
			CHAT_ARE_YOU_COMING: string;
			CHAT_ARE_YOU_HAVING_FUN: string;
			CHAT_ARE_YOU_LEAVING: string;
			CHAT_ARE_YOU_STAYING: string;
			CHAT_ASK_PARENTS: string;
			CHAT_BAD: string;
			CHAT_BARELY: string;
			CHAT_BECAUSE: string;
			CHAT_BORING: string;
			CHAT_BOUGHT_IT: string;
			CHAT_BUNNIES_ARE_BEST: string;
			CHAT_BUSY: string;
			CHAT_BUT: string;
			CHAT_BYE: string;
			CHAT_BYE_BYE: string;
			CHAT_CANT_RIGHT_NOW: string;
			CHAT_CHECK_IT_OUT: string;
			CHAT_CHILL_CHAR_COOL: string;
			CHAT_CHILL_CHAR_FAVOURITE: string;
			CHAT_COME_OVER_HERE: string;
			CHAT_CRUD: string;
			CHAT_DEPENDS: string;
			CHAT_DID_YOU_CATCH: string;
			CHAT_DID_YOU_SEE_THAT: string;
			CHAT_DO_YOU_HAVE: string;
			CHAT_DO_YOU_HAVE_A_MIN: string;
			CHAT_DO_YOU_LIKE_BUNNIES: string;
			CHAT_DO_YOU_LIKE_FOXES: string;
			CHAT_DON_ZORRO_FANTASTICO: string;
			CHAT_DONT_BOTHER: string;
			CHAT_DRAGONS: string;
			CHAT_DRAGONS_COMING: string;
			CHAT_DRAGONS_COOL: string;
			CHAT_DRAGONS_HERE: string;
			CHAT_DRAGONS_LIKE: string;
			CHAT_DRAGONS_SEEN: string;
			CHAT_DRAGONS_WANT: string;
			CHAT_DUDE: string;
			CHAT_ECLIPSE_COOL: string;
			CHAT_ECLIPSE_FAVOURITE: string;
			CHAT_ELEMENTARY: string;
			CHAT_EVERYONE_LOOK: string;
			CHAT_FEEL_LIKE_DANCING: string;
			CHAT_FOLLOW_ME: string;
			CHAT_FORGET_IT: string;
			CHAT_FOUND_IT: string;
			CHAT_FOUND_YOU: string;
			CHAT_FOXES_ARE_BEST: string;
			CHAT_FREAKY: string;
			CHAT_FRIENDS: string;
			CHAT_FUN: string;
			CHAT_FUNDERFUL: string;
			CHAT_GHOSTS: string;
			CHAT_GO_AWAY: string;
			CHAT_GO_BUNNY_BANDITS: string;
			CHAT_GO_FOX_KNIGHTS: string;
			CHAT_GOLLY: string;
			CHAT_GOOD: string;
			CHAT_GOOD_AFTERNOON: string;
			CHAT_GOOD_MORNING: string;
			CHAT_GOOD_NIGHT: string;
			CHAT_GOOD_TO_KNOW: string;
			CHAT_GOODBYE: string;
			CHAT_GOT_TO_GO: string;
			CHAT_GREAT: string;
			CHAT_GREETINGS: string;
			CHAT_GUESS: string;
			CHAT_GUESS_AGAIN: string;
			CHAT_HAPPY: string;
			CHAT_HARRIET_HOOD_RULES: string;
			CHAT_HELLO: string;
			CHAT_HELLO_THERE: string;
			CHAT_HELP_ME: string;
			CHAT_HEY: string;
			CHAT_HI: string;
			CHAT_HIPPITY_HOP: string;
			CHAT_HOP_HOP: string;
			CHAT_HOW: string;
			CHAT_HOW_ARE_YOU: string;
			CHAT_I_CAUGHT_A: string;
			CHAT_I_DONT_LIKE_IT_HERE: string;
			CHAT_I_GOT_A: string;
			CHAT_I_HAVE_TO_GO: string;
			CHAT_I_HAVE_TO_LEAVE: string;
			CHAT_I_LEVELED_UP: string;
			CHAT_I_LIKE_BUNNIES: string;
			CHAT_I_LIKE_FOXES: string;
			CHAT_I_LIKE_IT_HERE: string;
			CHAT_I_LIKE_THIS_PLACE: string;
			CHAT_I_LIKE_YOU_PET: string;
			CHAT_I_LIKE_YOUR_HAIR: string;
			CHAT_I_LIKE_YOUR_HAT: string;
			CHAT_I_LIKE_YOUR_OUTFIT: string;
			CHAT_I_LIKE_YOUR_WAND: string;
			CHAT_I_LOVE_PRODIGY: string;
			CHAT_IM_RICH: string;
			CHAT_ITS_SPOOKY_HERE: string;
			CHAT_ITS_SUPER_RARE: string;
			CHAT_ITS_TIME: string;
			CHAT_JEALOUS: string;
			CHAT_JOKING: string;
			CHAT_JUST_KIDDING: string;
			CHAT_JUST_YOU_WAIT: string;
			CHAT_KEEP_GOING: string;
			CHAT_KEEP_IT_UP: string;
			CHAT_KEEP_WALKING: string;
			CHAT_LEAVE_ME_ALONE: string;
			CHAT_LET_ME_SEE: string;
			CHAT_LETS_BATTLE: string;
			CHAT_LETS_DANCE: string;
			CHAT_LETS_GO: string;
			CHAT_LOCKED: string;
			CHAT_LOOK: string;
			CHAT_LOOK_AT_THIS: string;
			CHAT_LOVE_IT: string;
			CHAT_LUMA_COOL: string;
			CHAT_LUMA_FAVOURITE: string;
			CHAT_MADE_IT: string;
			CHAT_MADE_TONS_OF_GOLD: string;
			CHAT_MAKE_ME: string;
			CHAT_MANY_THANKS: string;
			CHAT_MAYBE: string;
			CHAT_MEMBER_AWESOME: string;
			CHAT_MY_FAVOURITE_IS: string;
			CHAT_MY_FAVOURITE_ITEM_IS: string;
			CHAT_MY_FAVOURITE_PET_IS: string;
			CHAT_NAH: string;
			CHAT_NEAT: string;
			CHAT_NEVER: string;
			CHAT_NEVER_MIND: string;
			CHAT_NO: string;
			CHAT_NO_CAN_DO: string;
			CHAT_NO_WAY: string;
			CHAT_NOT_RIGHT_NOW: string;
			CHAT_NOT_TODAY: string;
			CHAT_NOW: string;
			CHAT_NOW_QUESTION: string;
			CHAT_OKAY: string;
			CHAT_OMINOUS: string;
			CHAT_ONE_OF_THESE_IS: string;
			CHAT_OVER: string;
			CHAT_OVER_HERE: string;
			CHAT_PARENTS_BEST: string;
			CHAT_PARTY_TIME: string;
			CHAT_PERHAPS: string;
			CHAT_PRACTICE: string;
			CHAT_PRETTY_COOL: string;
			CHAT_PUYOY: string;
			CHAT_QUACK_QUACK: string;
			CHAT_QUIET: string;
			CHAT_QUITE: string;
			CHAT_RIBBIT: string;
			CHAT_RIGHT: string;
			CHAT_RIGHT_BEHIND_YOU: string;
			CHAT_RIGHT_OVER_HERE: string;
			CHAT_RIGHT_THERE: string;
			CHAT_SAFE_AND_SOUND: string;
			CHAT_SEE: string;
			CHAT_SEE_YA: string;
			CHAT_SEE_YOU_LATER: string;
			CHAT_SEEMS_LIKE_IT: string;
			CHAT_SHHH: string;
			CHAT_SHOW_FUNNY_FACE: string;
			CHAT_SOMEDAY: string;
			CHAT_SOMEONE_SAID_SO: string;
			CHAT_SORRY: string;
			CHAT_SOUNDS_LIKE: string;
			CHAT_TEACHER_AWESOME: string;
			CHAT_TELL_YOU_WHAT: string;
			CHAT_TERRIBLE: string;
			CHAT_THANK_YOU: string;
			CHAT_THERE_YOU_ARE: string;
			CHAT_THINK_ABOUT_IT: string;
			CHAT_TIDUS_COOL: string;
			CHAT_TIDUS_FAVOURITE: string;
			CHAT_TIME_FOR_BED: string;
			CHAT_TIME_FOR_DINNER: string;
			CHAT_TIME_FOR_LUNCH: string;
			CHAT_TIME_FOR_SUPPER: string;
			CHAT_TIME_TO_GET_UP: string;
			CHAT_TIME_TO_GO: string;
			CHAT_VERY_GOOD: string;
			CHAT_WHAT: string;
			CHAT_WHAT_DOES_FOX_SAY: string;
			CHAT_WHATS_UP: string;
			CHAT_WHERE: string;
			CHAT_WHO: string;
			CHAT_WHO_ARE_YOU: string;
			CHAT_WHY: string;
			CHAT_YES: string;
			CHAT_YOLO: string;
			CHAT_YOU_COMING: string;
			CHAT_YOU_LOOK_COOL: string;
			CHAT_YOU_STILL_THERE: string;
			CHAT_YOURE_WELCOME: string;
			CHAT_ZZZ: string;
			CHEST_LOCKED_MESSAGE: string;
			CHEST_OPEN_MULTI: string;
			CHEST_OPEN_SINGLE: string;
			CHOOSE_A_PET: string;
			CHOOSE_PET_BUTTON: string;
			CHOOSE_SPELL_TITLE: string;
			CLASS_CODE_CONTINUE: string;
			CLASS_CODE_CORRECT: string;
			CLASS_CODE_ERROR: string;
			CLASS_CODE_LEARN_MORE_BODY: string;
			CLASS_CODE_LEARN_MORE_HEADER: string;
			CLASS_CODE_PLAYING_AT_HOME: string;
			CLASS_CODE_PLAYING_AT_SCHOOL: string;
			CLASS_CODE_PROMPT_TEACHER_CLICK_0: string;
			CLASS_CODE_PROMPT_TEACHER_CLICK_1: string;
			CLASS_CODE_SAVED: string;
			CLASS_CODE_SELECT_CONTENT: string;
			CLASS_CODE_SELECT_JOIN: string;
			CLASS_CODE_SELECT_PLAY: string;
			CLASS_CODE_SELECT_TITLE: string;
			CLASS_CODE_TEACHER: string;
			CLASS_CODE_TITLE: string;
			"CLASS_CODE-CONTENT": string;
			CLASS_MODE_LAMPLIGHT_BODY: string;
			CLASS_MODE_LAMPLIGHT_TITLE: string;
			CLASS_MODE_SPIN_BUTTON: string;
			CLASS_MODE_TW: string;
			CLASS_MODE_WOW: string;
			CLICK_TO_ADD: string;
			CO_OP_CORRECT_ANSWERS: string;
			CO_OP_CRYSTAL_HEALTH_NAME: string;
			CO_OP_GUEST_SUBTITLE: string;
			CO_OP_GUEST_TAG: string;
			CO_OP_HOST_START_BUTTON: string;
			CO_OP_HOST_SUBTITLE: string;
			CO_OP_INPUT_BLOCKED_MODAL: string;
			CO_OP_LEAVE_TEAM: string;
			CO_OP_MORE_TITAN_SHARDS: string;
			CO_OP_PARTY_CELL_FRIEND: string;
			CO_OP_PARTY_CELL_FULL: string;
			CO_OP_PARTY_CELL_JOIN_BUTTON: string;
			CO_OP_PARTY_CREATE_BUTTON: string;
			CO_OP_PARTY_CREATE_SUBTITLE: string;
			CO_OP_PARTY_CREATE_TITLE: string;
			CO_OP_PARTY_NO_TEAMS: string;
			CO_OP_PARTY_SELECT_SUBTITLE: string;
			CO_OP_PARTY_SELECT_TITLE: string;
			CO_OP_REJOIN_TEAM: string;
			CO_OP_RESULTS_BANNER: string;
			CO_OP_REWARDS_EARNED: string;
			CO_OP_TEAM: string;
			CO_OP_TITAN_HEALTH_NAME: string;
			CODE_INCORRECT_LENGTH_ERROR: string;
			CODE_INVALID_ERROR: string;
			CODE_UNKNOWN_ERROR: string;
			COLISEUM_BUTTON_CHALLENGE: string;
			COLISEUM_OPPONENT_ADVENTURER_DESCRIPTION: string;
			COLISEUM_OPPONENT_ADVENTURER_NAME: string;
			COLISEUM_OPPONENT_ADVENTURER_TITLE: string;
			COLISEUM_OPPONENT_BEASTMASTER_DESCRIPTION: string;
			COLISEUM_OPPONENT_BEASTMASTER_NAME: string;
			COLISEUM_OPPONENT_BEASTMASTER_TITLE: string;
			COLISEUM_OPPONENT_CAROLER_DESCRIPTION: string;
			COLISEUM_OPPONENT_CAROLER_NAME: string;
			COLISEUM_OPPONENT_CAROLER_TITLE: string;
			COLISEUM_OPPONENT_COPYCAT_DESCRIPTION: string;
			COLISEUM_OPPONENT_COPYCAT_NAME: string;
			COLISEUM_OPPONENT_COPYCAT_TITLE: string;
			COLISEUM_OPPONENT_CURIOUS_ONE_DESCRIPTION: string;
			COLISEUM_OPPONENT_CURIOUS_ONE_NAME: string;
			COLISEUM_OPPONENT_CURIOUS_ONE_TITLE: string;
			COLISEUM_OPPONENT_EMERALD_KNIGHT_DESCRIPTION: string;
			COLISEUM_OPPONENT_EMERALD_KNIGHT_NAME: string;
			COLISEUM_OPPONENT_EMERALD_KNIGHT_TITLE: string;
			COLISEUM_OPPONENT_ENIGMA_DESCRIPTION: string;
			COLISEUM_OPPONENT_ENIGMA_NAME: string;
			COLISEUM_OPPONENT_ENIGMA_TITLE: string;
			COLISEUM_OPPONENT_FOREST_GUARDIAN_DESCRIPTION: string;
			COLISEUM_OPPONENT_FOREST_GUARDIAN_NAME: string;
			COLISEUM_OPPONENT_FOREST_GUARDIAN_TITLE: string;
			COLISEUM_OPPONENT_FOREST_SPRITE_DESCRIPTION: string;
			COLISEUM_OPPONENT_FOREST_SPRITE_NAME: string;
			COLISEUM_OPPONENT_FOREST_SPRITE_TITLE: string;
			COLISEUM_OPPONENT_ICE_QUEEN_DESCRIPTION: string;
			COLISEUM_OPPONENT_ICE_QUEEN_NAME: string;
			COLISEUM_OPPONENT_ICE_QUEEN_TITLE: string;
			COLISEUM_OPPONENT_LOUDMOUTH_DESCRIPTION: string;
			COLISEUM_OPPONENT_LOUDMOUTH_NAME: string;
			COLISEUM_OPPONENT_LOUDMOUTH_TITLE: string;
			COLISEUM_OPPONENT_METALHEAD_DESCRIPTION: string;
			COLISEUM_OPPONENT_METALHEAD_NAME: string;
			COLISEUM_OPPONENT_METALHEAD_TITLE: string;
			COLISEUM_OPPONENT_NAMELESS_DESCRIPTION: string;
			COLISEUM_OPPONENT_NAMELESS_NAME: string;
			COLISEUM_OPPONENT_NAMELESS_TITLE: string;
			COLISEUM_OPPONENT_NEW_GIRL_DESCRIPTION: string;
			COLISEUM_OPPONENT_NEW_GIRL_NAME: string;
			COLISEUM_OPPONENT_NEW_GIRL_TITLE: string;
			COLISEUM_OPPONENT_PET_ENTHUSIAST_DESCRIPTION: string;
			COLISEUM_OPPONENT_PET_ENTHUSIAST_NAME: string;
			COLISEUM_OPPONENT_PET_ENTHUSIAST_TITLE: string;
			COLISEUM_OPPONENT_PRODIGY_DESCRIPTION: string;
			COLISEUM_OPPONENT_PRODIGY_NAME: string;
			COLISEUM_OPPONENT_PRODIGY_TITLE: string;
			COLISEUM_OPPONENT_SWEETHEART_DESCRIPTION: string;
			COLISEUM_OPPONENT_SWEETHEART_NAME: string;
			COLISEUM_OPPONENT_SWEETHEART_TITLE: string;
			COLISEUM_OPPONENT_TIMED_TRAVELLER_DESCRIPTION: string;
			COLISEUM_OPPONENT_TIMED_TRAVELLER_NAME: string;
			COLISEUM_OPPONENT_TIMED_TRAVELLER_TITLE: string;
			COLISEUM_OPPONENT_VETERAN_DESCRIPTION: string;
			COLISEUM_OPPONENT_VETERAN_NAME: string;
			COLISEUM_OPPONENT_VETERAN_TITLE: string;
			COLISEUM_OPPONENT_WELL_ROUNDED_DESCRIPTION: string;
			COLISEUM_OPPONENT_WELL_ROUNDED_NAME: string;
			COLISEUM_OPPONENT_WELL_ROUNDED_TITLE: string;
			COLISEUM_PROMPT_CHALLENGE: string;
			COLISEUM_PROMPT_REQUIRE_DEFEAT_PLURAL: string;
			COLISEUM_PROMPT_REQUIRE_DEFEAT_SINGLE: string;
			COLISEUM_PROMPT_REQUIRE_LEVEL: string;
			COLISEUM_PROMPT_REQUIRE_LEVEL_DEFEAT_PLURAL: string;
			COLISEUM_PROMPT_REQUIRE_LEVEL_DEFEAT_SINGLE: string;
			COLISEUM_REWARD: string;
			COMBAT_ATTACK_USED: string;
			COMBAT_BOSS_BATTLE: string;
			COMBAT_BOSS_TIME: string;
			COMBAT_BOUNTY_BATTLE: string;
			COMBAT_CANT_EAT_RIGHT_NOW: string;
			COMBAT_CAST_BONUS_HIT: string;
			COMBAT_CATCH_CONFIRM: string;
			COMBAT_CATCH_GOLD_MESSAGE_BODY: string;
			COMBAT_CATCH_NON_WIZARD: string;
			COMBAT_CATCH_TOO_MANY_MESSAGE_BODY: string;
			COMBAT_CATCH_TOO_MUCH_HEALTH: string;
			COMBAT_CLOUD_FIGHT: string;
			COMBAT_DEFEAT_AMBUSHERS: string;
			COMBAT_DEFEAT_GUARDIAN: string;
			COMBAT_DRAW: string;
			COMBAT_FREE_CATCH_CONFIRM: string;
			COMBAT_LOST: string;
			COMBAT_MINION_BATTLE: string;
			COMBAT_PIPPET_BATTLE: string;
			COMBAT_RAN_AWAY: string;
			COMBAT_RUN_FAILED: string;
			COMBAT_SAVE_EUGENE: string;
			COMBAT_SCARY_WORM: string;
			COMBAT_SNOWBALL_FIGHT: string;
			COMBAT_TITAN_BATTLE: string;
			COMBAT_TITAN_HIT: string;
			COMBAT_TRIPTROP_TRIO: string;
			COMBAT_WEATHER_METER: string;
			COMBAT_WIZARD_BATTLE: string;
			COMBAT_WON: string;
			COMBAT_YOU: string;
			COMING_SOON_MESSAGE: string;
			COMMON_CORE_STATE_STANDARDS: string;
			COOP_GUEST_BANNER_BODY: string;
			COUNTDOWN_DAY_LEFT: string;
			COUNTDOWN_DAYS_LEFT: string;
			COUNTDOWN_HOUR_LEFT: string;
			COUNTDOWN_HOURS_LEFT: string;
			COUNTDOWN_MINUTE_LEFT: string;
			COUNTDOWN_MINUTES_LEFT: string;
			COUNTDOWN_SECOND_LEFT: string;
			COUNTDOWN_SECONDS_LEFT: string;
			CREATURE_IS_EVOLVING: string;
			CREATURE_STOPPED_EVOLVING: string;
			CREATURE_TRYING_TO_EVOLVE: string;
			CRYSTAL_CAVERN_ASPEN_1: string;
			CRYSTAL_CAVERN_ASPEN_10: string;
			CRYSTAL_CAVERN_ASPEN_11: string;
			CRYSTAL_CAVERN_ASPEN_12: string;
			CRYSTAL_CAVERN_ASPEN_13: string;
			CRYSTAL_CAVERN_ASPEN_14: string;
			CRYSTAL_CAVERN_ASPEN_15: string;
			CRYSTAL_CAVERN_ASPEN_16: string;
			CRYSTAL_CAVERN_ASPEN_17: string;
			CRYSTAL_CAVERN_ASPEN_18: string;
			CRYSTAL_CAVERN_ASPEN_19: string;
			CRYSTAL_CAVERN_ASPEN_2: string;
			CRYSTAL_CAVERN_ASPEN_20: string;
			CRYSTAL_CAVERN_ASPEN_3: string;
			CRYSTAL_CAVERN_ASPEN_4: string;
			CRYSTAL_CAVERN_ASPEN_5: string;
			CRYSTAL_CAVERN_ASPEN_6: string;
			CRYSTAL_CAVERN_ASPEN_7: string;
			CRYSTAL_CAVERN_ASPEN_8: string;
			CRYSTAL_CAVERN_ASPEN_9: string;
			CRYSTAL_CAVERN_MINER_1: string;
			CRYSTAL_CAVERN_MINER_2: string;
			CRYSTAL_CAVERN_MINER_3: string;
			CRYSTAL_CAVERN_MINER_4: string;
			CRYSTAL_CAVERN_MINER_5: string;
			CRYSTAL_CAVERN_MINER_6: string;
			CRYSTAL_CAVERN_NOOT_1: string;
			CRYSTAL_CAVERN_NOOT_10: string;
			CRYSTAL_CAVERN_NOOT_11: string;
			CRYSTAL_CAVERN_NOOT_12: string;
			CRYSTAL_CAVERN_NOOT_13: string;
			CRYSTAL_CAVERN_NOOT_14: string;
			CRYSTAL_CAVERN_NOOT_15: string;
			CRYSTAL_CAVERN_NOOT_16: string;
			CRYSTAL_CAVERN_NOOT_17: string;
			CRYSTAL_CAVERN_NOOT_18: string;
			CRYSTAL_CAVERN_NOOT_19: string;
			CRYSTAL_CAVERN_NOOT_2: string;
			CRYSTAL_CAVERN_NOOT_20: string;
			CRYSTAL_CAVERN_NOOT_3: string;
			CRYSTAL_CAVERN_NOOT_4: string;
			CRYSTAL_CAVERN_NOOT_5: string;
			CRYSTAL_CAVERN_NOOT_6: string;
			CRYSTAL_CAVERN_NOOT_7: string;
			CRYSTAL_CAVERN_NOOT_8: string;
			CRYSTAL_CAVERN_NOOT_9: string;
			CRYSTAL_CAVERN_WINSTON_1: string;
			CRYSTAL_CAVERN_WINSTON_2: string;
			CRYSTAL_CAVERN_WINSTON_3: string;
			CRYSTAL_CAVERN_WINSTON_4: string;
			CRYSTAL_CAVERN_WINSTON_5: string;
			CRYSTAL_CAVERNS_AD_BODY: string;
			CRYSTAL_CAVERNS_AD_TITLE: string;
			CRYSTAL_CAVERNS_ADVENTURE: string;
			CURRENCY_BOUNTY_POINTS: string;
			CURRENCY_GOLD_COINS: string;
			CUTSCENE_SKIP: string;
			DAILY_LOGIN_BONUS_TITLE: string;
			DAILY_LOGIN_COME_BACK: string;
			DAILY_LOGIN_DAY: string;
			DAILY_QUESTIONS_TITLE: string;
			DANCE_DANCE_BEST_SCORE: string;
			DANCE_DANCE_BUTTON_BACK: string;
			DANCE_DANCE_BUTTON_GO: string;
			DANCE_DANCE_CHOOSE_DIFFICULTY: string;
			DANCE_DANCE_EARNED_GEARS: string;
			DANCE_DANCE_FAILED: string;
			DANCE_DANCE_GET_ROBOT_0: string;
			DANCE_DANCE_GET_ROBOT_1: string;
			DANCE_DANCE_GET_ROBOT_2: string;
			DANCE_DANCE_GET_ROBOT_3: string;
			DANCE_DANCE_HIGHER_LEVEL: string;
			DANCE_DANCE_INSTRUCTIONS_0: string;
			DANCE_DANCE_INSTRUCTIONS_1: string;
			DANCE_DANCE_INSTRUCTIONS_2: string;
			DANCE_DANCE_LEVEL_UP_MAX: string;
			DANCE_DANCE_LEVEL_UP_UNDER_10: string;
			DANCE_DANCE_LEVEL_UP_UNDER_5: string;
			DANCE_DANCE_LOWER_DIFFICULTY: string;
			DANCE_DANCE_MAX_LEVEL: string;
			DANCE_DANCE_MESSAGE_LEVEL_BODY: string;
			DANCE_DANCE_NEW_HIGH_SCORE: string;
			DANCE_DANCE_READY: string;
			DANCE_DANCE_READY_TO_START: string;
			DANCE_DANCE_REWARD: string;
			DANCE_DANCE_SPEED_UP: string;
			DANCE_DANCE_START: string;
			DANCE_DANCE_SUCCESS: string;
			DANCE_DANCE_TRY_AGAIN: string;
			DANCE_DANCE_TRY_NEW_DIFFICULTY: string;
			DANCE_DANCE_UH_OH: string;
			DELETE_TEAM_BODY: string;
			DELETE_TEAM_TITLE: string;
			DIALOG_CONTINUE: string;
			DIALOG_LEAVE: string;
			DIALOG_TITLE_TRIAL_LOCKED: string;
			DIALOGUE_ATHENA_1: string;
			DIALOGUE_ATHENA_10: string;
			DIALOGUE_ATHENA_11: string;
			DIALOGUE_ATHENA_12: string;
			DIALOGUE_ATHENA_13: string;
			DIALOGUE_ATHENA_14: string;
			DIALOGUE_ATHENA_15: string;
			DIALOGUE_ATHENA_16: string;
			DIALOGUE_ATHENA_17: string;
			DIALOGUE_ATHENA_2: string;
			DIALOGUE_ATHENA_3: string;
			DIALOGUE_ATHENA_4: string;
			DIALOGUE_ATHENA_5: string;
			DIALOGUE_ATHENA_6: string;
			DIALOGUE_ATHENA_7: string;
			DIALOGUE_ATHENA_8: string;
			DIALOGUE_ATHENA_9: string;
			DIALOGUE_BARGO_0: string;
			DIALOGUE_BARGO_1: string;
			DIALOGUE_BARGO_2: string;
			DIALOGUE_BARGO_3: string;
			DIALOGUE_BARGO_4: string;
			DIALOGUE_BENNI_0: string;
			DIALOGUE_BENNI_1: string;
			DIALOGUE_BENNI_10: string;
			DIALOGUE_BENNI_11: string;
			DIALOGUE_BENNI_12: string;
			DIALOGUE_BENNI_13: string;
			DIALOGUE_BENNI_14: string;
			DIALOGUE_BENNI_15: string;
			DIALOGUE_BENNI_16: string;
			DIALOGUE_BENNI_17: string;
			DIALOGUE_BENNI_18: string;
			DIALOGUE_BENNI_19: string;
			DIALOGUE_BENNI_2: string;
			DIALOGUE_BENNI_20: string;
			DIALOGUE_BENNI_21: string;
			DIALOGUE_BENNI_22: string;
			DIALOGUE_BENNI_23: string;
			DIALOGUE_BENNI_24: string;
			DIALOGUE_BENNI_25: string;
			DIALOGUE_BENNI_26: string;
			DIALOGUE_BENNI_27: string;
			DIALOGUE_BENNI_28: string;
			DIALOGUE_BENNI_29: string;
			DIALOGUE_BENNI_3: string;
			DIALOGUE_BENNI_30: string;
			DIALOGUE_BENNI_31: string;
			DIALOGUE_BENNI_32: string;
			DIALOGUE_BENNI_33: string;
			DIALOGUE_BENNI_34: string;
			DIALOGUE_BENNI_35: string;
			DIALOGUE_BENNI_36: string;
			DIALOGUE_BENNI_37: string;
			DIALOGUE_BENNI_38: string;
			DIALOGUE_BENNI_39: string;
			DIALOGUE_BENNI_4: string;
			DIALOGUE_BENNI_40: string;
			DIALOGUE_BENNI_41: string;
			DIALOGUE_BENNI_42: string;
			DIALOGUE_BENNI_43: string;
			DIALOGUE_BENNI_44: string;
			DIALOGUE_BENNI_45: string;
			DIALOGUE_BENNI_46: string;
			DIALOGUE_BENNI_5: string;
			DIALOGUE_BENNI_6: string;
			DIALOGUE_BENNI_7: string;
			DIALOGUE_BENNI_8: string;
			DIALOGUE_BENNI_9: string;
			DIALOGUE_BOK_0: string;
			DIALOGUE_BOK_1: string;
			DIALOGUE_BOK_10: string;
			DIALOGUE_BOK_11: string;
			DIALOGUE_BOK_12: string;
			DIALOGUE_BOK_13: string;
			DIALOGUE_BOK_14: string;
			DIALOGUE_BOK_15: string;
			DIALOGUE_BOK_16: string;
			DIALOGUE_BOK_17: string;
			DIALOGUE_BOK_18: string;
			DIALOGUE_BOK_19: string;
			DIALOGUE_BOK_2: string;
			DIALOGUE_BOK_20: string;
			DIALOGUE_BOK_21: string;
			DIALOGUE_BOK_22: string;
			DIALOGUE_BOK_23: string;
			DIALOGUE_BOK_24: string;
			DIALOGUE_BOK_25: string;
			DIALOGUE_BOK_26: string;
			DIALOGUE_BOK_27: string;
			DIALOGUE_BOK_28: string;
			DIALOGUE_BOK_29: string;
			DIALOGUE_BOK_3: string;
			DIALOGUE_BOK_30: string;
			DIALOGUE_BOK_31: string;
			DIALOGUE_BOK_32: string;
			DIALOGUE_BOK_33: string;
			DIALOGUE_BOK_34: string;
			DIALOGUE_BOK_35: string;
			DIALOGUE_BOK_36: string;
			DIALOGUE_BOK_37: string;
			DIALOGUE_BOK_38: string;
			DIALOGUE_BOK_39: string;
			DIALOGUE_BOK_4: string;
			DIALOGUE_BOK_5: string;
			DIALOGUE_BOK_6: string;
			DIALOGUE_BOK_7: string;
			DIALOGUE_BOK_8: string;
			DIALOGUE_BOK_9: string;
			DIALOGUE_BOOMBOX_0: string;
			DIALOGUE_BOOMBOX_1: string;
			DIALOGUE_BOOMBOX_2: string;
			DIALOGUE_BOOMBOX_3: string;
			DIALOGUE_BOOMBOX_4: string;
			DIALOGUE_BOOMBOX_5: string;
			DIALOGUE_BOOMBOX_6: string;
			DIALOGUE_BOOMBOX_7: string;
			DIALOGUE_BOOMBOX_8: string;
			DIALOGUE_BROCCOLINA_0: string;
			DIALOGUE_BROCCOLINA_1: string;
			DIALOGUE_CEBOLLINI_0: string;
			DIALOGUE_CEBOLLINI_1: string;
			DIALOGUE_CEBOLLINI_10: string;
			DIALOGUE_CEBOLLINI_11: string;
			DIALOGUE_CEBOLLINI_12: string;
			DIALOGUE_CEBOLLINI_13: string;
			DIALOGUE_CEBOLLINI_14: string;
			DIALOGUE_CEBOLLINI_15: string;
			DIALOGUE_CEBOLLINI_16: string;
			DIALOGUE_CEBOLLINI_17: string;
			DIALOGUE_CEBOLLINI_18: string;
			DIALOGUE_CEBOLLINI_19: string;
			DIALOGUE_CEBOLLINI_2: string;
			DIALOGUE_CEBOLLINI_3: string;
			DIALOGUE_CEBOLLINI_4: string;
			DIALOGUE_CEBOLLINI_5: string;
			DIALOGUE_CEBOLLINI_6: string;
			DIALOGUE_CEBOLLINI_7: string;
			DIALOGUE_CEBOLLINI_8: string;
			DIALOGUE_CEBOLLINI_9: string;
			DIALOGUE_DON_ZORRO_0: string;
			DIALOGUE_DON_ZORRO_1: string;
			DIALOGUE_DON_ZORRO_10: string;
			DIALOGUE_DON_ZORRO_11: string;
			DIALOGUE_DON_ZORRO_12: string;
			DIALOGUE_DON_ZORRO_13: string;
			DIALOGUE_DON_ZORRO_14: string;
			DIALOGUE_DON_ZORRO_2: string;
			DIALOGUE_DON_ZORRO_3: string;
			DIALOGUE_DON_ZORRO_4: string;
			DIALOGUE_DON_ZORRO_5: string;
			DIALOGUE_DON_ZORRO_6: string;
			DIALOGUE_DON_ZORRO_7: string;
			DIALOGUE_DON_ZORRO_8: string;
			DIALOGUE_DON_ZORRO_9: string;
			DIALOGUE_EUGENE_0: string;
			DIALOGUE_EUGENE_1: string;
			DIALOGUE_EUGENE_2: string;
			DIALOGUE_EUGENE_3: string;
			DIALOGUE_EUGENE_4: string;
			DIALOGUE_EUGENE_5: string;
			DIALOGUE_EUGENE_6: string;
			DIALOGUE_EVE_0: string;
			DIALOGUE_EVE_1: string;
			DIALOGUE_EVE_10: string;
			DIALOGUE_EVE_11: string;
			DIALOGUE_EVE_12: string;
			DIALOGUE_EVE_13: string;
			DIALOGUE_EVE_14: string;
			DIALOGUE_EVE_15: string;
			DIALOGUE_EVE_16: string;
			DIALOGUE_EVE_17: string;
			DIALOGUE_EVE_18: string;
			DIALOGUE_EVE_19: string;
			DIALOGUE_EVE_2: string;
			DIALOGUE_EVE_20: string;
			DIALOGUE_EVE_21: string;
			DIALOGUE_EVE_22: string;
			DIALOGUE_EVE_23: string;
			DIALOGUE_EVE_24: string;
			DIALOGUE_EVE_25: string;
			DIALOGUE_EVE_26: string;
			DIALOGUE_EVE_27: string;
			DIALOGUE_EVE_28: string;
			DIALOGUE_EVE_29: string;
			DIALOGUE_EVE_3: string;
			DIALOGUE_EVE_30: string;
			DIALOGUE_EVE_31: string;
			DIALOGUE_EVE_32: string;
			DIALOGUE_EVE_33: string;
			DIALOGUE_EVE_34: string;
			DIALOGUE_EVE_35: string;
			DIALOGUE_EVE_36: string;
			DIALOGUE_EVE_37: string;
			DIALOGUE_EVE_38: string;
			DIALOGUE_EVE_39: string;
			DIALOGUE_EVE_4: string;
			DIALOGUE_EVE_40: string;
			DIALOGUE_EVE_41: string;
			DIALOGUE_EVE_42: string;
			DIALOGUE_EVE_43: string;
			DIALOGUE_EVE_44: string;
			DIALOGUE_EVE_45: string;
			DIALOGUE_EVE_5: string;
			DIALOGUE_EVE_6: string;
			DIALOGUE_EVE_7: string;
			DIALOGUE_EVE_8: string;
			DIALOGUE_EVE_9: string;
			DIALOGUE_FIRST_NAME_SELECT_NOOT_1: string;
			DIALOGUE_FLORA_0: string;
			DIALOGUE_FLORA_1: string;
			DIALOGUE_FLORA_10: string;
			DIALOGUE_FLORA_11: string;
			DIALOGUE_FLORA_12: string;
			DIALOGUE_FLORA_13: string;
			DIALOGUE_FLORA_14: string;
			DIALOGUE_FLORA_15: string;
			DIALOGUE_FLORA_16: string;
			DIALOGUE_FLORA_17: string;
			DIALOGUE_FLORA_18: string;
			DIALOGUE_FLORA_19: string;
			DIALOGUE_FLORA_2: string;
			DIALOGUE_FLORA_20: string;
			DIALOGUE_FLORA_21: string;
			DIALOGUE_FLORA_22: string;
			DIALOGUE_FLORA_23: string;
			DIALOGUE_FLORA_24: string;
			DIALOGUE_FLORA_25: string;
			DIALOGUE_FLORA_26: string;
			DIALOGUE_FLORA_27: string;
			DIALOGUE_FLORA_28: string;
			DIALOGUE_FLORA_29: string;
			DIALOGUE_FLORA_3: string;
			DIALOGUE_FLORA_30: string;
			DIALOGUE_FLORA_31: string;
			DIALOGUE_FLORA_32: string;
			DIALOGUE_FLORA_33: string;
			DIALOGUE_FLORA_34: string;
			DIALOGUE_FLORA_35: string;
			DIALOGUE_FLORA_36: string;
			DIALOGUE_FLORA_37: string;
			DIALOGUE_FLORA_38: string;
			DIALOGUE_FLORA_39: string;
			DIALOGUE_FLORA_4: string;
			DIALOGUE_FLORA_5: string;
			DIALOGUE_FLORA_6: string;
			DIALOGUE_FLORA_7: string;
			DIALOGUE_FLORA_8: string;
			DIALOGUE_FLORA_9: string;
			DIALOGUE_FLORIAN_0: string;
			DIALOGUE_FLORIAN_1: string;
			DIALOGUE_FLORIAN_10: string;
			DIALOGUE_FLORIAN_11: string;
			DIALOGUE_FLORIAN_12: string;
			DIALOGUE_FLORIAN_13: string;
			DIALOGUE_FLORIAN_14: string;
			DIALOGUE_FLORIAN_15: string;
			DIALOGUE_FLORIAN_16: string;
			DIALOGUE_FLORIAN_17: string;
			DIALOGUE_FLORIAN_18: string;
			DIALOGUE_FLORIAN_19: string;
			DIALOGUE_FLORIAN_2: string;
			DIALOGUE_FLORIAN_20: string;
			DIALOGUE_FLORIAN_21: string;
			DIALOGUE_FLORIAN_22: string;
			DIALOGUE_FLORIAN_23: string;
			DIALOGUE_FLORIAN_24: string;
			DIALOGUE_FLORIAN_25: string;
			DIALOGUE_FLORIAN_26: string;
			DIALOGUE_FLORIAN_3: string;
			DIALOGUE_FLORIAN_4: string;
			DIALOGUE_FLORIAN_5: string;
			DIALOGUE_FLORIAN_6: string;
			DIALOGUE_FLORIAN_7: string;
			DIALOGUE_FLORIAN_8: string;
			DIALOGUE_FLORIAN_9: string;
			DIALOGUE_GALE_0: string;
			DIALOGUE_GALE_1: string;
			DIALOGUE_GALE_10: string;
			DIALOGUE_GALE_11: string;
			DIALOGUE_GALE_12: string;
			DIALOGUE_GALE_13: string;
			DIALOGUE_GALE_14: string;
			DIALOGUE_GALE_15: string;
			DIALOGUE_GALE_16: string;
			DIALOGUE_GALE_17: string;
			DIALOGUE_GALE_2: string;
			DIALOGUE_GALE_3: string;
			DIALOGUE_GALE_4: string;
			DIALOGUE_GALE_5: string;
			DIALOGUE_GALE_6: string;
			DIALOGUE_GALE_7: string;
			DIALOGUE_GALE_8: string;
			DIALOGUE_GALE_9: string;
			DIALOGUE_HARRIET_0: string;
			DIALOGUE_HARRIET_1: string;
			DIALOGUE_HARRIET_10: string;
			DIALOGUE_HARRIET_11: string;
			DIALOGUE_HARRIET_12: string;
			DIALOGUE_HARRIET_2: string;
			DIALOGUE_HARRIET_3: string;
			DIALOGUE_HARRIET_4: string;
			DIALOGUE_HARRIET_5: string;
			DIALOGUE_HARRIET_6: string;
			DIALOGUE_HARRIET_7: string;
			DIALOGUE_HARRIET_8: string;
			DIALOGUE_HARRIET_9: string;
			DIALOGUE_HARVEY_0: string;
			DIALOGUE_HARVEY_1: string;
			DIALOGUE_HARVEY_2: string;
			DIALOGUE_HARVEY_3: string;
			DIALOGUE_HARVEY_4: string;
			DIALOGUE_HARVEY_5: string;
			DIALOGUE_HOWARD_CORNELIUS_0: string;
			DIALOGUE_HOWARD_CORNELIUS_1: string;
			DIALOGUE_HOWARD_CORNELIUS_2: string;
			DIALOGUE_HOWARD_CORNELIUS_3: string;
			DIALOGUE_HOWARD_CORNELIUS_4: string;
			DIALOGUE_HOWARD_CORNELIUS_5: string;
			DIALOGUE_JELLY_JIM_0: string;
			DIALOGUE_JELLY_JIM_1: string;
			DIALOGUE_JELLY_JIM_2: string;
			DIALOGUE_JELLY_JIM_3: string;
			DIALOGUE_JELLY_JIM_4: string;
			DIALOGUE_JELLY_JIM_5: string;
			DIALOGUE_JELLY_JIM_6: string;
			DIALOGUE_JELLY_JIM_7: string;
			DIALOGUE_JULIA_GHOULIA_0: string;
			DIALOGUE_JULIA_GHOULIA_1: string;
			DIALOGUE_JULIA_GHOULIA_2: string;
			DIALOGUE_JULIA_GHOULIA_3: string;
			DIALOGUE_JULIA_GHOULIA_4: string;
			DIALOGUE_JULIA_GHOULIA_5: string;
			DIALOGUE_KANDI_KORN_1: string;
			DIALOGUE_KANDI_KORN_2: string;
			DIALOGUE_KANDI_KORN_3: string;
			DIALOGUE_KANDI_KORN_4: string;
			DIALOGUE_KANDI_KORN_5: string;
			DIALOGUE_KANDI_KORN_6: string;
			DIALOGUE_KOI_1: string;
			DIALOGUE_KOI_10: string;
			DIALOGUE_KOI_11: string;
			DIALOGUE_KOI_2: string;
			DIALOGUE_KOI_3: string;
			DIALOGUE_KOI_4: string;
			DIALOGUE_KOI_5: string;
			DIALOGUE_KOI_6: string;
			DIALOGUE_KOI_7: string;
			DIALOGUE_KOI_8: string;
			DIALOGUE_KOI_9: string;
			DIALOGUE_MAMA_STAR_0: string;
			DIALOGUE_MAMA_STAR_1: string;
			DIALOGUE_MAMA_STAR_10: string;
			DIALOGUE_MAMA_STAR_11: string;
			DIALOGUE_MAMA_STAR_12: string;
			DIALOGUE_MAMA_STAR_13: string;
			DIALOGUE_MAMA_STAR_14: string;
			DIALOGUE_MAMA_STAR_15: string;
			DIALOGUE_MAMA_STAR_16: string;
			DIALOGUE_MAMA_STAR_2: string;
			DIALOGUE_MAMA_STAR_3: string;
			DIALOGUE_MAMA_STAR_4: string;
			DIALOGUE_MAMA_STAR_5: string;
			DIALOGUE_MAMA_STAR_6: string;
			DIALOGUE_MAMA_STAR_7: string;
			DIALOGUE_MAMA_STAR_8: string;
			DIALOGUE_MAMA_STAR_9: string;
			DIALOGUE_MERCHANT_0: string;
			DIALOGUE_MERCHANT_1: string;
			DIALOGUE_MERCHANT_10: string;
			DIALOGUE_MERCHANT_11: string;
			DIALOGUE_MERCHANT_12: string;
			DIALOGUE_MERCHANT_13: string;
			DIALOGUE_MERCHANT_14: string;
			DIALOGUE_MERCHANT_15: string;
			DIALOGUE_MERCHANT_16: string;
			DIALOGUE_MERCHANT_17: string;
			DIALOGUE_MERCHANT_18: string;
			DIALOGUE_MERCHANT_19: string;
			DIALOGUE_MERCHANT_2: string;
			DIALOGUE_MERCHANT_20: string;
			DIALOGUE_MERCHANT_21: string;
			DIALOGUE_MERCHANT_22: string;
			DIALOGUE_MERCHANT_23: string;
			DIALOGUE_MERCHANT_24: string;
			DIALOGUE_MERCHANT_25: string;
			DIALOGUE_MERCHANT_26: string;
			DIALOGUE_MERCHANT_27: string;
			DIALOGUE_MERCHANT_28: string;
			DIALOGUE_MERCHANT_29: string;
			DIALOGUE_MERCHANT_3: string;
			DIALOGUE_MERCHANT_30: string;
			DIALOGUE_MERCHANT_31: string;
			DIALOGUE_MERCHANT_32: string;
			DIALOGUE_MERCHANT_33: string;
			DIALOGUE_MERCHANT_34: string;
			DIALOGUE_MERCHANT_35: string;
			DIALOGUE_MERCHANT_36: string;
			DIALOGUE_MERCHANT_37: string;
			DIALOGUE_MERCHANT_38: string;
			DIALOGUE_MERCHANT_39: string;
			DIALOGUE_MERCHANT_4: string;
			DIALOGUE_MERCHANT_5: string;
			DIALOGUE_MERCHANT_6: string;
			DIALOGUE_MERCHANT_7: string;
			DIALOGUE_MERCHANT_8: string;
			DIALOGUE_MERCHANT_9: string;
			DIALOGUE_MIRA_0: string;
			DIALOGUE_MIRA_1: string;
			DIALOGUE_MIRA_10: string;
			DIALOGUE_MIRA_11: string;
			DIALOGUE_MIRA_12: string;
			DIALOGUE_MIRA_13: string;
			DIALOGUE_MIRA_14: string;
			DIALOGUE_MIRA_15: string;
			DIALOGUE_MIRA_16: string;
			DIALOGUE_MIRA_17: string;
			DIALOGUE_MIRA_18: string;
			DIALOGUE_MIRA_19: string;
			DIALOGUE_MIRA_2: string;
			DIALOGUE_MIRA_20: string;
			DIALOGUE_MIRA_21: string;
			DIALOGUE_MIRA_22: string;
			DIALOGUE_MIRA_23: string;
			DIALOGUE_MIRA_24: string;
			DIALOGUE_MIRA_25: string;
			DIALOGUE_MIRA_26: string;
			DIALOGUE_MIRA_27: string;
			DIALOGUE_MIRA_28: string;
			DIALOGUE_MIRA_29: string;
			DIALOGUE_MIRA_3: string;
			DIALOGUE_MIRA_30: string;
			DIALOGUE_MIRA_31: string;
			DIALOGUE_MIRA_32: string;
			DIALOGUE_MIRA_33: string;
			DIALOGUE_MIRA_34: string;
			DIALOGUE_MIRA_35: string;
			DIALOGUE_MIRA_36: string;
			DIALOGUE_MIRA_37: string;
			DIALOGUE_MIRA_38: string;
			DIALOGUE_MIRA_39: string;
			DIALOGUE_MIRA_4: string;
			DIALOGUE_MIRA_40: string;
			DIALOGUE_MIRA_41: string;
			DIALOGUE_MIRA_42: string;
			DIALOGUE_MIRA_43: string;
			DIALOGUE_MIRA_44: string;
			DIALOGUE_MIRA_45: string;
			DIALOGUE_MIRA_46: string;
			DIALOGUE_MIRA_47: string;
			DIALOGUE_MIRA_5: string;
			DIALOGUE_MIRA_6: string;
			DIALOGUE_MIRA_7: string;
			DIALOGUE_MIRA_8: string;
			DIALOGUE_MIRA_9: string;
			DIALOGUE_MIRA_DEFEAT_0: string;
			DIALOGUE_MIRA_DEFEAT_1: string;
			DIALOGUE_MIRA_DEFEAT_2: string;
			DIALOGUE_MIRA_DEFEAT_3: string;
			DIALOGUE_MIRA_DEFEAT_4: string;
			DIALOGUE_MIRA_REWARD: string;
			DIALOGUE_MIST_1: string;
			DIALOGUE_MIST_2: string;
			DIALOGUE_MIST_3: string;
			DIALOGUE_MIST_4: string;
			DIALOGUE_MIST_5: string;
			DIALOGUE_MIZU_1: string;
			DIALOGUE_MIZU_2: string;
			DIALOGUE_MIZU_3: string;
			DIALOGUE_MIZU_4: string;
			DIALOGUE_MIZU_5: string;
			DIALOGUE_MOZZA_ELLE_0: string;
			DIALOGUE_MOZZA_ELLE_1: string;
			DIALOGUE_MOZZA_ELLE_10: string;
			DIALOGUE_MOZZA_ELLE_11: string;
			DIALOGUE_MOZZA_ELLE_2: string;
			DIALOGUE_MOZZA_ELLE_3: string;
			DIALOGUE_MOZZA_ELLE_4: string;
			DIALOGUE_MOZZA_ELLE_5: string;
			DIALOGUE_MOZZA_ELLE_6: string;
			DIALOGUE_MOZZA_ELLE_7: string;
			DIALOGUE_MOZZA_ELLE_8: string;
			DIALOGUE_MOZZA_ELLE_9: string;
			DIALOGUE_NOOT_0: string;
			DIALOGUE_NOOT_1: string;
			DIALOGUE_NOOT_10: string;
			DIALOGUE_NOOT_100: string;
			DIALOGUE_NOOT_101: string;
			DIALOGUE_NOOT_102: string;
			DIALOGUE_NOOT_103: string;
			DIALOGUE_NOOT_104: string;
			DIALOGUE_NOOT_105: string;
			DIALOGUE_NOOT_106: string;
			DIALOGUE_NOOT_107: string;
			DIALOGUE_NOOT_108: string;
			DIALOGUE_NOOT_109: string;
			DIALOGUE_NOOT_11: string;
			DIALOGUE_NOOT_110: string;
			DIALOGUE_NOOT_111: string;
			DIALOGUE_NOOT_112: string;
			DIALOGUE_NOOT_113: string;
			DIALOGUE_NOOT_114: string;
			DIALOGUE_NOOT_115: string;
			DIALOGUE_NOOT_116: string;
			DIALOGUE_NOOT_117: string;
			DIALOGUE_NOOT_118: string;
			DIALOGUE_NOOT_119: string;
			DIALOGUE_NOOT_12: string;
			DIALOGUE_NOOT_120: string;
			DIALOGUE_NOOT_121: string;
			DIALOGUE_NOOT_122: string;
			DIALOGUE_NOOT_123: string;
			DIALOGUE_NOOT_124: string;
			DIALOGUE_NOOT_125: string;
			DIALOGUE_NOOT_126: string;
			DIALOGUE_NOOT_127: string;
			DIALOGUE_NOOT_128: string;
			DIALOGUE_NOOT_129: string;
			DIALOGUE_NOOT_13: string;
			DIALOGUE_NOOT_130: string;
			DIALOGUE_NOOT_131: string;
			DIALOGUE_NOOT_132: string;
			DIALOGUE_NOOT_133: string;
			DIALOGUE_NOOT_134: string;
			DIALOGUE_NOOT_135: string;
			DIALOGUE_NOOT_136: string;
			DIALOGUE_NOOT_137: string;
			DIALOGUE_NOOT_138: string;
			DIALOGUE_NOOT_139: string;
			DIALOGUE_NOOT_14: string;
			DIALOGUE_NOOT_140: string;
			DIALOGUE_NOOT_141: string;
			DIALOGUE_NOOT_142: string;
			DIALOGUE_NOOT_143: string;
			DIALOGUE_NOOT_144: string;
			DIALOGUE_NOOT_145: string;
			DIALOGUE_NOOT_146: string;
			DIALOGUE_NOOT_147: string;
			DIALOGUE_NOOT_148: string;
			DIALOGUE_NOOT_149: string;
			DIALOGUE_NOOT_15: string;
			DIALOGUE_NOOT_150: string;
			DIALOGUE_NOOT_151: string;
			DIALOGUE_NOOT_152: string;
			DIALOGUE_NOOT_153: string;
			DIALOGUE_NOOT_154: string;
			DIALOGUE_NOOT_155: string;
			DIALOGUE_NOOT_156: string;
			DIALOGUE_NOOT_157: string;
			DIALOGUE_NOOT_158: string;
			DIALOGUE_NOOT_159: string;
			DIALOGUE_NOOT_16: string;
			DIALOGUE_NOOT_160: string;
			DIALOGUE_NOOT_161: string;
			DIALOGUE_NOOT_162: string;
			DIALOGUE_NOOT_163: string;
			DIALOGUE_NOOT_164: string;
			DIALOGUE_NOOT_165: string;
			DIALOGUE_NOOT_166: string;
			DIALOGUE_NOOT_167: string;
			DIALOGUE_NOOT_168: string;
			DIALOGUE_NOOT_169: string;
			DIALOGUE_NOOT_17: string;
			DIALOGUE_NOOT_170: string;
			DIALOGUE_NOOT_171: string;
			DIALOGUE_NOOT_172: string;
			DIALOGUE_NOOT_173: string;
			DIALOGUE_NOOT_174: string;
			DIALOGUE_NOOT_175: string;
			DIALOGUE_NOOT_176: string;
			DIALOGUE_NOOT_177: string;
			DIALOGUE_NOOT_178: string;
			DIALOGUE_NOOT_179: string;
			DIALOGUE_NOOT_18: string;
			DIALOGUE_NOOT_180: string;
			DIALOGUE_NOOT_181: string;
			DIALOGUE_NOOT_182: string;
			DIALOGUE_NOOT_183: string;
			DIALOGUE_NOOT_184: string;
			DIALOGUE_NOOT_185: string;
			DIALOGUE_NOOT_186: string;
			DIALOGUE_NOOT_187: string;
			DIALOGUE_NOOT_188: string;
			DIALOGUE_NOOT_189: string;
			DIALOGUE_NOOT_19: string;
			DIALOGUE_NOOT_190: string;
			DIALOGUE_NOOT_191: string;
			DIALOGUE_NOOT_192: string;
			DIALOGUE_NOOT_193: string;
			DIALOGUE_NOOT_194: string;
			DIALOGUE_NOOT_195: string;
			DIALOGUE_NOOT_196: string;
			DIALOGUE_NOOT_197: string;
			DIALOGUE_NOOT_198: string;
			DIALOGUE_NOOT_199: string;
			DIALOGUE_NOOT_2: string;
			DIALOGUE_NOOT_20: string;
			DIALOGUE_NOOT_200: string;
			DIALOGUE_NOOT_201: string;
			DIALOGUE_NOOT_202: string;
			DIALOGUE_NOOT_203: string;
			DIALOGUE_NOOT_204: string;
			DIALOGUE_NOOT_205: string;
			DIALOGUE_NOOT_206: string;
			DIALOGUE_NOOT_207: string;
			DIALOGUE_NOOT_208: string;
			DIALOGUE_NOOT_209: string;
			DIALOGUE_NOOT_21: string;
			DIALOGUE_NOOT_210: string;
			DIALOGUE_NOOT_211: string;
			DIALOGUE_NOOT_212: string;
			DIALOGUE_NOOT_213: string;
			DIALOGUE_NOOT_214: string;
			DIALOGUE_NOOT_215: string;
			DIALOGUE_NOOT_216: string;
			DIALOGUE_NOOT_217: string;
			DIALOGUE_NOOT_218: string;
			DIALOGUE_NOOT_219: string;
			DIALOGUE_NOOT_22: string;
			DIALOGUE_NOOT_220: string;
			DIALOGUE_NOOT_221: string;
			DIALOGUE_NOOT_222: string;
			DIALOGUE_NOOT_223: string;
			DIALOGUE_NOOT_224: string;
			DIALOGUE_NOOT_225: string;
			DIALOGUE_NOOT_226: string;
			DIALOGUE_NOOT_227: string;
			DIALOGUE_NOOT_228: string;
			DIALOGUE_NOOT_229: string;
			DIALOGUE_NOOT_23: string;
			DIALOGUE_NOOT_230: string;
			DIALOGUE_NOOT_231: string;
			DIALOGUE_NOOT_232: string;
			DIALOGUE_NOOT_233: string;
			DIALOGUE_NOOT_234: string;
			DIALOGUE_NOOT_235: string;
			DIALOGUE_NOOT_236: string;
			DIALOGUE_NOOT_237: string;
			DIALOGUE_NOOT_238: string;
			DIALOGUE_NOOT_239: string;
			DIALOGUE_NOOT_24: string;
			DIALOGUE_NOOT_240: string;
			DIALOGUE_NOOT_241: string;
			DIALOGUE_NOOT_242: string;
			DIALOGUE_NOOT_243: string;
			DIALOGUE_NOOT_244: string;
			DIALOGUE_NOOT_245: string;
			DIALOGUE_NOOT_246: string;
			DIALOGUE_NOOT_247: string;
			DIALOGUE_NOOT_248: string;
			DIALOGUE_NOOT_249: string;
			DIALOGUE_NOOT_25: string;
			DIALOGUE_NOOT_250: string;
			DIALOGUE_NOOT_251: string;
			DIALOGUE_NOOT_252: string;
			DIALOGUE_NOOT_253: string;
			DIALOGUE_NOOT_254: string;
			DIALOGUE_NOOT_255: string;
			DIALOGUE_NOOT_256: string;
			DIALOGUE_NOOT_257: string;
			DIALOGUE_NOOT_258: string;
			DIALOGUE_NOOT_259: string;
			DIALOGUE_NOOT_26: string;
			DIALOGUE_NOOT_260: string;
			DIALOGUE_NOOT_261: string;
			DIALOGUE_NOOT_262: string;
			DIALOGUE_NOOT_263: string;
			DIALOGUE_NOOT_264: string;
			DIALOGUE_NOOT_265: string;
			DIALOGUE_NOOT_266: string;
			DIALOGUE_NOOT_267: string;
			DIALOGUE_NOOT_268: string;
			DIALOGUE_NOOT_269: string;
			DIALOGUE_NOOT_27: string;
			DIALOGUE_NOOT_270: string;
			DIALOGUE_NOOT_271: string;
			DIALOGUE_NOOT_272: string;
			DIALOGUE_NOOT_273: string;
			DIALOGUE_NOOT_274: string;
			DIALOGUE_NOOT_275: string;
			DIALOGUE_NOOT_276: string;
			DIALOGUE_NOOT_277: string;
			DIALOGUE_NOOT_278: string;
			DIALOGUE_NOOT_279: string;
			DIALOGUE_NOOT_28: string;
			DIALOGUE_NOOT_280: string;
			DIALOGUE_NOOT_281: string;
			DIALOGUE_NOOT_282: string;
			DIALOGUE_NOOT_283: string;
			DIALOGUE_NOOT_284: string;
			DIALOGUE_NOOT_285: string;
			DIALOGUE_NOOT_286: string;
			DIALOGUE_NOOT_287: string;
			DIALOGUE_NOOT_288: string;
			DIALOGUE_NOOT_289: string;
			DIALOGUE_NOOT_29: string;
			DIALOGUE_NOOT_3: string;
			DIALOGUE_NOOT_30: string;
			DIALOGUE_NOOT_31: string;
			DIALOGUE_NOOT_32: string;
			DIALOGUE_NOOT_33: string;
			DIALOGUE_NOOT_34: string;
			DIALOGUE_NOOT_35: string;
			DIALOGUE_NOOT_36: string;
			DIALOGUE_NOOT_37: string;
			DIALOGUE_NOOT_38: string;
			DIALOGUE_NOOT_39: string;
			DIALOGUE_NOOT_4: string;
			DIALOGUE_NOOT_40: string;
			DIALOGUE_NOOT_41: string;
			DIALOGUE_NOOT_42: string;
			DIALOGUE_NOOT_43: string;
			DIALOGUE_NOOT_44: string;
			DIALOGUE_NOOT_45: string;
			DIALOGUE_NOOT_46: string;
			DIALOGUE_NOOT_47: string;
			DIALOGUE_NOOT_48: string;
			DIALOGUE_NOOT_49: string;
			DIALOGUE_NOOT_5: string;
			DIALOGUE_NOOT_50: string;
			DIALOGUE_NOOT_51: string;
			DIALOGUE_NOOT_52: string;
			DIALOGUE_NOOT_53: string;
			DIALOGUE_NOOT_54: string;
			DIALOGUE_NOOT_55: string;
			DIALOGUE_NOOT_56: string;
			DIALOGUE_NOOT_57: string;
			DIALOGUE_NOOT_58: string;
			DIALOGUE_NOOT_59: string;
			DIALOGUE_NOOT_6: string;
			DIALOGUE_NOOT_60: string;
			DIALOGUE_NOOT_61: string;
			DIALOGUE_NOOT_62: string;
			DIALOGUE_NOOT_63: string;
			DIALOGUE_NOOT_64: string;
			DIALOGUE_NOOT_65: string;
			DIALOGUE_NOOT_66: string;
			DIALOGUE_NOOT_67: string;
			DIALOGUE_NOOT_68: string;
			DIALOGUE_NOOT_69: string;
			DIALOGUE_NOOT_7: string;
			DIALOGUE_NOOT_70: string;
			DIALOGUE_NOOT_71: string;
			DIALOGUE_NOOT_72: string;
			DIALOGUE_NOOT_73: string;
			DIALOGUE_NOOT_74: string;
			DIALOGUE_NOOT_75: string;
			DIALOGUE_NOOT_76: string;
			DIALOGUE_NOOT_77: string;
			DIALOGUE_NOOT_78: string;
			DIALOGUE_NOOT_79: string;
			DIALOGUE_NOOT_8: string;
			DIALOGUE_NOOT_80: string;
			DIALOGUE_NOOT_81: string;
			DIALOGUE_NOOT_82: string;
			DIALOGUE_NOOT_83: string;
			DIALOGUE_NOOT_84: string;
			DIALOGUE_NOOT_85: string;
			DIALOGUE_NOOT_86: string;
			DIALOGUE_NOOT_87: string;
			DIALOGUE_NOOT_88: string;
			DIALOGUE_NOOT_89: string;
			DIALOGUE_NOOT_9: string;
			DIALOGUE_NOOT_90: string;
			DIALOGUE_NOOT_91: string;
			DIALOGUE_NOOT_92: string;
			DIALOGUE_NOOT_93: string;
			DIALOGUE_NOOT_94: string;
			DIALOGUE_NOOT_95: string;
			DIALOGUE_NOOT_96: string;
			DIALOGUE_NOOT_97: string;
			DIALOGUE_NOOT_98: string;
			DIALOGUE_NOOT_99: string;
			DIALOGUE_PIPPIT_0: string;
			DIALOGUE_PIPPIT_1: string;
			DIALOGUE_PIPPIT_2: string;
			DIALOGUE_PIPPIT_3: string;
			DIALOGUE_PIPPIT_4: string;
			DIALOGUE_PIPPIT_5: string;
			DIALOGUE_PIPPIT_6: string;
			DIALOGUE_PIPPIT_7: string;
			DIALOGUE_PIPPIT_8: string;
			DIALOGUE_PIPPIT_9: string;
			DIALOGUE_POTION_0: string;
			DIALOGUE_POTION_1: string;
			DIALOGUE_POTION_2: string;
			DIALOGUE_POTION_3: string;
			DIALOGUE_POTION_4: string;
			DIALOGUE_POTION_5: string;
			DIALOGUE_POTION_6: string;
			DIALOGUE_POTION_7: string;
			DIALOGUE_PROFESSOR_SCOOG_0: string;
			DIALOGUE_PROFESSOR_SCOOG_1: string;
			DIALOGUE_PROFESSOR_SCOOG_10: string;
			DIALOGUE_PROFESSOR_SCOOG_11: string;
			DIALOGUE_PROFESSOR_SCOOG_12: string;
			DIALOGUE_PROFESSOR_SCOOG_13: string;
			DIALOGUE_PROFESSOR_SCOOG_14: string;
			DIALOGUE_PROFESSOR_SCOOG_15: string;
			DIALOGUE_PROFESSOR_SCOOG_16: string;
			DIALOGUE_PROFESSOR_SCOOG_17: string;
			DIALOGUE_PROFESSOR_SCOOG_18: string;
			DIALOGUE_PROFESSOR_SCOOG_19: string;
			DIALOGUE_PROFESSOR_SCOOG_2: string;
			DIALOGUE_PROFESSOR_SCOOG_20: string;
			DIALOGUE_PROFESSOR_SCOOG_21: string;
			DIALOGUE_PROFESSOR_SCOOG_22: string;
			DIALOGUE_PROFESSOR_SCOOG_23: string;
			DIALOGUE_PROFESSOR_SCOOG_24: string;
			DIALOGUE_PROFESSOR_SCOOG_25: string;
			DIALOGUE_PROFESSOR_SCOOG_26: string;
			DIALOGUE_PROFESSOR_SCOOG_27: string;
			DIALOGUE_PROFESSOR_SCOOG_28: string;
			DIALOGUE_PROFESSOR_SCOOG_29: string;
			DIALOGUE_PROFESSOR_SCOOG_3: string;
			DIALOGUE_PROFESSOR_SCOOG_30: string;
			DIALOGUE_PROFESSOR_SCOOG_31: string;
			DIALOGUE_PROFESSOR_SCOOG_32: string;
			DIALOGUE_PROFESSOR_SCOOG_33: string;
			DIALOGUE_PROFESSOR_SCOOG_34: string;
			DIALOGUE_PROFESSOR_SCOOG_35: string;
			DIALOGUE_PROFESSOR_SCOOG_36: string;
			DIALOGUE_PROFESSOR_SCOOG_37: string;
			DIALOGUE_PROFESSOR_SCOOG_38: string;
			DIALOGUE_PROFESSOR_SCOOG_39: string;
			DIALOGUE_PROFESSOR_SCOOG_4: string;
			DIALOGUE_PROFESSOR_SCOOG_40: string;
			DIALOGUE_PROFESSOR_SCOOG_41: string;
			DIALOGUE_PROFESSOR_SCOOG_42: string;
			DIALOGUE_PROFESSOR_SCOOG_43: string;
			DIALOGUE_PROFESSOR_SCOOG_44: string;
			DIALOGUE_PROFESSOR_SCOOG_45: string;
			DIALOGUE_PROFESSOR_SCOOG_46: string;
			DIALOGUE_PROFESSOR_SCOOG_47: string;
			DIALOGUE_PROFESSOR_SCOOG_48: string;
			DIALOGUE_PROFESSOR_SCOOG_49: string;
			DIALOGUE_PROFESSOR_SCOOG_5: string;
			DIALOGUE_PROFESSOR_SCOOG_50: string;
			DIALOGUE_PROFESSOR_SCOOG_51: string;
			DIALOGUE_PROFESSOR_SCOOG_52: string;
			DIALOGUE_PROFESSOR_SCOOG_53: string;
			DIALOGUE_PROFESSOR_SCOOG_54: string;
			DIALOGUE_PROFESSOR_SCOOG_55: string;
			DIALOGUE_PROFESSOR_SCOOG_56: string;
			DIALOGUE_PROFESSOR_SCOOG_57: string;
			DIALOGUE_PROFESSOR_SCOOG_58: string;
			DIALOGUE_PROFESSOR_SCOOG_59: string;
			DIALOGUE_PROFESSOR_SCOOG_6: string;
			DIALOGUE_PROFESSOR_SCOOG_60: string;
			DIALOGUE_PROFESSOR_SCOOG_61: string;
			DIALOGUE_PROFESSOR_SCOOG_62: string;
			DIALOGUE_PROFESSOR_SCOOG_7: string;
			DIALOGUE_PROFESSOR_SCOOG_8: string;
			DIALOGUE_PROFESSOR_SCOOG_9: string;
			DIALOGUE_PUPPET_MASTER_0: string;
			DIALOGUE_PUPPET_MASTER_1: string;
			DIALOGUE_PUPPET_MASTER_10: string;
			DIALOGUE_PUPPET_MASTER_11: string;
			DIALOGUE_PUPPET_MASTER_12: string;
			DIALOGUE_PUPPET_MASTER_13: string;
			DIALOGUE_PUPPET_MASTER_14: string;
			DIALOGUE_PUPPET_MASTER_2: string;
			DIALOGUE_PUPPET_MASTER_3: string;
			DIALOGUE_PUPPET_MASTER_4: string;
			DIALOGUE_PUPPET_MASTER_5: string;
			DIALOGUE_PUPPET_MASTER_6: string;
			DIALOGUE_PUPPET_MASTER_7: string;
			DIALOGUE_PUPPET_MASTER_8: string;
			DIALOGUE_PUPPET_MASTER_9: string;
			DIALOGUE_SIR_VEY_0: string;
			DIALOGUE_SIR_VEY_1: string;
			DIALOGUE_SLIME_GUARD_0: string;
			DIALOGUE_SLIME_GUARD_1: string;
			DIALOGUE_SLIME_GUARD_2: string;
			DIALOGUE_SLIME_GUARD_3: string;
			DIALOGUE_SLIME_GUARD_4: string;
			DIALOGUE_SLIME_GUARD_5: string;
			DIALOGUE_SLIME_QUEEN_0: string;
			DIALOGUE_SLIME_QUEEN_1: string;
			DIALOGUE_SLIME_QUEEN_10: string;
			DIALOGUE_SLIME_QUEEN_2: string;
			DIALOGUE_SLIME_QUEEN_3: string;
			DIALOGUE_SLIME_QUEEN_4: string;
			DIALOGUE_SLIME_QUEEN_5: string;
			DIALOGUE_SLIME_QUEEN_6: string;
			DIALOGUE_SLIME_QUEEN_7: string;
			DIALOGUE_SLIME_QUEEN_8: string;
			DIALOGUE_SLIME_QUEEN_9: string;
			DIALOGUE_SLIME_WORKER_0: string;
			DIALOGUE_SLIME_WORKER_1: string;
			DIALOGUE_SLURPY_0: string;
			DIALOGUE_SLURPY_1: string;
			DIALOGUE_SLURPY_10: string;
			DIALOGUE_SLURPY_11: string;
			DIALOGUE_SLURPY_12: string;
			DIALOGUE_SLURPY_13: string;
			DIALOGUE_SLURPY_14: string;
			DIALOGUE_SLURPY_15: string;
			DIALOGUE_SLURPY_16: string;
			DIALOGUE_SLURPY_17: string;
			DIALOGUE_SLURPY_18: string;
			DIALOGUE_SLURPY_19: string;
			DIALOGUE_SLURPY_2: string;
			DIALOGUE_SLURPY_20: string;
			DIALOGUE_SLURPY_21: string;
			DIALOGUE_SLURPY_22: string;
			DIALOGUE_SLURPY_23: string;
			DIALOGUE_SLURPY_24: string;
			DIALOGUE_SLURPY_25: string;
			DIALOGUE_SLURPY_26: string;
			DIALOGUE_SLURPY_27: string;
			DIALOGUE_SLURPY_28: string;
			DIALOGUE_SLURPY_29: string;
			DIALOGUE_SLURPY_3: string;
			DIALOGUE_SLURPY_30: string;
			DIALOGUE_SLURPY_31: string;
			DIALOGUE_SLURPY_32: string;
			DIALOGUE_SLURPY_33: string;
			DIALOGUE_SLURPY_34: string;
			DIALOGUE_SLURPY_35: string;
			DIALOGUE_SLURPY_36: string;
			DIALOGUE_SLURPY_37: string;
			DIALOGUE_SLURPY_38: string;
			DIALOGUE_SLURPY_39: string;
			DIALOGUE_SLURPY_4: string;
			DIALOGUE_SLURPY_40: string;
			DIALOGUE_SLURPY_41: string;
			DIALOGUE_SLURPY_42: string;
			DIALOGUE_SLURPY_43: string;
			DIALOGUE_SLURPY_44: string;
			DIALOGUE_SLURPY_45: string;
			DIALOGUE_SLURPY_46: string;
			DIALOGUE_SLURPY_47: string;
			DIALOGUE_SLURPY_48: string;
			DIALOGUE_SLURPY_49: string;
			DIALOGUE_SLURPY_5: string;
			DIALOGUE_SLURPY_6: string;
			DIALOGUE_SLURPY_7: string;
			DIALOGUE_SLURPY_8: string;
			DIALOGUE_SLURPY_9: string;
			DIALOGUE_SWOOPY_0: string;
			DIALOGUE_SWOOPY_1: string;
			DIALOGUE_SWOOPY_2: string;
			DIALOGUE_SWOOPY_3: string;
			DIALOGUE_SWOOPY_4: string;
			DIALOGUE_TOY_0: string;
			DIALOGUE_TOY_1: string;
			DIALOGUE_TOY_10: string;
			DIALOGUE_TOY_11: string;
			DIALOGUE_TOY_12: string;
			DIALOGUE_TOY_13: string;
			DIALOGUE_TOY_14: string;
			DIALOGUE_TOY_15: string;
			DIALOGUE_TOY_16: string;
			DIALOGUE_TOY_17: string;
			DIALOGUE_TOY_2: string;
			DIALOGUE_TOY_3: string;
			DIALOGUE_TOY_4: string;
			DIALOGUE_TOY_5: string;
			DIALOGUE_TOY_6: string;
			DIALOGUE_TOY_7: string;
			DIALOGUE_TOY_8: string;
			DIALOGUE_TOY_9: string;
			DIALOGUE_VERNA_0: string;
			DIALOGUE_VERNA_1: string;
			DIALOGUE_VERNA_2: string;
			DIALOGUE_VERNA_3: string;
			DIALOGUE_WINTERFEST_0: string;
			DIALOGUE_WINTERFEST_1: string;
			DO_NOT_EVOLVE: string;
			DUNGEON_ENTRANCE_LOCKOUT: string;
			DUNGEON_ENTRANCE_TIMER: string;
			DYNO_DIG_DISTANCE_COLD: string;
			DYNO_DIG_DISTANCE_DIG: string;
			DYNO_DIG_DISTANCE_HOT: string;
			DYNO_DIG_DISTANCE_ICE_COLD: string;
			DYNO_DIG_DISTANCE_WARM: string;
			DYNO_DIG_EXTEND_TIME: string;
			DYNO_DIG_FOUND_FOSSIL: string;
			DYNO_DIG_FOUND_ITEM: string;
			DYNO_DIG_INSTRUCTIONS_0: string;
			DYNO_DIG_INSTRUCTIONS_1: string;
			DYNO_DIG_INSTRUCTIONS_2: string;
			DYNO_DIG_INSTRUCTIONS_3: string;
			DYNO_DIG_INSTRUCTIONS_4: string;
			DYNO_DIG_INSTRUCTIONS_5: string;
			DYNO_DIG_ITEMS_RECOVERED: string;
			DYNO_DIG_READY_TO_START: string;
			DYNO_DIG_SHOP_WELCOME: string;
			DYNO_DIG_START: string;
			DYNO_DIG_START_NO_MORE_FOSSILS: string;
			DYNO_DIG_START_NO_SHOVEL: string;
			DYNO_DIG_TIMES_UP: string;
			DYNO_DIG_TIMES_UP_REWARD: string;
			DYNO_DIG_TIMES_UP_TRY_AGAIN: string;
			DYNO_DIG_TITLE: string;
			EARTH_TOWER_WARDEN_KEY: string;
			EARTH_TOWER_WARDEN_LOCKED: string;
			EDUCATION_ERROR_REFRESH: string;
			EDUCATION_NOT_LOADED: string;
			EFFECT_ATTACK_POWERFUL: string;
			EFFECT_ATTACK_WEAK: string;
			EFFECT_BOUNTY_COMPLETE: string;
			EFFECT_VOLUME_LABEL: string;
			EFFICACY_SKIP_POPUP_SKIP: string;
			EFFICACY_SKIP_POPUP_TEXT: string;
			EFFICACY_SKIP_POPUP_TITLE: string;
			EFFICACY_SKIP_POPUP_WATCH: string;
			EFFICACY_VIDEO_REPLAY: string;
			EFFICACY_VIDEO_SOLVE: string;
			EFFICACY_VIDEO_TEXT: string;
			EFFICACY_VIDEO_TITLE: string;
			EG_CHOOSE_RUNE_HEADER: string;
			EG_CHOOSE_RUNE_TITLE: string;
			EG_GUARDIAN_1: string;
			EG_GUARDIAN_10: string;
			EG_GUARDIAN_11: string;
			EG_GUARDIAN_12: string;
			EG_GUARDIAN_13: string;
			EG_GUARDIAN_14: string;
			EG_GUARDIAN_15: string;
			EG_GUARDIAN_16: string;
			EG_GUARDIAN_17: string;
			EG_GUARDIAN_18: string;
			EG_GUARDIAN_19: string;
			EG_GUARDIAN_2: string;
			EG_GUARDIAN_20: string;
			EG_GUARDIAN_21: string;
			EG_GUARDIAN_22: string;
			EG_GUARDIAN_23: string;
			EG_GUARDIAN_3: string;
			EG_GUARDIAN_4: string;
			EG_GUARDIAN_5: string;
			EG_GUARDIAN_6: string;
			EG_GUARDIAN_7: string;
			EG_GUARDIAN_8: string;
			EG_GUARDIAN_9: string;
			EG_NOOT_1: string;
			EG_NOOT_10: string;
			EG_NOOT_11: string;
			EG_NOOT_12: string;
			EG_NOOT_13: string;
			EG_NOOT_14: string;
			EG_NOOT_15: string;
			EG_NOOT_16: string;
			EG_NOOT_17: string;
			EG_NOOT_18: string;
			EG_NOOT_19: string;
			EG_NOOT_2: string;
			EG_NOOT_20: string;
			EG_NOOT_21: string;
			EG_NOOT_22: string;
			EG_NOOT_23: string;
			EG_NOOT_24: string;
			EG_NOOT_25: string;
			EG_NOOT_3: string;
			EG_NOOT_4: string;
			EG_NOOT_5: string;
			EG_NOOT_6: string;
			EG_NOOT_7: string;
			EG_NOOT_8: string;
			EG_NOOT_9: string;
			EG_RUNE_BOOST_CRIT_DESC: string;
			EG_RUNE_BOOST_CRIT_NAME: string;
			EG_RUNE_BOOST_DAMAGE_DESC: string;
			EG_RUNE_BOOST_DAMAGE_NAME: string;
			EG_RUNE_BOOST_HEALTH_DESC: string;
			EG_RUNE_BOOST_HEALTH_NAME: string;
			ELEMENTAL_GUARDIAN_NOOT_ACTIVE_TELEPORTER: string;
			ELEMENTAL_GUARDIAN_NOOT_INACTIVE_TELEPORTER: string;
			EMAIL_PROMPT_ERROR: string;
			EMAIL_PROMPT_FAIL_MESSAGE_BODY: string;
			EMAIL_PROMPT_GET_APPLES: string;
			EMAIL_PROMPT_GET_GOLD: string;
			EMAIL_PROMPT_LATER: string;
			EMAIL_PROMPT_MESSAGE_BODY: string;
			EMAIL_PROMPT_MESSAGE_TITLE: string;
			EMAIL_PROMPT_SUBMIT: string;
			EMAIL_PROMPT_TITLE: string;
			EMPTY: string;
			ENJOY_BEAT_EVERYTHING: string;
			ENJOY_BEING_HERO: string;
			ENJOY_CANT_REAL_LIFE: string;
			ENJOY_CHANGE_GAME: string;
			ENJOY_COLLECT_REWARDS: string;
			ENJOY_COLLECT_THINGS: string;
			ENJOY_DECORATING: string;
			ENJOY_DIFFERENT_PLAY: string;
			ENJOY_DISCOVER_NEW: string;
			ENJOY_FIND_OUT_NEXT: string;
			ENJOY_GET_WORKED: string;
			ENJOY_LIMITED_EVENT: string;
			ENJOY_NEW_PLACES: string;
			ENJOY_NOT_LOSING: string;
			ENJOY_RARE_THINGS: string;
			ENJOY_THINGS_DO: string;
			ENJOY_UNEXPECTED_PRIZES: string;
			ENJOY_UPGRADE_ABILITY: string;
			ENJOY_UPGRADE_PETS: string;
			ENJOY_WORLD_DIFF: string;
			ENTER_CODE_LABEL: string;
			ENTER_HARD_PATH_WARNING: string;
			EPIC_ARENA_BATTLE_SELECT: string;
			EPIC_ARENA_BUY_TOY: string;
			EPIC_ARENA_CHALLENGE: string;
			EPIC_ATTACK_MESSAGE_TITLE: string;
			EPIC_NOT_READY_MESSAGE: string;
			EPICS_ARENA_LOCKED_TEXT: string;
			EPICS_CANNOT_LET_GO: string;
			EPICS_ERROR_ONCE_PER_BATTLE: string;
			EPICS_ERROR_ONCE_PER_CHALLENGE: string;
			EPICS_ERROR_TOO_POWERFUL: string;
			Episode_1: string;
			Episode_2: string;
			Episode_3: string;
			Episode_4: string;
			Episode_5: string;
			ERROR: string;
			ERROR_DIALOG_BODY: string;
			EVOLVE_LATER: string;
			EVOLVE_NOW: string;
			EVOLVE_STOP: string;
			EXISTING_MEMBER_WW_AD_BODY: string;
			EXISTING_MEMBER_WW_AD_TITLE: string;
			EXISTING_MEMBER_WW_TOOLTIP_BODY: string;
			EXISTING_MEMBER_WW_TOOLTIP_TITLE: string;
			EXPLAIN_MEMBERSHIP_PARENT_BODY_0: string;
			EXPLAIN_MEMBERSHIP_PARENT_BODY_1: string;
			EXPLAIN_MEMBERSHIP_PARENT_BODY_HIGHLIGHT: string;
			EXPLAIN_MEMBERSHIP_PARENT_FOOTER: string;
			EXPLAIN_MEMBERSHIP_PARENT_TITLE_1: string;
			EXPLAIN_MEMBERSHIP_STUDENT_BODY_1: string;
			EXPLAIN_MEMBERSHIP_STUDENT_BODY_2: string;
			EXPLAIN_MEMBERSHIP_STUDENT_BODY_3: string;
			EXPLAIN_MEMBERSHIP_STUDENT_BODY_4: string;
			EXPLAIN_MEMBERSHIP_STUDENT_TITLE_1: string;
			EXPLAIN_MEMBERSHIP_STUDENT_TITLE_2: string;
			EXPLAIN_MEMBERSHIP_STUDENT_TITLE_3: string;
			EXPLAIN_MEMBERSHIP_STUDENT_TITLE_4: string;
			FA_FORGOT: string;
			FA_QUESTIONS: string;
			FA_RETURNING: string;
			FEATURE_DISABLED: string;
			FESTIVAL_CONFIRM_TRAVEL: string;
			FF_CLICK_AND_DRAG: string;
			FF_COLLECT: string;
			FF_FLUNG: string;
			FF_FORGOT: string;
			FF_LAUNCHED: string;
			FF_MISSED: string;
			FF_NEWDESIGN: string;
			FF_NEWROOM: string;
			FF_POPUP_COLLECT_BODY: string;
			FF_POPUP_COLLECT_TITLE: string;
			FF_POPUP_FINISH_BODY: string;
			FF_POPUP_FINISH_TITLE: string;
			FF_POPUP_NO_FLOATLING_BODY: string;
			FF_POPUP_NO_FLOATLING_TITLE: string;
			FF_QUIT_BODY: string;
			FF_REACH: string;
			FF_RETURNINGS: string;
			FF_SENDFLOATLINGS: string;
			FF_TRY_TO_LAND: string;
			FF_USE_THE_SAMPLES: string;
			FF_YOU_CAN_TELL: string;
			FIRST_NAME_SELECT_CHOOSE_NAME: string;
			FIRST_NAME_SELECTOR_TITLE_DEFAULT: string;
			FIRST_NAME_SELECTOR_TITLE_LETTER: string;
			FOREST_GUARDIAN: string;
			FRIEND_REQUEST_ADD_FRIEND: string;
			FRIEND_REQUESTS_TITLE: string;
			FRIENDS_LIST_BUTTON_REQUESTS: string;
			FRIENDS_LIST_CANCEL_MESSAGE_BODY: string;
			FRIENDS_LIST_CANCEL_MESSAGE_TITLE: string;
			FRIENDS_LIST_CONFIRM_CANCEL_BODY: string;
			FRIENDS_LIST_CONFIRM_CANCEL_TITLE: string;
			FRIENDS_LIST_COUNTER: string;
			FRIENDS_LIST_ERROR_MESSAGE_BODY: string;
			FRIENDS_LIST_FULL_MESSAGE_BODY: string;
			FRIENDS_LIST_SENT_MESSAGE_BODY: string;
			FRIENDS_LIST_SENT_MESSAGE_TITLE: string;
			FRIENDS_LIST_TITLE: string;
			FRIENDS_LIST_UNAVAILABLE: string;
			FRIENDS_LIST_WAITING: string;
			FULLSCREEN_LABEL: string;
			GAINED_MEMBER_STARS: string;
			GAINED_MEMBER_STARS_EACH: string;
			GENERAL_LABEL: string;
			GET_CHARFOAL: string;
			GET_MERMINA: string;
			GET_SNOWFLUFF: string;
			GET_SPROOT: string;
			GET_WOTT: string;
			GO_NOW: string;
			GO_TO_CUSTOMER_SUPPORT_PAGE: string;
			GOOGLE_AUTH_CREATING_ACCOUNT: string;
			GOOGLE_AUTH_FAIL_DEFAULT: string;
			GOOGLE_AUTH_POPUP_BLOCKED: string;
			GOOGLE_AUTH_PROMPT_BROWSER: string;
			GOOGLE_AUTH_USE_BROWSER_INSTEAD: string;
			GOT_ITEM_AWESOME_STUFF: string;
			GOT_ITEM_BOOTS: string;
			GOT_ITEM_BOUNTY_POINTS: string;
			GOT_ITEM_FOLLOW: string;
			GOT_ITEM_GENERIC: string;
			GOT_ITEM_GIFT_BOX: string;
			GOT_ITEM_GOLD: string;
			GOT_ITEM_LOOK: string;
			GOT_ITEM_MOVED_HOUSE: string;
			GOT_ITEM_OTHER: string;
			GOT_ITEM_SPELL: string;
			GOT_ITEM_YOU_GOT_FURNITURE: string;
			GOT_ITEM_YOU_GOT_MYSTERY_BAG: string;
			GOT_ITEM_YOU_GOT_PET: string;
			GOT_ITEM_YOU_GOT_SOMETHING: string;
			GREAT_HALL_KEYSTONES_POPUP: string;
			GUARDIAN_BATTLE_START_ERROR: string;
			HARMONY_ISLAND_NOT_ENOUGH_RUNES_TRIAL_LOCKED: string;
			HARMONY_ISLAND_PART_2_AD_BODY: string;
			HARMONY_ISLAND_PART_2_AD_TITLE: string;
			HARMONY_ISLAND_RELEASE_AD_BODY: string;
			HARMONY_ISLAND_RELEASE_AD_TITLE: string;
			HARMONY_ISLAND_RELEASE_TOOLTIP_BODY: string;
			HARMONY_ISLAND_TEASER_AD_BODY: string;
			HARMONY_ISLAND_TEASER_AD_TITLE: string;
			HARMONY_ISLAND_TRAILER_AD_BODY: string;
			HARMONY_ISLAND_TRAILER_AD_TITLE: string;
			HEY_TEACHERS: string;
			HINT_0: string;
			HINT_1: string;
			HINT_10: string;
			HINT_11: string;
			HINT_12: string;
			HINT_13: string;
			HINT_14: string;
			HINT_15: string;
			HINT_16: string;
			HINT_17: string;
			HINT_18: string;
			HINT_19: string;
			HINT_2: string;
			HINT_20: string;
			HINT_21: string;
			HINT_22: string;
			HINT_23: string;
			HINT_24: string;
			HINT_25: string;
			HINT_26: string;
			HINT_3: string;
			HINT_4: string;
			HINT_5: string;
			HINT_6: string;
			HINT_7: string;
			HINT_8: string;
			HINT_9: string;
			HOST_DISCONNECTED_MESSAGE: string;
			HOUSE_BUTTON_VISIT: string;
			HOUSE_EDITOR_CONFIRM_PACK_UP: string;
			HOUSE_EDITOR_TITLE: string;
			HOUSE_PREVIEW_PURCHASE_MESSAGE: string;
			HOUSE_VISITING_LOCKED: string;
			HOUSE_VISITING_UNLOCKED: string;
			HS_FLOATLINGS_FOUND: string;
			HS_NINJAS: string;
			HTTP_TOKEN_EXPIRE_MESSAGE: string;
			INACTIVITY_BUTTON: string;
			INACTIVITY_MESSAGE: string;
			INIT_ORB_SERVER_ERROR: string;
			INK_BLOT_BLOCKED_MESSAGE: string;
			INK_BLOT_BLOCKED_TITLE: string;
			INPUT_CLEAR: string;
			ITEM_BUTTON_BUY: string;
			ITEM_BUTTON_HIDE: string;
			ITEM_BUTTON_REMOVE: string;
			ITEM_BUTTON_SHOW: string;
			ITEM_BUTTON_USE: string;
			ITEM_BUTTON_WEAR: string;
			ITEM_CURRENT: string;
			ITEM_FREE: string;
			ITEM_HEAL_HP: string;
			ITEM_MAX: string;
			ITEM_OWNED: string;
			ITEM_TEXT_CHANGE: string;
			ITEMCARD_FREE: string;
			ITEMCARD_LEVEL: string;
			ITEMCARD_LOCKED: string;
			ITEMCARD_OWNED: string;
			JAR_BECOME_MEMBER: string;
			JAR_EXPIRED: string;
			JWT_INVALID_MESSAGE: string;
			KEEP: string;
			KEEP_PLAYING_BUTTON: string;
			KEYSTONE_LEVEL_LOCK: string;
			KEYSTONE_PEDESTAL_NOT_FOUND: string;
			KEYSTONE_PEDESTAL_NOT_MIN_LEVEL: string;
			KEYSTONE_PEDESTAL_NOT_RELEASED: string;
			KEYSTONE_PEDESTALS_ALL_PLACED: string;
			KEYSTONE_PEDESTALS_TITLE: string;
			KEYSTONE_PLACED_DOOR_UNLOCKED: string;
			KEYSTONE_READY: string;
			KEYSTONE_UNLOCKED: string;
			LAMPLIGHT_DOOR_COMING_SOON_MESSAGE: string;
			LAMPLIGHT_DOOR_COMING_SOON_TITLE: string;
			LAMPLIGHT_LOCKED_FESTIVAL: string;
			LEADER_PROMPT_CHECK_IT_OUT: string;
			LEADER_PROMPT_HEY_THERE: string;
			LEADER_PROMPT_LOADING: string;
			LEADER_PROMPT_PLAY_HOME: string;
			LEADERBOARD_CATCH_UP: string;
			LEADERBOARD_CHECK_FRIENDS: string;
			LEADERBOARD_CLASS_ERROR_LOADING: string;
			LEADERBOARD_CLASS_LEADERS: string;
			LEADERBOARD_CLASS_LEVEL_LONG: string;
			LEADERBOARD_CLASS_LEVEL_SHORT: string;
			LEADERBOARD_CLASS_TOP: string;
			LEADERBOARD_ERROR_LOADING_BOARD: string;
			LEADERBOARD_ERROR_LOADING_PLAYER: string;
			LEADERBOARD_ERROR_TEMPORARILY_UNAVAILABLE: string;
			LEADERBOARD_NOT_APPLICABLE: string;
			LEADERBOARD_NOT_RANKED: string;
			LEADERBOARD_RANK_1: string;
			LEADERBOARD_RANK_UP: string;
			LEAVE_TEAM_BODY: string;
			LEAVE_TEAM_TITLE: string;
			LET_GO: string;
			LET_GO_FOREVER_WARNING: string;
			LET_PET_GO_QUESTION: string;
			LEVEL_AND_COLON: string;
			LEVEL_LOCK_EQUIP: string;
			LEVEL_LOCK_PURCHASE: string;
			LINK_PARENT_NO_REWARDS: string;
			LOADING_CAPITALIZE: string;
			LOADING_LOWERCASE: string;
			LOADOUT_NO_RUNES_AVAILABLE: string;
			LOADOUT_SET_1: string;
			LOADOUT_SET_2: string;
			LOADOUT_SET_3: string;
			LOADOUT_YOUR_RUNES: string;
			LOADOUT_YOUR_TEAM: string;
			LOCKED_SPELL: string;
			LOGIN_LEAVE_BODY: string;
			LOGIN_LEAVE_GAME: string;
			LOGIN_LOADING: string;
			LOGIN_LOADING_FEATURES: string;
			LOGIN_LOADING_SKILLS: string;
			LOGIN_LOADING_WORLDS: string;
			LOGIN_LOGGING_IN: string;
			LOGIN_LOGGING_IN_GOOGLE: string;
			LOGIN_PASSWORD: string;
			LOGIN_PASSWORD_HELP: string;
			LOGIN_PASSWORD_HELP_CONTENT: string;
			LOGIN_PRIVACY_POLICY: string;
			LOGIN_USERNAME: string;
			LOGIN_WEBSITE: string;
			LORE_TABLET_0: string;
			LORE_TABLET_1: string;
			LORE_TABLET_10: string;
			LORE_TABLET_11: string;
			LORE_TABLET_12: string;
			LORE_TABLET_13: string;
			LORE_TABLET_14: string;
			LORE_TABLET_15: string;
			LORE_TABLET_16: string;
			LORE_TABLET_17: string;
			LORE_TABLET_18: string;
			LORE_TABLET_19: string;
			LORE_TABLET_2: string;
			LORE_TABLET_20: string;
			LORE_TABLET_21: string;
			LORE_TABLET_22: string;
			LORE_TABLET_23: string;
			LORE_TABLET_24: string;
			LORE_TABLET_25: string;
			LORE_TABLET_26: string;
			LORE_TABLET_27: string;
			LORE_TABLET_3: string;
			LORE_TABLET_4: string;
			LORE_TABLET_5: string;
			LORE_TABLET_6: string;
			LORE_TABLET_7: string;
			LORE_TABLET_8: string;
			LORE_TABLET_9: string;
			LUCKY_LOOT: string;
			LVL: string;
			MAIL_BECOME_A_MEMBER: string;
			MAIL_CLICK_TO_OPEN: string;
			MAIL_OPEN_MY_BOX: string;
			MAIL_UNAVAILABLE: string;
			MAILBOX_DELETE_MESSAGE: string;
			MAP_ACADEMY_ARCHIVES: string;
			MAP_ACADEMY_GREATHALL: string;
			MAP_ACADEMY_SECOND_FLOOR: string;
			MAP_ACTIVITY_CENTRAL_VILLAGE: string;
			MAP_ACTIVITY_ISLAND_CENTER: string;
			MAP_ACTIVITY_NORTHEAST: string;
			MAP_ACTIVITY_NORTHWEST: string;
			MAP_ACTIVITY_RIVER_BRIDGE: string;
			MAP_ACTIVITY_SWING_BRIDGE: string;
			MAP_ACTIVITY_WESTERN_SHORE: string;
			MAP_BONFIRE_SPIRE_FIERY_ALCOVE: string;
			MAP_BONFIRE_SPIRE_FIREWATCH_ROAD: string;
			MAP_BONFIRE_SPIRE_GARDEN_GETAWAY: string;
			MAP_BONFIRE_SPIRE_LAVA_PITS: string;
			MAP_BONFIRE_SPIRE_MOLTEN_ENCLAVE: string;
			MAP_BONFIRE_SPIRE_OUTER_SLIMEBURBIA: string;
			MAP_BONFIRE_SPIRE_PALM_PATH: string;
			MAP_BONFIRE_SPIRE_PALM_TERRACE: string;
			MAP_BONFIRE_SPIRE_PITFALL_TERRACE: string;
			MAP_BONFIRE_SPIRE_RED_HOT_RIVER: string;
			MAP_BONFIRE_SPIRE_ROYAL_KITCHEN: string;
			MAP_BONFIRE_SPIRE_SLIME_SHANTY: string;
			MAP_BONFIRE_SPIRE_THRONE_ROOM: string;
			MAP_BONFIRE_SPIRE_THRONE_ROOM_ENTRANCE: string;
			MAP_BONFIRE_SPIRE_VOLCANIC_CAVERN: string;
			MAP_BONFIRE_SPIRE_VOLCANIC_SANCTUM: string;
			MAP_BONFIRE_SPIRE_VOLCANO_ENTRANCE: string;
			MAP_BONFIRE_SPIRE_VOLCANO_JUNCTION: string;
			MAP_BONFIRE_SPIRE_VOLCANO_VILLAGE: string;
			MAP_DARK_TOWER_ENTRANCE: string;
			MAP_DARK_TOWER_FLOOR: string;
			MAP_DARK_TOWER_SHOWDOWN: string;
			MAP_DYNO_DIG_MUSEUM: string;
			MAP_DYNO_DIG_OASIS: string;
			MAP_EARTH_TOWER: string;
			MAP_EARTH_TOWER_COMMON_ROOM: string;
			MAP_EARTH_TOWER_FLOOR: string;
			MAP_EARTH_TOWER_WARDEN_ROOM: string;
			MAP_FOREST_BIG_TREE: string;
			MAP_FOREST_CROSSROADS: string;
			MAP_FOREST_FIREFLY_CLEARING: string;
			MAP_FOREST_FIREFLY_CROSSING: string;
			MAP_FOREST_FISHERMANS_POND: string;
			MAP_FOREST_GRASSY_CLEARING: string;
			MAP_FOREST_MOUNTAIN_GATE: string;
			MAP_FOREST_MOUNTAIN_PASS: string;
			MAP_FOREST_OLD_ROAD_REMAINS: string;
			MAP_FOREST_STONEFISH_BEACH: string;
			MAP_FOREST_THE_OLD_ROAD: string;
			MAP_HOUSE_EXTERIOR: string;
			MAP_HOUSE_PALLET_PASS: string;
			MAP_HOUSE_STARTER_HOUSE: string;
			MAP_LAMPLIGHT_ACADEMY_CROSSROADS: string;
			MAP_LAMPLIGHT_ACADEMY_ENTRANCE: string;
			MAP_LAMPLIGHT_BURROW: string;
			MAP_LAMPLIGHT_COLISEUM: string;
			MAP_LAMPLIGHT_FORT_FOX: string;
			MAP_LAMPLIGHT_HISTORY_DISTRICT: string;
			MAP_LAMPLIGHT_LOWER_INTERSECTION: string;
			MAP_LAMPLIGHT_MARKET: string;
			MAP_LAMPLIGHT_NORTHWEST_COURT: string;
			MAP_LAMPLIGHT_OUTSKIRTS: string;
			MAP_LAMPLIGHT_PET_PARK: string;
			MAP_LAMPLIGHT_SOUTHERN_DOCK: string;
			MAP_LAMPLIGHT_TOWN_SQUARE: string;
			MAP_LAMPLIGHT_VENDORS_PLAZA: string;
			MAP_SHIPWRECK_SHORE_BROKEN_BOWSPRIT: string;
			MAP_SHIPWRECK_SHORE_BROKEN_SHIP_BED: string;
			MAP_SHIPWRECK_SHORE_CAPNS_QUARTERS: string;
			MAP_SHIPWRECK_SHORE_CARGO_HOLD: string;
			MAP_SHIPWRECK_SHORE_CROWS_NEST: string;
			MAP_SHIPWRECK_SHORE_DEEP_WATER: string;
			MAP_SHIPWRECK_SHORE_DESOLATE_DECK: string;
			MAP_SHIPWRECK_SHORE_DIVE_DOCK: string;
			MAP_SHIPWRECK_SHORE_FAR_BEACH: string;
			MAP_SHIPWRECK_SHORE_LOWER_DECK: string;
			MAP_SHIPWRECK_SHORE_LOWER_DECK_HALL: string;
			MAP_SHIPWRECK_SHORE_SAND_CITY: string;
			MAP_SHIPWRECK_SHORE_SAND_TOWN: string;
			MAP_SHIPWRECK_SHORE_SEAWEED_SANCTUARY: string;
			MAP_SHIPWRECK_SHORE_SEAWEED_SKYSCRAPERS: string;
			MAP_SHIPWRECK_SHORE_SECLUDED_SHORE: string;
			MAP_SHIPWRECK_SHORE_SECOND_SHIP_RAMP: string;
			MAP_SHIPWRECK_SHORE_SECRET_SHORE: string;
			MAP_SHIPWRECK_SHORE_SECRET_SHORE_SPACE: string;
			MAP_SHIPWRECK_SHORE_SHORELINE: string;
			MAP_SHIPWRECK_SHORE_SUNKEN_SECRET: string;
			MAP_SHIPWRECK_SHORE_UNDERWATER_ALCOVE: string;
			MAP_SHIPWRECK_SHORE_UPPER_DECK: string;
			MAP_SHIVERCHILL_BOKS_CAVE: string;
			MAP_SHIVERCHILL_BORDERLAND: string;
			MAP_SHIVERCHILL_DUNGEON_HUB: string;
			MAP_SHIVERCHILL_FROZEN_PASS: string;
			MAP_SHIVERCHILL_FURNACE_ROOM: string;
			MAP_SHIVERCHILL_GATE: string;
			MAP_SHIVERCHILL_HIDDEN_ROOM: string;
			MAP_SHIVERCHILL_MOUNTAIN_PASS: string;
			MAP_SHIVERCHILL_MOUNTAIN_VALLEY: string;
			MAP_SHIVERCHILL_RAIL_RUINS: string;
			MAP_SHIVERCHILL_ROYAL_PASSAGE: string;
			MAP_SHIVERCHILL_RUINED_ENTRANCE: string;
			MAP_SHIVERCHILL_RUINED_PASSAGE: string;
			MAP_SHIVERCHILL_RUINED_STEPS: string;
			MAP_SHIVERCHILL_THE_CHASM: string;
			MAP_SHIVERCHILL_TREASURE_ROOM: string;
			MAP_SHIVERCHILL_WORMS_REST: string;
			MAP_SKYWATCH_BLAST_DOORS: string;
			MAP_SKYWATCH_BREEZY_PASS: string;
			MAP_SKYWATCH_CLOUDY_PASS: string;
			MAP_SKYWATCH_END_CHAMBER: string;
			MAP_SKYWATCH_FACTORY_ENTRANCE: string;
			MAP_SKYWATCH_FACTORY_MAIN_HALL: string;
			MAP_SKYWATCH_GARDENERS_HUT_EXTERIOR: string;
			MAP_SKYWATCH_GARDENERS_HUT_INNER: string;
			MAP_SKYWATCH_GREAT_GRATERS: string;
			MAP_SKYWATCH_INNER_SCREWBALL_SHACK: string;
			MAP_SKYWATCH_LOWER_BEANOVATOR: string;
			MAP_SKYWATCH_MAIN_HALL: string;
			MAP_SKYWATCH_OLD_MANS_ROOM: string;
			MAP_SKYWATCH_OUTSKIRTS: string;
			MAP_SKYWATCH_SCREWBALL_SHACK: string;
			MAP_SKYWATCH_SKY_SHOWER: string;
			MAP_SKYWATCH_UPPER_BEANOVATOR: string;
			MAP_SKYWATCH_WIND_TUNNEL: string;
			MAP_TITAN_GROUNDS: string;
			MAP_TOY_ZONE_DRAGONS_LAIR: string;
			MAP_TOY_ZONE_EPIC_ZONE: string;
			MAP_TOY_ZONE_MYSTIC_ROTUNDA: string;
			MAX_STARS_EARNED: string;
			MEMBER_AD_ERROR_BODY: string;
			MEMBER_AD_PURCHASE_FAILED_BODY: string;
			MEMBER_AD_PURCHASE_PENDING_BODY: string;
			MEMBER_AD_SUCCESS_BODY: string;
			MEMBER_AD_SUCCESS_TITLE: string;
			MEMBER_AD_VISIT_SITE_BODY: string;
			MEMBER_PROMPT_BECOME_MEMBER: string;
			MEMBER_PROMPT_BUY_NOW: string;
			MEMBER_PROMPT_JOIN_GOLD: string;
			MEMBER_PROMPT_MEMBERSHIP: string;
			MEMBER_PROMPT_REWARD_GOLD: string;
			MEMBER_STARS_EARNED: string;
			MEMBERS_COLLECT_MORE_XP: string;
			MEMBERSHIP_AD_SCHOOL_CONTENT: string;
			MEMBERSHIP_AD_SCHOOL_TITLE: string;
			MEMBERSHIP_AMAZING_THINGS: string;
			MEMBERSHIP_AWESOME_GEAR: string;
			MEMBERSHIP_BECOME_MEMBER: string;
			MEMBERSHIP_CLOUD_MOUNT: string;
			MEMBERSHIP_CONGRATULATIONS: string;
			MEMBERSHIP_GET_MONTHLY_BOX: string;
			MEMBERSHIP_GET_MOUNT: string;
			MEMBERSHIP_GET_MOUNT_BODY: string;
			MEMBERSHIP_LEARN_MORE: string;
			MEMBERSHIP_MONTHLY_BOX_DESCRIPTION: string;
			MEMBERSHIP_MONTHLY_BOX_TITLE: string;
			MEMBERSHIP_MOUNT_EQUIP: string;
			MEMBERSHIP_SUCCESS_RELOAD_MESSAGE: string;
			MEMBERSHIP_SUPPRESSION_BODY: string;
			MEMBERSHIP_SUPPRESSION_HEADER: string;
			MEMBERSHIP_TITAN_CATAPULT_BODY_0: string;
			MEMBERSHIP_TITAN_CATAPULT_BODY_1: string;
			MEMBERSHIP_TITAN_CATAPULT_BODY_2: string;
			MEMBERSHIP_TITAN_CATAPULT_BODY_3: string;
			MEMBERSHIP_TITAN_CATAPULT_GRAPHIC_0: string;
			MEMBERSHIP_TITAN_CATAPULT_GRAPHIC_1: string;
			MEMBERSHIP_TITAN_CATAPULT_TITLE: string;
			MESSAGE_TITLE_OOPS: string;
			MESSAGE_TITLE_UH_OH: string;
			MINI_GAME_BUTTON_CANCEL: string;
			MINI_GAME_BUTTON_HOW_TO: string;
			MINI_GAME_BUTTON_START: string;
			MINI_GAME_NOT_ENOUGH_GOLD: string;
			MONTH_NAME_1: string;
			MONTH_NAME_10: string;
			MONTH_NAME_11: string;
			MONTH_NAME_12: string;
			MONTH_NAME_2: string;
			MONTH_NAME_3: string;
			MONTH_NAME_4: string;
			MONTH_NAME_5: string;
			MONTH_NAME_6: string;
			MONTH_NAME_7: string;
			MONTH_NAME_8: string;
			MONTH_NAME_9: string;
			MORPH_END_MESSAGE: string;
			MORPH_START_NEW: string;
			MOVE_HOUSE_CONFIRM: string;
			MUSEUM_COLLECTED_ALL_FOSSILS: string;
			MUSEUM_CRAFT_FOSSILS_0: string;
			MUSEUM_CRAFT_FOSSILS_1: string;
			MUSEUM_INTRO: string;
			MUSIC_VOLUME_LABEL: string;
			NAME_APPRENTICE: string;
			NAME_CHANGE_BUTTON_DONE: string;
			NAME_CHANGE_CHANGE_TO: string;
			NAME_CHANGE_CHOOSE_TITLE: string;
			NAME_CHANGE_NAME_WIZARD: string;
			NAME_CHANGE_REVERT_CHANGE: string;
			NAME_CHANGE_SUCCESS: string;
			NETWORK_ALL_GOOD: string;
			NETWORK_CANNOT_CONNECT: string;
			NETWORK_CANNOT_CONNECT_TIMER: string;
			NETWORK_CHECK_CONNECTION: string;
			NETWORK_ERROR: string;
			NETWORK_ERROR_SKILLS: string;
			NETWORK_FORBIDDEN: string;
			NETWORK_GOING_OFFLINE: string;
			NETWORK_INCORRECT_USERNAME_PASSWORD: string;
			NETWORK_LOGGED_IN_ELSEWHERE: string;
			NETWORK_OFFLINE: string;
			NETWORK_OUT_OF_DATE: string;
			NETWORK_TRY_LATER: string;
			NEW_MEMBER_WW_AD_BODY: string;
			NEW_MEMBER_WW_AD_TITLE: string;
			NEW_MEMBER_WW_TOOLTIP_BODY: string;
			NEW_MEMBER_WW_TOOLTIP_TITLE: string;
			NEW_STARLIGHT_HIGHLIGHT: string;
			NICKNAME_REQUIRE_CATCH_MIMIC: string;
			NICKNAME_REQUIRE_COMPLETEQUEST: string;
			NICKNAME_REQUIRE_HALFQUEST: string;
			NICKNAME_REQUIRE_MEMBERSHIP: string;
			NICKNAME_REQUIRE_PIRATE_SET: string;
			NICKNAME_REQUIRE_ROBOLYMPICS: string;
			NICKNAME_REQUIRE_ROBOT_SET: string;
			NICKNAME_REQUIRE_SHIPWRECK_COMPLETE: string;
			NICKNAME_REQUIRE_TECH_GOBBLER: string;
			NICKNAMER_BUTTON_APPLY: string;
			NICKNAMER_ORIGINAL: string;
			NICKNAMER_TITLE_BONFIRE: string;
			NICKNAMER_TITLE_FIREFLY: string;
			NICKNAMER_TITLE_SHIPWRECK: string;
			NICKNAMER_TITLE_SHIVERCHILL: string;
			NICKNAMER_TITLE_SKYWATCH: string;
			NICKNAMER_TITLE_SUMMERFEST: string;
			NO_CATCHING_MONSTER_ON_ISLAND: string;
			NO_TEXT: string;
			NOT_NOW: string;
			NOW_LEAVING_PRODIGY: string;
			NPC_NAME_ACADEMY_MERCHANT: string;
			NPC_NAME_ANCIENT: string;
			NPC_NAME_ARENA_CALLER: string;
			NPC_NAME_ARENA_MERCHANT: string;
			NPC_NAME_ASPEN_FROST: string;
			NPC_NAME_ASSISTANT_SPOKES: string;
			NPC_NAME_ATHENA: string;
			NPC_NAME_BARGO: string;
			NPC_NAME_BARRY_BOSS: string;
			NPC_NAME_BENNI: string;
			NPC_NAME_BLAZE: string;
			NPC_NAME_BOARDY: string;
			NPC_NAME_BOOMBOX: string;
			NPC_NAME_BROCCOLINA: string;
			NPC_NAME_CALEB_FORESTMASTER: string;
			NPC_NAME_CEBOLLINI: string;
			NPC_NAME_CHESTER_COPPERPAN: string;
			NPC_NAME_CHILLY: string;
			NPC_NAME_CLANKBOOT: string;
			NPC_NAME_CRABBSY: string;
			NPC_NAME_CRYSTAL_GOLEM: string;
			NPC_NAME_CRYSTAL_THIEF: string;
			NPC_NAME_CUMULO: string;
			NPC_NAME_DON_ZORRO: string;
			NPC_NAME_EGG_COLLECTOR: string;
			NPC_NAME_EUGENE: string;
			NPC_NAME_EVE: string;
			NPC_NAME_FIRIA: string;
			NPC_NAME_FLORA: string;
			NPC_NAME_FLORIAN: string;
			NPC_NAME_FOREST_THIEF: string;
			NPC_NAME_FREEZY: string;
			NPC_NAME_FROSTY: string;
			NPC_NAME_FROSTY_STORM: string;
			NPC_NAME_GALE: string;
			NPC_NAME_GERALD: string;
			NPC_NAME_GEROME: string;
			NPC_NAME_GLACIAS: string;
			NPC_NAME_GRUMPY_YETI: string;
			NPC_NAME_GUARD: string;
			NPC_NAME_GUARD_SLIME: string;
			NPC_NAME_GUARDIAN: string;
			NPC_NAME_HANK: string;
			NPC_NAME_HARRIET_HOOD: string;
			NPC_NAME_HARVEY: string;
			NPC_NAME_HOWARD_CORNELIUS: string;
			NPC_NAME_ICE_WORM: string;
			NPC_NAME_IVIRA: string;
			NPC_NAME_JELLY_JIM: string;
			NPC_NAME_JULIA_GHOULIA: string;
			NPC_NAME_KANDI_KORN: string;
			NPC_NAME_KOI: string;
			NPC_NAME_LOTNEY_CHUNK: string;
			NPC_NAME_LUCKY_JACK: string;
			NPC_NAME_LUMINITE: string;
			NPC_NAME_MAMA_STAR: string;
			NPC_NAME_MARY_FIRE: string;
			NPC_NAME_MARY_MOSS: string;
			NPC_NAME_MERCHANT: string;
			NPC_NAME_MIKE: string;
			NPC_NAME_MILLY: string;
			NPC_NAME_MINER: string;
			NPC_NAME_MIRA_SHADE: string;
			NPC_NAME_MIST: string;
			NPC_NAME_MIZU: string;
			NPC_NAME_MOOG_ASSISTANT: string;
			NPC_NAME_MOOGS_HENCHMAN: string;
			NPC_NAME_MORRIS: string;
			NPC_NAME_MOZZA_ELLE: string;
			NPC_NAME_MUGS: string;
			NPC_NAME_NOOT: string;
			NPC_NAME_OLD_ONE: string;
			NPC_NAME_PIPPET: string;
			NPC_NAME_PRIMO_AND_MOOG: string;
			NPC_NAME_PROFESSOR_SCOOG: string;
			NPC_NAME_PUPPETMASTER: string;
			NPC_NAME_QUEEN_GOO_LIA: string;
			NPC_NAME_RAINY_STORM: string;
			NPC_NAME_ROCKSY: string;
			NPC_NAME_RUTHERFORD: string;
			NPC_NAME_SANDY_STORM: string;
			NPC_NAME_SCIENTIST_SLIME: string;
			NPC_NAME_SCOOG: string;
			NPC_NAME_SHADOW_WYRM: string;
			NPC_NAME_SHOPKEEPER_FIGG: string;
			NPC_NAME_SIR_VEY: string;
			NPC_NAME_SLURPY: string;
			NPC_NAME_SPINNER: string;
			NPC_NAME_STACHE: string;
			NPC_NAME_STAMPSY: string;
			NPC_NAME_STORMY_STORM: string;
			NPC_NAME_SWOOPY: string;
			NPC_NAME_THIEF: string;
			NPC_NAME_TITAN_BARRIER: string;
			NPC_NAME_TOY_MERCHANT: string;
			NPC_NAME_TRIPTROP_TAK: string;
			NPC_NAME_TRIPTROP_TED: string;
			NPC_NAME_TRIPTROP_TOM: string;
			NPC_NAME_UNKNOWN: string;
			NPC_NAME_VERNA: string;
			NPC_NAME_WHEELER: string;
			NPC_NAME_WINSTON: string;
			NPC_NAME_WIZARD: string;
			NPC_NAME_WOODSMAN_MIKE: string;
			NPC_NAME_WORKER_SLIME: string;
			NTH_TRIAL: string;
			NTH_TRIAL_OF_THE_ANCIENT: string;
			OPEN_CHEST: string;
			OPEN_URL_AT_HOME: string;
			OPEN_URL_IN_APP: string;
			OPEN_VIDEO_AT_HOME: string;
			OPENING_A_VIDEO_DURING_SCHOOL: string;
			PAGE_COUNT_PROGRESS: string;
			PAGE_NUMBER: string;
			PARENT_ATTACH_AT_HOME_IS: string;
			PARENT_ATTACH_BACK_TO_GAME: string;
			PARENT_ATTACH_BIRTHDAY_DETAILS: string;
			PARENT_ATTACH_BIRTHDAY_PROMPT: string;
			PARENT_ATTACH_BUTTON_BACK: string;
			PARENT_ATTACH_BUTTON_OKAY: string;
			PARENT_ATTACH_BUTTON_PARENT: string;
			PARENT_ATTACH_BUTTON_UNLOCK: string;
			PARENT_ATTACH_BUTTON_USE_TICKET: string;
			PARENT_ATTACH_CAN_PLAY: string;
			PARENT_ATTACH_CHANCE: string;
			PARENT_ATTACH_CHECK_LOGIN: string;
			PARENT_ATTACH_CREATE_ACCOUNT: string;
			PARENT_ATTACH_CREATE_FREE: string;
			PARENT_ATTACH_CREATED: string;
			PARENT_ATTACH_GET_PARENT: string;
			PARENT_ATTACH_LEARN_HOME: string;
			PARENT_ATTACH_LOCKED: string;
			PARENT_ATTACH_LOGIN_DETAILS: string;
			PARENT_ATTACH_LOOP: string;
			PARENT_ATTACH_NAME_DETAILS: string;
			PARENT_ATTACH_NAME_PROMPT: string;
			PARENT_ATTACH_NEXT_STEPS: string;
			PARENT_ATTACH_NOT_CREATED: string;
			PARENT_ATTACH_PARENT_ACCOUNT: string;
			PARENT_ATTACH_PARENT_UNLOCK_PROMPT: string;
			PARENT_ATTACH_PASSWORD: string;
			PARENT_ATTACH_PASSWORD_DETAILS: string;
			PARENT_ATTACH_PLAY_ALL_AREAS: string;
			PARENT_ATTACH_PLAYING_AT_HOME_IS: string;
			PARENT_ATTACH_PROBLEM: string;
			PARENT_ATTACH_SUCCESS_AT_HOME: string;
			PARENT_ATTACH_TICKETS_LEFT: string;
			PARENT_ATTACH_TICKETS_UNTIL_PLAYING: string;
			PARENT_ATTACH_TO: string;
			PARENT_ATTACH_TRY_AGAIN: string;
			PARENT_ATTACH_UNLOCK_AT_HOME: string;
			PARENT_ATTACH_UNSUCCESSFUL: string;
			PARENT_ATTACH_USE_ONE_TICKET: string;
			PARENT_ATTACH_USED_A_TICKET: string;
			PARENT_ATTACH_USED_ALL: string;
			PARENT_ATTACH_USERNAME: string;
			PARENT_ATTACH_USERNAME_DETAILS: string;
			PARENT_ATTACH_WORLDS: string;
			PARENT_ATTACH_YOU_HAVE: string;
			PARENT_ATTACH_YOU_NOW_HAVE: string;
			PARENT_EMAIL_BUTTON: string;
			PARENT_EMAIL_CONTENT: string;
			PARENT_EMAIL_MSG_BUTTON: string;
			PARENT_EMAIL_MSG_CONTENT: string;
			PARENT_EMAIL_TEXT: string;
			PARENT_LINK_AT_SCHOOL_BODY: string;
			PARENT_LINK_INFO_BODY: string;
			PARENT_LINK_MOBILE_MESSAGE: string;
			PARENT_LINK_POST_CLICK: string;
			PARENT_LINK_REPLAY: string;
			PARENT_LINK_SCHOOL_HOURS: string;
			PARENT_LINK_SUCCESS_BODY: string;
			PARENT_LINK_TRIAL_BODY: string;
			PARENT_LINK_TRIAL_HOME_TITLE: string;
			PARENT_LINK_TRIAL_SCHOOL_TITLE: string;
			PARENTAL_LINK_BACK_TO_GAME: string;
			PARENTAL_LINK_BIRTH: string;
			PARENTAL_LINK_BIRTH_INFO: string;
			PARENTAL_LINK_BUTTON: string;
			PARENTAL_LINK_BUTTON_SUCCESS: string;
			PARENTAL_LINK_CONFIRM_BODY_1: string;
			PARENTAL_LINK_CONFIRM_BODY_2: string;
			PARENTAL_LINK_CONFIRM_BODY_3: string;
			PARENTAL_LINK_CONTENT: string;
			PARENTAL_LINK_CONTENT_SCHOOL: string;
			PARENTAL_LINK_CONTINUE: string;
			PARENTAL_LINK_CREATE_ACCOUNT: string;
			PARENTAL_LINK_EMAIL: string;
			PARENTAL_LINK_EMAIL_INFO: string;
			PARENTAL_LINK_FAILED_BODY_1: string;
			PARENTAL_LINK_FAILED_BODY_2: string;
			PARENTAL_LINK_FAILED_BODY_3: string;
			PARENTAL_LINK_FULL_NAME_INFO: string;
			PARENTAL_LINK_INFO_BODY_1: string;
			PARENTAL_LINK_INFO_BODY_2: string;
			PARENTAL_LINK_INFO_BODY_3: string;
			PARENTAL_LINK_INFO_BODY_4: string;
			PARENTAL_LINK_INVALID_BIRTH: string;
			PARENTAL_LINK_INVALID_EMAIL: string;
			PARENTAL_LINK_INVALID_PASSWORD: string;
			PARENTAL_LINK_PARENT_NAME: string;
			PARENTAL_LINK_PASSWORD: string;
			PARENTAL_LINK_PASSWORD_INFO: string;
			PARENTAL_LINK_PLAY: string;
			PARENTAL_LINK_PRIVACY_BUTTON: string;
			PARENTAL_LINK_SCHOOL_CONTENT: string;
			PARENTAL_LINK_SIGNUP: string;
			PARENTAL_LINK_SKIP: string;
			PARENTAL_LINK_TERMS_BUTTON: string;
			PARENTAL_LINK_TERMS_DESKTOP: string;
			PARENTAL_LINK_TERMS_MOBILE: string;
			PARENTAL_LINK_TERMS_MUST_ACCEPT: string;
			PARENTAL_LINK_TITLE: string;
			PARENTAL_LINK_TITLE_SUCCESS: string;
			PARENTAL_LINK_TRIAL_ENDED_BODY_1: string;
			PARENTAL_LINK_TRIAL_ENDED_BODY_2: string;
			PARENTAL_LINK_TRIAL_ENDED_TITLE: string;
			PARENTAL_LINK_TRIAL_LINK: string;
			PARENTAL_LINK_TRIAL_SKIP: string;
			PARENTAL_LINK_TRIAL_TITLE: string;
			PARENTAL_LINK_USERNAME: string;
			PARENTAL_LINK_USERNAME_INFO: string;
			PARENTAL_LINK_VIDEO_CONTENT_1: string;
			PARENTAL_LINK_VIDEO_CONTENT_2: string;
			PARENTAL_POPUP_ATTACH_FAILED: string;
			PARENTAL_POPUP_BACK: string;
			PARENTAL_POPUP_LOGIN: string;
			PARENTAL_POPUP_MESSAGE: string;
			PARTY_FULL_ERROR: string;
			PARTY_JOIN_FAILED_ERROR: string;
			PARTY_WAS_CANCELLED: string;
			PASSWORD_ERROR_MATCHES: string;
			PASSWORD_ERROR_NO_MATCH: string;
			PASSWORD_ERROR_NO_SPACES: string;
			PASSWORD_ERROR_TOO_LONG: string;
			PASSWORD_ERROR_TOO_SHORT: string;
			PET_ADDED_TO_TEAM: string;
			PET_ADVENTURES_TITLE: string;
			PET_ALREADY_ON_TEAM: string;
			PET_LORE_CHARFOAL_BODY: string;
			PET_LORE_CHARFOAL_TITLE: string;
			PET_LORE_MERMINA_BODY: string;
			PET_LORE_MERMINA_TITLE: string;
			PET_LORE_SNOWFLUFF_BODY: string;
			PET_LORE_SNOWFLUFF_TITLE: string;
			PET_LORE_SPROOT_BODY: string;
			PET_LORE_SPROOT_TITLE: string;
			PET_LORE_WOTT_BODY: string;
			PET_LORE_WOTT_TITLE: string;
			PET_MENU_BESTIARY: string;
			PET_MENU_MY_TEAM: string;
			PET_WAS_LET_GO: string;
			PETS_BUTTON_SET_FREE: string;
			PETS_CONFIRM_LEAVE: string;
			PETS_DESCRIPTION: string;
			PETS_DONT_OWN: string;
			PETS_GROWTH: string;
			PETS_I_OWN: string;
			PETS_LIFE: string;
			PETS_MY_TEAM: string;
			PETS_POWER: string;
			PETS_TYPE: string;
			PLAY_AT_HOME_BUY_ITEM: string;
			PLAY_AT_HOME_DANCE: string;
			PLAY_AT_HOME_EVOLVE_PETS: string;
			PLAY_AT_HOME_MEMBER_BOUNTY: string;
			PLAY_AT_HOME_MEMBER_CHESTS: string;
			PLAY_AT_HOME_MEMBER_HUD: string;
			PLAY_AT_HOME_MEMBER_PETS: string;
			PLAY_AT_HOME_MORE_EXP: string;
			PLAY_AT_HOME_MORE_EXP_CLASS_LEADERS: string;
			PLAY_AT_HOME_MORE_GOLD: string;
			PLAY_AT_HOME_NICKNAME: string;
			PLAY_AT_HOME_NOT_MEMBER_HUD: string;
			PLAY_AT_HOME_PLACEHOLDER: string;
			PLAY_AT_HOME_PREMIUM_ITEM: string;
			PLAY_AT_HOME_TITLE: string;
			PLAY_AT_HOME_TOWER: string;
			PLAY_AT_HOME_TWILIGHT_WHEEL: string;
			PLAY_AT_HOME_WHEEL_SPIN: string;
			PLAY_HOME_CONTINUE_ADVENTURE: string;
			PLAY_HOME_DISPLAY_PASSWORD: string;
			PLAY_HOME_DISPLAY_USERNAME: string;
			PLAY_HOME_ENJOY_EVERYWHERE: string;
			PLAY_HOME_WRITE_DOWN_CREDENTIALS: string;
			PLAYER_CARD_ADD_FRIEND_BOT: string;
			PLAYER_CARD_ADD_FRIEND_TOP: string;
			PLAYER_CARD_ARENA: string;
			PLAYER_CARD_BATTLE_BUTTON_TOP: string;
			PLAYER_CARD_CANCEL_FRIEND_BOT: string;
			PLAYER_CARD_CANCEL_FRIEND_TOP: string;
			PLAYER_CARD_CHANGE_STYLE_BUTTON_BOT: string;
			PLAYER_CARD_CHANGE_STYLE_BUTTON_TOP: string;
			PLAYER_CARD_CONFIRM_REMOVE_BODY: string;
			PLAYER_CARD_CONFIRM_REMOVE_TITLE: string;
			PLAYER_CARD_FLOOR: string;
			PLAYER_CARD_GEAR_BUTTON_BOT: string;
			PLAYER_CARD_GEAR_BUTTON_TOP: string;
			PLAYER_CARD_GEMS_BUTTON_BOT: string;
			PLAYER_CARD_GO_TO_HOUSE_BUTTON_BOT: string;
			PLAYER_CARD_GO_TO_HOUSE_BUTTON_TOP: string;
			PLAYER_CARD_GOLD: string;
			PLAYER_CARD_HEARTS: string;
			PLAYER_CARD_KEY_ITEMS_BUTTON_BOT: string;
			PLAYER_CARD_KEY_ITEMS_BUTTON_TOP: string;
			PLAYER_CARD_MAX: string;
			PLAYER_CARD_REMOVE_FRIEND_BOT: string;
			PLAYER_CARD_REMOVE_FRIEND_TOP: string;
			PLAYER_CARD_STARS: string;
			PLAYER_CARD_STATS_BUTTON_BOT: string;
			PLAYER_CARD_STATS_BUTTON_TOP: string;
			PLAYER_CARD_TOWER: string;
			PLAYER_CARD_VISIT_HOUSE_BUTTON_BOT: string;
			PLAYER_CARD_VISIT_HOUSE_BUTTON_TOP: string;
			PLAYER_CARD_WIN_LOSS: string;
			PLAYER_LOADOUT_SCORE: string;
			POTION_USE_ALREADY_ONE: string;
			POTION_USE_ONLY_WILD: string;
			POTION_USE_UNSPORTSMAN: string;
			POUCH_BUTTON_SEARCH: string;
			POUCH_CHOOSE_BOOTS: string;
			POUCH_CHOOSE_FOLLOW: string;
			POUCH_CHOOSE_HAT: string;
			POUCH_CHOOSE_OUTFIT: string;
			POUCH_CHOOSE_RING: string;
			POUCH_CHOOSE_SPELL: string;
			POUCH_CHOOSE_SPELLRELIC: string;
			POUCH_CHOOSE_WEAPON: string;
			POUCH_SEARCH_FAILED: string;
			PROCEED_ANYWAY: string;
			PUMPKINFEST_AD_BODY: string;
			PUMPKINFEST_AD_TITLE: string;
			PUMPKINFEST_CONFIRM_TRAVEL: string;
			PUMPKINFEST_SIGN_MESSAGE: string;
			PUMPKINFEST_SIGN_TITLE: string;
			PUMPKINFEST_TOOLTIP_BODY: string;
			PUMPKIPUFF_INSTRUCTIONS: string;
			PURCHASING_MESSAGE_ALREADY_LIVE_BODY: string;
			PURCHASING_MESSAGE_ALREADY_LOOK_BODY: string;
			PURCHASING_MESSAGE_HAVE_ITEM_BODY: string;
			PURCHASING_MESSAGE_HAVE_PET_BODY: string;
			PURCHASING_MESSAGE_NEED_MORE_CURRENCY_BODY: string;
			PURCHASING_MESSAGE_NEED_MORE_GOLD_BODY: string;
			PURCHASING_MESSAGE_TOO_MANY_ITEMS_BODY: string;
			PURCHASING_MESSAGE_TOO_MANY_PETS_BODY: string;
			PVP_ARENA_POINTS: string;
			PVP_CONNECTING_NOW: string;
			PVP_DISCONNECT_WARNING_BODY: string;
			PVP_DISCONNECT_WARNING_TITLE: string;
			PVP_FINDING_MATCH_BODY: string;
			PVP_FINDING_MATCH_TITLE: string;
			PVP_INTRO: string;
			PVP_PLAYERNAME: string;
			PVP_PRIZE_ACHIEVED_POPUP_BUTTON_TEXT: string;
			PVP_PRIZE_ACHIEVED_POPUP_MESSAGE: string;
			PVP_PRIZES_DISCLAIMER: string;
			PVP_PRIZES_POINTS_REQUIREMENT: string;
			PVP_PRIZES_RANK_REQUIREMENT: string;
			PVP_PRIZES_TITLE: string;
			PVP_RANK_DOWN: string;
			PVP_RANK_UP: string;
			PVP_SELECT_ACTION: string;
			PVP_TIME_REMAINING: string;
			PVP_VERSUS_SHORT: string;
			PVP_WAITING_ON_PLAYER: string;
			PVP_WIN_LOSS: string;
			QA_LENGTH_TEST: string;
			QA_LENGTH_TEST_2: string;
			QA_LENGTH_TEST_3: string;
			QA_LENGTH_TEST_4: string;
			QA_LENGTH_TEST_5: string;
			QUEST_CLEAR: string;
			QUEST_COMPLETE: string;
			QUEST_FOLLOW_PATH: string;
			QUEST_JOB_COMPLETE: string;
			QUEST_PROGRESS_COLLECT_MORE: string;
			QUEST_PROGRESS_DEFEAT_MORE: string;
			QUEST_TODAY: string;
			QUESTS_ACTIVITY_ZONE_DAILY_PLURAL: string;
			QUESTS_ACTIVITY_ZONE_DAILY_SINGLE: string;
			QUESTS_BONFIRE_SPIRE_ADD_INGREDIENT: string;
			QUESTS_BONFIRE_SPIRE_ATTEND_DINNER: string;
			QUESTS_BONFIRE_SPIRE_DEFEAT_CHEF: string;
			QUESTS_BONFIRE_SPIRE_FIND_KEY: string;
			QUESTS_BONFIRE_SPIRE_OFFER_DISH: string;
			QUESTS_BONFIRE_SPIRE_PULL_LEVER: string;
			QUESTS_BONFIRE_SPIRE_SAVE_GATHERERS: string;
			QUESTS_BONFIRE_SPIRE_TALK_TO_GUARDS: string;
			QUESTS_BONFIRE_SPIRE_TALK_TO_QUEEN: string;
			QUESTS_BONFIRE_SPIRE_UNLOCK_CHEST: string;
			QUESTS_BUTTON_START_QUEST: string;
			QUESTS_DINO_DESC_0: string;
			QUESTS_DINO_DESC_1: string;
			QUESTS_DINO_DESC_10: string;
			QUESTS_DINO_DESC_11: string;
			QUESTS_DINO_DESC_12: string;
			QUESTS_DINO_DESC_13: string;
			QUESTS_DINO_DESC_14: string;
			QUESTS_DINO_DESC_2: string;
			QUESTS_DINO_DESC_3: string;
			QUESTS_DINO_DESC_4: string;
			QUESTS_DINO_DESC_5: string;
			QUESTS_DINO_DESC_6: string;
			QUESTS_DINO_DESC_7: string;
			QUESTS_DINO_DESC_8: string;
			QUESTS_DINO_DESC_9: string;
			QUESTS_DINO_NAME_0: string;
			QUESTS_DINO_NAME_1: string;
			QUESTS_DINO_NAME_10: string;
			QUESTS_DINO_NAME_11: string;
			QUESTS_DINO_NAME_12: string;
			QUESTS_DINO_NAME_13: string;
			QUESTS_DINO_NAME_14: string;
			QUESTS_DINO_NAME_2: string;
			QUESTS_DINO_NAME_3: string;
			QUESTS_DINO_NAME_4: string;
			QUESTS_DINO_NAME_5: string;
			QUESTS_DINO_NAME_6: string;
			QUESTS_DINO_NAME_7: string;
			QUESTS_DINO_NAME_8: string;
			QUESTS_DINO_NAME_9: string;
			QUESTS_FOREST_DEFEAT_THE_TRIO: string;
			QUESTS_FOREST_FIND_GERALD: string;
			QUESTS_FOREST_FIX_FLUTE: string;
			QUESTS_FOREST_TALK_TO_MERCHANT: string;
			QUESTS_FOREST_WAKE_GERALD: string;
			QUESTS_SHIPWRECK_CLEAR_INK: string;
			QUESTS_SHIPWRECK_DEFEAT_BOSS: string;
			QUESTS_SHIPWRECK_FIND_JIM: string;
			QUESTS_SHIPWRECK_LOOK_AROUND: string;
			QUESTS_SHIPWRECK_OPEN_DOOR: string;
			QUESTS_SHIPWRECK_TAKE_PHOTO: string;
			QUESTS_SHIVERCHILL_ACTIVATE_FURNACE: string;
			QUESTS_SHIVERCHILL_CHECK_THRONE: string;
			QUESTS_SHIVERCHILL_DEFEAT_ICE_WORM: string;
			QUESTS_SHIVERCHILL_EXPLORE_CAVES: string;
			QUESTS_SHIVERCHILL_FIND_SHOVEL: string;
			QUESTS_SHIVERCHILL_HELP_MINER: string;
			QUESTS_SHIVERCHILL_UNKNOWN: string;
			QUESTS_SKYWATCH_DEFEAT_BOSS: string;
			QUESTS_SKYWATCH_FIND_BROCCOLINA: string;
			QUESTS_SKYWATCH_FIND_EUGENE: string;
			QUESTS_SKYWATCH_GET_DEVICE: string;
			QUESTS_SKYWATCH_GET_KEY: string;
			QUESTS_SKYWATCH_INSPECT_MACHINE: string;
			QUESTS_SKYWATCH_TRIM_VINES: string;
			RANGE: string;
			RANK_STORE_HIGHER_BOUNTY_MESSAGE: string;
			RANK_STORE_HIGHER_RANK_MESSAGE: string;
			RANK_STORE_NOT_REACHED: string;
			RANK_STORE_THIS_RANK: string;
			RANKS_BRONZE: string;
			RANKS_DIAMOND: string;
			RANKS_GOLD: string;
			RANKS_PLATINUM: string;
			RANKS_RANK_WRAPPER: string;
			RANKS_SILVER: string;
			RANKS_UNRANKED: string;
			RARITY_COMMON: string;
			RARITY_HEROIC: string;
			RARITY_LEGENDARY: string;
			RARITY_RARE: string;
			RARITY_UNCOMMON: string;
			RATING_PROMPT: string;
			REDBUBBLE_AD_BODY: string;
			REDBUBBLE_AD_TITLE: string;
			REDEEM_VOUCHER_BUTTON: string;
			REDEEM_VOUCHER_CONTENT: string;
			REGISTRATION_CLASS: string;
			REGISTRATION_CLASS_CODE_FIND: string;
			REGISTRATION_CLASS_CODE_GET: string;
			REGISTRATION_CLASS_CODE_NOT_FOUND: string;
			REGISTRATION_CLASS_TITLE: string;
			REGISTRATION_CLICK_HERE: string;
			REGISTRATION_GRADE: string;
			REGISTRATION_GRADE_TITLE: string;
			REGISTRATION_LEARN_MORE: string;
			REGISTRATION_LEVEL: string;
			REGISTRATION_LEVEL_TITLE: string;
			REGISTRATION_LOCATION_DIALOG_BODY: string;
			REGISTRATION_LOCATION_DIALOG_TITLE: string;
			REGISTRATION_LOCATION_TITLE: string;
			REGISTRATION_SUB_OTHER: string;
			REGISTRATION_WHY_NEED_GRADE: string;
			REGISTRATION_WHY_NEED_GRADE_REASON: string;
			REGISTRATION_WHY_NEED_INFO: string;
			REGISTRATION_WHY_NEED_NAME: string;
			REGISTRATION_WHY_NEED_NAME_REASON: string;
			REGISTRATION_YEAR: string;
			REGISTRATION_YEAR_TITLE: string;
			RESTART: string;
			ROOF_BLOCKED_FLOOR: string;
			ROOF_COMPLETE_FLOOR: string;
			ROOF_DUEL: string;
			ROOF_FAST: string;
			ROOF_LUCK: string;
			ROOF_MASTER: string;
			ROOF_ONEWAY: string;
			ROOF_WON: string;
			RUNE_RUN_FTUE_NOOT_0: string;
			RUNE_RUN_FTUE_NOOT_1: string;
			RUNE_RUN_FTUE_NOOT_2: string;
			RUNE_RUN_MEMBER_LOCKED_BODY: string;
			RUNE_RUN_MEMBER_LOCKED_TITLE: string;
			RUNE_RUN_START_ERROR: string;
			RUNE_RUN_UNAVAILABLE_ERROR: string;
			SCREEN_SIZE_TITLE: string;
			SEASON_COMPLETED: string;
			SEASON_COMPLETED_TITLE: string;
			SEASON_DETAILS_CHALLENGE_BUTTON_CHALLENGER: string;
			SEASON_DETAILS_CHALLENGE_BUTTON_FIND: string;
			SEASON_DETAILS_EARN_BONUS: string;
			SEASON_DETAILS_NEXT_PRIZE: string;
			SEASON_DETAILS_POINTS: string;
			SEASON_DETAILS_POINTS_TITLE: string;
			SEASON_DETAILS_PRIZE_BUTTON: string;
			SEASON_DETAILS_REACH_TOP: string;
			SEASON_DETAILS_SEASON_ENDS: string;
			SEASON_DETAILS_TAB_BOTTOM: string;
			SEASON_DETAILS_TAB_TOP: string;
			SEASON_DETAILS_WEEKLY_EARNED: string;
			SEASON_NEXT_RANK: string;
			SEASON_TO_TOP: string;
			SEASON_TOP_PLAYERS: string;
			SEASON_YOUR_POINTS: string;
			SEASON_YOUR_RANK: string;
			SEASON_YOUR_RANK_TITLE: string;
			SECURE_BATTLE_WAITING_CAST_SPELL: string;
			SECURE_BATTLE_WAITING_GENERIC: string;
			SECURE_BATTLE_WAITING_SWITCHING: string;
			SECURE_BATTLE_WAITING_USE_ITEM: string;
			SEND_GIFT_FEATURE_SOON_MESSAGE_BODY: string;
			SEND_GIFT_FEATURE_SOON_MESSAGE_TITLE: string;
			SERVER_CHOOSE_WORLD_TITLE: string;
			SERVER_CONNECTING_MESSAGE: string;
			SERVER_ERROR_FAILED_LOAD: string;
			SERVER_ERROR_FALLBACK: string;
			SERVER_ERROR_WORLD_FULL: string;
			SERVER_ERROR_WORLD_SELECTED_FULL: string;
			SERVER_LOADING_LIST: string;
			SERVER_PICK_SAME_WORLD: string;
			SERVER_WIZARDS_ONLINE: string;
			SERVERS_BUTTON_BACK_TO_WORLDS: string;
			SERVERS_BUTTON_MORE_WORLDS: string;
			SERVERS_BUTTON_MY_WORLDS: string;
			SERVERS_BUTTON_PLAY_OFFLINE: string;
			SETTINGS_ACCOUNT: string;
			SETTINGS_GRAPHICS: string;
			SETTINGS_LOGOUT: string;
			SETTINGS_MUSIC_VOLUME: string;
			SETTINGS_NETWORK: string;
			SETTINGS_OFFLINE: string;
			SETTINGS_PARENT: string;
			SETTINGS_RESTORE_DEFAULTS: string;
			SETTINGS_SOUND: string;
			SETTINGS_SOUND_VOLUME: string;
			SETTINGS_TITLE: string;
			SETTINGS_VOICE_VOLUME: string;
			SETTINGS_YOUR_WORLD: string;
			SHIPWRECK_GUARDIAN: string;
			SHIVERCHILL_FURNACE_FUEL: string;
			SHIVERCHILL_FURNACE_IN_ORDER: string;
			SHIVERCHILL_FURNACE_LIT: string;
			SHIVERCHILL_GUARDIAN: string;
			SIGN_OUT_BUTTON: string;
			SIGN_OUT_MESSAGE: string;
			SIGN_OUT_TITLE: string;
			SIR_VEY_QUESTION_FOR_YOU: string;
			SKYWATCH_GUARDIAN: string;
			SKYWATCH_REQUIRE_FACTORY_KEY: string;
			SKYWATCH_REQUIRE_MASTER_KEY: string;
			SLOT_MACHINE_BONUS_DAMAGE: string;
			SLOT_MACHINE_BONUS_GOLD: string;
			SLOT_MACHINE_BONUS_STARS: string;
			SLOT_MACHINE_DRAIN: string;
			SLOT_MACHINE_EVASION_UP: string;
			SLOT_MACHINE_HEAL_HP: string;
			SLOT_MACHINE_REDUCE_DAMAGE: string;
			SNOWBALL_INSTRUCTIONS: string;
			SO_SLEEPY: string;
			SOCIAL_MENU_AWARDS_BUTTON_BOT: string;
			SOCIAL_MENU_BADGES_BUTTON_BOT: string;
			SOCIAL_MENU_BATTLE_REQUESTS_BUTTON_BOT: string;
			SOCIAL_MENU_BATTLE_REQUESTS_BUTTON_TOP: string;
			SOCIAL_MENU_BOUNTIES_BUTTON_BOT: string;
			SOCIAL_MENU_SEASON_CLASS_LEADERS_BOT: string;
			SOCIAL_MENU_SEASON_CLASS_LEADERS_TOP: string;
			SOCIAL_MENU_SEASON_DETAILS_BOT: string;
			SOCIAL_MENU_SEASON_DETAILS_TOP: string;
			SOCIAL_MENU_SEASON_LEADERS_BOT: string;
			SOCIAL_MENU_SEASON_LEADERS_TOP: string;
			SOUND_TITLE: string;
			SPELL: string;
			SPELLBOOK_DESCRIPTION: string;
			SPELLBOOK_TITLE: string;
			SPELLS: string;
			SPRINGFEST: string;
			SPRINGFEST_CONFIRM_TRAVEL: string;
			SPRINGFEST_SIGN_MESSAGE: string;
			SPRINGFEST_SIGN_TITLE: string;
			SS_APPEARS: string;
			SS_GOOD_AS_NEW: string;
			SS_LASTTHING: string;
			STARLIGHT_AD_BODY: string;
			STARLIGHT_AD_TITLE: string;
			STARLIGHT_CONFIRM_TRAVEL: string;
			STARLIGHT_MESSAGE_RETURN_LATER: string;
			STARLIGHT_ON_NOW: string;
			STARLIGHT_SIGN_MESSAGE: string;
			STARLIGHT_SIGN_TITLE: string;
			STARS: string;
			STARS_IN_JAR_COUNT: string;
			START_TRIAL: string;
			STARTUP_TITLE: string;
			STATS: string;
			Steve_Test_1: string;
			STORE_CLOSE_TIMER: string;
			STORE_CURRENCY_LOCKED: string;
			STORE_ELEMENT: string;
			STORE_HOT_HOT_THREADS: string;
			STORE_MACHINE_SHOP: string;
			STORE_NAME_CRYSTAL_CAFE: string;
			STORE_NAME_DYNO: string;
			STORE_NAME_FIREFLY: string;
			STORE_OCEAN_OUTFITTERS: string;
			STORE_OPEN_FAILED_MESSAGE: string;
			STORE_OPEN_FAILED_TITLE: string;
			STORE_OWN_ITEM: string;
			STORE_OWN_MULTIPLE: string;
			STORE_PROMPT_NEED_GOLD: string;
			STORE_PROMPT_UNLOCK_ALL: string;
			STORE_PROMPT_WELCOME: string;
			STORE_PROMPT_WELCOME_API: string;
			STORE_SKY_HIGH: string;
			STORE_SNOWDAY_SALES: string;
			STORE_SPELL_NAME: string;
			STORE_TOOLTIP_HEADER_3: string;
			STORE_TOOLTIP_HEADER_4: string;
			STORE_TOOLTIP_MESSAGE_0: string;
			STORE_TOOLTIP_MESSAGE_1: string;
			STORE_TOOLTIP_MESSAGE_2: string;
			STORE_TOOLTIP_MESSAGE_3: string;
			STORE_TOOLTIP_MESSAGE_4: string;
			STORE_TOOLTIP_MESSAGE_5: string;
			STORE_TOOLTIP_MESSAGE_6: string;
			STYLIST_BUY_LOOK: string;
			STYLIST_CHOOSE_EYE_COLOR: string;
			STYLIST_CHOOSE_HAIR_COLOR: string;
			STYLIST_CHOOSE_HAIR_STYLE: string;
			STYLIST_CONFIRM_MESSAGE_BODY: string;
			STYLIST_HAIR_COLOR: string;
			STYLIST_MESSAGE_NEED_MORE_GOLD_BODY: string;
			STYLIST_TITLE: string;
			SUMMARY_BATTLE_STARS_EARNED: string;
			SUMMARY_BATTLE_STARS_EARNED_SINGULAR: string;
			SUMMARY_POPUP_EVOLUTION: string;
			SUMMARY_POPUP_HEARTS_EARNED: string;
			SUMMARY_POPUP_NEW_HEARTS: string;
			SUMMARY_POPUP_NEW_SPELL: string;
			SUMMARY_POPUP_SPELL_EVOLVED: string;
			SUMMARY_POPUP_SPELL_UNLOCKED: string;
			SUMMERFEST_AD_BODY: string;
			SUMMERFEST_AD_TITLE: string;
			SUMMERFEST_CONFIRM_TRAVEL: string;
			SUMMERFEST_SIGN_MESSAGE: string;
			SUMMERFEST_SIGN_TITLE: string;
			SUN_WHEEL_PROMPT_SPIN: string;
			SURVEY_AT_HOME_QUESTION: string;
			SURVEY_BUTTON_DONE: string;
			SURVEY_COMPUTER_ANSWER: string;
			SURVEY_COMPUTER_TABLET_QUESTION: string;
			SURVEY_CREATIVE_1: string;
			SURVEY_CREATIVE_2: string;
			SURVEY_CREATIVE_3: string;
			SURVEY_CREATIVE_4: string;
			SURVEY_CREATIVE_Q: string;
			SURVEY_DEMO_A1: string;
			SURVEY_DEMO_A2: string;
			SURVEY_DEMO_QS: string;
			SURVEY_ENJOY_COLLECTING: string;
			SURVEY_ENJOY_CREATIVE: string;
			SURVEY_ENJOY_EVENTS: string;
			SURVEY_ENJOY_FRIENDS: string;
			SURVEY_ENJOY_HERO: string;
			SURVEY_ENJOY_Q: string;
			SURVEY_ENJOY_RARE: string;
			SURVEY_ENJOY_STORY: string;
			SURVEY_ENJOY_WINNING: string;
			SURVEY_GAME_1: string;
			SURVEY_GAME_2: string;
			SURVEY_GAME_3: string;
			SURVEY_GAME_4: string;
			SURVEY_GAME_Q: string;
			SURVEY_LIKE_TO_SEE_0_A0: string;
			SURVEY_LIKE_TO_SEE_0_A1: string;
			SURVEY_LIKE_TO_SEE_0_A2: string;
			SURVEY_LIKE_TO_SEE_0_A3: string;
			SURVEY_LIKE_TO_SEE_0_Q: string;
			SURVEY_MEMBERSHIP_ANSWER_1: string;
			SURVEY_MEMBERSHIP_ANSWER_2: string;
			SURVEY_MEMBERSHIP_ANSWER_3: string;
			SURVEY_MEMBERSHIP_ANSWER_MORE: string;
			SURVEY_MORE_OF_ANSWER_1: string;
			SURVEY_MORE_OF_ANSWER_2: string;
			SURVEY_MORE_OF_ANSWER_3: string;
			SURVEY_MORE_OF_ANSWER_4: string;
			SURVEY_MOTIVATIONS_1: string;
			SURVEY_MOTIVATIONS_2: string;
			SURVEY_MOTIVATIONS_3: string;
			SURVEY_MOTIVATIONS_4: string;
			SURVEY_MOTIVATIONS_5: string;
			SURVEY_NO: string;
			SURVEY_TABLET_ANSWER: string;
			SURVEY_WANT_MORE_OF: string;
			SURVEY_WIZARD_QUESTION: string;
			SURVEY_YES: string;
			SURVEY_YES_EXCLAMATION: string;
			SYSTEM_BUTTON_FULLSCREEN: string;
			SYSTEM_BUTTON_FULLSCREEN_ENTER: string;
			SYSTEM_BUTTON_FULLSCREEN_EXIT: string;
			SYSTEM_BUTTON_FULLSCREEN_SHORT: string;
			SYSTEM_BUTTON_LARGE_SCREEN: string;
			SYSTEM_BUTTON_MEDIUM_SCREEN: string;
			SYSTEM_BUTTON_SMALL_SCREEN: string;
			TEAM_MUST_HAVE_A_LEADER: string;
			TEAM_TITAN_BATTLE: string;
			TECH_COMPLETED: string;
			TECH_START_0: string;
			TECH_START_1: string;
			TEXTAREA_CHARACTERS: string;
			TEXTBOX_TITLE_CLASS_CODE: string;
			TEXTBOX_TITLE_FIRST_NAME: string;
			TEXTBOX_TITLE_LAST_NAME: string;
			TEXTBOX_TITLE_LAST_NAME_INITIAL: string;
			TEXTBOX_TITLE_PARENT_EMAIL: string;
			TEXTBOX_TITLE_PASSWORD: string;
			TEXTBOX_TITLE_REENTER_PASSWORD: string;
			TEXTBOX_TITLE_USERNAME: string;
			THE_ANCIENT: string;
			THE_PUMPKIN_FESTIVAL: string;
			THE_STARLIGHT_FESTIVAL: string;
			THE_SUMMERFEST_FESTIVAL: string;
			TIMER_FORMAT: string;
			TIMER_FORMAT_DAYS: string;
			TITAN_DEFEATED_MESSAGE: string;
			TITAN_DEFEATED_TITLE: string;
			TITAN_HEARTS: string;
			TITAN_INACTIVE: string;
			TITAN_NAME: string;
			TITLE_LOGIN: string;
			TOKEN_EXPIRE_MESSAGE: string;
			TOWER_ALL_DEFEATED: string;
			TOWER_CHANCE_DAMAGE_INCREASED: string;
			TOWER_CHANCE_DAMAGE_REDUCED: string;
			TOWER_CHANCE_DISABLE_SWITCHING: string;
			TOWER_CHANCE_DOUBLE_STARS: string;
			TOWER_CHANCE_GAIN_HEARTS: string;
			TOWER_CHANCE_LOSE_HEARTS: string;
			TOWER_CHANCE_WHEEL: string;
			TOWER_ENTRANCE_LOCKOUT_TITLE: string;
			TOWER_ENTRANCE_WELCOME: string;
			TOWER_EXIT_CONTENT: string;
			TOWER_EXIT_FLORIAN: string;
			TOWER_EXIT_PAGES: string;
			TOWER_EXIT_TITLE: string;
			TOWER_EXIT_TO_CR: string;
			TOWER_EXIT_TO_FLOOR: string;
			TOWER_EXIT_WARNING: string;
			TOWER_EXIT_WARNING_COLLECTED: string;
			TOWER_NEXT_CHALLENGER: string;
			TOWER_PRIZES_MESSAGE: string;
			TOWER_PRIZES_TITLE: string;
			TOWER_PROMPT_COMPLETE_LEAVE: string;
			TOWER_PROMPT_LEAVE: string;
			TOWER_PROMPT_MUST_DEFEAT: string;
			TOWER_PROMPT_START: string;
			TOWER_PROMPT_START_GOLD: string;
			TOWER_TOWN_AD_BODY: string;
			TOWER_TOWN_AD_TITLE: string;
			TOWER_TOWN_GO_BUTTON: string;
			TOWER_TOWN_GO_POPUP: string;
			TOWER_TOWN_MAP: string;
			TOWER_TOWN_MAP_DESC: string;
			TOWER_TOWN_REDIRECT: string;
			TOWER_TOWN_TUTORIAL_MAP: string;
			TOY_UNLOCK_JOINED: string;
			TOY_UNLOCK_USE: string;
			TRAVEL_TO_CRYSTAL_CAVERNS: string;
			TRAVEL_TO_HARMONY_ISLAND: string;
			TRAVEL_TO_TOWER_TOWN: string;
			TRIAL_MEMBERSHIP_AUTO_BODY: string;
			TRIAL_MEMBERSHIP_AUTO_FOOTER: string;
			TRIAL_MEMBERSHIP_AUTO_LEVEL: string;
			TRIAL_MEMBERSHIP_AUTO_TITLE: string;
			TRIAL_MEMBERSHIP_SUCESS_BODY: string;
			TRIAL_MEMBERSHIP_SUCESS_TITLE: string;
			TRY_LUCKY_LOOT_AGAIN: string;
			TT_BUSTLING_VILLAGE: string;
			TT_CHOOSE_FLOOR_QUIT_BODY: string;
			TT_CHOOSE_FLOOR_TITLE: string;
			TT_FINISH_TOWER_FIRST: string;
			TT_FINISH_TOWER_ON_ADD: string;
			TT_FLOATLINGS_NEED_REST: string;
			TT_FTUE_BLOCK_PLACED: string;
			TT_FTUE_CAST_SPELLS: string;
			TT_FTUE_CHOOSE_FLOOR: string;
			TT_FTUE_CLICK_BUTTON: string;
			TT_FTUE_FLOATLINGS_RETURNING: string;
			TT_FTUE_LOOK_FLOOR: string;
			TT_FTUE_PM_WELCOME: string;
			TT_FTUE_PM_WELCOME_2: string;
			TT_FTUE_PM_WELCOME_3: string;
			TT_FTUE_START_BUILDING: string;
			TT_FTUE_SW_CAN_BUILD_NEXT_FLOOR: string;
			TT_FTUE_SW_SHOW: string;
			TT_FTUE_SW_THANK_GOODNESS: string;
			TT_FTUE_SW_WELCOME: string;
			TT_FTUE_SWOOPY_BUILDING_BASICS: string;
			TT_FTUE_SWOOPY_DONE: string;
			TT_FTUE_SWOOPY_FLOATLING_TYPES: string;
			TT_FTUE_SWOOPY_HELP: string;
			TT_FTUE_SWOOPY_LUMIN_TREES: string;
			TT_FTUE_SWOOPY_TRAVELS: string;
			TT_FTUE_SWOOPY_WEAKENED_PUPPETMASTER: string;
			TT_FTUE_TUTORIAL: string;
			TT_FTUE_WORK_BUILDING: string;
			TT_FTUR_SWOOPY_SHOW: string;
			TT_I_ALMOST_FORGOT: string;
			TT_INFINITY_TOWER_CLOSED: string;
			TT_INFINITY_TOWER_OPEN: string;
			TT_INFINITY_TOWER_OPEN_BODY: string;
			TT_MOVE_FIRST_FLOOR: string;
			TT_MOVE_FLOOR_BLOCKED: string;
			TT_MOVE_FLOOR_BOTTOM_ONLY_BACK: string;
			TT_MOVE_FLOOR_HEADER: string;
			TT_MOVE_FLOOR_MINIMUM_WARNING: string;
			TT_MOVE_FLOOR_NEXT_TALL: string;
			TT_MOVE_FLOOR_PREV_TALL: string;
			TT_MOVE_FLOOR_TOP_BOTTOM_ONLY: string;
			TT_MOVE_FLOOR_TOP_ONLY_FORWARD: string;
			TT_NEW_DESIGN: string;
			TT_NEXT_TIME_YOU_BUILD: string;
			TT_ROOFTOP_ASSIGNMENT: string;
			TT_ROOMMATES: string;
			TT_SHROUD_QUIT_CONFIRM_BODY: string;
			TT_SHROUD_TUTORIAL_DIALOGUE_1: string;
			TT_SHROUD_TUTORIAL_DIALOGUE_2: string;
			TT_SHROUD_TUTORIAL_DIALOGUE_3: string;
			TT_SHROUD_TUTORIAL_DIALOGUE_4: string;
			TT_START_BUILDING: string;
			TT_STUBBORN_SHADOW_QUIT_BODY: string;
			TT_SW_THINGS_CHANGED: string;
			TT_TOOLTIP_FLOOR_COMPLETE: string;
			TT_TOWER_CLOSED_BODY: string;
			TT_TOWER_CLOSED_FOOTER: string;
			TT_TOWER_CLOSED_LINK: string;
			TT_TOWER_CLOSED_LINKTXT: string;
			TT_TOWER_TOWN_OPEN: string;
			TT_TOWER_WORK_DONE: string;
			TT_UPDATE_BLOCKS_BUILT: string;
			TT_UPDATE_FLOORS_MADE: string;
			TT_UPDATE_SHROUDS_CLEARED: string;
			TWILIGHT_WHEEL: string;
			TWILIGHT_WHEEL_COME_BACK_LATER: string;
			TWILIGHT_WHEEL_COME_BACK_TOMORROW: string;
			TWILIGHT_WHEEL_POPUP_BODY: string;
			TWILIGHT_WHEEL_POPUP_TITLE: string;
			TWILIGHT_WHEEL_SPIN: string;
			TWILIGHT_WHEEL_SPIN_AGAIN: string;
			TWILIGHT_WHEEL_WATCH_SPIN: string;
			UI_FEED_All: string;
			UI_FEED_BECOME_A_MEMBER: string;
			UI_FEED_CAUGHT_UP: string;
			UI_FEED_CHECK_OUT: string;
			UI_FEED_EVENTS: string;
			UI_FEED_FRIEND: string;
			UI_FEED_LASTNIGHT: string;
			UI_FEED_ME: string;
			UI_FEED_MY_SHARES: string;
			UI_FEED_NAME_AT_LOCATION: string;
			UI_FEED_NO_SHARES: string;
			UI_FEED_NO_TODAY: string;
			UI_FEED_OLD: string;
			UI_FEED_SHARE: string;
			UI_FEED_SHARE_FRIENDS: string;
			UI_FEED_SHARED: string;
			UI_FEED_TITLE: string;
			UI_FEED_TODAY: string;
			UI_MAIL_CHECK_IT_OUT: string;
			UI_MAIL_NO_MAIL: string;
			UI_MAIL_WELCOME: string;
			UI_MAIL_YOUR_MAIL: string;
			UI_NO_FEED_ALL: string;
			UI_NO_FEED_FRIENDS: string;
			UI_NO_FEED_ME: string;
			UI_PVP_1000_POINTS: string;
			UI_PVP_COOL_ARMOR: string;
			UI_PVP_GRAND_PRIZE: string;
			UI_PVP_PRIZES: string;
			UI_PVP_PRIZES_DESC: string;
			UI_RESULTS_TITLE: string;
			UI_TAXI_PAY_HALF: string;
			UI_TAXI_REGULAR_FARE: string;
			UI_TITAN_APPEAR_INFO: string;
			UI_TITAN_BATTLES_INFO: string;
			UI_TITAN_REWARDS_TITLE: string;
			UI_TITAN_SHARDS_INFO: string;
			UI_ZONE_BONFIRE_SPIRE: string;
			UI_ZONE_CHECK_BACK: string;
			UI_ZONE_FIREFLY_FOREST: string;
			UI_ZONE_NO_CLASSMATES: string;
			UI_ZONE_NO_FRIENDS: string;
			UI_ZONE_PLAY: string;
			UI_ZONE_SHIPWRECK_SHORE: string;
			UI_ZONE_SHIVERCHILL: string;
			UI_ZONE_SKYWATCH: string;
			UNLOCKS_AT_LEVEL: string;
			VOICE_VOLUME_LABEL: string;
			VOLUME_OFF: string;
			WARNING: string;
			WARNING_DEVICE_PERFORMANCE: string;
			WARNING_DEVICE_PERFORMANCE_CRYSTAL_CAVERNS: string;
			WATCH: string;
			WATCH_VIDEO: string;
			WATER_BALLOON_INSTRUCTIONS: string;
			WEEKDAY_NAME_0: string;
			WEEKDAY_NAME_1: string;
			WEEKDAY_NAME_2: string;
			WEEKDAY_NAME_3: string;
			WEEKDAY_NAME_4: string;
			WEEKDAY_NAME_5: string;
			WEEKDAY_NAME_6: string;
			WEEKDAY_NAME_TODAY: string;
			WEEKDAY_NAME_TOMORROW: string;
			WHEEL: string;
			WHEEL_OF_SUN: string;
			WHEEL_OF_WONDER: string;
			WHEN_MOST_ENJOY: string;
			WINTERFEST: string;
			WINTERFEST_AD_BODY: string;
			WINTERFEST_AD_TITLE: string;
			WINTERFEST_CONFIRM_TRAVEL: string;
			WINTERFEST_SIGN_MESSAGE: string;
			WINTERFEST_SIGN_TITLE: string;
			WIZARD_LEVEL: string;
			WIZARD_LEVELS: string;
			WONDER_WHEEL_PROMPT_SPIN: string;
			WONDER_WHEEL_SPIN: string;
			WONDER_WHEEL_SPIN_AGAIN: string;
			WONDER_WHEEL_SPIN_TOMORROW: string;
			WONDER_WHEEL_TICKET: string;
			WORLD_BONFIRE_SPIRE: string;
			WORLD_BONFIRE_SPIRE_DESC: string;
			WORLD_DARK_TOWER: string;
			WORLD_DARK_TOWER_DESC: string;
			WORLD_DYNO_DIG_OASIS: string;
			WORLD_DYNO_DIG_OASIS_CLASS_MODE: string;
			WORLD_DYNO_DIG_OASIS_DESC: string;
			WORLD_ELEMENTAL_GUARDIAN: string;
			WORLD_ELEMENTAL_GUARDIAN_DESC: string;
			WORLD_EPICS_SUBSPACE: string;
			WORLD_EPICS_SUBSPACE_DESC: string;
			WORLD_FIREFLY_FOREST: string;
			WORLD_FIREFLY_FOREST_DESC: string;
			WORLD_INFO_PLAY_TOGETHER: string;
			WORLD_INFO_TITLE: string;
			WORLD_INFO_YOU_ARE_IN: string;
			WORLD_LABEL: string;
			WORLD_LAMPLIGHT_TOWN: string;
			WORLD_LAMPLIGHT_TOWN_CLASS_MODE: string;
			WORLD_LAMPLIGHT_TOWN_DESC: string;
			WORLD_LOST_ISLAND: string;
			WORLD_LOST_ISLAND_DESC: string;
			WORLD_MAP_ACADEMY_LEVEL_LOCKED: string;
			WORLD_MAP_BONFIRE_QUEST_0: string;
			WORLD_MAP_BONFIRE_QUEST_1: string;
			WORLD_MAP_BONFIRE_QUEST_10: string;
			WORLD_MAP_BONFIRE_QUEST_11: string;
			WORLD_MAP_BONFIRE_QUEST_12: string;
			WORLD_MAP_BONFIRE_QUEST_13: string;
			WORLD_MAP_BONFIRE_QUEST_2: string;
			WORLD_MAP_BONFIRE_QUEST_3: string;
			WORLD_MAP_BONFIRE_QUEST_4: string;
			WORLD_MAP_BONFIRE_QUEST_5: string;
			WORLD_MAP_BONFIRE_QUEST_6: string;
			WORLD_MAP_BONFIRE_QUEST_7: string;
			WORLD_MAP_BONFIRE_QUEST_8: string;
			WORLD_MAP_BONFIRE_QUEST_9: string;
			WORLD_MAP_CONFIRM_TRAVEL: string;
			WORLD_MAP_DARK_TOWER_LEVEL_LOCKED: string;
			WORLD_MAP_FOREST_QUEST_0: string;
			WORLD_MAP_FOREST_QUEST_1: string;
			WORLD_MAP_FOREST_QUEST_10: string;
			WORLD_MAP_FOREST_QUEST_11: string;
			WORLD_MAP_FOREST_QUEST_2: string;
			WORLD_MAP_FOREST_QUEST_3: string;
			WORLD_MAP_FOREST_QUEST_4: string;
			WORLD_MAP_FOREST_QUEST_5: string;
			WORLD_MAP_FOREST_QUEST_6: string;
			WORLD_MAP_FOREST_QUEST_7: string;
			WORLD_MAP_FOREST_QUEST_8: string;
			WORLD_MAP_FOREST_QUEST_9: string;
			WORLD_MAP_SHIPWRECK_QUEST_0: string;
			WORLD_MAP_SHIPWRECK_QUEST_1: string;
			WORLD_MAP_SHIPWRECK_QUEST_10: string;
			WORLD_MAP_SHIPWRECK_QUEST_2: string;
			WORLD_MAP_SHIPWRECK_QUEST_3: string;
			WORLD_MAP_SHIPWRECK_QUEST_4: string;
			WORLD_MAP_SHIPWRECK_QUEST_5: string;
			WORLD_MAP_SHIPWRECK_QUEST_6: string;
			WORLD_MAP_SHIPWRECK_QUEST_7: string;
			WORLD_MAP_SHIPWRECK_QUEST_8: string;
			WORLD_MAP_SHIPWRECK_QUEST_9: string;
			WORLD_MAP_SHIVERCHILL_QUEST_0: string;
			WORLD_MAP_SHIVERCHILL_QUEST_1: string;
			WORLD_MAP_SHIVERCHILL_QUEST_10: string;
			WORLD_MAP_SHIVERCHILL_QUEST_11: string;
			WORLD_MAP_SHIVERCHILL_QUEST_12: string;
			WORLD_MAP_SHIVERCHILL_QUEST_13: string;
			WORLD_MAP_SHIVERCHILL_QUEST_14: string;
			WORLD_MAP_SHIVERCHILL_QUEST_2: string;
			WORLD_MAP_SHIVERCHILL_QUEST_3: string;
			WORLD_MAP_SHIVERCHILL_QUEST_4: string;
			WORLD_MAP_SHIVERCHILL_QUEST_5: string;
			WORLD_MAP_SHIVERCHILL_QUEST_6: string;
			WORLD_MAP_SHIVERCHILL_QUEST_7: string;
			WORLD_MAP_SHIVERCHILL_QUEST_8: string;
			WORLD_MAP_SHIVERCHILL_QUEST_9: string;
			WORLD_MAP_SKYWATCH_QUEST_0: string;
			WORLD_MAP_SKYWATCH_QUEST_1: string;
			WORLD_MAP_SKYWATCH_QUEST_10: string;
			WORLD_MAP_SKYWATCH_QUEST_11: string;
			WORLD_MAP_SKYWATCH_QUEST_12: string;
			WORLD_MAP_SKYWATCH_QUEST_2: string;
			WORLD_MAP_SKYWATCH_QUEST_3: string;
			WORLD_MAP_SKYWATCH_QUEST_4: string;
			WORLD_MAP_SKYWATCH_QUEST_5: string;
			WORLD_MAP_SKYWATCH_QUEST_6: string;
			WORLD_MAP_SKYWATCH_QUEST_7: string;
			WORLD_MAP_SKYWATCH_QUEST_8: string;
			WORLD_MAP_SKYWATCH_QUEST_9: string;
			WORLD_MAP_TITLE: string;
			WORLD_MAP_ZONE_LEVEL_LOCKED: string;
			WORLD_MAP_ZONE_LOCKED: string;
			WORLD_OFFLINE_TEXT_1: string;
			WORLD_OFFLINE_TEXT_2: string;
			WORLD_SHIPWRECK_SHORE: string;
			WORLD_SHIPWRECK_SHORE_DESC: string;
			WORLD_SHIVERCHILL_MOUNTAINS: string;
			WORLD_SHIVERCHILL_MOUNTAINS_DESC: string;
			WORLD_SKYWATCH: string;
			WORLD_SKYWATCH_DESC: string;
			WORLD_SPRINGFEST_CLASS_MODE: string;
			WORLD_THE_ACADEMY: string;
			WORLD_THE_ACADEMY_DESC: string;
			WORLD_YOUR_HOUSE: string;
			WORLD_YOUR_HOUSE_CLASS_MODE: string;
			WORLD_YOUR_HOUSE_DESC: string;
			WORLDMAP_HARMONY_GO_BUTTON: string;
			WORLDMAP_HARMONY_LOCK_TITLE: string;
			WORLDMAP_HARMONY_LOCKED: string;
			WORLDMAP_HARMONY_UNLOCKED: string;
			WORTH: string;
			WRONG_USERNAME_PASSWORD: string;
			YOU_GOT_A_REWARD: string;
			YOU_GOT_AN_REWARD: string;
			YOUR_ACCOUNT_LABEL: string;
			YOUR_TEAM: string;
			YOUTUBE_DISABLED_MESSAGE: string;
		};
	};
}