export interface Instance {
	destroy(): void;
	_game: {
		_paused: boolean;
		_pausedByCode: boolean;
		isBooted: boolean;
		paused: boolean;
		pausedByCode: boolean;
		transparent: boolean;
		versioned: boolean;
		_height: number;
		_width: number;
		broadcastId: number;
		height: number;
		resolution: number;
		width: number;
		clientVersion: string;
		windowHeight: undefined;
		windowWidth: undefined;
		boot(): void;
		bootSystems(): void;
		createApp(i: unknown, n: unknown): unknown;
		createSystems(): void;
		destroy(): void;
		focusGain(t: unknown): void;
		focusLoss(t: unknown): void;
		gamePaused(t: unknown): void;
		gameResumed(t: unknown): void;
		init(): void;
		pauseGame(t: unknown): void;
		postUpdate(t: unknown): void;
		showDebugHeader(): void;
		toggleFpsGraph(): void;
		update(i: unknown): void;
		canvas: HTMLCanvasElement;
		parent: HTMLCanvasElement;
		_add: {
			audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			existing(t: unknown): unknown;
			graphics(t: unknown, i: unknown, n: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
			sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
			tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			tween(t: unknown, i: unknown, n: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		_app: {
			_resizeId: null;
			_resizeTo: null;
			cancelResize(): void;
			destroy(e: unknown, r: unknown): void;
			queueResize(): unknown;
			render(): void;
			resize(): void;
			start(): void;
			stop(): void;
			view: HTMLCanvasElement;
			_ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		_cache: {
			addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
			addImage(t: unknown, i: unknown, n: unknown): void;
			addItem(t: unknown, i: unknown, n: unknown): void;
			addJSON(t: unknown, i: unknown): void;
			addRenderTexture(t: unknown, i: unknown): void;
			addSound(t: unknown, i: unknown): void;
			addSpine(t: unknown, i: unknown): void;
			addText(t: unknown, i: unknown): void;
			addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			checkBitmapDataKey(t: unknown): unknown;
			checkFrameData(t: unknown): unknown;
			checkImageKey(t: unknown): unknown;
			checkJSONKey(t: unknown): unknown;
			checkRenderTextureKey(t: unknown): unknown;
			checkSoundKey(t: unknown): unknown;
			checkSpineKey(t: unknown): unknown;
			checkTextKey(t: unknown): unknown;
			deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			getBitmapData(t: unknown): unknown;
			getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
			getFrameData(t: unknown, i: unknown): unknown;
			getImage(t: unknown): unknown;
			getJSON(t: unknown): unknown;
			getKeys(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getRenderTexture(t: unknown): unknown;
			getSound(t: unknown): unknown;
			getSpine(t: unknown): unknown;
			getText(t: unknown): unknown;
			getTexture(t: unknown, i: unknown): unknown;
			hasMap(t: unknown): unknown;
			isSoundDecoded(t: unknown): unknown;
			removeAllItems(): void;
			removeAllItemsOfType(t: unknown): void;
			removeBitmapData(t: unknown): void;
			removeImage(t: unknown): void;
			removeItem(t: unknown, i: unknown): void;
			removeJSON(t: unknown): void;
			removeRenderTexture(t: unknown): void;
			removeSound(t: unknown): void;
			removeSpine(t: unknown): void;
			removeText(t: unknown): void;
			removeTextureAtlas(t: unknown): void;
			_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		_config: {
			failIfMajorPerformanceCaveat: boolean;
			roundPixels: boolean;
			height: number;
			width: number;
			parent: string;
		};
		_consoleLogger: {
			_shouldColorCodeLogs: boolean;
			_minimumLogLevel: number;
			_minimumStackTraceLogLevel: number;
			getLogStyle(t: unknown): unknown;
			getTextSytle(): unknown;
			log(t: unknown, i: unknown): void;
			setColoredLogsEnabled(t: unknown): void;
			setLogLevel(t: unknown): void;
		};
		_device: {
			android: boolean;
			fullscreenKeyboard: boolean;
			iOS: boolean;
			isFullScreenSupported: boolean;
			isInitialized: boolean;
			pointerLock: boolean;
			touch: boolean;
			webAudio: boolean;
			browser: number;
			deviceReadyAt: number;
			os: number;
			cancelFullscreen: string;
			requestFullscreen: string;
			wheelEvent: string;
			mspointer: undefined;
			checkFullScreen(): void;
			dispatchSignals(): void;
			isAndroidStockBrowser(): unknown;
			needsTouchUnlock(): unknown;
			readyCheck(): void;
			whenReady(t: unknown, i: unknown): void;
			callbacks: never[];
			onInitialized: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_input: {
			enabled: boolean;
			pollLocked: boolean;
			recordPointerHistory: boolean;
			resetLocked: boolean;
			_pollCounter: number;
			_x: number;
			_y: number;
			doubleTapRate: number;
			holdRate: number;
			justPressedRate: number;
			justReleasedRate: number;
			maxPointers: number;
			minPriorityID: number;
			multiInputOverride: number;
			pollRate: number;
			recordLimit: number;
			recordRate: number;
			tapRate: number;
			totalActivePointers: number;
			totalInactivePointers: number;
			worldX: number;
			worldY: number;
			x: number;
			y: number;
			customCandidateHandler: null;
			customCandidateHandlerContext: null;
			addMoveCallback(t: unknown, i: unknown): void;
			addPointer(): unknown;
			addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
			boot(t: unknown): void;
			clearEnterCallback(): void;
			countActivePointers(t: unknown): unknown;
			deleteMoveCallback(t: unknown, i: unknown): void;
			destroy(): void;
			executeTouchLockCallbacks(t: unknown, i: unknown): void;
			getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
			getPointer(t: unknown): unknown;
			getPointerFromId(t: unknown): unknown;
			getPointerFromIdentifier(t: unknown): unknown;
			hitTest(t: unknown, i: unknown): unknown;
			preUpdate(): void;
			removeTouchLockCallback(t: unknown, i: unknown): unknown;
			reset(t: unknown): void;
			resetSpeed(t: unknown, i: unknown): void;
			setEnterCallback(t: unknown): void;
			setInteractiveCandidateHandler(t: unknown, i: unknown): void;
			startPointer(t: unknown): unknown;
			stopPointer(t: unknown, i: unknown): unknown;
			update(): void;
			updateChildren(t: unknown): void;
			updateInteractiveItems(): void;
			updatePointer(t: unknown): unknown;
			hitCanvas: HTMLCanvasElement;
			hitContext: CanvasRenderingContext2D;
			_oldPosition: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			activePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			circle: {
				_diameter: number;
				_radius: number;
				circumference: number;
				diameter: number;
				radius: number;
				x: number;
				y: number;
				circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
				getBounds(): unknown;
				setTo(t: unknown, i: unknown, n: unknown): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			interactiveItems: {
				_cursor: number;
				total: number;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				first: unknown /* too deep */;
				list: unknown /* too deep */;
				next: unknown /* too deep */;
			};
			keyboard: {
				active: boolean;
				enabled: boolean;
				_i: number;
				_k: number;
				lastChar: string;
				_onKeyDown(i: unknown): void;
				_onKeyPress(i: unknown): void;
				_onKeyUp(i: unknown): void;
				addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
				addKey(t: unknown): unknown;
				addKeyCapture(t: unknown): void;
				addKeys(t: unknown): unknown;
				clearCaptures(): void;
				createCursorKeys(): unknown;
				destroy(): void;
				downDuration(t: unknown, i: unknown): unknown;
				isDown(t: unknown): unknown;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				onDownCallback(arg0: unknown): void;
				onPressCallback(arg0: unknown): void;
				onUpCallback(arg0: unknown): void;
				processKeyDown(t: unknown): void;
				processKeyPress(t: unknown): void;
				processKeyUp(t: unknown): void;
				removeCallbacks(): void;
				removeKey(t: unknown): void;
				removeKeyCapture(t: unknown): void;
				reset(t: unknown): void;
				start(): unknown;
				stop(): void;
				update(): void;
				upDuration(t: unknown, i: unknown): unknown;
				event: KeyboardEvent;
				pressEvent: KeyboardEvent;
				_capture: unknown /* too deep */;
				_keys: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				lastKey: unknown /* too deep */;
			};
			mouse: {
				active: boolean;
				capture: boolean;
				enabled: boolean;
				stopOnGameOut: boolean;
				wheelDelta: number;
				_onMouseDown(i: unknown): void;
				_onMouseMove(i: unknown): void;
				_onMouseOut(i: unknown): void;
				_onMouseOutGlobal(i: unknown): void;
				_onMouseOver(i: unknown): void;
				_onMouseUp(i: unknown): void;
				_onMouseUpGlobal(i: unknown): void;
				addMouseWheelCallback(t: unknown): unknown;
				onMouseDown(t: unknown): void;
				onMouseMove(t: unknown): void;
				onMouseOut(t: unknown): void;
				onMouseOutGlobal(t: unknown): void;
				onMouseOver(t: unknown): void;
				onMouseUp(t: unknown): void;
				onMouseUpGlobal(t: unknown): void;
				removeMouseWheelCallback(t: unknown): void;
				start(): unknown;
				stop(): void;
				event: MouseEvent;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			mousePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			mouseWheel: {
				active: boolean;
				preventDefault: boolean;
				delta: number;
				wheelEventName: string;
				boundOnWheelHandler(arg0: unknown): void;
				onWheelHandler(t: unknown): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				callbackContext: unknown /* too deep */;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mspointer: {
				active: boolean;
				pointerDownCallback: null;
				pointerMoveCallback: null;
				pointerUpCallback: null;
				onPointerDown(i: unknown): void;
				onPointerMove(i: unknown): void;
				onPointerOut(i: unknown): void;
				onPointerOver(i: unknown): void;
				onPointerUp(i: unknown): void;
				onPointerUpGlobal(i: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			onDown: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onHold: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onPointerMove: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTap: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchEndEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchStartEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUp: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			pointer1: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointer2: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointerLock: {
				active: boolean;
				locked: boolean;
				pointerlockchange: undefined;
				pointerLockElement: undefined;
				pointerlockerror: undefined;
				boundOnChangeHandler(arg0: unknown): void;
				boundOnErrorHandler(arg0: unknown): void;
				exit(): void;
				onChangeHandler(t: unknown): void;
				onErrorHandler(t: unknown): void;
				request(): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				game: unknown /* too deep */;
				onChange: unknown /* too deep */;
				onError: unknown /* too deep */;
			};
			pointers: unknown /* too deep */[];
			position: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scale: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			speed: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			touch: {
				active: boolean;
				enabled: boolean;
				consumeDocumentTouches(): void;
				onTouchCancel(t: unknown): void;
				onTouchEnd(t: unknown): void;
				onTouchEnter(t: unknown): void;
				onTouchLeave(t: unknown): void;
				onTouchMove(t: unknown): void;
				onTouchStart(t: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
		};
		_load: {
			isLoading: boolean;
			_crossOrigin: string;
			baseURL: string;
			crossOrigin: string;
			addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
			atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
			audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			fileCompleteCallback(t: unknown, i: unknown): void;
			fileStartCallback(t: unknown): void;
			getMaxParallelDownloads(): unknown;
			getNumLoadedFiles(): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown): void;
			json(t: unknown, i: unknown, n: unknown, e: unknown): void;
			processImage(t: unknown, i: unknown, n: unknown): void;
			processJSON(t: unknown, i: unknown, n: unknown): void;
			processScript(t: unknown, i: unknown): void;
			processSound(t: unknown, i: unknown, n: unknown): void;
			processSpine(t: unknown, i: unknown, n: unknown): void;
			processSpritesheet(t: unknown, i: unknown, n: unknown): void;
			processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			reset(t: unknown): void;
			script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			setupFileCallbacks(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
			spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			start(): void;
			totalQueuedFiles(): unknown;
			_loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			_onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onReset: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_onPause: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		_onResume: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		_rnd: {
			c: number;
			s0: number;
			s1: number;
			s2: number;
			angle(): unknown;
			frac(): unknown;
			hash(t: unknown): unknown;
			integer(): unknown;
			integerInRange(t: unknown, i: unknown): unknown;
			normal(): unknown;
			pick(t: unknown): unknown;
			real(): unknown;
			realInRange(t: unknown, i: unknown): unknown;
			rnd(): unknown;
			shuffle(t: unknown): unknown;
			sign(): unknown;
			sow(t: unknown): void;
			state(t: unknown): unknown;
			uuid(): unknown;
			weightedPick(t: unknown): unknown;
		};
		_scale: {
			_booted: boolean;
			_pageAlignHorizontally: boolean;
			_pageAlignVertically: boolean;
			forceLandscape: boolean;
			forcePortrait: boolean;
			incorrectOrientation: boolean;
			isFullScreen: boolean;
			isLandscape: boolean;
			isPortrait: boolean;
			pageAlignHorizontally: boolean;
			pageAlignVertically: boolean;
			parentIsWindow: boolean;
			_fullScreenScaleMode: number;
			_lastUpdate: number;
			_scaleMode: number;
			_updateThrottle: number;
			_updateThrottleReset: number;
			aspectRatio: number;
			currentScaleMode: number;
			fullScreenScaleMode: number;
			height: number;
			scaleMode: number;
			sourceAspectRatio: number;
			trackParentInterval: number;
			width: number;
			screenOrientation: string;
			_pendingScaleMode: null;
			onResizeContext: null;
			_fullScreenChange(i: unknown): void;
			_fullScreenError(i: unknown): void;
			_gameResumed(): void;
			_orientationChange(i: unknown): void;
			_windowResize(i: unknown): void;
			align(t: unknown, i: unknown): void;
			alignCanvas(t: unknown, i: unknown): void;
			boot(): void;
			cleanupCreatedTarget(): void;
			createFullScreenTarget(): unknown;
			destroy(): void;
			forceOrientation(t: unknown, i: unknown): void;
			fullScreenChange(t: unknown): void;
			fullScreenError(t: unknown): void;
			getParentBounds(t: unknown, i: unknown): unknown;
			orientationChange(t: unknown): void;
			parseConfig(t: unknown): void;
			pauseUpdate(): void;
			prepScreenMode(i: unknown): void;
			preUpdate(): void;
			queueUpdate(t: unknown): void;
			recalculateCanvasOffset(): void;
			reflowCanvas(): void;
			reflowGame(): void;
			refresh(): void;
			resetCanvas(t: unknown, i: unknown): void;
			setExactFit(): void;
			setGameSize(i: unknown, n: unknown): void;
			setMaximum(): void;
			setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setResizeCallback(t: unknown, i: unknown): void;
			setShowAll(t: unknown): void;
			setupScale(t: unknown, i: unknown): void;
			signalSizeChange(): void;
			startFullScreen(t: unknown, i: unknown): unknown;
			stopFullScreen(): unknown;
			updateDimensions(i: unknown, n: unknown, e: unknown): void;
			updateLayout(): void;
			updateOrientationState(): unknown;
			updateScalingAndBounds(): void;
			windowResize(t: unknown): void;
			boundingParent: HTMLDivElement;
			parentNode: HTMLCanvasElement;
			_gameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedCanvasSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedGameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_parentBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_tempBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			bounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			canvasOffset: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			dom: {
				scrollX: number;
				scrollY: number;
				getOffset(t: unknown, i: unknown): unknown;
				getScreenOrientation(): unknown;
				onDeviceReady(t: unknown): void;
				layoutBounds: unknown /* too deep */;
				visualBounds: unknown /* too deep */;
			};
			enterIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			leaveIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			margin: {
				bottom: number;
				left: number;
				right: number;
				top: number;
				x: number;
				y: number;
			};
			onFullScreenChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenError: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenInit: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onOrientationChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSizeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parentScaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactorInverted: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			windowConstraints: {
				bottom: string;
				right: string;
			};
		};
		_sound: {
			_codeMuted: boolean;
			_muted: boolean;
			_watching: boolean;
			connectToMaster: boolean;
			mute: boolean;
			muteOnPause: boolean;
			noAudio: boolean;
			touchLocked: boolean;
			baseLatency: number;
			channels: number;
			volume: number;
			_unlockSource: null;
			_watchCallback: null;
			_watchContext: null;
			_onResumeWebAudioOnClick(): void;
			_resumeWebAudioOnClick(): void;
			add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boot(): void;
			destroy(): void;
			pauseAll(): void;
			play(t: unknown, i: unknown, n: unknown): unknown;
			remove(t: unknown): unknown;
			removeAll(): void;
			removeByKey(t: unknown): unknown;
			resumeAll(): void;
			resumeWebAudio(): unknown;
			setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
			setMute(): void;
			setTouchLock(): void;
			setTouchUnlock(): void;
			stopAll(): void;
			unlock(): unknown;
			unsetMute(): void;
			update(): void;
			context: AudioContext;
			emptyBuffer: AudioBuffer;
			_sounds: never[];
			_watchList: {
				_cursor: number;
				total: number;
				first: null;
				next: null;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				list: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSoundDecode: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchUnlock: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUnMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onVolumeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			sounds: never[];
		};
		_stage: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
		_state: {
			_clearWorld: boolean;
			current: string;
			_pendingState: null;
			add(t: unknown, i: unknown, n: unknown): unknown;
			boot(): void;
			clearCurrentState(): void;
			destroy(): void;
			get(t: unknown): unknown;
			getCurrentState(): unknown;
			loadComplete(): void;
			pause(): void;
			preUpdate(): unknown;
			remove(t: unknown): void;
			resume(): void;
			setCurrentState(t: unknown): void;
			start(t: unknown, i: unknown): void;
			update(): void;
			_states: Map<string, unknown /* too deep */>;
			states: Map<string, unknown /* too deep */>;
			_current: {
				_loadCompleteSent: boolean;
				complete: boolean;
				fadeInSet: boolean;
				hasBroadcastedInfo: boolean;
				hideHex: boolean;
				isMapScreen: boolean;
				showMenu: boolean;
				walkEnabled: boolean;
				frameUntilAddNextPlayer: number;
				startX: number;
				startY: number;
				tileSize: number;
				_key: string;
				key: string;
				saveTag: string;
				screenName: string;
				zoneName: string;
				_friendListLoadTimeoutID: null;
				screenData: null;
				previousMapData: undefined;
				previousZone: undefined;
				addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addBlock(t: unknown, i: unknown, n: unknown): unknown;
				addBounty(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown): unknown;
				addChest(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addClickableArea(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				addClickableEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
				addClickableMoveEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
				addCollect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
				addConstructedQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addDoor(t: unknown, i: unknown): void;
				addEvent(t: unknown, i: unknown): void;
				addEventWithCallback(t: unknown, i: unknown): void;
				addFireflyEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				addFollow(t: unknown, i: unknown): unknown;
				addGnome(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMimic(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMonster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
				addNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addPathingIcon(t: unknown, i: unknown): void;
				addPippet(t: unknown, i: unknown, n: unknown): unknown;
				addPlayer(t: unknown): void;
				addQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addWizard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				arePopupsEnabled(): unknown;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				canAddUsersToScreen(): unknown;
				chatPlayer(t: unknown): void;
				create(): void;
				createBackground(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				endFX(): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getInjectedValue(t: unknown): unknown;
				hideChat(t: unknown): void;
				hideOtherPlayer(t: unknown): unknown;
				init(): void;
				initListeners(): void;
				initMap(t: unknown, i: unknown, n: unknown, e: unknown): void;
				initScene(t: unknown, i: unknown): void;
				listener(t: unknown, i: unknown): unknown;
				movePlayer(t: unknown): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClick(t: unknown): void;
				onDebugAutoClickElement(i: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onDoorClick(t: unknown, i: unknown): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				onMessage(t: unknown): void;
				onPlayerFullInfo(t: unknown): void;
				onPlayerJoined(t: unknown): void;
				onPlayerLeft(t: unknown): void;
				onPlayerList(t: unknown): unknown;
				openFeed(t: unknown): void;
				paused(): void;
				playerEffect(t: unknown): void;
				preload(): void;
				preprocess(): unknown;
				process(t: unknown): void;
				processAddCollect(t: unknown): void;
				processPopups(t: unknown): unknown;
				removeFollow(t: unknown): void;
				removePlayer(t: unknown): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setFakePlayer(t: unknown): void;
				showCollisions(t: unknown): void;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(i: unknown, n: unknown): unknown;
				startFX(): void;
				stopListeners(): void;
				transformPlayer(t: unknown): void;
				triggerElementClick(t: unknown): void;
				update(): void;
				updatePlayer(t: unknown): void;
				pendingCoordinates: Map<never, never>;
				_background: unknown /* too deep */;
				_bgSprite: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				_world: unknown /* too deep */;
				above: unknown /* too deep */;
				aboveGameObject: unknown /* too deep */;
				add: unknown /* too deep */;
				area: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				below: unknown /* too deep */;
				belowGameObject: unknown /* too deep */;
				clickAreas: unknown /* too deep */;
				content: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				data: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				events: unknown /* too deep */;
				floor: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menuBar: unknown /* too deep */;
				menus: unknown /* too deep */;
				metricsManager: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				path: unknown /* too deep */;
				pendingPlayers: unknown /* too deep */;
				playerList: unknown /* too deep */;
				playersInfo: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				questProgress: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
				user: unknown /* too deep */;
				zone: unknown /* too deep */;
			};
			_initArgs: never[];
			_onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_time: {
			_deltaMS: number;
			_pauseStarted: number;
			_prevTimeMS: number;
			_started: number;
			_timeMS: number;
			deltaMS: number;
			desiredFps: number;
			pauseDuration: number;
			prevTimeMS: number;
			timeMS: number;
			timeToCall: number;
			add(t: unknown): unknown;
			boot(): void;
			create(t: unknown): unknown;
			elapsedSecondsSince(t: unknown): unknown;
			elapsedSince(t: unknown): unknown;
			gamePaused(): void;
			gameResumed(): void;
			removeAll(): void;
			reset(): void;
			setTime(t: unknown): void;
			totalElapsedSeconds(): unknown;
			update(t: unknown): void;
			updateTimers(): void;
			_timers: never[];
			events: {
				autoDestroy: boolean;
				expired: boolean;
				paused: boolean;
				running: boolean;
				_i: number;
				_len: number;
				_marked: number;
				_newTick: number;
				_now: number;
				_pauseStarted: number;
				_pauseTotal: number;
				_started: number;
				duration: number;
				elapsed: number;
				length: number;
				ms: number;
				next: number;
				nextTick: number;
				seconds: number;
				timeCap: number;
				addTimer(t: unknown, i: unknown, n: unknown): unknown;
				adjustEvents(t: unknown): void;
				clearPendingEvents(): void;
				createTimer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				destroy(): void;
				loop(t: unknown, i: unknown, n: unknown): unknown;
				order(): void;
				pause(): void;
				remove(t: unknown): unknown;
				removeAll(): void;
				repeat(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				resume(): void;
				sortHandler(t: unknown, i: unknown): unknown;
				start(t: unknown): void;
				stop(t: unknown): void;
				update(t: unknown): unknown;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				onComplete: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		_tweens: {
			add(t: unknown, i: unknown, n: unknown): unknown;
			create(t: unknown, i: unknown, n: unknown): unknown;
			destroy(): void;
			findOwnerForTween(t: unknown): unknown;
			getAll(): unknown;
			pauseAll(): void;
			remove(t: unknown): void;
			removeAll(): void;
			removeAllFromOwner(t: unknown): void;
			removeFrom(t: unknown, i: unknown): void;
			removeTweenFromOwner(t: unknown): unknown;
			resumeAll(): void;
			update(): unknown;
			_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
			_tweens: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		add: {
			audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			existing(t: unknown): unknown;
			graphics(t: unknown, i: unknown, n: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
			sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
			tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			tween(t: unknown, i: unknown, n: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		app: {
			_resizeId: null;
			_resizeTo: null;
			cancelResize(): void;
			destroy(e: unknown, r: unknown): void;
			queueResize(): unknown;
			render(): void;
			resize(): void;
			start(): void;
			stop(): void;
			view: HTMLCanvasElement;
			_ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		broadcaster: {
			broadcastIdCount: number;
			addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			broadcast(t: unknown, i: unknown, n: unknown): unknown;
			clear(): void;
			hashContext(t: unknown): unknown;
			removeAppListener(t: unknown, i: unknown, n: unknown): void;
			callbacks: {
				bId0: unknown /* too deep */;
				bId10: unknown /* too deep */;
				bId11: unknown /* too deep */;
				bId12: unknown /* too deep */;
				bId13: unknown /* too deep */;
				bId15: unknown /* too deep */;
				bId16: unknown /* too deep */;
				bId19: unknown /* too deep */;
				bId2: unknown /* too deep */;
				bId20: unknown /* too deep */;
				Card: unknown /* too deep */;
				FriendsList: unknown /* too deep */;
				FriendsListOfActualFriends: unknown /* too deep */;
				HUD: unknown /* too deep */;
				mount: unknown /* too deep */;
				NetworkHandlers: unknown /* too deep */;
				ProdigyMailer: unknown /* too deep */;
				ProdigyMailerButton: unknown /* too deep */;
				ProdigyMailView: unknown /* too deep */;
				Titan: unknown /* too deep */;
				UI: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			listeners: {
				bId0: unknown /* too deep */;
				bId10: unknown /* too deep */;
				bId11: unknown /* too deep */;
				bId12: unknown /* too deep */;
				bId13: unknown /* too deep */;
				bId15: unknown /* too deep */;
				bId16: unknown /* too deep */;
				bId19: unknown /* too deep */;
				bId2: unknown /* too deep */;
				bId20: unknown /* too deep */;
				Card: unknown /* too deep */;
				FriendsList: unknown /* too deep */;
				FriendsListOfActualFriends: unknown /* too deep */;
				HUD: unknown /* too deep */;
				mount: unknown /* too deep */;
				NetworkHandlers: unknown /* too deep */;
				ProdigyMailer: unknown /* too deep */;
				ProdigyMailerButton: unknown /* too deep */;
				ProdigyMailView: unknown /* too deep */;
				Titan: unknown /* too deep */;
				UI: unknown /* too deep */;
			};
		};
		cache: {
			addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
			addImage(t: unknown, i: unknown, n: unknown): void;
			addItem(t: unknown, i: unknown, n: unknown): void;
			addJSON(t: unknown, i: unknown): void;
			addRenderTexture(t: unknown, i: unknown): void;
			addSound(t: unknown, i: unknown): void;
			addSpine(t: unknown, i: unknown): void;
			addText(t: unknown, i: unknown): void;
			addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			checkBitmapDataKey(t: unknown): unknown;
			checkFrameData(t: unknown): unknown;
			checkImageKey(t: unknown): unknown;
			checkJSONKey(t: unknown): unknown;
			checkRenderTextureKey(t: unknown): unknown;
			checkSoundKey(t: unknown): unknown;
			checkSpineKey(t: unknown): unknown;
			checkTextKey(t: unknown): unknown;
			deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			getBitmapData(t: unknown): unknown;
			getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
			getFrameData(t: unknown, i: unknown): unknown;
			getImage(t: unknown): unknown;
			getJSON(t: unknown): unknown;
			getKeys(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getRenderTexture(t: unknown): unknown;
			getSound(t: unknown): unknown;
			getSpine(t: unknown): unknown;
			getText(t: unknown): unknown;
			getTexture(t: unknown, i: unknown): unknown;
			hasMap(t: unknown): unknown;
			isSoundDecoded(t: unknown): unknown;
			removeAllItems(): void;
			removeAllItemsOfType(t: unknown): void;
			removeBitmapData(t: unknown): void;
			removeImage(t: unknown): void;
			removeItem(t: unknown, i: unknown): void;
			removeJSON(t: unknown): void;
			removeRenderTexture(t: unknown): void;
			removeSound(t: unknown): void;
			removeSpine(t: unknown): void;
			removeText(t: unknown): void;
			removeTextureAtlas(t: unknown): void;
			_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		config: {
			failIfMajorPerformanceCaveat: boolean;
			roundPixels: boolean;
			height: number;
			width: number;
			parent: string;
		};
		device: {
			android: boolean;
			fullscreenKeyboard: boolean;
			iOS: boolean;
			isFullScreenSupported: boolean;
			isInitialized: boolean;
			pointerLock: boolean;
			touch: boolean;
			webAudio: boolean;
			browser: number;
			deviceReadyAt: number;
			os: number;
			cancelFullscreen: string;
			requestFullscreen: string;
			wheelEvent: string;
			mspointer: undefined;
			checkFullScreen(): void;
			dispatchSignals(): void;
			isAndroidStockBrowser(): unknown;
			needsTouchUnlock(): unknown;
			readyCheck(): void;
			whenReady(t: unknown, i: unknown): void;
			callbacks: never[];
			onInitialized: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		fps: {
			_isPendingResumeRecordFPS: boolean;
			_record: boolean;
			record: boolean;
			_framerate: number;
			_frames: number;
			_prevTime: number;
			_rollingCount: number;
			_rollingSum: number;
			endFrame(): void;
			getAverageFramerate(): unknown;
			getFramerate(): unknown;
			timeNow(): unknown;
		};
		frameWorkManager: {
			_frameWorkDone: boolean;
			_frameStartTime: number;
			frameBudget: number;
			frameBudgetRemaining: number;
			frameTimeElapsed: number;
			_now(): void;
			awaitFreeTime(t: unknown, i: unknown): void;
			cancelWork(): unknown;
			flushWorkQueue(): void;
			markFrameEnd(): void;
			markFrameStart(): void;
			_workPromises: never[];
		};
		input: {
			enabled: boolean;
			pollLocked: boolean;
			recordPointerHistory: boolean;
			resetLocked: boolean;
			_pollCounter: number;
			_x: number;
			_y: number;
			doubleTapRate: number;
			holdRate: number;
			justPressedRate: number;
			justReleasedRate: number;
			maxPointers: number;
			minPriorityID: number;
			multiInputOverride: number;
			pollRate: number;
			recordLimit: number;
			recordRate: number;
			tapRate: number;
			totalActivePointers: number;
			totalInactivePointers: number;
			worldX: number;
			worldY: number;
			x: number;
			y: number;
			customCandidateHandler: null;
			customCandidateHandlerContext: null;
			addMoveCallback(t: unknown, i: unknown): void;
			addPointer(): unknown;
			addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
			boot(t: unknown): void;
			clearEnterCallback(): void;
			countActivePointers(t: unknown): unknown;
			deleteMoveCallback(t: unknown, i: unknown): void;
			destroy(): void;
			executeTouchLockCallbacks(t: unknown, i: unknown): void;
			getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
			getPointer(t: unknown): unknown;
			getPointerFromId(t: unknown): unknown;
			getPointerFromIdentifier(t: unknown): unknown;
			hitTest(t: unknown, i: unknown): unknown;
			preUpdate(): void;
			removeTouchLockCallback(t: unknown, i: unknown): unknown;
			reset(t: unknown): void;
			resetSpeed(t: unknown, i: unknown): void;
			setEnterCallback(t: unknown): void;
			setInteractiveCandidateHandler(t: unknown, i: unknown): void;
			startPointer(t: unknown): unknown;
			stopPointer(t: unknown, i: unknown): unknown;
			update(): void;
			updateChildren(t: unknown): void;
			updateInteractiveItems(): void;
			updatePointer(t: unknown): unknown;
			hitCanvas: HTMLCanvasElement;
			hitContext: CanvasRenderingContext2D;
			_oldPosition: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			activePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			circle: {
				_diameter: number;
				_radius: number;
				circumference: number;
				diameter: number;
				radius: number;
				x: number;
				y: number;
				circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
				getBounds(): unknown;
				setTo(t: unknown, i: unknown, n: unknown): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			interactiveItems: {
				_cursor: number;
				total: number;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				first: unknown /* too deep */;
				list: unknown /* too deep */;
				next: unknown /* too deep */;
			};
			keyboard: {
				active: boolean;
				enabled: boolean;
				_i: number;
				_k: number;
				lastChar: string;
				_onKeyDown(i: unknown): void;
				_onKeyPress(i: unknown): void;
				_onKeyUp(i: unknown): void;
				addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
				addKey(t: unknown): unknown;
				addKeyCapture(t: unknown): void;
				addKeys(t: unknown): unknown;
				clearCaptures(): void;
				createCursorKeys(): unknown;
				destroy(): void;
				downDuration(t: unknown, i: unknown): unknown;
				isDown(t: unknown): unknown;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				onDownCallback(arg0: unknown): void;
				onPressCallback(arg0: unknown): void;
				onUpCallback(arg0: unknown): void;
				processKeyDown(t: unknown): void;
				processKeyPress(t: unknown): void;
				processKeyUp(t: unknown): void;
				removeCallbacks(): void;
				removeKey(t: unknown): void;
				removeKeyCapture(t: unknown): void;
				reset(t: unknown): void;
				start(): unknown;
				stop(): void;
				update(): void;
				upDuration(t: unknown, i: unknown): unknown;
				event: KeyboardEvent;
				pressEvent: KeyboardEvent;
				_capture: unknown /* too deep */;
				_keys: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				lastKey: unknown /* too deep */;
			};
			mouse: {
				active: boolean;
				capture: boolean;
				enabled: boolean;
				stopOnGameOut: boolean;
				wheelDelta: number;
				_onMouseDown(i: unknown): void;
				_onMouseMove(i: unknown): void;
				_onMouseOut(i: unknown): void;
				_onMouseOutGlobal(i: unknown): void;
				_onMouseOver(i: unknown): void;
				_onMouseUp(i: unknown): void;
				_onMouseUpGlobal(i: unknown): void;
				addMouseWheelCallback(t: unknown): unknown;
				onMouseDown(t: unknown): void;
				onMouseMove(t: unknown): void;
				onMouseOut(t: unknown): void;
				onMouseOutGlobal(t: unknown): void;
				onMouseOver(t: unknown): void;
				onMouseUp(t: unknown): void;
				onMouseUpGlobal(t: unknown): void;
				removeMouseWheelCallback(t: unknown): void;
				start(): unknown;
				stop(): void;
				event: MouseEvent;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			mousePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			mouseWheel: {
				active: boolean;
				preventDefault: boolean;
				delta: number;
				wheelEventName: string;
				boundOnWheelHandler(arg0: unknown): void;
				onWheelHandler(t: unknown): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				callbackContext: unknown /* too deep */;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mspointer: {
				active: boolean;
				pointerDownCallback: null;
				pointerMoveCallback: null;
				pointerUpCallback: null;
				onPointerDown(i: unknown): void;
				onPointerMove(i: unknown): void;
				onPointerOut(i: unknown): void;
				onPointerOver(i: unknown): void;
				onPointerUp(i: unknown): void;
				onPointerUpGlobal(i: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			onDown: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onHold: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onPointerMove: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTap: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchEndEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchStartEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUp: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			pointer1: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointer2: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointerLock: {
				active: boolean;
				locked: boolean;
				pointerlockchange: undefined;
				pointerLockElement: undefined;
				pointerlockerror: undefined;
				boundOnChangeHandler(arg0: unknown): void;
				boundOnErrorHandler(arg0: unknown): void;
				exit(): void;
				onChangeHandler(t: unknown): void;
				onErrorHandler(t: unknown): void;
				request(): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				game: unknown /* too deep */;
				onChange: unknown /* too deep */;
				onError: unknown /* too deep */;
			};
			pointers: unknown /* too deep */[];
			position: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scale: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			speed: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			touch: {
				active: boolean;
				enabled: boolean;
				consumeDocumentTouches(): void;
				onTouchCancel(t: unknown): void;
				onTouchEnd(t: unknown): void;
				onTouchEnter(t: unknown): void;
				onTouchLeave(t: unknown): void;
				onTouchMove(t: unknown): void;
				onTouchStart(t: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
		};
		inputDispatcher: {
			dispatchKeyboardEvent(t: unknown, i: unknown): void;
			dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void;
			dispatchMouseEvent(t: unknown, i: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		load: {
			isLoading: boolean;
			_crossOrigin: string;
			baseURL: string;
			crossOrigin: string;
			addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
			atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
			audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			fileCompleteCallback(t: unknown, i: unknown): void;
			fileStartCallback(t: unknown): void;
			getMaxParallelDownloads(): unknown;
			getNumLoadedFiles(): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown): void;
			json(t: unknown, i: unknown, n: unknown, e: unknown): void;
			processImage(t: unknown, i: unknown, n: unknown): void;
			processJSON(t: unknown, i: unknown, n: unknown): void;
			processScript(t: unknown, i: unknown): void;
			processSound(t: unknown, i: unknown, n: unknown): void;
			processSpine(t: unknown, i: unknown, n: unknown): void;
			processSpritesheet(t: unknown, i: unknown, n: unknown): void;
			processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			reset(t: unknown): void;
			script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			setupFileCallbacks(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
			spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			start(): void;
			totalQueuedFiles(): unknown;
			_loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			_onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onReset: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		onPause: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		onResume: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		renderer: {
			autoDensity: boolean;
			autoResize: boolean;
			clearBeforeRender: boolean;
			preserveDrawingBuffer: boolean;
			renderingToScreen: boolean;
			transparent: boolean;
			_backgroundColor: number;
			_eventsCount: number;
			backgroundColor: number;
			CONTEXT_UID: number;
			height: number;
			resolution: number;
			type: number;
			width: number;
			_backgroundColorString: string;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			addSystem(t: unknown, e: unknown): unknown;
			clear(): void;
			destroy(t: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			initPlugins(t: unknown): void;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
			reset(): unknown;
			resize(t: unknown, r: unknown): void;
			gl: WebGL2RenderingContext;
			view: HTMLCanvasElement;
			_backgroundColorRgba: number[];
			_events: {
				prerender: unknown /* too deep */;
			};
			_lastObjectRendered: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			batch: {
				boundArray(t: unknown, e: unknown, r: unknown, i: unknown): void;
				copyBoundTextures(t: unknown, e: unknown): void;
				destroy(): void;
				flush(): void;
				reset(): void;
				setObjectRenderer(t: unknown): void;
				currentRenderer: unknown /* too deep */;
				emptyRenderer: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			context: {
				isLost: boolean;
				webGLVersion: number;
				contextChange(t: unknown): void;
				createContext(e: unknown, r: unknown): unknown;
				destroy(): void;
				getExtensions(): void;
				handleContextLost(arg0: unknown): void;
				handleContextRestored(): void;
				initFromContext(t: unknown): void;
				initFromOptions(t: unknown): void;
				postrender(): void;
				validateContext(t: unknown): void;
				gl: WebGL2RenderingContext;
				extensions: unknown /* too deep */;
				renderer: unknown /* too deep */;
				supports: unknown /* too deep */;
			};
			extract: {
				base64(t: unknown, e: unknown, r: unknown): unknown;
				canvas(e: unknown): unknown;
				destroy(): void;
				image(t: unknown, e: unknown, r: unknown): unknown;
				pixels(e: unknown): unknown;
				renderer: unknown /* too deep */;
			};
			filter: {
				forceClear: boolean;
				useMaxPadding: boolean;
				applyFilter(e: unknown, r: unknown, i: unknown, n: unknown): void;
				bindAndClear(e: unknown, r: unknown): void;
				calculateNormalizedScreenSpaceMatrix(t: unknown): unknown;
				calculateScreenSpaceMatrix(t: unknown): unknown;
				calculateSpriteMatrix(t: unknown, e: unknown): unknown;
				destroy(): void;
				emptyPool(): void;
				getFilterTexture(t: unknown, e: unknown): unknown;
				getOptimalFilterTexture(t: unknown, e: unknown, r: unknown): unknown;
				getRenderTarget(t: unknown, e: unknown): unknown;
				pop(): unknown;
				push(t: unknown, e: unknown): void;
				resize(): void;
				returnFilterTexture(t: unknown): unknown;
				returnRenderTarget(t: unknown): unknown;
				activeState: unknown /* too deep */;
				defaultFilterStack: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				quad: unknown /* too deep */;
				quadUv: unknown /* too deep */;
				renderer: unknown /* too deep */;
				statePool: unknown /* too deep */;
				tempRect: unknown /* too deep */;
				texturePool: unknown /* too deep */;
			};
			framebuffer: {
				hasMRT: boolean;
				writeDepthTexture: boolean;
				CONTEXT_UID: number;
				current: null;
				bind(t: unknown, e: unknown): void;
				blit(t: unknown, e: unknown, r: unknown): unknown;
				clear(e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				contextChange(): unknown;
				destroy(): void;
				detectSamples(e: unknown): unknown;
				disposeAll(t: unknown): void;
				disposeFramebuffer(t: unknown, e: unknown): void;
				forceStencil(): void;
				initFramebuffer(t: unknown): unknown;
				reset(): void;
				resizeFramebuffer(t: unknown): void;
				setViewport(t: unknown, e: unknown, r: unknown, i: unknown): void;
				updateFramebuffer(t: unknown): void;
				gl: WebGL2RenderingContext;
				msaaSamples: Int32Array;
				managedFramebuffers: unknown /* too deep */;
				renderer: unknown /* too deep */;
				size: unknown /* too deep */;
				unknownFramebuffer: unknown /* too deep */;
				viewport: unknown /* too deep */;
			};
			geometry: {
				canUseUInt32ElementIndex: boolean;
				hasInstance: boolean;
				hasVao: boolean;
				CONTEXT_UID: number;
				activateVao(t: unknown, e: unknown): void;
				bind(t: unknown, e: unknown): void;
				checkCompatibility(t: unknown, e: unknown): void;
				contextChange(): unknown;
				destroy(): void;
				disposeAll(t: unknown): void;
				disposeBuffer(t: unknown, e: unknown): void;
				disposeGeometry(t: unknown, e: unknown): void;
				draw(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				getSignature(t: unknown, e: unknown): unknown;
				initGeometryVao(t: unknown, e: unknown): unknown;
				reset(): void;
				unbind(): void;
				updateBuffers(): void;
				_activeVao: WebGLVertexArrayObject;
				gl: WebGL2RenderingContext;
				_activeGeometry: unknown /* too deep */;
				_boundBuffer: unknown /* too deep */;
				managedBuffers: unknown /* too deep */;
				managedGeometries: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			globalUniforms: {
				group: boolean;
				static: boolean;
				dirtyId: number;
				id: number;
				add(e: unknown, r: unknown, i: unknown): void;
				update(): void;
				syncUniforms: unknown /* too deep */;
				uniforms: unknown /* too deep */;
			};
			mask: {
				enableScissor: boolean;
				alphaMaskIndex: number;
				destroy(): void;
				detect(e: unknown): void;
				pop(e: unknown): void;
				popSpriteMask(): void;
				push(e: unknown, r: unknown): void;
				pushSpriteMask(t: unknown): void;
				setMaskStack(t: unknown): void;
				alphaMaskPool: unknown /* too deep */;
				maskDataPool: unknown /* too deep */;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			options: {
				antialias: boolean;
				autoDensity: boolean;
				autoStart: boolean;
				clearBeforeRender: boolean;
				forceCanvas: boolean;
				legacy: boolean;
				preserveDrawingBuffer: boolean;
				sharedTicker: boolean;
				transparent: boolean;
				height: number;
				resolution: number;
				width: number;
				backgroundColor: undefined;
				powerPreference: undefined;
				resizeTo: undefined;
				sharedLoader: undefined;
				view: HTMLCanvasElement;
			};
			plugins: {
				accessibility: unknown /* too deep */;
				batch: unknown /* too deep */;
				extract: unknown /* too deep */;
				interaction: unknown /* too deep */;
				particle: unknown /* too deep */;
				prepare: unknown /* too deep */;
				tilingSprite: unknown /* too deep */;
			};
			projection: {
				defaultFrame: null;
				transform: null;
				calculateProjection(t: unknown, e: unknown, r: unknown, i: unknown): void;
				destroy(): void;
				setTransform(t: unknown): void;
				update(t: unknown, e: unknown, r: unknown, i: unknown): void;
				destinationFrame: unknown /* too deep */;
				projectionMatrix: unknown /* too deep */;
				renderer: unknown /* too deep */;
				sourceFrame: unknown /* too deep */;
			};
			renderTexture: {
				current: null;
				bind(t: unknown, e: unknown, r: unknown): void;
				clear(t: unknown, e: unknown): void;
				destroy(): void;
				reset(): void;
				resize(): void;
				clearColor: unknown /* too deep */;
				defaultMaskStack: unknown /* too deep */;
				destinationFrame: unknown /* too deep */;
				renderer: unknown /* too deep */;
				sourceFrame: unknown /* too deep */;
			};
			runners: {
				contextChange: unknown /* too deep */;
				destroy: unknown /* too deep */;
				postrender: unknown /* too deep */;
				prerender: unknown /* too deep */;
				reset: unknown /* too deep */;
				resize: unknown /* too deep */;
				update: unknown /* too deep */;
			};
			scissor: {
				glConst: number;
				_useCurrent(): void;
				destroy(): void;
				getStackLength(): unknown;
				pop(): void;
				push(t: unknown): void;
				setMaskStack(t: unknown): void;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			shader: {
				destroyed: boolean;
				id: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(t: unknown): void;
				createSyncGroups(t: unknown): unknown;
				destroy(): void;
				generateShader(t: unknown): unknown;
				getglProgram(): unknown;
				getSignature(t: unknown, e: unknown): unknown;
				reset(): void;
				setUniforms(t: unknown): void;
				syncUniformGroup(t: unknown, e: unknown): void;
				syncUniforms(t: unknown, e: unknown, r: unknown): void;
				systemCheck(): unknown;
				gl: WebGL2RenderingContext;
				cache: unknown /* too deep */;
				program: unknown /* too deep */;
				renderer: unknown /* too deep */;
				shader: unknown /* too deep */;
			};
			state: {
				_blendEq: boolean;
				blendMode: number;
				polygonOffset: number;
				stateId: number;
				contextChange(e: unknown): unknown;
				destroy(): void;
				forceState(t: unknown): void;
				reset(): void;
				set(t: unknown): void;
				setBlend(t: unknown): void;
				setBlendMode(t: unknown): void;
				setCullFace(t: unknown): void;
				setDepthTest(t: unknown): void;
				setFrontFace(t: unknown): void;
				setOffset(t: unknown): void;
				setPolygonOffset(t: unknown, e: unknown): void;
				setState(t: unknown): unknown;
				updateCheck(t: unknown, e: unknown): void;
				gl: WebGL2RenderingContext;
				blendModes: unknown /* too deep */;
				checks: unknown /* too deep */;
				defaultState: unknown /* too deep */;
				map: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			stencil: {
				glConst: number;
				_getBitwiseMask(): unknown;
				_useCurrent(): void;
				destroy(): void;
				getStackLength(): unknown;
				pop(t: unknown): void;
				push(t: unknown): void;
				setMaskStack(t: unknown): void;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			texture: {
				_unknownBoundTextures: boolean;
				CONTEXT_UID: number;
				currentLocation: number;
				webGLVersion: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(): void;
				destroy(): void;
				destroyTexture(t: unknown, e: unknown): void;
				initTexture(t: unknown): unknown;
				initTextureType(e: unknown, r: unknown): void;
				reset(): void;
				setStyle(e: unknown, r: unknown): void;
				unbind(t: unknown): void;
				updateTexture(t: unknown): void;
				updateTextureStyle(e: unknown): void;
				gl: WebGL2RenderingContext;
				boundTextures: unknown /* too deep */;
				emptyTextures: unknown /* too deep */;
				managedTextures: unknown /* too deep */;
				renderer: unknown /* too deep */;
				unknownTexture: unknown /* too deep */;
			};
			textureGC: {
				checkCount: number;
				checkCountMax: number;
				count: number;
				maxIdle: number;
				mode: number;
				destroy(): void;
				postrender(): void;
				run(): void;
				unload(t: unknown): void;
				renderer: unknown /* too deep */;
			};
			textureManager: {
				_unknownBoundTextures: boolean;
				CONTEXT_UID: number;
				currentLocation: number;
				webGLVersion: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(): void;
				destroy(): void;
				destroyTexture(t: unknown, e: unknown): void;
				initTexture(t: unknown): unknown;
				initTextureType(e: unknown, r: unknown): void;
				reset(): void;
				setStyle(e: unknown, r: unknown): void;
				unbind(t: unknown): void;
				updateTexture(t: unknown): void;
				updateTextureStyle(e: unknown): void;
				gl: WebGL2RenderingContext;
				boundTextures: unknown /* too deep */;
				emptyTextures: unknown /* too deep */;
				managedTextures: unknown /* too deep */;
				renderer: unknown /* too deep */;
				unknownTexture: unknown /* too deep */;
			};
		};
		rnd: {
			c: number;
			s0: number;
			s1: number;
			s2: number;
			angle(): unknown;
			frac(): unknown;
			hash(t: unknown): unknown;
			integer(): unknown;
			integerInRange(t: unknown, i: unknown): unknown;
			normal(): unknown;
			pick(t: unknown): unknown;
			real(): unknown;
			realInRange(t: unknown, i: unknown): unknown;
			rnd(): unknown;
			shuffle(t: unknown): unknown;
			sign(): unknown;
			sow(t: unknown): void;
			state(t: unknown): unknown;
			uuid(): unknown;
			weightedPick(t: unknown): unknown;
		};
		scale: {
			_booted: boolean;
			_pageAlignHorizontally: boolean;
			_pageAlignVertically: boolean;
			forceLandscape: boolean;
			forcePortrait: boolean;
			incorrectOrientation: boolean;
			isFullScreen: boolean;
			isLandscape: boolean;
			isPortrait: boolean;
			pageAlignHorizontally: boolean;
			pageAlignVertically: boolean;
			parentIsWindow: boolean;
			_fullScreenScaleMode: number;
			_lastUpdate: number;
			_scaleMode: number;
			_updateThrottle: number;
			_updateThrottleReset: number;
			aspectRatio: number;
			currentScaleMode: number;
			fullScreenScaleMode: number;
			height: number;
			scaleMode: number;
			sourceAspectRatio: number;
			trackParentInterval: number;
			width: number;
			screenOrientation: string;
			_pendingScaleMode: null;
			onResizeContext: null;
			_fullScreenChange(i: unknown): void;
			_fullScreenError(i: unknown): void;
			_gameResumed(): void;
			_orientationChange(i: unknown): void;
			_windowResize(i: unknown): void;
			align(t: unknown, i: unknown): void;
			alignCanvas(t: unknown, i: unknown): void;
			boot(): void;
			cleanupCreatedTarget(): void;
			createFullScreenTarget(): unknown;
			destroy(): void;
			forceOrientation(t: unknown, i: unknown): void;
			fullScreenChange(t: unknown): void;
			fullScreenError(t: unknown): void;
			getParentBounds(t: unknown, i: unknown): unknown;
			orientationChange(t: unknown): void;
			parseConfig(t: unknown): void;
			pauseUpdate(): void;
			prepScreenMode(i: unknown): void;
			preUpdate(): void;
			queueUpdate(t: unknown): void;
			recalculateCanvasOffset(): void;
			reflowCanvas(): void;
			reflowGame(): void;
			refresh(): void;
			resetCanvas(t: unknown, i: unknown): void;
			setExactFit(): void;
			setGameSize(i: unknown, n: unknown): void;
			setMaximum(): void;
			setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setResizeCallback(t: unknown, i: unknown): void;
			setShowAll(t: unknown): void;
			setupScale(t: unknown, i: unknown): void;
			signalSizeChange(): void;
			startFullScreen(t: unknown, i: unknown): unknown;
			stopFullScreen(): unknown;
			updateDimensions(i: unknown, n: unknown, e: unknown): void;
			updateLayout(): void;
			updateOrientationState(): unknown;
			updateScalingAndBounds(): void;
			windowResize(t: unknown): void;
			boundingParent: HTMLDivElement;
			parentNode: HTMLCanvasElement;
			_gameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedCanvasSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedGameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_parentBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_tempBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			bounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			canvasOffset: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			dom: {
				scrollX: number;
				scrollY: number;
				getOffset(t: unknown, i: unknown): unknown;
				getScreenOrientation(): unknown;
				onDeviceReady(t: unknown): void;
				layoutBounds: unknown /* too deep */;
				visualBounds: unknown /* too deep */;
			};
			enterIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			leaveIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			margin: {
				bottom: number;
				left: number;
				right: number;
				top: number;
				x: number;
				y: number;
			};
			onFullScreenChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenError: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenInit: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onOrientationChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSizeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parentScaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactorInverted: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			windowConstraints: {
				bottom: string;
				right: string;
			};
		};
		seededRandom: {
			frac(t: unknown): unknown;
			pick(t: unknown, i: unknown): unknown;
			shuffleArray(t: unknown, i: unknown): unknown;
			randomDataGenerator: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
		};
		sound: {
			_codeMuted: boolean;
			_muted: boolean;
			_watching: boolean;
			connectToMaster: boolean;
			mute: boolean;
			muteOnPause: boolean;
			noAudio: boolean;
			touchLocked: boolean;
			baseLatency: number;
			channels: number;
			volume: number;
			_unlockSource: null;
			_watchCallback: null;
			_watchContext: null;
			_onResumeWebAudioOnClick(): void;
			_resumeWebAudioOnClick(): void;
			add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boot(): void;
			destroy(): void;
			pauseAll(): void;
			play(t: unknown, i: unknown, n: unknown): unknown;
			remove(t: unknown): unknown;
			removeAll(): void;
			removeByKey(t: unknown): unknown;
			resumeAll(): void;
			resumeWebAudio(): unknown;
			setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
			setMute(): void;
			setTouchLock(): void;
			setTouchUnlock(): void;
			stopAll(): void;
			unlock(): unknown;
			unsetMute(): void;
			update(): void;
			context: AudioContext;
			emptyBuffer: AudioBuffer;
			_sounds: never[];
			_watchList: {
				_cursor: number;
				total: number;
				first: null;
				next: null;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				list: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSoundDecode: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchUnlock: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUnMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onVolumeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			sounds: never[];
		};
		stage: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
		state: {
			_clearWorld: boolean;
			current: string;
			_pendingState: null;
			add(t: unknown, i: unknown, n: unknown): unknown;
			boot(): void;
			clearCurrentState(): void;
			destroy(): void;
			get(t: unknown): unknown;
			getCurrentState(): unknown;
			loadComplete(): void;
			pause(): void;
			preUpdate(): unknown;
			remove(t: unknown): void;
			resume(): void;
			setCurrentState(t: unknown): void;
			start(t: unknown, i: unknown): void;
			update(): void;
			_states: Map<string, unknown /* too deep */>;
			states: Map<string, unknown /* too deep */>;
			_current: {
				_loadCompleteSent: boolean;
				complete: boolean;
				fadeInSet: boolean;
				hasBroadcastedInfo: boolean;
				hideHex: boolean;
				isMapScreen: boolean;
				showMenu: boolean;
				walkEnabled: boolean;
				frameUntilAddNextPlayer: number;
				startX: number;
				startY: number;
				tileSize: number;
				_key: string;
				key: string;
				saveTag: string;
				screenName: string;
				zoneName: string;
				_friendListLoadTimeoutID: null;
				screenData: null;
				previousMapData: undefined;
				previousZone: undefined;
				addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addBlock(t: unknown, i: unknown, n: unknown): unknown;
				addBounty(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown): unknown;
				addChest(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addClickableArea(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				addClickableEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
				addClickableMoveEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
				addCollect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
				addConstructedQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addDoor(t: unknown, i: unknown): void;
				addEvent(t: unknown, i: unknown): void;
				addEventWithCallback(t: unknown, i: unknown): void;
				addFireflyEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				addFollow(t: unknown, i: unknown): unknown;
				addGnome(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMimic(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMonster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
				addNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addPathingIcon(t: unknown, i: unknown): void;
				addPippet(t: unknown, i: unknown, n: unknown): unknown;
				addPlayer(t: unknown): void;
				addQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addWizard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				arePopupsEnabled(): unknown;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				canAddUsersToScreen(): unknown;
				chatPlayer(t: unknown): void;
				create(): void;
				createBackground(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				endFX(): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getInjectedValue(t: unknown): unknown;
				hideChat(t: unknown): void;
				hideOtherPlayer(t: unknown): unknown;
				init(): void;
				initListeners(): void;
				initMap(t: unknown, i: unknown, n: unknown, e: unknown): void;
				initScene(t: unknown, i: unknown): void;
				listener(t: unknown, i: unknown): unknown;
				movePlayer(t: unknown): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClick(t: unknown): void;
				onDebugAutoClickElement(i: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onDoorClick(t: unknown, i: unknown): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				onMessage(t: unknown): void;
				onPlayerFullInfo(t: unknown): void;
				onPlayerJoined(t: unknown): void;
				onPlayerLeft(t: unknown): void;
				onPlayerList(t: unknown): unknown;
				openFeed(t: unknown): void;
				paused(): void;
				playerEffect(t: unknown): void;
				preload(): void;
				preprocess(): unknown;
				process(t: unknown): void;
				processAddCollect(t: unknown): void;
				processPopups(t: unknown): unknown;
				removeFollow(t: unknown): void;
				removePlayer(t: unknown): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setFakePlayer(t: unknown): void;
				showCollisions(t: unknown): void;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(i: unknown, n: unknown): unknown;
				startFX(): void;
				stopListeners(): void;
				transformPlayer(t: unknown): void;
				triggerElementClick(t: unknown): void;
				update(): void;
				updatePlayer(t: unknown): void;
				pendingCoordinates: Map<never, never>;
				_background: unknown /* too deep */;
				_bgSprite: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				_world: unknown /* too deep */;
				above: unknown /* too deep */;
				aboveGameObject: unknown /* too deep */;
				add: unknown /* too deep */;
				area: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				below: unknown /* too deep */;
				belowGameObject: unknown /* too deep */;
				clickAreas: unknown /* too deep */;
				content: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				data: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				events: unknown /* too deep */;
				floor: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menuBar: unknown /* too deep */;
				menus: unknown /* too deep */;
				metricsManager: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				path: unknown /* too deep */;
				pendingPlayers: unknown /* too deep */;
				playerList: unknown /* too deep */;
				playersInfo: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				questProgress: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
				user: unknown /* too deep */;
				zone: unknown /* too deep */;
			};
			_initArgs: never[];
			_onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		time: {
			_deltaMS: number;
			_pauseStarted: number;
			_prevTimeMS: number;
			_started: number;
			_timeMS: number;
			deltaMS: number;
			desiredFps: number;
			pauseDuration: number;
			prevTimeMS: number;
			timeMS: number;
			timeToCall: number;
			add(t: unknown): unknown;
			boot(): void;
			create(t: unknown): unknown;
			elapsedSecondsSince(t: unknown): unknown;
			elapsedSince(t: unknown): unknown;
			gamePaused(): void;
			gameResumed(): void;
			removeAll(): void;
			reset(): void;
			setTime(t: unknown): void;
			totalElapsedSeconds(): unknown;
			update(t: unknown): void;
			updateTimers(): void;
			_timers: never[];
			events: {
				autoDestroy: boolean;
				expired: boolean;
				paused: boolean;
				running: boolean;
				_i: number;
				_len: number;
				_marked: number;
				_newTick: number;
				_now: number;
				_pauseStarted: number;
				_pauseTotal: number;
				_started: number;
				duration: number;
				elapsed: number;
				length: number;
				ms: number;
				next: number;
				nextTick: number;
				seconds: number;
				timeCap: number;
				addTimer(t: unknown, i: unknown, n: unknown): unknown;
				adjustEvents(t: unknown): void;
				clearPendingEvents(): void;
				createTimer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				destroy(): void;
				loop(t: unknown, i: unknown, n: unknown): unknown;
				order(): void;
				pause(): void;
				remove(t: unknown): unknown;
				removeAll(): void;
				repeat(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				resume(): void;
				sortHandler(t: unknown, i: unknown): unknown;
				start(t: unknown): void;
				stop(t: unknown): void;
				update(t: unknown): unknown;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				onComplete: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		tweens: {
			add(t: unknown, i: unknown, n: unknown): unknown;
			create(t: unknown, i: unknown, n: unknown): unknown;
			destroy(): void;
			findOwnerForTween(t: unknown): unknown;
			getAll(): unknown;
			pauseAll(): void;
			remove(t: unknown): void;
			removeAll(): void;
			removeAllFromOwner(t: unknown): void;
			removeFrom(t: unknown, i: unknown): void;
			removeTweenFromOwner(t: unknown): unknown;
			resumeAll(): void;
			update(): unknown;
			_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
			_tweens: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		world: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
	};
	_prodigy: {
		previousNow: number;
		updateCount: number;
		version: string;
		_inputBlocker: null;
		automation: null;
		spinner: null;
		cleanup(): void;
		init(): void;
		initializeBreadcrumbs(): void;
		initializeInjectionContainer(): void;
		loading(t: unknown, i: unknown): void;
		postCacheInit(): void;
		postPIXIGameInit(): void;
		start(t: unknown, i: unknown, n: unknown): void;
		startCoOp(t: unknown): void;
		startPrefabScene(t: unknown, i: unknown): void;
		update(): void;
		achievements: {
			getCompletionText(t: unknown): unknown;
			getCurrent(t: unknown): unknown;
			getData(t: unknown): unknown;
			getDesc(t: unknown): unknown;
			getName(t: unknown): unknown;
			getProgress(t: unknown): unknown;
			getTarget(t: unknown): unknown;
			getZero(): unknown;
			process(): unknown;
			processValue(t: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		animation: {
			fade(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			float(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			hop(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			rotate(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			shake(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			translate(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		assets: {
			appendAssets(t: unknown): void;
			getAsset(t: unknown): unknown;
			getImageBounds(t: unknown): unknown;
			getImagePivots(t: unknown): unknown;
			assets: {
				"atlas-10": unknown /* too deep */;
				"atlas-110": unknown /* too deep */;
				"atlas-121": unknown /* too deep */;
				"atlas-144": unknown /* too deep */;
				"atlas-145": unknown /* too deep */;
				"atlas-148": unknown /* too deep */;
				"atlas-149": unknown /* too deep */;
				"atlas-157": unknown /* too deep */;
				"atlas-158": unknown /* too deep */;
				"atlas-160": unknown /* too deep */;
				"atlas-161": unknown /* too deep */;
				"atlas-166": unknown /* too deep */;
				"atlas-169": unknown /* too deep */;
				"atlas-179": unknown /* too deep */;
				"atlas-18": unknown /* too deep */;
				"atlas-180": unknown /* too deep */;
				"atlas-181": unknown /* too deep */;
				"atlas-189": unknown /* too deep */;
				"atlas-19": unknown /* too deep */;
				"atlas-21": unknown /* too deep */;
				"atlas-22": unknown /* too deep */;
				"atlas-29": unknown /* too deep */;
				"atlas-50": unknown /* too deep */;
				"atlas-8": unknown /* too deep */;
				"atlas-9": unknown /* too deep */;
				"battle-academy-classroom": unknown /* too deep */;
				"battle-academy-gh-stairs": unknown /* too deep */;
				"battle-ancient-ruins": unknown /* too deep */;
				"battle-ancient-ruins-guardian": unknown /* too deep */;
				"battle-archives": unknown /* too deep */;
				"battle-bonfire-inside": unknown /* too deep */;
				"battle-bonfire-lava": unknown /* too deep */;
				"battle-bonfire-outside": unknown /* too deep */;
				"battle-coliseum-outside": unknown /* too deep */;
				"battle-forest-generic": unknown /* too deep */;
				"battle-forest-outside": unknown /* too deep */;
				"battle-lamplight-outside": unknown /* too deep */;
				"battle-lamplight-outside-pumpkinfest": unknown /* too deep */;
				"battle-lamplight-outside-starlight": unknown /* too deep */;
				"battle-lamplight-outside-winterfest": unknown /* too deep */;
				"battle-shipwreck-outside": unknown /* too deep */;
				"battle-shipwreck-underwater": unknown /* too deep */;
				"battle-shiverchill-inside": unknown /* too deep */;
				"battle-shiverchill-outside": unknown /* too deep */;
				"battle-skywatch-inside": unknown /* too deep */;
				"battle-skywatch-outside": unknown /* too deep */;
				"battle-tower-inside": unknown /* too deep */;
				"bgm-17": unknown /* too deep */;
				"bgm-3": unknown /* too deep */;
				"bounty-run-endmap-1-background": unknown /* too deep */;
				"bounty-run-endmap-1-foreground": unknown /* too deep */;
				"bounty-run-endmap-2-background": unknown /* too deep */;
				"bounty-run-endmap-2-foreground": unknown /* too deep */;
				"bounty-run-endmap-3-background": unknown /* too deep */;
				"bounty-run-endmap-3-foreground": unknown /* too deep */;
				"bounty-run-guardianmap-background": unknown /* too deep */;
				"bounty-run-guardianmap-foreground": unknown /* too deep */;
				"bounty-run-hubmap-background": unknown /* too deep */;
				"bounty-run-hubmap-foreground": unknown /* too deep */;
				"bounty-run-middlemap-1-background": unknown /* too deep */;
				"bounty-run-middlemap-1-foreground": unknown /* too deep */;
				"bounty-run-middlemap-2-background": unknown /* too deep */;
				"bounty-run-middlemap-2-foreground": unknown /* too deep */;
				"bounty-run-middlemap-3-background": unknown /* too deep */;
				"bounty-run-middlemap-3-foreground": unknown /* too deep */;
				"bounty-run-middlemap-4-background": unknown /* too deep */;
				"bounty-run-middlemap-4-foreground": unknown /* too deep */;
				"bounty-run-middlemap-5-background": unknown /* too deep */;
				"bounty-run-middlemap-5-foreground": unknown /* too deep */;
				"bounty-run-middlemap-6-background": unknown /* too deep */;
				"bounty-run-middlemap-6-foreground": unknown /* too deep */;
				"bounty-run-middlemap-7-background": unknown /* too deep */;
				"bounty-run-middlemap-7-foreground": unknown /* too deep */;
				"bounty-run-startmap-1-background": unknown /* too deep */;
				"bounty-run-startmap-1-foreground": unknown /* too deep */;
				"bounty-run-startmap-2-background": unknown /* too deep */;
				"bounty-run-startmap-2-foreground": unknown /* too deep */;
				"bounty-run-startmap-3-background": unknown /* too deep */;
				"bounty-run-startmap-3-foreground": unknown /* too deep */;
				"crystal-caverns-phase-1-background": unknown /* too deep */;
				"crystal-caverns-phase-1-farback": unknown /* too deep */;
				"crystal-caverns-phase-1-foreground": unknown /* too deep */;
				"crystal-caverns-phase-2-background": unknown /* too deep */;
				"crystal-caverns-phase-2-foreground": unknown /* too deep */;
				"crystal-caverns-phase-3-background": unknown /* too deep */;
				"crystal-caverns-phase-3-foreground": unknown /* too deep */;
				"feature-flag-data": unknown /* too deep */;
				"female-outfit-46": unknown /* too deep */;
				"female-outfit-63": unknown /* too deep */;
				"icon-fossil-5": unknown /* too deep */;
				"icon-item-34": unknown /* too deep */;
				"icon-pet-4": unknown /* too deep */;
				"icon-pet-94": unknown /* too deep */;
				"icon-weapon-63": unknown /* too deep */;
				"map-academy-cr1": unknown /* too deep */;
				"map-academy-cr2": unknown /* too deep */;
				"map-academy-gh1": unknown /* too deep */;
				"map-academy-gh2": unknown /* too deep */;
				"map-academy-gh3": unknown /* too deep */;
				"map-activity_zone-a1": unknown /* too deep */;
				"map-activity_zone-a2": unknown /* too deep */;
				"map-activity_zone-b1": unknown /* too deep */;
				"map-activity_zone-b2": unknown /* too deep */;
				"map-activity_zone-b3": unknown /* too deep */;
				"map-activity_zone-c1": unknown /* too deep */;
				"map-activity_zone-c2": unknown /* too deep */;
				"map-archives-1": unknown /* too deep */;
				"map-archives-2": unknown /* too deep */;
				"map-archives-3": unknown /* too deep */;
				"map-archives-4": unknown /* too deep */;
				"map-archives-5": unknown /* too deep */;
				"map-archives-6": unknown /* too deep */;
				"map-archives-end": unknown /* too deep */;
				"map-archives-m1": unknown /* too deep */;
				"map-archives-m2": unknown /* too deep */;
				"map-archives-m3": unknown /* too deep */;
				"map-archives-m4": unknown /* too deep */;
				"map-archives-m5": unknown /* too deep */;
				"map-archives-m6": unknown /* too deep */;
				"map-archives-m7": unknown /* too deep */;
				"map-archives-m8": unknown /* too deep */;
				"map-archives-m9": unknown /* too deep */;
				"map-bonfire_spire-a1": unknown /* too deep */;
				"map-bonfire_spire-a4": unknown /* too deep */;
				"map-bonfire_spire-b1": unknown /* too deep */;
				"map-bonfire_spire-b2": unknown /* too deep */;
				"map-bonfire_spire-b4": unknown /* too deep */;
				"map-bonfire_spire-b5": unknown /* too deep */;
				"map-bonfire_spire-c1": unknown /* too deep */;
				"map-bonfire_spire-c2": unknown /* too deep */;
				"map-bonfire_spire-c3": unknown /* too deep */;
				"map-bonfire_spire-c4": unknown /* too deep */;
				"map-bonfire_spire-c6": unknown /* too deep */;
				"map-bonfire_spire-d1": unknown /* too deep */;
				"map-bonfire_spire-d2": unknown /* too deep */;
				"map-bonfire_spire-d3": unknown /* too deep */;
				"map-bonfire_spire-d4": unknown /* too deep */;
				"map-bonfire_spire-d5": unknown /* too deep */;
				"map-bonfire_spire-d6": unknown /* too deep */;
				"map-bonfire_spire-e5": unknown /* too deep */;
				"map-bonfire_spire-e6": unknown /* too deep */;
				"map-bonfire_spire-titan": unknown /* too deep */;
				"map-crystal_caverns-dungeonhub": unknown /* too deep */;
				"map-darktower-a1": unknown /* too deep */;
				"map-darktower-a2": unknown /* too deep */;
				"map-darktower-a3": unknown /* too deep */;
				"map-dyno-a0": unknown /* too deep */;
				"map-earth-tower-1": unknown /* too deep */;
				"map-earth-tower-10": unknown /* too deep */;
				"map-earth-tower-11": unknown /* too deep */;
				"map-earth-tower-12": unknown /* too deep */;
				"map-earth-tower-13": unknown /* too deep */;
				"map-earth-tower-14": unknown /* too deep */;
				"map-earth-tower-15": unknown /* too deep */;
				"map-earth-tower-2": unknown /* too deep */;
				"map-earth-tower-3": unknown /* too deep */;
				"map-earth-tower-4": unknown /* too deep */;
				"map-earth-tower-5": unknown /* too deep */;
				"map-earth-tower-6": unknown /* too deep */;
				"map-earth-tower-7": unknown /* too deep */;
				"map-earth-tower-8": unknown /* too deep */;
				"map-earth-tower-9": unknown /* too deep */;
				"map-earth-tower-end": unknown /* too deep */;
				"map-earthtower-cr": unknown /* too deep */;
				"map-earthtower-wr": unknown /* too deep */;
				"map-forest-a3": unknown /* too deep */;
				"map-forest-a4": unknown /* too deep */;
				"map-forest-a5": unknown /* too deep */;
				"map-forest-b5": unknown /* too deep */;
				"map-forest-b6": unknown /* too deep */;
				"map-forest-b7": unknown /* too deep */;
				"map-forest-b8": unknown /* too deep */;
				"map-forest-c4": unknown /* too deep */;
				"map-forest-c7": unknown /* too deep */;
				"map-forest-c8": unknown /* too deep */;
				"map-forest-d3": unknown /* too deep */;
				"map-forest-titan": unknown /* too deep */;
				"map-house-cool-cave": unknown /* too deep */;
				"map-house-cool-cave-unique-1": unknown /* too deep */;
				"map-house-cool-cave-unique-2": unknown /* too deep */;
				"map-house-exit": unknown /* too deep */;
				"map-house-exterior": unknown /* too deep */;
				"map-house-fire-pit": unknown /* too deep */;
				"map-house-fire-pit-2": unknown /* too deep */;
				"map-house-fire-pit-3": unknown /* too deep */;
				"map-house-forest": unknown /* too deep */;
				"map-house-house-large-3": unknown /* too deep */;
				"map-house-house-large-4": unknown /* too deep */;
				"map-house-icecaves": unknown /* too deep */;
				"map-house-large-0": unknown /* too deep */;
				"map-house-large-1": unknown /* too deep */;
				"map-house-medium-0": unknown /* too deep */;
				"map-house-medium-1": unknown /* too deep */;
				"map-house-small-0": unknown /* too deep */;
				"map-house-small-1": unknown /* too deep */;
				"map-house-suburbs": unknown /* too deep */;
				"map-house-treehouse": unknown /* too deep */;
				"map-house-treehouse-unique-1": unknown /* too deep */;
				"map-house-treehouse-unique-2": unknown /* too deep */;
				"map-lamplight-a1-springfest": unknown /* too deep */;
				"map-lamplight-a2": unknown /* too deep */;
				"map-lamplight-a2-pumpkinfest": unknown /* too deep */;
				"map-lamplight-a2-springfest": unknown /* too deep */;
				"map-lamplight-a2-starlight_festival": unknown /* too deep */;
				"map-lamplight-a2-summerfest": unknown /* too deep */;
				"map-lamplight-a2-winterfest": unknown /* too deep */;
				"map-lamplight-a3": unknown /* too deep */;
				"map-lamplight-a3-pumpkinfest": unknown /* too deep */;
				"map-lamplight-a3-springfest": unknown /* too deep */;
				"map-lamplight-a3-starlight_festival": unknown /* too deep */;
				"map-lamplight-a3-summerfest": unknown /* too deep */;
				"map-lamplight-a3-winterfest": unknown /* too deep */;
				"map-lamplight-a4": unknown /* too deep */;
				"map-lamplight-a4-pumpkinfest": unknown /* too deep */;
				"map-lamplight-a4-starlight_festival": unknown /* too deep */;
				"map-lamplight-a4-summerfest": unknown /* too deep */;
				"map-lamplight-a4-winterfest": unknown /* too deep */;
				"map-lamplight-b0": unknown /* too deep */;
				"map-lamplight-b0-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b0-starlight_festival": unknown /* too deep */;
				"map-lamplight-b0-summerfest": unknown /* too deep */;
				"map-lamplight-b0-winterfest": unknown /* too deep */;
				"map-lamplight-b1": unknown /* too deep */;
				"map-lamplight-b1-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b1-starlight_festival": unknown /* too deep */;
				"map-lamplight-b1-summerfest": unknown /* too deep */;
				"map-lamplight-b1-winterfest": unknown /* too deep */;
				"map-lamplight-b2": unknown /* too deep */;
				"map-lamplight-b2-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b2-springfest": unknown /* too deep */;
				"map-lamplight-b2-starlight_festival": unknown /* too deep */;
				"map-lamplight-b2-summerfest": unknown /* too deep */;
				"map-lamplight-b2-winterfest": unknown /* too deep */;
				"map-lamplight-b3": unknown /* too deep */;
				"map-lamplight-b3-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b3-springfest": unknown /* too deep */;
				"map-lamplight-b3-starlight_festival": unknown /* too deep */;
				"map-lamplight-b3-summerfest": unknown /* too deep */;
				"map-lamplight-b3-winterfest": unknown /* too deep */;
				"map-lamplight-b4": unknown /* too deep */;
				"map-lamplight-b4-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b4-springfest": unknown /* too deep */;
				"map-lamplight-b4-starlight_festival": unknown /* too deep */;
				"map-lamplight-b4-summerfest": unknown /* too deep */;
				"map-lamplight-b4-winterfest": unknown /* too deep */;
				"map-lamplight-b5": unknown /* too deep */;
				"map-lamplight-b5-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b5-starlight_festival": unknown /* too deep */;
				"map-lamplight-b5-summerfest": unknown /* too deep */;
				"map-lamplight-b5-winterfest": unknown /* too deep */;
				"map-lamplight-c1": unknown /* too deep */;
				"map-lamplight-c2": unknown /* too deep */;
				"map-lamplight-c2-pumpkinfest": unknown /* too deep */;
				"map-lamplight-c2-springfest": unknown /* too deep */;
				"map-lamplight-c2-starlight_festival": unknown /* too deep */;
				"map-lamplight-c2-summerfest": unknown /* too deep */;
				"map-lamplight-c2-winterfest": unknown /* too deep */;
				"map-lamplight-c3": unknown /* too deep */;
				"map-lamplight-c3-pumpkinfest": unknown /* too deep */;
				"map-lamplight-c3-springfest": unknown /* too deep */;
				"map-lamplight-c3-starlight_festival": unknown /* too deep */;
				"map-lamplight-c3-summerfest": unknown /* too deep */;
				"map-lamplight-c3-winterfest": unknown /* too deep */;
				"map-lamplight-c4": unknown /* too deep */;
				"map-lamplight-c4-pumpkinfest": unknown /* too deep */;
				"map-lamplight-c4-springfest": unknown /* too deep */;
				"map-lamplight-c4-starlight_festival": unknown /* too deep */;
				"map-lamplight-c4-summerfest": unknown /* too deep */;
				"map-lamplight-c4-winterfest": unknown /* too deep */;
				"map-lamplight-coliseum": unknown /* too deep */;
				"map-lamplight-d3-springfest": unknown /* too deep */;
				"map-pathing": unknown /* too deep */;
				"map-shipwreck_shore-a1": unknown /* too deep */;
				"map-shipwreck_shore-a2": unknown /* too deep */;
				"map-shipwreck_shore-a3": unknown /* too deep */;
				"map-shipwreck_shore-a4": unknown /* too deep */;
				"map-shipwreck_shore-a5": unknown /* too deep */;
				"map-shipwreck_shore-a7": unknown /* too deep */;
				"map-shipwreck_shore-b10": unknown /* too deep */;
				"map-shipwreck_shore-b11": unknown /* too deep */;
				"map-shipwreck_shore-b12": unknown /* too deep */;
				"map-shipwreck_shore-b13": unknown /* too deep */;
				"map-shipwreck_shore-b2": unknown /* too deep */;
				"map-shipwreck_shore-b4": unknown /* too deep */;
				"map-shipwreck_shore-b5": unknown /* too deep */;
				"map-shipwreck_shore-b6": unknown /* too deep */;
				"map-shipwreck_shore-b7": unknown /* too deep */;
				"map-shipwreck_shore-b8": unknown /* too deep */;
				"map-shipwreck_shore-c10": unknown /* too deep */;
				"map-shipwreck_shore-c11": unknown /* too deep */;
				"map-shipwreck_shore-c12": unknown /* too deep */;
				"map-shipwreck_shore-c6": unknown /* too deep */;
				"map-shipwreck_shore-c7": unknown /* too deep */;
				"map-shipwreck_shore-c8": unknown /* too deep */;
				"map-shipwreck_shore-c9": unknown /* too deep */;
				"map-shipwreck_shore-titan": unknown /* too deep */;
				"map-shiverchill-a10": unknown /* too deep */;
				"map-shiverchill-a11": unknown /* too deep */;
				"map-shiverchill-a2": unknown /* too deep */;
				"map-shiverchill-a3": unknown /* too deep */;
				"map-shiverchill-a4": unknown /* too deep */;
				"map-shiverchill-a5": unknown /* too deep */;
				"map-shiverchill-a6": unknown /* too deep */;
				"map-shiverchill-a7": unknown /* too deep */;
				"map-shiverchill-a9": unknown /* too deep */;
				"map-shiverchill-b1": unknown /* too deep */;
				"map-shiverchill-b10": unknown /* too deep */;
				"map-shiverchill-b2": unknown /* too deep */;
				"map-shiverchill-b3": unknown /* too deep */;
				"map-shiverchill-b6": unknown /* too deep */;
				"map-shiverchill-b7": unknown /* too deep */;
				"map-shiverchill-b8": unknown /* too deep */;
				"map-shiverchill-b9": unknown /* too deep */;
				"map-skywatch-a0": unknown /* too deep */;
				"map-skywatch-a1": unknown /* too deep */;
				"map-skywatch-b1": unknown /* too deep */;
				"map-skywatch-b2": unknown /* too deep */;
				"map-skywatch-b3": unknown /* too deep */;
				"map-skywatch-c1": unknown /* too deep */;
				"map-skywatch-c2": unknown /* too deep */;
				"map-skywatch-c3": unknown /* too deep */;
				"map-skywatch-c4": unknown /* too deep */;
				"map-skywatch-c5": unknown /* too deep */;
				"map-skywatch-d1": unknown /* too deep */;
				"map-skywatch-d2": unknown /* too deep */;
				"map-skywatch-d3": unknown /* too deep */;
				"map-skywatch-e1": unknown /* too deep */;
				"map-skywatch-e2": unknown /* too deep */;
				"map-skywatch-e3": unknown /* too deep */;
				"map-skywatch-e4": unknown /* too deep */;
				"map-skywatch-e5": unknown /* too deep */;
				"map-toyzone-a1": unknown /* too deep */;
				"map-toyzone-b1": unknown /* too deep */;
				"map-toyzone-b2": unknown /* too deep */;
				"monster-small-125": unknown /* too deep */;
				"monster-small-126": unknown /* too deep */;
				"monster-small-127": unknown /* too deep */;
				"monster-small-128": unknown /* too deep */;
				"monster-small-129": unknown /* too deep */;
				"player-boot-24": unknown /* too deep */;
				"player-boot-68": unknown /* too deep */;
				"player-face-13": unknown /* too deep */;
				"player-face-2": unknown /* too deep */;
				"player-hair-1": unknown /* too deep */;
				"player-hat-24": unknown /* too deep */;
				"player-hat-33": unknown /* too deep */;
				"player-head-1": unknown /* too deep */;
				"player-neck-1": unknown /* too deep */;
				"player-weapon-20": unknown /* too deep */;
				"player-weapon-5": unknown /* too deep */;
				"sfx-18": unknown /* too deep */;
				"sfx-19": unknown /* too deep */;
				"sfx-31": unknown /* too deep */;
				"sfx-46": unknown /* too deep */;
				"singleImage-5": unknown /* too deep */;
				"spine-147": unknown /* too deep */;
				"spine-184": unknown /* too deep */;
				"spine-25": unknown /* too deep */;
				"tileset-academy": unknown /* too deep */;
				"tileset-academy-sup": unknown /* too deep */;
				"tileset-ancient-ruins": unknown /* too deep */;
				"tileset-ancient-ruins-statue": unknown /* too deep */;
				"tileset-archives": unknown /* too deep */;
				"tileset-bonfire": unknown /* too deep */;
				"tileset-classroom": unknown /* too deep */;
				"tileset-classroom-firefly": unknown /* too deep */;
				"tileset-cloud": unknown /* too deep */;
				"tileset-cloud-new": unknown /* too deep */;
				"tileset-cloud-no-collisions": unknown /* too deep */;
				"tileset-collisions": unknown /* too deep */;
				"tileset-darktower": unknown /* too deep */;
				"tileset-exterior-general": unknown /* too deep */;
				"tileset-firefly-new": unknown /* too deep */;
				"tileset-firepit": unknown /* too deep */;
				"tileset-forest": unknown /* too deep */;
				"tileset-forest-new": unknown /* too deep */;
				"tileset-generic": unknown /* too deep */;
				"tileset-generic-new": unknown /* too deep */;
				"tileset-generic-snow": unknown /* too deep */;
				"tileset-icecave": unknown /* too deep */;
				"tileset-icecave-new": unknown /* too deep */;
				"tileset-iceruins": unknown /* too deep */;
				"tileset-infinity-tower-construction": unknown /* too deep */;
				"tileset-interior": unknown /* too deep */;
				"tileset-interior-general": unknown /* too deep */;
				"tileset-interior-icecave": unknown /* too deep */;
				"tileset-interior-treehouse": unknown /* too deep */;
				"tileset-math-tower-basic": unknown /* too deep */;
				"tileset-minecarts": unknown /* too deep */;
				"tileset-outside": unknown /* too deep */;
				"tileset-outsidesnow": unknown /* too deep */;
				"tileset-railruins": unknown /* too deep */;
				"tileset-ship-exterior": unknown /* too deep */;
				"tileset-ship-interior": unknown /* too deep */;
				"tileset-shiverchill": unknown /* too deep */;
				"tileset-shiverchill-footsteppath": unknown /* too deep */;
				"tileset-shiverchill-new": unknown /* too deep */;
				"tileset-skywatch": unknown /* too deep */;
				"tileset-skywatch-buildings": unknown /* too deep */;
				"tileset-skywatch-factory": unknown /* too deep */;
				"tileset-springfest": unknown /* too deep */;
				"tileset-towertown-basic": unknown /* too deep */;
				"tileset-town": unknown /* too deep */;
				"tileset-town-december": unknown /* too deep */;
				"tileset-town-new": unknown /* too deep */;
				"tileset-town-november": unknown /* too deep */;
				"tileset-town-october": unknown /* too deep */;
				"tileset-town-summerfest": unknown /* too deep */;
				"tileset-toy-ruins-test": unknown /* too deep */;
				"tileset-toyzone": unknown /* too deep */;
				"tileset-toyzone-dragons": unknown /* too deep */;
				"tileset-tutorial-subspace": unknown /* too deep */;
				"tileset-twilight-arcade": unknown /* too deep */;
				"tileset-UI": unknown /* too deep */;
				"tileset-volcano": unknown /* too deep */;
				"tileset-volcano-new": unknown /* too deep */;
				"tileset-wall-collisions": unknown /* too deep */;
				"tileset-water-new": unknown /* too deep */;
				"towertown-default-1": unknown /* too deep */;
				"towertown-default-2": unknown /* too deep */;
				"towertown-tutorial": unknown /* too deep */;
				"voice-0": unknown /* too deep */;
				"voice-1-1": unknown /* too deep */;
				"voice-1-10": unknown /* too deep */;
				"voice-1-11": unknown /* too deep */;
				"voice-1-12": unknown /* too deep */;
				"voice-1-13": unknown /* too deep */;
				"voice-1-14": unknown /* too deep */;
				"voice-1-15": unknown /* too deep */;
				"voice-1-2": unknown /* too deep */;
				"voice-1-3": unknown /* too deep */;
				"voice-1-4": unknown /* too deep */;
				"voice-1-5": unknown /* too deep */;
				"voice-1-6": unknown /* too deep */;
				"voice-1-7": unknown /* too deep */;
				"voice-1-8": unknown /* too deep */;
				"voice-1-9": unknown /* too deep */;
				"voice-10-1": unknown /* too deep */;
				"voice-10-10": unknown /* too deep */;
				"voice-10-11": unknown /* too deep */;
				"voice-10-12": unknown /* too deep */;
				"voice-10-13": unknown /* too deep */;
				"voice-10-14": unknown /* too deep */;
				"voice-10-15": unknown /* too deep */;
				"voice-10-16": unknown /* too deep */;
				"voice-10-17": unknown /* too deep */;
				"voice-10-18": unknown /* too deep */;
				"voice-10-19": unknown /* too deep */;
				"voice-10-2": unknown /* too deep */;
				"voice-10-20": unknown /* too deep */;
				"voice-10-21": unknown /* too deep */;
				"voice-10-22": unknown /* too deep */;
				"voice-10-23": unknown /* too deep */;
				"voice-10-24": unknown /* too deep */;
				"voice-10-25": unknown /* too deep */;
				"voice-10-26": unknown /* too deep */;
				"voice-10-27": unknown /* too deep */;
				"voice-10-28": unknown /* too deep */;
				"voice-10-29": unknown /* too deep */;
				"voice-10-3": unknown /* too deep */;
				"voice-10-30": unknown /* too deep */;
				"voice-10-31": unknown /* too deep */;
				"voice-10-32": unknown /* too deep */;
				"voice-10-33": unknown /* too deep */;
				"voice-10-34": unknown /* too deep */;
				"voice-10-35": unknown /* too deep */;
				"voice-10-36": unknown /* too deep */;
				"voice-10-37": unknown /* too deep */;
				"voice-10-38": unknown /* too deep */;
				"voice-10-39": unknown /* too deep */;
				"voice-10-4": unknown /* too deep */;
				"voice-10-40": unknown /* too deep */;
				"voice-10-41": unknown /* too deep */;
				"voice-10-42": unknown /* too deep */;
				"voice-10-43": unknown /* too deep */;
				"voice-10-44": unknown /* too deep */;
				"voice-10-45": unknown /* too deep */;
				"voice-10-46": unknown /* too deep */;
				"voice-10-47": unknown /* too deep */;
				"voice-10-48": unknown /* too deep */;
				"voice-10-49": unknown /* too deep */;
				"voice-10-5": unknown /* too deep */;
				"voice-10-50": unknown /* too deep */;
				"voice-10-51": unknown /* too deep */;
				"voice-10-52": unknown /* too deep */;
				"voice-10-53": unknown /* too deep */;
				"voice-10-54": unknown /* too deep */;
				"voice-10-55": unknown /* too deep */;
				"voice-10-56": unknown /* too deep */;
				"voice-10-57": unknown /* too deep */;
				"voice-10-58": unknown /* too deep */;
				"voice-10-59": unknown /* too deep */;
				"voice-10-6": unknown /* too deep */;
				"voice-10-60": unknown /* too deep */;
				"voice-10-61": unknown /* too deep */;
				"voice-10-62": unknown /* too deep */;
				"voice-10-63": unknown /* too deep */;
				"voice-10-64": unknown /* too deep */;
				"voice-10-65": unknown /* too deep */;
				"voice-10-66": unknown /* too deep */;
				"voice-10-67": unknown /* too deep */;
				"voice-10-68": unknown /* too deep */;
				"voice-10-69": unknown /* too deep */;
				"voice-10-7": unknown /* too deep */;
				"voice-10-70": unknown /* too deep */;
				"voice-10-71": unknown /* too deep */;
				"voice-10-72": unknown /* too deep */;
				"voice-10-73": unknown /* too deep */;
				"voice-10-74": unknown /* too deep */;
				"voice-10-75": unknown /* too deep */;
				"voice-10-76": unknown /* too deep */;
				"voice-10-77": unknown /* too deep */;
				"voice-10-78": unknown /* too deep */;
				"voice-10-79": unknown /* too deep */;
				"voice-10-8": unknown /* too deep */;
				"voice-10-80": unknown /* too deep */;
				"voice-10-81": unknown /* too deep */;
				"voice-10-82": unknown /* too deep */;
				"voice-10-83": unknown /* too deep */;
				"voice-10-84": unknown /* too deep */;
				"voice-10-85": unknown /* too deep */;
				"voice-10-86": unknown /* too deep */;
				"voice-10-87": unknown /* too deep */;
				"voice-10-88": unknown /* too deep */;
				"voice-10-89": unknown /* too deep */;
				"voice-10-9": unknown /* too deep */;
				"voice-10-90": unknown /* too deep */;
				"voice-10-91": unknown /* too deep */;
				"voice-10-92": unknown /* too deep */;
				"voice-10-93": unknown /* too deep */;
				"voice-10-94": unknown /* too deep */;
				"voice-10-95": unknown /* too deep */;
				"voice-10-96": unknown /* too deep */;
				"voice-10-97": unknown /* too deep */;
				"voice-10-98": unknown /* too deep */;
				"voice-10-99": unknown /* too deep */;
				"voice-11": unknown /* too deep */;
				"voice-11-1": unknown /* too deep */;
				"voice-11-2": unknown /* too deep */;
				"voice-11-3": unknown /* too deep */;
				"voice-12-1": unknown /* too deep */;
				"voice-12-10": unknown /* too deep */;
				"voice-12-11": unknown /* too deep */;
				"voice-12-12": unknown /* too deep */;
				"voice-12-13": unknown /* too deep */;
				"voice-12-14": unknown /* too deep */;
				"voice-12-15": unknown /* too deep */;
				"voice-12-16": unknown /* too deep */;
				"voice-12-17": unknown /* too deep */;
				"voice-12-18": unknown /* too deep */;
				"voice-12-2": unknown /* too deep */;
				"voice-12-3": unknown /* too deep */;
				"voice-12-4": unknown /* too deep */;
				"voice-12-5": unknown /* too deep */;
				"voice-12-6": unknown /* too deep */;
				"voice-12-7": unknown /* too deep */;
				"voice-12-8": unknown /* too deep */;
				"voice-12-9": unknown /* too deep */;
				"voice-13-1": unknown /* too deep */;
				"voice-14-1": unknown /* too deep */;
				"voice-14-2": unknown /* too deep */;
				"voice-15-1": unknown /* too deep */;
				"voice-15-10": unknown /* too deep */;
				"voice-15-11": unknown /* too deep */;
				"voice-15-12": unknown /* too deep */;
				"voice-15-13": unknown /* too deep */;
				"voice-15-14": unknown /* too deep */;
				"voice-15-15": unknown /* too deep */;
				"voice-15-16": unknown /* too deep */;
				"voice-15-17": unknown /* too deep */;
				"voice-15-18": unknown /* too deep */;
				"voice-15-2": unknown /* too deep */;
				"voice-15-3": unknown /* too deep */;
				"voice-15-4": unknown /* too deep */;
				"voice-15-5": unknown /* too deep */;
				"voice-15-6": unknown /* too deep */;
				"voice-15-7": unknown /* too deep */;
				"voice-15-8": unknown /* too deep */;
				"voice-15-9": unknown /* too deep */;
				"voice-16-1": unknown /* too deep */;
				"voice-16-2": unknown /* too deep */;
				"voice-16-3": unknown /* too deep */;
				"voice-17-1": unknown /* too deep */;
				"voice-17-2": unknown /* too deep */;
				"voice-17-3": unknown /* too deep */;
				"voice-17-4": unknown /* too deep */;
				"voice-18-1": unknown /* too deep */;
				"voice-18-2": unknown /* too deep */;
				"voice-18-3": unknown /* too deep */;
				"voice-18-4": unknown /* too deep */;
				"voice-18-5": unknown /* too deep */;
				"voice-19-1": unknown /* too deep */;
				"voice-2": unknown /* too deep */;
				"voice-20-1": unknown /* too deep */;
				"voice-20-2": unknown /* too deep */;
				"voice-21-1": unknown /* too deep */;
				"voice-21-2": unknown /* too deep */;
				"voice-22-1": unknown /* too deep */;
				"voice-22-2": unknown /* too deep */;
				"voice-23-1": unknown /* too deep */;
				"voice-23-2": unknown /* too deep */;
				"voice-23-3": unknown /* too deep */;
				"voice-24-1": unknown /* too deep */;
				"voice-25-1": unknown /* too deep */;
				"voice-26-1": unknown /* too deep */;
				"voice-27-1": unknown /* too deep */;
				"voice-28-1": unknown /* too deep */;
				"voice-29-1": unknown /* too deep */;
				"voice-3": unknown /* too deep */;
				"voice-30-1": unknown /* too deep */;
				"voice-31-1": unknown /* too deep */;
				"voice-31-10": unknown /* too deep */;
				"voice-31-11": unknown /* too deep */;
				"voice-31-2": unknown /* too deep */;
				"voice-31-3": unknown /* too deep */;
				"voice-31-4": unknown /* too deep */;
				"voice-31-5": unknown /* too deep */;
				"voice-31-6": unknown /* too deep */;
				"voice-31-7": unknown /* too deep */;
				"voice-31-8": unknown /* too deep */;
				"voice-31-9": unknown /* too deep */;
				"voice-32-1": unknown /* too deep */;
				"voice-33-1": unknown /* too deep */;
				"voice-34-1": unknown /* too deep */;
				"voice-35-1": unknown /* too deep */;
				"voice-36-1": unknown /* too deep */;
				"voice-37-1": unknown /* too deep */;
				"voice-38-1": unknown /* too deep */;
				"voice-39-1": unknown /* too deep */;
				"voice-39-2": unknown /* too deep */;
				"voice-39-3": unknown /* too deep */;
				"voice-39-4": unknown /* too deep */;
				"voice-4": unknown /* too deep */;
				"voice-5": unknown /* too deep */;
				"voice-6": unknown /* too deep */;
				"voice-7": unknown /* too deep */;
				"voice-8-1": unknown /* too deep */;
				"voice-8-10": unknown /* too deep */;
				"voice-8-11": unknown /* too deep */;
				"voice-8-12": unknown /* too deep */;
				"voice-8-13": unknown /* too deep */;
				"voice-8-14": unknown /* too deep */;
				"voice-8-2": unknown /* too deep */;
				"voice-8-3": unknown /* too deep */;
				"voice-8-4": unknown /* too deep */;
				"voice-8-5": unknown /* too deep */;
				"voice-8-6": unknown /* too deep */;
				"voice-8-7": unknown /* too deep */;
				"voice-8-8": unknown /* too deep */;
				"voice-8-9": unknown /* too deep */;
				"voice-9": unknown /* too deep */;
			};
		};
		attacks: {
			calculateDamage(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			getAttack(t: unknown): unknown;
			getAttackPriority(t: unknown): unknown;
			getBestAttack(t: unknown, i: unknown, n: unknown): unknown;
			getHealingAttack(t: unknown): unknown;
			isStrong(t: unknown, i: unknown): unknown;
			isWeak(t: unknown, i: unknown): unknown;
		};
		audio: {
			_doNotResume: boolean;
			_dialogueBGM: number;
			_targetBGMVolume: number;
			_bgmFadeTween: null;
			currentVoice: null;
			clearOldSounds(): void;
			getBGMVolume(): unknown;
			getSFXVolume(): unknown;
			getVoiceVolume(): unknown;
			isBGMPlaying(t: unknown): unknown;
			isVoicePlaying(t: unknown): unknown;
			onVisibilityChanged(t: unknown): void;
			pauseBGM(): void;
			playBGM(t: unknown, i: unknown): void;
			playSFX(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			playSound(t: unknown, i: unknown): unknown;
			playVoice(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			resumeBGM(): void;
			setBGMVolume(t: unknown, i: unknown): void;
			setMute(t: unknown): void;
			setSFXVolume(t: unknown): void;
			setVoiceVolume(t: unknown): void;
			stopVoice(): void;
			currentBgm: {
				_destroyed: boolean;
				autoPlay: boolean;
				isDecoding: boolean;
				isDestroyed: boolean;
				isLoaded: boolean;
				isPlayable: boolean;
				isPlaying: boolean;
				loop: boolean;
				preload: boolean;
				singleInstance: boolean;
				usingAudioTag: boolean;
				duration: number;
				speed: number;
				volume: number;
				key: string;
				url: string;
				filters: undefined;
				mute: undefined;
				muted: undefined;
				paused: undefined;
				addMarker(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addSprites(t: unknown, i: unknown): unknown;
				autoPlayStart(): unknown;
				destroy(): void;
				pause(): unknown;
				play(t: unknown, i: unknown): unknown;
				playMarker(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown, o: unknown): unknown;
				playWithOptions(t: unknown): unknown;
				refresh(): void;
				refreshPaused(): void;
				removeMarker(t: unknown): unknown;
				removeSprites(t: unknown): unknown;
				resume(): unknown;
				stop(): unknown;
				_onComplete: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onPlay: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_onStop: unknown /* too deep */;
				context: unknown /* too deep */;
				game: unknown /* too deep */;
				instances: unknown /* too deep */;
				media: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onPlay: unknown /* too deep */;
				onResume: unknown /* too deep */;
				onStop: unknown /* too deep */;
				options: unknown /* too deep */;
				sound: unknown /* too deep */;
				sprites: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		battle: {
			battleScore(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			chooseAction(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			chooseRandomMonster(i: unknown): unknown;
			endEpicArena(t: unknown, i: unknown): void;
			getBattleLevel(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			initBackupEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initBattle(t: unknown, i: unknown): unknown;
			initEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initMainEnemy(t: unknown, i: unknown): unknown;
			initMetrics(): void;
			initWizardOpponent(t: unknown): unknown;
			onEndBattle(): void;
			replaceOpponentTeam(i: unknown, n: unknown): unknown;
			start(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			startEpicArena(t: unknown, i: unknown, n: unknown): unknown;
			battleStats: {
				endHealth: number;
				endTime: number;
				enemySpellsCast: number;
				enemySpellsCastFail: number;
				energy: number;
				energyCost: number;
				spellsCast: number;
				spellsFailed: number;
				startHealth: number;
				startTime: number;
				type: string;
				epicAttack: null;
				spellEnergyCost: null;
				battleCustomMeta: unknown /* too deep */;
				consumablesUsed: unknown /* too deep */;
				pets: unknown /* too deep */;
				petsRescued: unknown /* too deep */;
				rescuesSuccessful: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			metricsManager: {
				_supportsWasm: boolean;
				crashedLastLogin: boolean;
				_averageDownloadSpeed: number;
				_networkRequestCount: number;
				_totalAssetDownloadSize: number;
				_totalAssetDownloadTime: number;
				_totalAssetsDownloaded: number;
				lastGameSessionStartTime: number;
				timeInLoadingMS: number;
				_renderType: string;
				crashedLastTime: string;
				renderType: string;
				timeToPlayMS: null;
				assetDownloaded(t: unknown, i: unknown): void;
				checkForCrash(): void;
				createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
				getCustomMetrics(): unknown;
				getLastGameSessionStartTime(): unknown;
				increaseNetworkRequestCount(): void;
				objectCreated(t: unknown): void;
				objectDestroyed(t: unknown): void;
				sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
				setInBattle(t: unknown): void;
				setLastGameSessionStartTime(t: unknown): void;
				setLastMapLoadStarted(t: unknown): void;
				deviceInfoProvider: unknown /* too deep */;
				game: unknown /* too deep */;
				gameCompleteDataFactory: unknown /* too deep */;
				loadingMetricProperties: unknown /* too deep */;
				objectCountProperties: unknown /* too deep */;
			};
		};
		bounty: {
			MAX_BOUNTIES: number;
			checkValidBounty(t: unknown, i: unknown): unknown;
			compareBounties(t: unknown, i: unknown): unknown;
			completeBounty(t: unknown): void;
			generateBounties(t: unknown): void;
			getAveragePetTeamLevel(): unknown;
			getBounties(): unknown;
			getBounty(t: unknown): unknown;
			getCoord(t: unknown): unknown;
			getLevel(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getMode(t: unknown): unknown;
			getMonster(t: unknown): unknown;
			getName(t: unknown): unknown;
			getReward(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			getText(t: unknown): unknown;
			getZoneName(t: unknown): unknown;
			hasBounty(t: unknown, i: unknown): unknown;
			placeBounty(t: unknown, i: unknown, n: unknown): void;
			placeBountyHere(t: unknown, i: unknown, n: unknown, e: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			mode: string[];
			postName: string[];
			preName: string[];
			reward: number[];
			titleName: string[];
			zones: string[];
		};
		breadcrumbManager: {
			completeBreadcrumb(t: unknown, i: unknown): unknown;
			init(t: unknown, i: unknown): void;
			isBreadcrumbComplete(t: unknown, i: unknown): unknown;
			resetBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
			resetBreadcrumbs(t: unknown): void;
			_onBreadcrumbCompleted: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			breadcrumbConfig: {
				addFeature(t: unknown): unknown;
				setup(): void;
				features: unknown /* too deep */;
			};
			dataSource: {
				_updated: boolean;
				updated: boolean;
				get(t: unknown): unknown;
				getCompletedQuests(t: unknown): unknown;
				getDataAndClear(): unknown;
				getDungeonSchema(t: unknown): unknown;
				getDungeonState(t: unknown, i: unknown): unknown;
				getZoneVars(t: unknown, i: unknown, n: unknown): unknown;
				set(t: unknown, i: unknown): void;
				setData(t: unknown): void;
				_dungeonStates: unknown /* too deep */;
				data: unknown /* too deep */;
			};
			onBreadcrumbCompleted: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		classModeController: {
			getInClassDisabledZones(): unknown;
			isClassMode(): unknown;
			isLockedZone(t: unknown): unknown;
			onClassMode(t: unknown, i: unknown): void;
			setClassMode(): void;
			lockedMaps: never[];
			lockedZones: string[];
		};
		colorReplaceController: {
			checkColorAsset(t: unknown, i: unknown, n: unknown, e: unknown): void;
			clearCache(t: unknown): void;
			clearEntries(t: unknown): unknown;
			generateAssetName(t: unknown, i: unknown): unknown;
			generateNewColor(t: unknown, i: unknown, n: unknown, e: unknown): void;
			getColorReplacedSprite(i: unknown, n: unknown, e: unknown, s: unknown): void;
			getColorReplacedSpriteGL(t: unknown, i: unknown, n: unknown): void;
			onBaseColorReady(t: unknown, i: unknown, n: unknown): void;
			pixelColorReplace(t: unknown): unknown;
			safeCallback(t: unknown, i: unknown): void;
			textureGenerated(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			baseColor: never[];
			baseDictionary: {};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			isBaseReady: {};
			isColorReady: {};
			newColor: never[];
		};
		create: {
			achievement(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			advButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			animatedSpineNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			animatedSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			aspenFrostBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bonfireBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			button(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown): unknown;
			character(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
			cloudBoss(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			conjureCubeButton(t: unknown, i: unknown, n: unknown): unknown;
			dungeonIndicator(t: unknown, i: unknown): unknown;
			element(t: unknown, i: unknown, n: unknown): unknown;
			fillBar(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
			follow(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			font(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			forestBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			houseItem(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			hudButton(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			indicator(t: unknown, i: unknown): unknown;
			item(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			monster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			monsterEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, c: unknown, a: unknown, f: unknown, b: unknown): unknown;
			nameFont(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			nicknamerPedestal(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			panel(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			panelButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			player(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown): unknown;
			progressBar(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			scrollBar(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			shadowWyrmBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			shiverchillBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			slider(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			snow(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spineNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			spriteLite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			stackButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			textButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			timer(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			timerControl(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			titanIndicator(t: unknown, i: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		dialogue: {
			create(): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		dialogues: {
			get(t: unknown, i: unknown): unknown;
			data: {
				"bargo-bunny": unknown /* too deep */;
				benni: unknown /* too deep */;
				bok: unknown /* too deep */;
				broccolina: unknown /* too deep */;
				cebollini: unknown /* too deep */;
				"don-zorro": unknown /* too deep */;
				eugene: unknown /* too deep */;
				eve: unknown /* too deep */;
				flora: unknown /* too deep */;
				florian: unknown /* too deep */;
				gale: unknown /* too deep */;
				harriet: unknown /* too deep */;
				harvey: unknown /* too deep */;
				howard_cornelius: unknown /* too deep */;
				jim: unknown /* too deep */;
				julia_ghoulia: unknown /* too deep */;
				mama_star: unknown /* too deep */;
				merchant: unknown /* too deep */;
				"mozza-ella": unknown /* too deep */;
				noot: unknown /* too deep */;
				pippet: unknown /* too deep */;
				potion: unknown /* too deep */;
				professor_scoog: unknown /* too deep */;
				puppetmaster: unknown /* too deep */;
				"sir-vey": unknown /* too deep */;
				slime_guard: unknown /* too deep */;
				slime_queen: unknown /* too deep */;
				slime_worker: unknown /* too deep */;
				slurpy: unknown /* too deep */;
				swoopy: unknown /* too deep */;
				toy: unknown /* too deep */;
				verna: unknown /* too deep */;
				winterfest: unknown /* too deep */;
			};
		};
		education: {
			isNew: boolean;
			originalBGMVolume: null;
			rankUpArray: null;
			answerQuestion(t: unknown, i: unknown, n: unknown): void;
			closeFull(): void;
			closeQuestion(): void;
			createVideoLesson(t: unknown, i: unknown): unknown;
			disableLogging(): void;
			doesSkillIDHaveLesson(t: unknown): unknown;
			enableLogging(): void;
			finishAssignment(t: unknown): void;
			finishGrade(t: unknown): void;
			finishPlacement(t: unknown): void;
			getAllTopicBadges(): unknown;
			getAvailableLessonReport(): unknown;
			getCurrentAlgorithm(): unknown;
			getEducationSystemAPI(): unknown;
			getMasteredSkills(): unknown;
			getRankUpBadges(): unknown;
			getStudentData(t: unknown): unknown;
			getVideoLessonSignedUrls(t: unknown): void;
			initialize(t: unknown): void;
			instantWinDialogueCallback(t: unknown): void;
			isVideoLessonActive(): unknown;
			openFull(): void;
			processAnswerResponses(): void;
			question(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			reduceBGMVolumeBeforeQuestion(): void;
			restoreBGMVolumeAfterQuestion(): void;
			sendEducationEvent(t: unknown): void;
			showBannerComplete(): void;
			showGameChallenge(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): void;
			showProgressBar(t: unknown, i: unknown): void;
			updateBreadcrumbs(t: unknown): unknown;
			updatePlanStudent(t: unknown): void;
			updateStrandBasedPlacementTest(t: unknown): void;
			updateUser(t: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		effects: {
			batworks(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			bountyComplete(t: unknown, i: unknown): void;
			characterImage(t: unknown, i: unknown, n: unknown): void;
			characterText(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
			chatBubble(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			cleanup(t: unknown): void;
			confetti(t: unknown, i: unknown, n: unknown): void;
			do2DParabolicTween(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): void;
			do3DParabolicTween(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): void;
			explode(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): void;
			fadeFlyingImage(t: unknown, i: unknown, n: unknown, e: unknown): void;
			fire(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): void;
			firework(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			flashText(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): unknown;
			goldWork(t: unknown, i: unknown, n: unknown): void;
			icyworks(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			playFX(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): void;
			portalEffect(t: unknown, i: unknown, n: unknown): void;
			pumpkipuff(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			resizeContainer(t: unknown, i: unknown, n: unknown): void;
			setSource(t: unknown): void;
			shake(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			snowball(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			spellLearned(t: unknown, i: unknown, n: unknown): void;
			waterBalloon(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			screen: {
				_loadCompleteSent: boolean;
				complete: boolean;
				fadeInSet: boolean;
				hasBroadcastedInfo: boolean;
				hideHex: boolean;
				isMapScreen: boolean;
				showMenu: boolean;
				walkEnabled: boolean;
				frameUntilAddNextPlayer: number;
				startX: number;
				startY: number;
				tileSize: number;
				_key: string;
				key: string;
				saveTag: string;
				screenName: string;
				zoneName: string;
				_friendListLoadTimeoutID: null;
				screenData: null;
				previousMapData: undefined;
				previousZone: undefined;
				addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addBlock(t: unknown, i: unknown, n: unknown): unknown;
				addBounty(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown): unknown;
				addChest(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addClickableArea(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				addClickableEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
				addClickableMoveEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
				addCollect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
				addConstructedQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addDoor(t: unknown, i: unknown): void;
				addEvent(t: unknown, i: unknown): void;
				addEventWithCallback(t: unknown, i: unknown): void;
				addFireflyEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				addFollow(t: unknown, i: unknown): unknown;
				addGnome(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMimic(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMonster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
				addNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addPathingIcon(t: unknown, i: unknown): void;
				addPippet(t: unknown, i: unknown, n: unknown): unknown;
				addPlayer(t: unknown): void;
				addQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addWizard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				arePopupsEnabled(): unknown;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				canAddUsersToScreen(): unknown;
				chatPlayer(t: unknown): void;
				create(): void;
				createBackground(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				endFX(): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getInjectedValue(t: unknown): unknown;
				hideChat(t: unknown): void;
				hideOtherPlayer(t: unknown): unknown;
				init(): void;
				initListeners(): void;
				initMap(t: unknown, i: unknown, n: unknown, e: unknown): void;
				initScene(t: unknown, i: unknown): void;
				listener(t: unknown, i: unknown): unknown;
				movePlayer(t: unknown): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClick(t: unknown): void;
				onDebugAutoClickElement(i: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onDoorClick(t: unknown, i: unknown): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				onMessage(t: unknown): void;
				onPlayerFullInfo(t: unknown): void;
				onPlayerJoined(t: unknown): void;
				onPlayerLeft(t: unknown): void;
				onPlayerList(t: unknown): unknown;
				openFeed(t: unknown): void;
				paused(): void;
				playerEffect(t: unknown): void;
				preload(): void;
				preprocess(): unknown;
				process(t: unknown): void;
				processAddCollect(t: unknown): void;
				processPopups(t: unknown): unknown;
				removeFollow(t: unknown): void;
				removePlayer(t: unknown): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setFakePlayer(t: unknown): void;
				showCollisions(t: unknown): void;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(i: unknown, n: unknown): unknown;
				startFX(): void;
				stopListeners(): void;
				transformPlayer(t: unknown): void;
				triggerElementClick(t: unknown): void;
				update(): void;
				updatePlayer(t: unknown): void;
				pendingCoordinates: Map<never, never>;
				_background: unknown /* too deep */;
				_bgSprite: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				_world: unknown /* too deep */;
				above: unknown /* too deep */;
				aboveGameObject: unknown /* too deep */;
				add: unknown /* too deep */;
				area: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				below: unknown /* too deep */;
				belowGameObject: unknown /* too deep */;
				clickAreas: unknown /* too deep */;
				content: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				data: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				events: unknown /* too deep */;
				floor: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menuBar: unknown /* too deep */;
				menus: unknown /* too deep */;
				metricsManager: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				path: unknown /* too deep */;
				pendingPlayers: unknown /* too deep */;
				playerList: unknown /* too deep */;
				playersInfo: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				questProgress: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
				user: unknown /* too deep */;
				zone: unknown /* too deep */;
			};
		};
		event: {
			eventID: number;
			create(): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		eventBroadcaster: {
			broadcast(t: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			listeners: unknown /* too deep */[];
		};
		friendsListNetworkHandler: {
			hasReceivedClass: boolean;
			hasReceivedFriends: boolean;
			hasReceivedFriendsAppearance: boolean;
			hasReceivedFriendsAppearanceOfActualFriends: boolean;
			friendsCap: number;
			pendingRequests: number;
			acceptFriendRequest(t: unknown, i: unknown): void;
			acceptFriendRequestSuccess(t: unknown, n: unknown, e: unknown): void;
			broadcastSocialEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			cancelFriendRequest(t: unknown): void;
			cancelFriendRequestSuccess(t: unknown, n: unknown): void;
			clearFriendRequestsCache(): void;
			fetchClassmates(): void;
			getFriend(t: unknown): unknown;
			getFriendQuestProgress(t: unknown): unknown;
			getFriendRequestList(t: unknown, i: unknown): void;
			getFriendRequestListSuccess(t: unknown): void;
			getFriendsCap(): unknown;
			getFriendsList(): void;
			getFriendsListSuccess(t: unknown): void;
			getTotalFriendRequests(t: unknown): void;
			getTotalFriendRequestsFailure(): void;
			getTotalFriendRequestsSuccess(t: unknown, i: unknown): void;
			getUserAppearance(t: unknown, i: unknown): void;
			getUserData(t: unknown): void;
			hasPendingRequests(): unknown;
			isClassmatesListDownloaded(): unknown;
			isFriendsListDownloaded(): unknown;
			networkCallFailure(t: unknown, i: unknown): void;
			onCancelFriendRequestClose(t: unknown): void;
			onGetUserAppearance(t: unknown, i: unknown): void;
			processClassmates(t: unknown): void;
			rejectFriendRequest(t: unknown, i: unknown): void;
			rejectFriendRequestSuccess(t: unknown, n: unknown, e: unknown): void;
			removeFriend(t: unknown): void;
			removeFriendSuccess(t: unknown, n: unknown): void;
			sendFriendRequest(t: unknown): void;
			sendFriendRequestSuccess(t: unknown, i: unknown): void;
			setup(): void;
			shouldFetchClassmates(): unknown;
			showGenericNetworkError(): void;
			classList: unknown /* too deep */[];
			friendRequestList: never[];
			friendsList: never[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		game: {
			_paused: boolean;
			_pausedByCode: boolean;
			isBooted: boolean;
			paused: boolean;
			pausedByCode: boolean;
			transparent: boolean;
			versioned: boolean;
			_height: number;
			_width: number;
			broadcastId: number;
			height: number;
			resolution: number;
			width: number;
			clientVersion: string;
			windowHeight: undefined;
			windowWidth: undefined;
			boot(): void;
			bootSystems(): void;
			createApp(i: unknown, n: unknown): unknown;
			createSystems(): void;
			destroy(): void;
			focusGain(t: unknown): void;
			focusLoss(t: unknown): void;
			gamePaused(t: unknown): void;
			gameResumed(t: unknown): void;
			init(): void;
			pauseGame(t: unknown): void;
			postUpdate(t: unknown): void;
			showDebugHeader(): void;
			toggleFpsGraph(): void;
			update(i: unknown): void;
			canvas: HTMLCanvasElement;
			parent: HTMLCanvasElement;
			_add: {
				audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				existing(t: unknown): unknown;
				graphics(t: unknown, i: unknown, n: unknown): unknown;
				group(t: unknown, i: unknown, n: unknown): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
				sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
				tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				tween(t: unknown, i: unknown, n: unknown): unknown;
				game: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			_app: {
				_resizeId: null;
				_resizeTo: null;
				cancelResize(): void;
				destroy(e: unknown, r: unknown): void;
				queueResize(): unknown;
				render(): void;
				resize(): void;
				start(): void;
				stop(): void;
				view: HTMLCanvasElement;
				_ticker: unknown /* too deep */;
				loader: unknown /* too deep */;
				renderer: unknown /* too deep */;
				screen: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			_cache: {
				addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
				addImage(t: unknown, i: unknown, n: unknown): void;
				addItem(t: unknown, i: unknown, n: unknown): void;
				addJSON(t: unknown, i: unknown): void;
				addRenderTexture(t: unknown, i: unknown): void;
				addSound(t: unknown, i: unknown): void;
				addSpine(t: unknown, i: unknown): void;
				addText(t: unknown, i: unknown): void;
				addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				checkBitmapDataKey(t: unknown): unknown;
				checkFrameData(t: unknown): unknown;
				checkImageKey(t: unknown): unknown;
				checkJSONKey(t: unknown): unknown;
				checkRenderTextureKey(t: unknown): unknown;
				checkSoundKey(t: unknown): unknown;
				checkSpineKey(t: unknown): unknown;
				checkTextKey(t: unknown): unknown;
				deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				getBitmapData(t: unknown): unknown;
				getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
				getFrameData(t: unknown, i: unknown): unknown;
				getImage(t: unknown): unknown;
				getJSON(t: unknown): unknown;
				getKeys(t: unknown): unknown;
				getMap(t: unknown): unknown;
				getRenderTexture(t: unknown): unknown;
				getSound(t: unknown): unknown;
				getSpine(t: unknown): unknown;
				getText(t: unknown): unknown;
				getTexture(t: unknown, i: unknown): unknown;
				hasMap(t: unknown): unknown;
				isSoundDecoded(t: unknown): unknown;
				removeAllItems(): void;
				removeAllItemsOfType(t: unknown): void;
				removeBitmapData(t: unknown): void;
				removeImage(t: unknown): void;
				removeItem(t: unknown, i: unknown): void;
				removeJSON(t: unknown): void;
				removeRenderTexture(t: unknown): void;
				removeSound(t: unknown): void;
				removeSpine(t: unknown): void;
				removeText(t: unknown): void;
				removeTextureAtlas(t: unknown): void;
				_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				_game: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			_config: {
				failIfMajorPerformanceCaveat: boolean;
				roundPixels: boolean;
				height: number;
				width: number;
				parent: string;
			};
			_consoleLogger: {
				_shouldColorCodeLogs: boolean;
				_minimumLogLevel: number;
				_minimumStackTraceLogLevel: number;
				getLogStyle(t: unknown): unknown;
				getTextSytle(): unknown;
				log(t: unknown, i: unknown): void;
				setColoredLogsEnabled(t: unknown): void;
				setLogLevel(t: unknown): void;
			};
			_device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			_input: {
				enabled: boolean;
				pollLocked: boolean;
				recordPointerHistory: boolean;
				resetLocked: boolean;
				_pollCounter: number;
				_x: number;
				_y: number;
				doubleTapRate: number;
				holdRate: number;
				justPressedRate: number;
				justReleasedRate: number;
				maxPointers: number;
				minPriorityID: number;
				multiInputOverride: number;
				pollRate: number;
				recordLimit: number;
				recordRate: number;
				tapRate: number;
				totalActivePointers: number;
				totalInactivePointers: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				customCandidateHandler: null;
				customCandidateHandlerContext: null;
				addMoveCallback(t: unknown, i: unknown): void;
				addPointer(): unknown;
				addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
				boot(t: unknown): void;
				clearEnterCallback(): void;
				countActivePointers(t: unknown): unknown;
				deleteMoveCallback(t: unknown, i: unknown): void;
				destroy(): void;
				executeTouchLockCallbacks(t: unknown, i: unknown): void;
				getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
				getPointer(t: unknown): unknown;
				getPointerFromId(t: unknown): unknown;
				getPointerFromIdentifier(t: unknown): unknown;
				hitTest(t: unknown, i: unknown): unknown;
				preUpdate(): void;
				removeTouchLockCallback(t: unknown, i: unknown): unknown;
				reset(t: unknown): void;
				resetSpeed(t: unknown, i: unknown): void;
				setEnterCallback(t: unknown): void;
				setInteractiveCandidateHandler(t: unknown, i: unknown): void;
				startPointer(t: unknown): unknown;
				stopPointer(t: unknown, i: unknown): unknown;
				update(): void;
				updateChildren(t: unknown): void;
				updateInteractiveItems(): void;
				updatePointer(t: unknown): unknown;
				hitCanvas: HTMLCanvasElement;
				hitContext: CanvasRenderingContext2D;
				_oldPosition: unknown /* too deep */;
				activePointer: unknown /* too deep */;
				circle: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveItems: unknown /* too deep */;
				keyboard: unknown /* too deep */;
				mouse: unknown /* too deep */;
				mousePointer: unknown /* too deep */;
				mouseWheel: unknown /* too deep */;
				mspointer: unknown /* too deep */;
				onDown: unknown /* too deep */;
				onHold: unknown /* too deep */;
				onPointerMove: unknown /* too deep */;
				onTap: unknown /* too deep */;
				onTouchEndEvent: unknown /* too deep */;
				onTouchStartEvent: unknown /* too deep */;
				onUp: unknown /* too deep */;
				pointer1: unknown /* too deep */;
				pointer2: unknown /* too deep */;
				pointerLock: unknown /* too deep */;
				pointers: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				speed: unknown /* too deep */;
				touch: unknown /* too deep */;
			};
			_load: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
			_onPause: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onResume: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_rnd: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
			_scale: {
				_booted: boolean;
				_pageAlignHorizontally: boolean;
				_pageAlignVertically: boolean;
				forceLandscape: boolean;
				forcePortrait: boolean;
				incorrectOrientation: boolean;
				isFullScreen: boolean;
				isLandscape: boolean;
				isPortrait: boolean;
				pageAlignHorizontally: boolean;
				pageAlignVertically: boolean;
				parentIsWindow: boolean;
				_fullScreenScaleMode: number;
				_lastUpdate: number;
				_scaleMode: number;
				_updateThrottle: number;
				_updateThrottleReset: number;
				aspectRatio: number;
				currentScaleMode: number;
				fullScreenScaleMode: number;
				height: number;
				scaleMode: number;
				sourceAspectRatio: number;
				trackParentInterval: number;
				width: number;
				screenOrientation: string;
				_pendingScaleMode: null;
				onResizeContext: null;
				_fullScreenChange(i: unknown): void;
				_fullScreenError(i: unknown): void;
				_gameResumed(): void;
				_orientationChange(i: unknown): void;
				_windowResize(i: unknown): void;
				align(t: unknown, i: unknown): void;
				alignCanvas(t: unknown, i: unknown): void;
				boot(): void;
				cleanupCreatedTarget(): void;
				createFullScreenTarget(): unknown;
				destroy(): void;
				forceOrientation(t: unknown, i: unknown): void;
				fullScreenChange(t: unknown): void;
				fullScreenError(t: unknown): void;
				getParentBounds(t: unknown, i: unknown): unknown;
				orientationChange(t: unknown): void;
				parseConfig(t: unknown): void;
				pauseUpdate(): void;
				prepScreenMode(i: unknown): void;
				preUpdate(): void;
				queueUpdate(t: unknown): void;
				recalculateCanvasOffset(): void;
				reflowCanvas(): void;
				reflowGame(): void;
				refresh(): void;
				resetCanvas(t: unknown, i: unknown): void;
				setExactFit(): void;
				setGameSize(i: unknown, n: unknown): void;
				setMaximum(): void;
				setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
				setResizeCallback(t: unknown, i: unknown): void;
				setShowAll(t: unknown): void;
				setupScale(t: unknown, i: unknown): void;
				signalSizeChange(): void;
				startFullScreen(t: unknown, i: unknown): unknown;
				stopFullScreen(): unknown;
				updateDimensions(i: unknown, n: unknown, e: unknown): void;
				updateLayout(): void;
				updateOrientationState(): unknown;
				updateScalingAndBounds(): void;
				windowResize(t: unknown): void;
				boundingParent: HTMLDivElement;
				parentNode: HTMLCanvasElement;
				_gameSize: unknown /* too deep */;
				_lastReportedCanvasSize: unknown /* too deep */;
				_lastReportedGameSize: unknown /* too deep */;
				_parentBounds: unknown /* too deep */;
				_tempBounds: unknown /* too deep */;
				bounds: unknown /* too deep */;
				canvasOffset: unknown /* too deep */;
				device: unknown /* too deep */;
				dom: unknown /* too deep */;
				enterIncorrectOrientation: unknown /* too deep */;
				game: unknown /* too deep */;
				leaveIncorrectOrientation: unknown /* too deep */;
				margin: unknown /* too deep */;
				onFullScreenChange: unknown /* too deep */;
				onFullScreenError: unknown /* too deep */;
				onFullScreenInit: unknown /* too deep */;
				onOrientationChange: unknown /* too deep */;
				onSizeChange: unknown /* too deep */;
				parentScaleFactor: unknown /* too deep */;
				scaleFactor: unknown /* too deep */;
				scaleFactorInverted: unknown /* too deep */;
				windowConstraints: unknown /* too deep */;
			};
			_sound: {
				_codeMuted: boolean;
				_muted: boolean;
				_watching: boolean;
				connectToMaster: boolean;
				mute: boolean;
				muteOnPause: boolean;
				noAudio: boolean;
				touchLocked: boolean;
				baseLatency: number;
				channels: number;
				volume: number;
				_unlockSource: null;
				_watchCallback: null;
				_watchContext: null;
				_onResumeWebAudioOnClick(): void;
				_resumeWebAudioOnClick(): void;
				add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				boot(): void;
				destroy(): void;
				pauseAll(): void;
				play(t: unknown, i: unknown, n: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(): void;
				removeByKey(t: unknown): unknown;
				resumeAll(): void;
				resumeWebAudio(): unknown;
				setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
				setMute(): void;
				setTouchLock(): void;
				setTouchUnlock(): void;
				stopAll(): void;
				unlock(): unknown;
				unsetMute(): void;
				update(): void;
				context: AudioContext;
				emptyBuffer: AudioBuffer;
				_sounds: unknown /* too deep */;
				_watchList: unknown /* too deep */;
				game: unknown /* too deep */;
				onMute: unknown /* too deep */;
				onSoundDecode: unknown /* too deep */;
				onTouchUnlock: unknown /* too deep */;
				onUnMute: unknown /* too deep */;
				onVolumeChange: unknown /* too deep */;
				sounds: unknown /* too deep */;
			};
			_stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_state: {
				_clearWorld: boolean;
				current: string;
				_pendingState: null;
				add(t: unknown, i: unknown, n: unknown): unknown;
				boot(): void;
				clearCurrentState(): void;
				destroy(): void;
				get(t: unknown): unknown;
				getCurrentState(): unknown;
				loadComplete(): void;
				pause(): void;
				preUpdate(): unknown;
				remove(t: unknown): void;
				resume(): void;
				setCurrentState(t: unknown): void;
				start(t: unknown, i: unknown): void;
				update(): void;
				_states: Map<string, unknown /* too deep */>;
				states: Map<string, unknown /* too deep */>;
				_current: unknown /* too deep */;
				_initArgs: unknown /* too deep */;
				_onStateChange: unknown /* too deep */;
				game: unknown /* too deep */;
				onStateChange: unknown /* too deep */;
			};
			_time: {
				_deltaMS: number;
				_pauseStarted: number;
				_prevTimeMS: number;
				_started: number;
				_timeMS: number;
				deltaMS: number;
				desiredFps: number;
				pauseDuration: number;
				prevTimeMS: number;
				timeMS: number;
				timeToCall: number;
				add(t: unknown): unknown;
				boot(): void;
				create(t: unknown): unknown;
				elapsedSecondsSince(t: unknown): unknown;
				elapsedSince(t: unknown): unknown;
				gamePaused(): void;
				gameResumed(): void;
				removeAll(): void;
				reset(): void;
				setTime(t: unknown): void;
				totalElapsedSeconds(): unknown;
				update(t: unknown): void;
				updateTimers(): void;
				_timers: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			_tweens: {
				add(t: unknown, i: unknown, n: unknown): unknown;
				create(t: unknown, i: unknown, n: unknown): unknown;
				destroy(): void;
				findOwnerForTween(t: unknown): unknown;
				getAll(): unknown;
				pauseAll(): void;
				remove(t: unknown): void;
				removeAll(): void;
				removeAllFromOwner(t: unknown): void;
				removeFrom(t: unknown, i: unknown): void;
				removeTweenFromOwner(t: unknown): unknown;
				resumeAll(): void;
				update(): unknown;
				_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
				_tweens: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			add: {
				audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				existing(t: unknown): unknown;
				graphics(t: unknown, i: unknown, n: unknown): unknown;
				group(t: unknown, i: unknown, n: unknown): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
				sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
				tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				tween(t: unknown, i: unknown, n: unknown): unknown;
				game: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			app: {
				_resizeId: null;
				_resizeTo: null;
				cancelResize(): void;
				destroy(e: unknown, r: unknown): void;
				queueResize(): unknown;
				render(): void;
				resize(): void;
				start(): void;
				stop(): void;
				view: HTMLCanvasElement;
				_ticker: unknown /* too deep */;
				loader: unknown /* too deep */;
				renderer: unknown /* too deep */;
				screen: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			broadcaster: {
				broadcastIdCount: number;
				addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
				broadcast(t: unknown, i: unknown, n: unknown): unknown;
				clear(): void;
				hashContext(t: unknown): unknown;
				removeAppListener(t: unknown, i: unknown, n: unknown): void;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
				listeners: unknown /* too deep */;
			};
			cache: {
				addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
				addImage(t: unknown, i: unknown, n: unknown): void;
				addItem(t: unknown, i: unknown, n: unknown): void;
				addJSON(t: unknown, i: unknown): void;
				addRenderTexture(t: unknown, i: unknown): void;
				addSound(t: unknown, i: unknown): void;
				addSpine(t: unknown, i: unknown): void;
				addText(t: unknown, i: unknown): void;
				addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				checkBitmapDataKey(t: unknown): unknown;
				checkFrameData(t: unknown): unknown;
				checkImageKey(t: unknown): unknown;
				checkJSONKey(t: unknown): unknown;
				checkRenderTextureKey(t: unknown): unknown;
				checkSoundKey(t: unknown): unknown;
				checkSpineKey(t: unknown): unknown;
				checkTextKey(t: unknown): unknown;
				deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				getBitmapData(t: unknown): unknown;
				getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
				getFrameData(t: unknown, i: unknown): unknown;
				getImage(t: unknown): unknown;
				getJSON(t: unknown): unknown;
				getKeys(t: unknown): unknown;
				getMap(t: unknown): unknown;
				getRenderTexture(t: unknown): unknown;
				getSound(t: unknown): unknown;
				getSpine(t: unknown): unknown;
				getText(t: unknown): unknown;
				getTexture(t: unknown, i: unknown): unknown;
				hasMap(t: unknown): unknown;
				isSoundDecoded(t: unknown): unknown;
				removeAllItems(): void;
				removeAllItemsOfType(t: unknown): void;
				removeBitmapData(t: unknown): void;
				removeImage(t: unknown): void;
				removeItem(t: unknown, i: unknown): void;
				removeJSON(t: unknown): void;
				removeRenderTexture(t: unknown): void;
				removeSound(t: unknown): void;
				removeSpine(t: unknown): void;
				removeText(t: unknown): void;
				removeTextureAtlas(t: unknown): void;
				_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				_game: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			config: {
				failIfMajorPerformanceCaveat: boolean;
				roundPixels: boolean;
				height: number;
				width: number;
				parent: string;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			fps: {
				_isPendingResumeRecordFPS: boolean;
				_record: boolean;
				record: boolean;
				_framerate: number;
				_frames: number;
				_prevTime: number;
				_rollingCount: number;
				_rollingSum: number;
				endFrame(): void;
				getAverageFramerate(): unknown;
				getFramerate(): unknown;
				timeNow(): unknown;
			};
			frameWorkManager: {
				_frameWorkDone: boolean;
				_frameStartTime: number;
				frameBudget: number;
				frameBudgetRemaining: number;
				frameTimeElapsed: number;
				_now(): void;
				awaitFreeTime(t: unknown, i: unknown): void;
				cancelWork(): unknown;
				flushWorkQueue(): void;
				markFrameEnd(): void;
				markFrameStart(): void;
				_workPromises: unknown /* too deep */;
			};
			input: {
				enabled: boolean;
				pollLocked: boolean;
				recordPointerHistory: boolean;
				resetLocked: boolean;
				_pollCounter: number;
				_x: number;
				_y: number;
				doubleTapRate: number;
				holdRate: number;
				justPressedRate: number;
				justReleasedRate: number;
				maxPointers: number;
				minPriorityID: number;
				multiInputOverride: number;
				pollRate: number;
				recordLimit: number;
				recordRate: number;
				tapRate: number;
				totalActivePointers: number;
				totalInactivePointers: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				customCandidateHandler: null;
				customCandidateHandlerContext: null;
				addMoveCallback(t: unknown, i: unknown): void;
				addPointer(): unknown;
				addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
				boot(t: unknown): void;
				clearEnterCallback(): void;
				countActivePointers(t: unknown): unknown;
				deleteMoveCallback(t: unknown, i: unknown): void;
				destroy(): void;
				executeTouchLockCallbacks(t: unknown, i: unknown): void;
				getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
				getPointer(t: unknown): unknown;
				getPointerFromId(t: unknown): unknown;
				getPointerFromIdentifier(t: unknown): unknown;
				hitTest(t: unknown, i: unknown): unknown;
				preUpdate(): void;
				removeTouchLockCallback(t: unknown, i: unknown): unknown;
				reset(t: unknown): void;
				resetSpeed(t: unknown, i: unknown): void;
				setEnterCallback(t: unknown): void;
				setInteractiveCandidateHandler(t: unknown, i: unknown): void;
				startPointer(t: unknown): unknown;
				stopPointer(t: unknown, i: unknown): unknown;
				update(): void;
				updateChildren(t: unknown): void;
				updateInteractiveItems(): void;
				updatePointer(t: unknown): unknown;
				hitCanvas: HTMLCanvasElement;
				hitContext: CanvasRenderingContext2D;
				_oldPosition: unknown /* too deep */;
				activePointer: unknown /* too deep */;
				circle: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveItems: unknown /* too deep */;
				keyboard: unknown /* too deep */;
				mouse: unknown /* too deep */;
				mousePointer: unknown /* too deep */;
				mouseWheel: unknown /* too deep */;
				mspointer: unknown /* too deep */;
				onDown: unknown /* too deep */;
				onHold: unknown /* too deep */;
				onPointerMove: unknown /* too deep */;
				onTap: unknown /* too deep */;
				onTouchEndEvent: unknown /* too deep */;
				onTouchStartEvent: unknown /* too deep */;
				onUp: unknown /* too deep */;
				pointer1: unknown /* too deep */;
				pointer2: unknown /* too deep */;
				pointerLock: unknown /* too deep */;
				pointers: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				speed: unknown /* too deep */;
				touch: unknown /* too deep */;
			};
			inputDispatcher: {
				dispatchKeyboardEvent(t: unknown, i: unknown): void;
				dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void;
				dispatchMouseEvent(t: unknown, i: unknown): void;
				game: unknown /* too deep */;
			};
			load: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
			onPause: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onResume: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			rnd: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
			scale: {
				_booted: boolean;
				_pageAlignHorizontally: boolean;
				_pageAlignVertically: boolean;
				forceLandscape: boolean;
				forcePortrait: boolean;
				incorrectOrientation: boolean;
				isFullScreen: boolean;
				isLandscape: boolean;
				isPortrait: boolean;
				pageAlignHorizontally: boolean;
				pageAlignVertically: boolean;
				parentIsWindow: boolean;
				_fullScreenScaleMode: number;
				_lastUpdate: number;
				_scaleMode: number;
				_updateThrottle: number;
				_updateThrottleReset: number;
				aspectRatio: number;
				currentScaleMode: number;
				fullScreenScaleMode: number;
				height: number;
				scaleMode: number;
				sourceAspectRatio: number;
				trackParentInterval: number;
				width: number;
				screenOrientation: string;
				_pendingScaleMode: null;
				onResizeContext: null;
				_fullScreenChange(i: unknown): void;
				_fullScreenError(i: unknown): void;
				_gameResumed(): void;
				_orientationChange(i: unknown): void;
				_windowResize(i: unknown): void;
				align(t: unknown, i: unknown): void;
				alignCanvas(t: unknown, i: unknown): void;
				boot(): void;
				cleanupCreatedTarget(): void;
				createFullScreenTarget(): unknown;
				destroy(): void;
				forceOrientation(t: unknown, i: unknown): void;
				fullScreenChange(t: unknown): void;
				fullScreenError(t: unknown): void;
				getParentBounds(t: unknown, i: unknown): unknown;
				orientationChange(t: unknown): void;
				parseConfig(t: unknown): void;
				pauseUpdate(): void;
				prepScreenMode(i: unknown): void;
				preUpdate(): void;
				queueUpdate(t: unknown): void;
				recalculateCanvasOffset(): void;
				reflowCanvas(): void;
				reflowGame(): void;
				refresh(): void;
				resetCanvas(t: unknown, i: unknown): void;
				setExactFit(): void;
				setGameSize(i: unknown, n: unknown): void;
				setMaximum(): void;
				setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
				setResizeCallback(t: unknown, i: unknown): void;
				setShowAll(t: unknown): void;
				setupScale(t: unknown, i: unknown): void;
				signalSizeChange(): void;
				startFullScreen(t: unknown, i: unknown): unknown;
				stopFullScreen(): unknown;
				updateDimensions(i: unknown, n: unknown, e: unknown): void;
				updateLayout(): void;
				updateOrientationState(): unknown;
				updateScalingAndBounds(): void;
				windowResize(t: unknown): void;
				boundingParent: HTMLDivElement;
				parentNode: HTMLCanvasElement;
				_gameSize: unknown /* too deep */;
				_lastReportedCanvasSize: unknown /* too deep */;
				_lastReportedGameSize: unknown /* too deep */;
				_parentBounds: unknown /* too deep */;
				_tempBounds: unknown /* too deep */;
				bounds: unknown /* too deep */;
				canvasOffset: unknown /* too deep */;
				device: unknown /* too deep */;
				dom: unknown /* too deep */;
				enterIncorrectOrientation: unknown /* too deep */;
				game: unknown /* too deep */;
				leaveIncorrectOrientation: unknown /* too deep */;
				margin: unknown /* too deep */;
				onFullScreenChange: unknown /* too deep */;
				onFullScreenError: unknown /* too deep */;
				onFullScreenInit: unknown /* too deep */;
				onOrientationChange: unknown /* too deep */;
				onSizeChange: unknown /* too deep */;
				parentScaleFactor: unknown /* too deep */;
				scaleFactor: unknown /* too deep */;
				scaleFactorInverted: unknown /* too deep */;
				windowConstraints: unknown /* too deep */;
			};
			seededRandom: {
				frac(t: unknown): unknown;
				pick(t: unknown, i: unknown): unknown;
				shuffleArray(t: unknown, i: unknown): unknown;
				randomDataGenerator: unknown /* too deep */;
			};
			sound: {
				_codeMuted: boolean;
				_muted: boolean;
				_watching: boolean;
				connectToMaster: boolean;
				mute: boolean;
				muteOnPause: boolean;
				noAudio: boolean;
				touchLocked: boolean;
				baseLatency: number;
				channels: number;
				volume: number;
				_unlockSource: null;
				_watchCallback: null;
				_watchContext: null;
				_onResumeWebAudioOnClick(): void;
				_resumeWebAudioOnClick(): void;
				add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				boot(): void;
				destroy(): void;
				pauseAll(): void;
				play(t: unknown, i: unknown, n: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(): void;
				removeByKey(t: unknown): unknown;
				resumeAll(): void;
				resumeWebAudio(): unknown;
				setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
				setMute(): void;
				setTouchLock(): void;
				setTouchUnlock(): void;
				stopAll(): void;
				unlock(): unknown;
				unsetMute(): void;
				update(): void;
				context: AudioContext;
				emptyBuffer: AudioBuffer;
				_sounds: unknown /* too deep */;
				_watchList: unknown /* too deep */;
				game: unknown /* too deep */;
				onMute: unknown /* too deep */;
				onSoundDecode: unknown /* too deep */;
				onTouchUnlock: unknown /* too deep */;
				onUnMute: unknown /* too deep */;
				onVolumeChange: unknown /* too deep */;
				sounds: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			state: {
				_clearWorld: boolean;
				current: string;
				_pendingState: null;
				add(t: unknown, i: unknown, n: unknown): unknown;
				boot(): void;
				clearCurrentState(): void;
				destroy(): void;
				get(t: unknown): unknown;
				getCurrentState(): unknown;
				loadComplete(): void;
				pause(): void;
				preUpdate(): unknown;
				remove(t: unknown): void;
				resume(): void;
				setCurrentState(t: unknown): void;
				start(t: unknown, i: unknown): void;
				update(): void;
				_states: Map<string, unknown /* too deep */>;
				states: Map<string, unknown /* too deep */>;
				_current: unknown /* too deep */;
				_initArgs: unknown /* too deep */;
				_onStateChange: unknown /* too deep */;
				game: unknown /* too deep */;
				onStateChange: unknown /* too deep */;
			};
			time: {
				_deltaMS: number;
				_pauseStarted: number;
				_prevTimeMS: number;
				_started: number;
				_timeMS: number;
				deltaMS: number;
				desiredFps: number;
				pauseDuration: number;
				prevTimeMS: number;
				timeMS: number;
				timeToCall: number;
				add(t: unknown): unknown;
				boot(): void;
				create(t: unknown): unknown;
				elapsedSecondsSince(t: unknown): unknown;
				elapsedSince(t: unknown): unknown;
				gamePaused(): void;
				gameResumed(): void;
				removeAll(): void;
				reset(): void;
				setTime(t: unknown): void;
				totalElapsedSeconds(): unknown;
				update(t: unknown): void;
				updateTimers(): void;
				_timers: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			tweens: {
				add(t: unknown, i: unknown, n: unknown): unknown;
				create(t: unknown, i: unknown, n: unknown): unknown;
				destroy(): void;
				findOwnerForTween(t: unknown): unknown;
				getAll(): unknown;
				pauseAll(): void;
				remove(t: unknown): void;
				removeAll(): void;
				removeAllFromOwner(t: unknown): void;
				removeFrom(t: unknown, i: unknown): void;
				removeTweenFromOwner(t: unknown): unknown;
				resumeAll(): void;
				update(): unknown;
				_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
				_tweens: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			world: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		gameContainer: {
			bind(t: unknown): unknown;
			get(t: unknown): unknown;
			hasBinding(t: unknown): unknown;
			rebind(t: unknown): unknown;
			resolve(t: unknown): unknown;
			unbind(t: unknown): void;
			unbindAll(): void;
			inversifyContainer: {
				guid: string;
				_middleware: null;
				parent: null;
				_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
				_planAndResolve(): unknown;
				applyCustomMetadataReader(t: unknown): void;
				applyMiddleware(): unknown;
				bind(t: unknown): unknown;
				createChild(): unknown;
				get(t: unknown): unknown;
				getAll(t: unknown): unknown;
				getAllNamed(t: unknown, n: unknown): unknown;
				getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
				getNamed(t: unknown, n: unknown): unknown;
				getTagged(t: unknown, n: unknown, e: unknown): unknown;
				isBound(t: unknown): unknown;
				isBoundNamed(t: unknown, n: unknown): unknown;
				isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
				load(): unknown;
				rebind(t: unknown): unknown;
				resolve(n: unknown): unknown;
				restore(): void;
				snapshot(): void;
				unbind(t: unknown): void;
				unbindAll(): void;
				unload(): unknown;
				_bindingDictionary: unknown /* too deep */;
				_metadataReader: unknown /* too deep */;
				_snapshots: unknown /* too deep */;
				options: unknown /* too deep */;
			};
			SourceContainer: {
				guid: string;
				_middleware: null;
				parent: null;
				_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
				_planAndResolve(): unknown;
				applyCustomMetadataReader(t: unknown): void;
				applyMiddleware(): unknown;
				bind(t: unknown): unknown;
				createChild(): unknown;
				get(t: unknown): unknown;
				getAll(t: unknown): unknown;
				getAllNamed(t: unknown, n: unknown): unknown;
				getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
				getNamed(t: unknown, n: unknown): unknown;
				getTagged(t: unknown, n: unknown, e: unknown): unknown;
				isBound(t: unknown): unknown;
				isBoundNamed(t: unknown, n: unknown): unknown;
				isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
				load(): unknown;
				rebind(t: unknown): unknown;
				resolve(n: unknown): unknown;
				restore(): void;
				snapshot(): void;
				unbind(t: unknown): void;
				unbindAll(): void;
				unload(): unknown;
				_bindingDictionary: unknown /* too deep */;
				_metadataReader: unknown /* too deep */;
				_snapshots: unknown /* too deep */;
				options: unknown /* too deep */;
			};
		};
		giftBoxController: {
			completeOpenConjureCube(t: unknown, i: unknown): void;
			failedOpenConjureCube(t: unknown): void;
			getGiftBoxesCount(t: unknown): unknown;
			getUnopenedConjureCubesCount(): unknown;
			hasConjureCubes(): unknown;
			isConjureCubeGiftBox(t: unknown): unknown;
			openConjureCube(t: unknown): void;
			receiveGiftBox(t: unknown, i: unknown): void;
			setupGiftBoxes(t: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			giftBoxes: {};
			giftBoxesToOpen: never[];
		};
		giftBoxNetworkHandler: {
			getGiftBoxes(): void;
			getGiftBoxesFailure(): void;
			getGiftBoxesSuccess(t: unknown): void;
			setup(): void;
			startListeners(): void;
			stopListeners(): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		hints: {};
		icon: {
			createFromData(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown): unknown;
			createFromDataAdvanced(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			createIcon(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			createWithQuantity(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			gold(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			iconKey(t: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		load: {
			flagProvider: undefined;
			assets(t: unknown, n: unknown): unknown;
			fileWasCompleted(t: unknown, i: unknown, n: unknown, e: unknown): void;
			fileWasStarted(t: unknown, i: unknown, n: unknown): void;
			isFileLoaded(t: unknown): unknown;
			loadComplete(t: unknown): void;
			loadSpritesheet(t: unknown, i: unknown, n: unknown): void;
			postUpdate(t: unknown): void;
			process(): void;
			processCompletedCallbacks(): void;
			processFile(t: unknown): void;
			processPackCallbacks(t: unknown, i: unknown): void;
			removeAllAssets(t: unknown, i: unknown): void;
			removeAssets(t: unknown): void;
			removeSpine(t: unknown): unknown;
			reset(t: unknown): void;
			sendDownloadMetric(t: unknown): void;
			setLoader(): void;
			_assetsArray: never[];
			_fileDownloadTimes: {
				"atlas-10": unknown /* too deep */;
				"atlas-110": unknown /* too deep */;
				"atlas-121": unknown /* too deep */;
				"atlas-144": unknown /* too deep */;
				"atlas-145": unknown /* too deep */;
				"atlas-148": unknown /* too deep */;
				"atlas-149": unknown /* too deep */;
				"atlas-157": unknown /* too deep */;
				"atlas-158": unknown /* too deep */;
				"atlas-160": unknown /* too deep */;
				"atlas-161": unknown /* too deep */;
				"atlas-166": unknown /* too deep */;
				"atlas-169": unknown /* too deep */;
				"atlas-179": unknown /* too deep */;
				"atlas-18": unknown /* too deep */;
				"atlas-180": unknown /* too deep */;
				"atlas-181": unknown /* too deep */;
				"atlas-189": unknown /* too deep */;
				"atlas-19": unknown /* too deep */;
				"atlas-21": unknown /* too deep */;
				"atlas-22": unknown /* too deep */;
				"atlas-29": unknown /* too deep */;
				"atlas-50": unknown /* too deep */;
				"atlas-8": unknown /* too deep */;
				"atlas-9": unknown /* too deep */;
				"bgm-17": unknown /* too deep */;
				"bgm-3": unknown /* too deep */;
				"female-outfit-46": unknown /* too deep */;
				"female-outfit-63": unknown /* too deep */;
				"icon-fossil-5": unknown /* too deep */;
				"icon-item-34": unknown /* too deep */;
				"icon-pet-4": unknown /* too deep */;
				"icon-pet-94": unknown /* too deep */;
				"icon-weapon-63": unknown /* too deep */;
				"map-pathing": unknown /* too deep */;
				"map-shiverchill-a4": unknown /* too deep */;
				"player-face-13": unknown /* too deep */;
				"player-face-2": unknown /* too deep */;
				"player-hair-1": unknown /* too deep */;
				"player-hat-24": unknown /* too deep */;
				"player-hat-33": unknown /* too deep */;
				"player-head-1": unknown /* too deep */;
				"player-neck-1": unknown /* too deep */;
				"player-weapon-5": unknown /* too deep */;
				"sfx-18": unknown /* too deep */;
				"sfx-19": unknown /* too deep */;
				"sfx-31": unknown /* too deep */;
				"sfx-46": unknown /* too deep */;
				"singleImage-5": unknown /* too deep */;
				"spine-147": unknown /* too deep */;
				"spine-184": unknown /* too deep */;
				"spine-25": unknown /* too deep */;
				"tileset-collisions": unknown /* too deep */;
				"tileset-icecave-new": unknown /* too deep */;
				"tileset-ship-exterior": unknown /* too deep */;
				"tileset-water-new": unknown /* too deep */;
				"voice-10-65": unknown /* too deep */;
			};
			_flagProvider: {
				getClassCodePromptCurriculumBlacklist(): unknown;
				getDataURI(): unknown;
				getFeatureRevisionsURIs(): unknown;
				getMultiplayerClusterForWorld(t: unknown): unknown;
				getValue(t: unknown, i: unknown): unknown;
				getWorkerPath(t: unknown): unknown;
				initializeWithJson(t: unknown): void;
				isEventEnabled(t: unknown): unknown;
				isFeatureEnabled(t: unknown): unknown;
				environment: unknown /* too deep */;
				jsonData: unknown /* too deep */;
			};
			_loader: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			loader: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
		};
		mailNetworkHandler: {
			deleteMail(t: unknown, i: unknown): void;
			deleteMailFailure(): void;
			deleteMailSuccessful(t: unknown, i: unknown): void;
			getAllMail(t: unknown, i: unknown): void;
			getAllMailFailure(): void;
			getAllMailSuccess(t: unknown): void;
			getMailerData(): unknown;
			getTotalMail(t: unknown): void;
			getTotalMailFailure(): void;
			getTotalMailSuccess(t: unknown, i: unknown): void;
			markAsRead(t: unknown, i: unknown): void;
			markAsReadFailure(): void;
			setup(): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			totalMail: {
				total: number;
				totalRead: number;
				totalUnread: number;
				splitTestKeys: unknown /* too deep */;
			};
		};
		messageListener: {
			add(t: unknown, i: unknown, n: unknown): void;
			clear(t: unknown): void;
			onMessage(t: unknown): void;
			receivers: never[];
		};
		metricsManager: {
			_supportsWasm: boolean;
			crashedLastLogin: boolean;
			_averageDownloadSpeed: number;
			_networkRequestCount: number;
			_totalAssetDownloadSize: number;
			_totalAssetDownloadTime: number;
			_totalAssetsDownloaded: number;
			lastGameSessionStartTime: number;
			timeInLoadingMS: number;
			_renderType: string;
			crashedLastTime: string;
			renderType: string;
			timeToPlayMS: null;
			assetDownloaded(t: unknown, i: unknown): void;
			checkForCrash(): void;
			createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
			getCustomMetrics(): unknown;
			getLastGameSessionStartTime(): unknown;
			increaseNetworkRequestCount(): void;
			objectCreated(t: unknown): void;
			objectDestroyed(t: unknown): void;
			sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
			setInBattle(t: unknown): void;
			setLastGameSessionStartTime(t: unknown): void;
			setLastMapLoadStarted(t: unknown): void;
			deviceInfoProvider: {
				getConnection(): unknown;
				getConnectionDownlinkSpeed(): unknown;
				getConnectionEffectiveType(): unknown;
				getConnectionRTT(): unknown;
				getConnectionType(): unknown;
				getDeviceMemory(): unknown;
				getHardwareConcurrency(): unknown;
				getJSHeapSizeLimit(): unknown;
				getPlatformName(): unknown;
				getScreenHeight(): unknown;
				getScreenWidth(): unknown;
				getUsedJSHeapSize(): unknown;
				isVideoAvailable(): unknown;
				isWebGLAvailable(): unknown;
				isWebSocketAvailable(): unknown;
				isWebWorkerAvailable(): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			gameCompleteDataFactory: {
				buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown;
				create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown;
				getGame(): unknown;
				game: unknown /* too deep */;
				gameEventDataBuilder: unknown /* too deep */;
			};
			loadingMetricProperties: never[];
			objectCountProperties: never[];
		};
		notifications: {
			isPlaying: boolean;
			notificationSocialLogin: boolean;
			timerOverride: boolean;
			fetchTimeout: number;
			currentNotification: null;
			timerDispatch: null;
			broadcastSocialFeedEvent(t: unknown, i: unknown, n: unknown): void;
			canPlayNotification(): unknown;
			clearNotificationDispatch(t: unknown): void;
			clearNotifications(t: unknown): void;
			createUserFeed(t: unknown, i: unknown, n: unknown): void;
			createUserFeedFailure(): void;
			createUserFeedSuccess(t: unknown, i: unknown): void;
			deleteNotification(t: unknown, i: unknown): void;
			deleteUserFeed(t: unknown, i: unknown): void;
			deleteUserFeedSuccess(t: unknown, i: unknown): void;
			getConfig(t: unknown): unknown;
			getSocialNotifications(t: unknown): void;
			getUserFeedFailure(): void;
			getUserFeedSuccess(t: unknown): void;
			initGenericNotification(t: unknown): void;
			initMemberNotification(): void;
			initNotificationWithTimer(t: unknown, i: unknown, n: unknown): unknown;
			initSocialNotification(t: unknown, i: unknown, n: unknown): void;
			isPaused(): unknown;
			likeNotification(t: unknown, i: unknown): void;
			likeUserFeed(t: unknown, i: unknown): void;
			likeUserFeedSuccess(t: unknown, i: unknown): void;
			notificationPlayed(): void;
			onPause(): void;
			onResume(): void;
			pause(t: unknown): void;
			playNextNotification(): void;
			playNootDialogue(t: unknown): void;
			playNotification(t: unknown): void;
			pushNotification(t: unknown): void;
			resume(t: unknown): void;
			shareNotification(t: unknown, i: unknown): void;
			shareUserFeed(t: unknown, i: unknown): void;
			shareUserFeedSuccess(t: unknown, i: unknown): void;
			shouldShareMembership(t: unknown, i: unknown): void;
			startFriendTimer(): void;
			startTimer(i: unknown): void;
			stopFriendTimer(): void;
			stopTimer(): void;
			getFeedDate: Date;
			notificationBlockers: Set<never>;
			friendNotificationQueue: never[];
			friendNotificationTimer: {
				loop: boolean;
				pendingDelete: boolean;
				delay: number;
				repeatCount: number;
				tick: number;
				callback(t: unknown): void;
				args: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				timer: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			notificationQueue: never[];
			notificationTimer: {
				loop: boolean;
				pendingDelete: boolean;
				delay: number;
				repeatCount: number;
				tick: number;
				callback(): void;
				args: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				timer: unknown /* too deep */;
			};
		};
		open: {
			chatMenu: null;
			advancedNameChange(t: unknown, i: unknown, n: unknown): void;
			adventureComplete(): unknown;
			adventureContinueRestart(t: unknown): unknown;
			adventureMap(t: unknown, i: unknown): unknown;
			alert(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			archiveEntranceMenu(t: unknown, i: unknown): unknown;
			arena(): void;
			backpack(): void;
			bannerDialog(t: unknown): void;
			battlePotionSelect(t: unknown, i: unknown): unknown;
			boostSelect(t: unknown, i: unknown): void;
			bossRewards(t: unknown, i: unknown, n: unknown): unknown;
			bountyBoard(): void;
			bountyStore(): void;
			card(t: unknown, i: unknown, n: unknown): void;
			character(): void;
			characterDialogue(t: unknown, i: unknown, n: unknown): unknown;
			chat(t: unknown): void;
			choosePet(t: unknown, i: unknown): void;
			classModeMessage(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): void;
			cleanup(): void;
			close(t: unknown): void;
			closeChat(): void;
			confirmationDialog(t: unknown): unknown;
			confirmationDialogNoIconButtons(t: unknown): unknown;
			confirmationDialogWideButtons(t: unknown): unknown;
			confirmPotionUse(t: unknown): void;
			conjureCube(t: unknown): void;
			coOpModal(t: unknown): unknown;
			coOpTeamSelect(t: unknown, i: unknown): unknown;
			dailyQuestionsMenu(t: unknown, i: unknown, n: unknown): unknown;
			dungeonExitMenu(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			dungeonPrizesMenu(t: unknown, i: unknown, n: unknown): unknown;
			dungeonRoulette(t: unknown): unknown;
			epicBoostMachine(t: unknown, i: unknown): void;
			evolutionSummary(t: unknown, i: unknown): unknown;
			firstNameSelector(t: unknown, i: unknown): void;
			friendRequests(t: unknown): void;
			friendsList(): unknown;
			fromFactory(t: unknown): void;
			gotItem(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			heartSummary(t: unknown, i: unknown): unknown;
			hideActiveMenu(): void;
			houseEditorMenu(t: unknown, i: unknown): unknown;
			houseItemInfo(t: unknown, i: unknown, n: unknown): void;
			houseStore(t: unknown, i: unknown, n: unknown): void;
			informationDialog(t: unknown): unknown;
			isMenuOpen(t: unknown): unknown;
			itemInfo(t: unknown, i: unknown, n: unknown): void;
			keystonePedestals(t: unknown): unknown;
			lamplightLevelLock(t: unknown): void;
			learningEfficacySkipPopup(t: unknown, i: unknown, n: unknown): unknown;
			learnMore(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			legacyStore(t: unknown): void;
			mailer(t: unknown, i: unknown, n: unknown): unknown;
			map(t: unknown, i: unknown, n: unknown): void;
			memberAdSuppressionToolTip(t: unknown, i: unknown, n: unknown): unknown;
			membershipInfo(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, o: unknown): unknown;
			membershipParent(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			membershipSchoolAd(t: unknown): unknown;
			membershipSuccess(t: unknown, i: unknown): unknown;
			membershipYouTubeAd(t: unknown, i: unknown, n: unknown): void;
			menuCloseAll(): void;
			menuCloseAllUntil(t: unknown): void;
			menuOpen(t: unknown): void;
			message(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			messageBox(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			messageBoxClose(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			messageBoxGeneric(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			messageBoxOkay(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
			nameChange(t: unknown, i: unknown): void;
			networkError(t: unknown): unknown;
			nicknamer(t: unknown, i: unknown, n: unknown): void;
			openMail(t: unknown): unknown;
			optionsMenu(t: unknown): void;
			orbSelectionMenu(t: unknown): unknown;
			overlayToolTip(t: unknown, i: unknown, n: unknown): unknown;
			parentalLinkAtSchoolPrompt(t: unknown, i: unknown): void;
			parentalLinkSuccessPrompt(t: unknown): unknown;
			parentalLoginPopup(): void;
			petBook(t: unknown): unknown;
			petInfo(t: unknown, i: unknown): unknown;
			pets(): void;
			petsCustomDialog(t: unknown): unknown;
			PopUpModal(t: unknown): unknown;
			pouch(t: unknown, i: unknown, n: unknown): void;
			prefabMenu(t: unknown, i: unknown): unknown;
			pvpPrizes(t: unknown): unknown;
			rating(t: unknown): void;
			registration(t: unknown, i: unknown, n: unknown): void;
			resultsMenu(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			reward(t: unknown, i: unknown): void;
			secureBattleItemInfo(t: unknown, i: unknown, n: unknown): void;
			secureBattlePotionSelect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sendShopLoadEventToGTM(t: unknown, i: unknown, n: unknown): void;
			server(t: unknown, i: unknown, n: unknown): void;
			serverSelectMode(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setActiveMenu(t: unknown): void;
			setActiveRenderMenu(t: unknown): void;
			showVideoPopup(t: unknown, i: unknown): unknown;
			social(t: unknown): void;
			socialFeed(t: unknown, i: unknown): unknown;
			spellSummary(t: unknown, i: unknown): unknown;
			springfestClassModeMessage(t: unknown, i: unknown, n: unknown, e: unknown): void;
			startRegistration(t: unknown, i: unknown): void;
			store(t: unknown, i: unknown, n: unknown): void;
			stylistStore(t: unknown, i: unknown, n: unknown): unknown;
			supportPageDialog(t: unknown): void;
			survey(t: unknown, i: unknown): void;
			titanProgress(t: unknown): unknown;
			topHeavyInformationDialog(t: unknown): unknown;
			towerEntranceMenu(t: unknown, i: unknown): unknown;
			towerExitMenu(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			toyUnlock(t: unknown, i: unknown): void;
			twilightWheelPopup(): void;
			voucherRedemption(t: unknown, i: unknown, n: unknown): unknown;
			wizardNameSelector(t: unknown, i: unknown, n: unknown): void;
			yourPet(t: unknown, i: unknown): unknown;
			yourTeam(t: unknown): unknown;
			zoneProgress(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			_localizer: {
				getText(t: unknown): unknown;
				setDataSource(t: unknown): void;
				dataSource: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			menuLayer: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(i: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				gameObjectRef: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			menus: never[];
			menusGameObject: {
				_isActive: boolean;
				_isActiveInHierarchy: boolean;
				active: boolean;
				activeInHierarchy: boolean;
				_layer: string;
				_name: string;
				layer: string;
				name: string;
				_transform: null;
				transform: null;
				activeInHierarchyChanged(): void;
				addChild(t: unknown): void;
				addChildAt(t: unknown, i: unknown): void;
				addComponent(t: unknown, i: unknown): unknown;
				bringToFront(): void;
				destroy(): void;
				dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
				findChildByName(t: unknown): unknown;
				findComponent(t: unknown): unknown;
				findComponentInChildren(t: unknown, i: unknown): unknown;
				findComponentInParent(t: unknown, i: unknown): unknown;
				findComponents(t: unknown): unknown;
				findComponentsInChildren(t: unknown, i: unknown): unknown;
				getRenderOrder(): unknown;
				hasComponent(t: unknown): unknown;
				isActiveInHierarchy(): unknown;
				isInBack(): unknown;
				isInFront(): unknown;
				removeComponent(t: unknown): void;
				removeFromParent(): unknown;
				sendToBack(): void;
				setLayer(t: unknown, i: unknown): void;
				setParent(t: unknown, i: unknown): unknown;
				setRenderOrder(t: unknown): void;
				update(): void;
				_children: unknown /* too deep */;
				_components: unknown /* too deep */;
				_legacyTransform: unknown /* too deep */;
				_parent: unknown /* too deep */;
				children: unknown /* too deep */;
				components: unknown /* too deep */;
				legacyTransform: unknown /* too deep */;
				onActiveChanged: unknown /* too deep */;
				onActiveInHierarchyChanged: unknown /* too deep */;
				onChildAdded: unknown /* too deep */;
				onChildRemoved: unknown /* too deep */;
				onComponentAdded: unknown /* too deep */;
				onComponentAddedToHierarchy: unknown /* too deep */;
				onComponentRemoved: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onHierarchyChanged: unknown /* too deep */;
				onLayerChanged: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			renderMenus: never[];
		};
		pvp: {
			battleScore(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			chooseAction(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			chooseRandomMonster(i: unknown): unknown;
			endEpicArena(t: unknown, i: unknown): void;
			getBattleLevel(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			initBackupEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initBattle(t: unknown, i: unknown): unknown;
			initEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initMainEnemy(t: unknown, i: unknown): unknown;
			initMetrics(): void;
			initWizardOpponent(t: unknown): unknown;
			onEndBattle(): void;
			replaceOpponentTeam(i: unknown, n: unknown): unknown;
			start(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			startEpicArena(t: unknown, i: unknown, n: unknown): unknown;
			startPVP(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			battleStats: {
				endHealth: number;
				endTime: number;
				enemySpellsCast: number;
				enemySpellsCastFail: number;
				energy: number;
				energyCost: number;
				spellsCast: number;
				spellsFailed: number;
				startHealth: number;
				startTime: number;
				type: string;
				epicAttack: null;
				spellEnergyCost: null;
				battleCustomMeta: unknown /* too deep */;
				consumablesUsed: unknown /* too deep */;
				pets: unknown /* too deep */;
				petsRescued: unknown /* too deep */;
				rescuesSuccessful: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			metricsManager: {
				_supportsWasm: boolean;
				crashedLastLogin: boolean;
				_averageDownloadSpeed: number;
				_networkRequestCount: number;
				_totalAssetDownloadSize: number;
				_totalAssetDownloadTime: number;
				_totalAssetsDownloaded: number;
				lastGameSessionStartTime: number;
				timeInLoadingMS: number;
				_renderType: string;
				crashedLastTime: string;
				renderType: string;
				timeToPlayMS: null;
				assetDownloaded(t: unknown, i: unknown): void;
				checkForCrash(): void;
				createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
				getCustomMetrics(): unknown;
				getLastGameSessionStartTime(): unknown;
				increaseNetworkRequestCount(): void;
				objectCreated(t: unknown): void;
				objectDestroyed(t: unknown): void;
				sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
				setInBattle(t: unknown): void;
				setLastGameSessionStartTime(t: unknown): void;
				setLastMapLoadStarted(t: unknown): void;
				deviceInfoProvider: unknown /* too deep */;
				game: unknown /* too deep */;
				gameCompleteDataFactory: unknown /* too deep */;
				loadingMetricProperties: unknown /* too deep */;
				objectCountProperties: unknown /* too deep */;
			};
		};
		skin: {
			applyFestFlag(): void;
			applySkin(t: unknown, i: unknown): void;
			checkForExclusiveMap(t: unknown): unknown;
			cleanupSkins(): void;
			getActiveFestivals(): unknown;
			getAssets(t: unknown): unknown;
			getButtons(): unknown;
			getFestival(t: unknown): unknown;
			init(t: unknown, i: unknown): unknown;
			isFestivalActive(t: unknown): unknown;
			active: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			gameFestivalsData: unknown /* too deep */[];
		};
		textureAbove: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: unknown /* too deep */;
				colorTextures: unknown /* too deep */;
				disposeRunner: unknown /* too deep */;
				glFramebuffers: unknown /* too deep */;
			};
			orig: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			size: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			textureCacheIds: never[];
		};
		textureBelow: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: unknown /* too deep */;
				colorTextures: unknown /* too deep */;
				disposeRunner: unknown /* too deep */;
				glFramebuffers: unknown /* too deep */;
			};
			orig: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			size: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			textureCacheIds: never[];
		};
		textureMenu: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: unknown /* too deep */;
				colorTextures: unknown /* too deep */;
				disposeRunner: unknown /* too deep */;
				glFramebuffers: unknown /* too deep */;
			};
			orig: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			size: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			textureCacheIds: never[];
		};
		timeManager: {
			isServerDeltaSet: boolean;
			_timezoneOffset: number;
			serverTimeDeltaMs: number;
			getIsServerDeltaSet(): unknown;
			getLocalTimeMs(): unknown;
			getServerTimeDeltaMs(): unknown;
			getServerTimeMs(): unknown;
			getUTCOffset(): unknown;
			setServerTime(t: unknown): void;
		};
		titansNetworkHandler: {
			titan: null;
			getTitan(t: unknown, i: unknown): void;
			getTitanFailure(t: unknown): void;
			getTitans(): void;
			getTitansSuccess(t: unknown): void;
			getTitanSuccess(t: unknown, i: unknown): void;
			getTitanUserData(): void;
			hitTitan(t: unknown, i: unknown): void;
			hitTitanSuccess(t: unknown): void;
			isNewTitan(): unknown;
			isTitanAlive(): unknown;
			networkCallFailure(): void;
			setup(): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		urlProvider: {
			getAPIRootUrl(): unknown;
			getCDNRootUrl(): unknown;
			getCortexRootURL(): unknown;
			getLoaderUrl(): unknown;
			getWorkerPath(t: unknown): unknown;
			environmentProvider: {
				getCurrentEnvironment(): unknown;
				getCurrentEnvironmentByHost(): unknown;
				getEnvironmentString(): unknown;
				getWindowHost(): unknown;
				getWindowQueryString(): unknown;
			};
		};
		world: {
			currentMap: string;
			_(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			canTeleportInto(t: unknown): unknown;
			enter(): void;
			getCurrentCurrency(): unknown;
			getCurrentMap(): unknown;
			getCurrentZone(): unknown;
			getState(t: unknown): unknown;
			getTownState(t: unknown): unknown;
			getWorldDate(): unknown;
			getZone(t: unknown): unknown;
			goToZoneHub(t: unknown): void;
			inDeprecatedZone(): unknown;
			inRestrictedSocialZone(i: unknown): unknown;
			isMathTowerEnabledForPlayer(t: unknown, i: unknown): unknown;
			isValidLocation(t: unknown): unknown;
			isZoneSinglePlayer(i: unknown): unknown;
			playScene(t: unknown): void;
			process(): void;
			setCurrentMap(t: unknown): void;
			setState(t: unknown, i: unknown): void;
			setTownState(t: unknown, i: unknown): void;
			showZoneLocked(t: unknown, i: unknown): void;
			_metricsManager: {
				_supportsWasm: boolean;
				crashedLastLogin: boolean;
				_averageDownloadSpeed: number;
				_networkRequestCount: number;
				_totalAssetDownloadSize: number;
				_totalAssetDownloadTime: number;
				_totalAssetsDownloaded: number;
				lastGameSessionStartTime: number;
				timeInLoadingMS: number;
				_renderType: string;
				crashedLastTime: string;
				renderType: string;
				timeToPlayMS: null;
				assetDownloaded(t: unknown, i: unknown): void;
				checkForCrash(): void;
				createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
				getCustomMetrics(): unknown;
				getLastGameSessionStartTime(): unknown;
				increaseNetworkRequestCount(): void;
				objectCreated(t: unknown): void;
				objectDestroyed(t: unknown): void;
				sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
				setInBattle(t: unknown): void;
				setLastGameSessionStartTime(t: unknown): void;
				setLastMapLoadStarted(t: unknown): void;
				deviceInfoProvider: unknown /* too deep */;
				game: unknown /* too deep */;
				gameCompleteDataFactory: unknown /* too deep */;
				loadingMetricProperties: unknown /* too deep */;
				objectCountProperties: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			pippetEncounterDaily: {
				completeValue: number;
				defaultValue: number;
				questId: number;
				stateName: string;
				complete(): void;
				getSpawn(): unknown;
				hasDateIdChanged(): unknown;
				init(): void;
				isComplete(): unknown;
				isInitialized(): unknown;
				game: unknown /* too deep */;
				player: unknown /* too deep */;
			};
			pippetEncounterSpawn: {
				dialogue: number;
				location: string;
			};
			zones: {
				academy: unknown /* too deep */;
				archives: unknown /* too deep */;
				bonfire_spire: unknown /* too deep */;
				crystal_caverns: unknown /* too deep */;
				darktower: unknown /* too deep */;
				dyno: unknown /* too deep */;
				earthtower: unknown /* too deep */;
				elemental_guardian: unknown /* too deep */;
				forest: unknown /* too deep */;
				house: unknown /* too deep */;
				lamplight: unknown /* too deep */;
				shipwreck_shore: unknown /* too deep */;
				shiverchill: unknown /* too deep */;
				skywatch: unknown /* too deep */;
				tower_town: unknown /* too deep */;
				toyzone: unknown /* too deep */;
			};
		};
	};
	game: {
		_paused: boolean;
		_pausedByCode: boolean;
		isBooted: boolean;
		paused: boolean;
		pausedByCode: boolean;
		transparent: boolean;
		versioned: boolean;
		_height: number;
		_width: number;
		broadcastId: number;
		height: number;
		resolution: number;
		width: number;
		clientVersion: string;
		windowHeight: undefined;
		windowWidth: undefined;
		boot(): void;
		bootSystems(): void;
		createApp(i: unknown, n: unknown): unknown;
		createSystems(): void;
		destroy(): void;
		focusGain(t: unknown): void;
		focusLoss(t: unknown): void;
		gamePaused(t: unknown): void;
		gameResumed(t: unknown): void;
		init(): void;
		pauseGame(t: unknown): void;
		postUpdate(t: unknown): void;
		showDebugHeader(): void;
		toggleFpsGraph(): void;
		update(i: unknown): void;
		canvas: HTMLCanvasElement;
		parent: HTMLCanvasElement;
		_add: {
			audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			existing(t: unknown): unknown;
			graphics(t: unknown, i: unknown, n: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
			sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
			tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			tween(t: unknown, i: unknown, n: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		_app: {
			_resizeId: null;
			_resizeTo: null;
			cancelResize(): void;
			destroy(e: unknown, r: unknown): void;
			queueResize(): unknown;
			render(): void;
			resize(): void;
			start(): void;
			stop(): void;
			view: HTMLCanvasElement;
			_ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		_cache: {
			addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
			addImage(t: unknown, i: unknown, n: unknown): void;
			addItem(t: unknown, i: unknown, n: unknown): void;
			addJSON(t: unknown, i: unknown): void;
			addRenderTexture(t: unknown, i: unknown): void;
			addSound(t: unknown, i: unknown): void;
			addSpine(t: unknown, i: unknown): void;
			addText(t: unknown, i: unknown): void;
			addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			checkBitmapDataKey(t: unknown): unknown;
			checkFrameData(t: unknown): unknown;
			checkImageKey(t: unknown): unknown;
			checkJSONKey(t: unknown): unknown;
			checkRenderTextureKey(t: unknown): unknown;
			checkSoundKey(t: unknown): unknown;
			checkSpineKey(t: unknown): unknown;
			checkTextKey(t: unknown): unknown;
			deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			getBitmapData(t: unknown): unknown;
			getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
			getFrameData(t: unknown, i: unknown): unknown;
			getImage(t: unknown): unknown;
			getJSON(t: unknown): unknown;
			getKeys(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getRenderTexture(t: unknown): unknown;
			getSound(t: unknown): unknown;
			getSpine(t: unknown): unknown;
			getText(t: unknown): unknown;
			getTexture(t: unknown, i: unknown): unknown;
			hasMap(t: unknown): unknown;
			isSoundDecoded(t: unknown): unknown;
			removeAllItems(): void;
			removeAllItemsOfType(t: unknown): void;
			removeBitmapData(t: unknown): void;
			removeImage(t: unknown): void;
			removeItem(t: unknown, i: unknown): void;
			removeJSON(t: unknown): void;
			removeRenderTexture(t: unknown): void;
			removeSound(t: unknown): void;
			removeSpine(t: unknown): void;
			removeText(t: unknown): void;
			removeTextureAtlas(t: unknown): void;
			_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		_config: {
			failIfMajorPerformanceCaveat: boolean;
			roundPixels: boolean;
			height: number;
			width: number;
			parent: string;
		};
		_consoleLogger: {
			_shouldColorCodeLogs: boolean;
			_minimumLogLevel: number;
			_minimumStackTraceLogLevel: number;
			getLogStyle(t: unknown): unknown;
			getTextSytle(): unknown;
			log(t: unknown, i: unknown): void;
			setColoredLogsEnabled(t: unknown): void;
			setLogLevel(t: unknown): void;
		};
		_device: {
			android: boolean;
			fullscreenKeyboard: boolean;
			iOS: boolean;
			isFullScreenSupported: boolean;
			isInitialized: boolean;
			pointerLock: boolean;
			touch: boolean;
			webAudio: boolean;
			browser: number;
			deviceReadyAt: number;
			os: number;
			cancelFullscreen: string;
			requestFullscreen: string;
			wheelEvent: string;
			mspointer: undefined;
			checkFullScreen(): void;
			dispatchSignals(): void;
			isAndroidStockBrowser(): unknown;
			needsTouchUnlock(): unknown;
			readyCheck(): void;
			whenReady(t: unknown, i: unknown): void;
			callbacks: never[];
			onInitialized: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_input: {
			enabled: boolean;
			pollLocked: boolean;
			recordPointerHistory: boolean;
			resetLocked: boolean;
			_pollCounter: number;
			_x: number;
			_y: number;
			doubleTapRate: number;
			holdRate: number;
			justPressedRate: number;
			justReleasedRate: number;
			maxPointers: number;
			minPriorityID: number;
			multiInputOverride: number;
			pollRate: number;
			recordLimit: number;
			recordRate: number;
			tapRate: number;
			totalActivePointers: number;
			totalInactivePointers: number;
			worldX: number;
			worldY: number;
			x: number;
			y: number;
			customCandidateHandler: null;
			customCandidateHandlerContext: null;
			addMoveCallback(t: unknown, i: unknown): void;
			addPointer(): unknown;
			addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
			boot(t: unknown): void;
			clearEnterCallback(): void;
			countActivePointers(t: unknown): unknown;
			deleteMoveCallback(t: unknown, i: unknown): void;
			destroy(): void;
			executeTouchLockCallbacks(t: unknown, i: unknown): void;
			getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
			getPointer(t: unknown): unknown;
			getPointerFromId(t: unknown): unknown;
			getPointerFromIdentifier(t: unknown): unknown;
			hitTest(t: unknown, i: unknown): unknown;
			preUpdate(): void;
			removeTouchLockCallback(t: unknown, i: unknown): unknown;
			reset(t: unknown): void;
			resetSpeed(t: unknown, i: unknown): void;
			setEnterCallback(t: unknown): void;
			setInteractiveCandidateHandler(t: unknown, i: unknown): void;
			startPointer(t: unknown): unknown;
			stopPointer(t: unknown, i: unknown): unknown;
			update(): void;
			updateChildren(t: unknown): void;
			updateInteractiveItems(): void;
			updatePointer(t: unknown): unknown;
			hitCanvas: HTMLCanvasElement;
			hitContext: CanvasRenderingContext2D;
			_oldPosition: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			activePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			circle: {
				_diameter: number;
				_radius: number;
				circumference: number;
				diameter: number;
				radius: number;
				x: number;
				y: number;
				circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
				getBounds(): unknown;
				setTo(t: unknown, i: unknown, n: unknown): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			interactiveItems: {
				_cursor: number;
				total: number;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				first: unknown /* too deep */;
				list: unknown /* too deep */;
				next: unknown /* too deep */;
			};
			keyboard: {
				active: boolean;
				enabled: boolean;
				_i: number;
				_k: number;
				lastChar: string;
				_onKeyDown(i: unknown): void;
				_onKeyPress(i: unknown): void;
				_onKeyUp(i: unknown): void;
				addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
				addKey(t: unknown): unknown;
				addKeyCapture(t: unknown): void;
				addKeys(t: unknown): unknown;
				clearCaptures(): void;
				createCursorKeys(): unknown;
				destroy(): void;
				downDuration(t: unknown, i: unknown): unknown;
				isDown(t: unknown): unknown;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				onDownCallback(arg0: unknown): void;
				onPressCallback(arg0: unknown): void;
				onUpCallback(arg0: unknown): void;
				processKeyDown(t: unknown): void;
				processKeyPress(t: unknown): void;
				processKeyUp(t: unknown): void;
				removeCallbacks(): void;
				removeKey(t: unknown): void;
				removeKeyCapture(t: unknown): void;
				reset(t: unknown): void;
				start(): unknown;
				stop(): void;
				update(): void;
				upDuration(t: unknown, i: unknown): unknown;
				event: KeyboardEvent;
				pressEvent: KeyboardEvent;
				_capture: unknown /* too deep */;
				_keys: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				lastKey: unknown /* too deep */;
			};
			mouse: {
				active: boolean;
				capture: boolean;
				enabled: boolean;
				stopOnGameOut: boolean;
				wheelDelta: number;
				_onMouseDown(i: unknown): void;
				_onMouseMove(i: unknown): void;
				_onMouseOut(i: unknown): void;
				_onMouseOutGlobal(i: unknown): void;
				_onMouseOver(i: unknown): void;
				_onMouseUp(i: unknown): void;
				_onMouseUpGlobal(i: unknown): void;
				addMouseWheelCallback(t: unknown): unknown;
				onMouseDown(t: unknown): void;
				onMouseMove(t: unknown): void;
				onMouseOut(t: unknown): void;
				onMouseOutGlobal(t: unknown): void;
				onMouseOver(t: unknown): void;
				onMouseUp(t: unknown): void;
				onMouseUpGlobal(t: unknown): void;
				removeMouseWheelCallback(t: unknown): void;
				start(): unknown;
				stop(): void;
				event: MouseEvent;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			mousePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			mouseWheel: {
				active: boolean;
				preventDefault: boolean;
				delta: number;
				wheelEventName: string;
				boundOnWheelHandler(arg0: unknown): void;
				onWheelHandler(t: unknown): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				callbackContext: unknown /* too deep */;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mspointer: {
				active: boolean;
				pointerDownCallback: null;
				pointerMoveCallback: null;
				pointerUpCallback: null;
				onPointerDown(i: unknown): void;
				onPointerMove(i: unknown): void;
				onPointerOut(i: unknown): void;
				onPointerOver(i: unknown): void;
				onPointerUp(i: unknown): void;
				onPointerUpGlobal(i: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			onDown: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onHold: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onPointerMove: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTap: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchEndEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchStartEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUp: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			pointer1: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointer2: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointerLock: {
				active: boolean;
				locked: boolean;
				pointerlockchange: undefined;
				pointerLockElement: undefined;
				pointerlockerror: undefined;
				boundOnChangeHandler(arg0: unknown): void;
				boundOnErrorHandler(arg0: unknown): void;
				exit(): void;
				onChangeHandler(t: unknown): void;
				onErrorHandler(t: unknown): void;
				request(): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				game: unknown /* too deep */;
				onChange: unknown /* too deep */;
				onError: unknown /* too deep */;
			};
			pointers: unknown /* too deep */[];
			position: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scale: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			speed: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			touch: {
				active: boolean;
				enabled: boolean;
				consumeDocumentTouches(): void;
				onTouchCancel(t: unknown): void;
				onTouchEnd(t: unknown): void;
				onTouchEnter(t: unknown): void;
				onTouchLeave(t: unknown): void;
				onTouchMove(t: unknown): void;
				onTouchStart(t: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
		};
		_load: {
			isLoading: boolean;
			_crossOrigin: string;
			baseURL: string;
			crossOrigin: string;
			addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
			atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
			audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			fileCompleteCallback(t: unknown, i: unknown): void;
			fileStartCallback(t: unknown): void;
			getMaxParallelDownloads(): unknown;
			getNumLoadedFiles(): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown): void;
			json(t: unknown, i: unknown, n: unknown, e: unknown): void;
			processImage(t: unknown, i: unknown, n: unknown): void;
			processJSON(t: unknown, i: unknown, n: unknown): void;
			processScript(t: unknown, i: unknown): void;
			processSound(t: unknown, i: unknown, n: unknown): void;
			processSpine(t: unknown, i: unknown, n: unknown): void;
			processSpritesheet(t: unknown, i: unknown, n: unknown): void;
			processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			reset(t: unknown): void;
			script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			setupFileCallbacks(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
			spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			start(): void;
			totalQueuedFiles(): unknown;
			_loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			_onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onReset: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_onPause: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		_onResume: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		_rnd: {
			c: number;
			s0: number;
			s1: number;
			s2: number;
			angle(): unknown;
			frac(): unknown;
			hash(t: unknown): unknown;
			integer(): unknown;
			integerInRange(t: unknown, i: unknown): unknown;
			normal(): unknown;
			pick(t: unknown): unknown;
			real(): unknown;
			realInRange(t: unknown, i: unknown): unknown;
			rnd(): unknown;
			shuffle(t: unknown): unknown;
			sign(): unknown;
			sow(t: unknown): void;
			state(t: unknown): unknown;
			uuid(): unknown;
			weightedPick(t: unknown): unknown;
		};
		_scale: {
			_booted: boolean;
			_pageAlignHorizontally: boolean;
			_pageAlignVertically: boolean;
			forceLandscape: boolean;
			forcePortrait: boolean;
			incorrectOrientation: boolean;
			isFullScreen: boolean;
			isLandscape: boolean;
			isPortrait: boolean;
			pageAlignHorizontally: boolean;
			pageAlignVertically: boolean;
			parentIsWindow: boolean;
			_fullScreenScaleMode: number;
			_lastUpdate: number;
			_scaleMode: number;
			_updateThrottle: number;
			_updateThrottleReset: number;
			aspectRatio: number;
			currentScaleMode: number;
			fullScreenScaleMode: number;
			height: number;
			scaleMode: number;
			sourceAspectRatio: number;
			trackParentInterval: number;
			width: number;
			screenOrientation: string;
			_pendingScaleMode: null;
			onResizeContext: null;
			_fullScreenChange(i: unknown): void;
			_fullScreenError(i: unknown): void;
			_gameResumed(): void;
			_orientationChange(i: unknown): void;
			_windowResize(i: unknown): void;
			align(t: unknown, i: unknown): void;
			alignCanvas(t: unknown, i: unknown): void;
			boot(): void;
			cleanupCreatedTarget(): void;
			createFullScreenTarget(): unknown;
			destroy(): void;
			forceOrientation(t: unknown, i: unknown): void;
			fullScreenChange(t: unknown): void;
			fullScreenError(t: unknown): void;
			getParentBounds(t: unknown, i: unknown): unknown;
			orientationChange(t: unknown): void;
			parseConfig(t: unknown): void;
			pauseUpdate(): void;
			prepScreenMode(i: unknown): void;
			preUpdate(): void;
			queueUpdate(t: unknown): void;
			recalculateCanvasOffset(): void;
			reflowCanvas(): void;
			reflowGame(): void;
			refresh(): void;
			resetCanvas(t: unknown, i: unknown): void;
			setExactFit(): void;
			setGameSize(i: unknown, n: unknown): void;
			setMaximum(): void;
			setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setResizeCallback(t: unknown, i: unknown): void;
			setShowAll(t: unknown): void;
			setupScale(t: unknown, i: unknown): void;
			signalSizeChange(): void;
			startFullScreen(t: unknown, i: unknown): unknown;
			stopFullScreen(): unknown;
			updateDimensions(i: unknown, n: unknown, e: unknown): void;
			updateLayout(): void;
			updateOrientationState(): unknown;
			updateScalingAndBounds(): void;
			windowResize(t: unknown): void;
			boundingParent: HTMLDivElement;
			parentNode: HTMLCanvasElement;
			_gameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedCanvasSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedGameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_parentBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_tempBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			bounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			canvasOffset: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			dom: {
				scrollX: number;
				scrollY: number;
				getOffset(t: unknown, i: unknown): unknown;
				getScreenOrientation(): unknown;
				onDeviceReady(t: unknown): void;
				layoutBounds: unknown /* too deep */;
				visualBounds: unknown /* too deep */;
			};
			enterIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			leaveIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			margin: {
				bottom: number;
				left: number;
				right: number;
				top: number;
				x: number;
				y: number;
			};
			onFullScreenChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenError: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenInit: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onOrientationChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSizeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parentScaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactorInverted: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			windowConstraints: {
				bottom: string;
				right: string;
			};
		};
		_sound: {
			_codeMuted: boolean;
			_muted: boolean;
			_watching: boolean;
			connectToMaster: boolean;
			mute: boolean;
			muteOnPause: boolean;
			noAudio: boolean;
			touchLocked: boolean;
			baseLatency: number;
			channels: number;
			volume: number;
			_unlockSource: null;
			_watchCallback: null;
			_watchContext: null;
			_onResumeWebAudioOnClick(): void;
			_resumeWebAudioOnClick(): void;
			add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boot(): void;
			destroy(): void;
			pauseAll(): void;
			play(t: unknown, i: unknown, n: unknown): unknown;
			remove(t: unknown): unknown;
			removeAll(): void;
			removeByKey(t: unknown): unknown;
			resumeAll(): void;
			resumeWebAudio(): unknown;
			setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
			setMute(): void;
			setTouchLock(): void;
			setTouchUnlock(): void;
			stopAll(): void;
			unlock(): unknown;
			unsetMute(): void;
			update(): void;
			context: AudioContext;
			emptyBuffer: AudioBuffer;
			_sounds: never[];
			_watchList: {
				_cursor: number;
				total: number;
				first: null;
				next: null;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				list: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSoundDecode: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchUnlock: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUnMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onVolumeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			sounds: never[];
		};
		_stage: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
		_state: {
			_clearWorld: boolean;
			current: string;
			_pendingState: null;
			add(t: unknown, i: unknown, n: unknown): unknown;
			boot(): void;
			clearCurrentState(): void;
			destroy(): void;
			get(t: unknown): unknown;
			getCurrentState(): unknown;
			loadComplete(): void;
			pause(): void;
			preUpdate(): unknown;
			remove(t: unknown): void;
			resume(): void;
			setCurrentState(t: unknown): void;
			start(t: unknown, i: unknown): void;
			update(): void;
			_states: Map<string, unknown /* too deep */>;
			states: Map<string, unknown /* too deep */>;
			_current: {
				_loadCompleteSent: boolean;
				complete: boolean;
				fadeInSet: boolean;
				hasBroadcastedInfo: boolean;
				hideHex: boolean;
				isMapScreen: boolean;
				showMenu: boolean;
				walkEnabled: boolean;
				frameUntilAddNextPlayer: number;
				startX: number;
				startY: number;
				tileSize: number;
				_key: string;
				key: string;
				saveTag: string;
				screenName: string;
				zoneName: string;
				_friendListLoadTimeoutID: null;
				screenData: null;
				previousMapData: undefined;
				previousZone: undefined;
				addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addBlock(t: unknown, i: unknown, n: unknown): unknown;
				addBounty(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown): unknown;
				addChest(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addClickableArea(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				addClickableEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
				addClickableMoveEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
				addCollect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
				addConstructedQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addDoor(t: unknown, i: unknown): void;
				addEvent(t: unknown, i: unknown): void;
				addEventWithCallback(t: unknown, i: unknown): void;
				addFireflyEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				addFollow(t: unknown, i: unknown): unknown;
				addGnome(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMimic(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMonster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
				addNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addPathingIcon(t: unknown, i: unknown): void;
				addPippet(t: unknown, i: unknown, n: unknown): unknown;
				addPlayer(t: unknown): void;
				addQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addWizard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				arePopupsEnabled(): unknown;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				canAddUsersToScreen(): unknown;
				chatPlayer(t: unknown): void;
				create(): void;
				createBackground(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				endFX(): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getInjectedValue(t: unknown): unknown;
				hideChat(t: unknown): void;
				hideOtherPlayer(t: unknown): unknown;
				init(): void;
				initListeners(): void;
				initMap(t: unknown, i: unknown, n: unknown, e: unknown): void;
				initScene(t: unknown, i: unknown): void;
				listener(t: unknown, i: unknown): unknown;
				movePlayer(t: unknown): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClick(t: unknown): void;
				onDebugAutoClickElement(i: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onDoorClick(t: unknown, i: unknown): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				onMessage(t: unknown): void;
				onPlayerFullInfo(t: unknown): void;
				onPlayerJoined(t: unknown): void;
				onPlayerLeft(t: unknown): void;
				onPlayerList(t: unknown): unknown;
				openFeed(t: unknown): void;
				paused(): void;
				playerEffect(t: unknown): void;
				preload(): void;
				preprocess(): unknown;
				process(t: unknown): void;
				processAddCollect(t: unknown): void;
				processPopups(t: unknown): unknown;
				removeFollow(t: unknown): void;
				removePlayer(t: unknown): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setFakePlayer(t: unknown): void;
				showCollisions(t: unknown): void;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(i: unknown, n: unknown): unknown;
				startFX(): void;
				stopListeners(): void;
				transformPlayer(t: unknown): void;
				triggerElementClick(t: unknown): void;
				update(): void;
				updatePlayer(t: unknown): void;
				pendingCoordinates: Map<never, never>;
				_background: unknown /* too deep */;
				_bgSprite: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				_world: unknown /* too deep */;
				above: unknown /* too deep */;
				aboveGameObject: unknown /* too deep */;
				add: unknown /* too deep */;
				area: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				below: unknown /* too deep */;
				belowGameObject: unknown /* too deep */;
				clickAreas: unknown /* too deep */;
				content: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				data: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				events: unknown /* too deep */;
				floor: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menuBar: unknown /* too deep */;
				menus: unknown /* too deep */;
				metricsManager: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				path: unknown /* too deep */;
				pendingPlayers: unknown /* too deep */;
				playerList: unknown /* too deep */;
				playersInfo: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				questProgress: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
				user: unknown /* too deep */;
				zone: unknown /* too deep */;
			};
			_initArgs: never[];
			_onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		_time: {
			_deltaMS: number;
			_pauseStarted: number;
			_prevTimeMS: number;
			_started: number;
			_timeMS: number;
			deltaMS: number;
			desiredFps: number;
			pauseDuration: number;
			prevTimeMS: number;
			timeMS: number;
			timeToCall: number;
			add(t: unknown): unknown;
			boot(): void;
			create(t: unknown): unknown;
			elapsedSecondsSince(t: unknown): unknown;
			elapsedSince(t: unknown): unknown;
			gamePaused(): void;
			gameResumed(): void;
			removeAll(): void;
			reset(): void;
			setTime(t: unknown): void;
			totalElapsedSeconds(): unknown;
			update(t: unknown): void;
			updateTimers(): void;
			_timers: never[];
			events: {
				autoDestroy: boolean;
				expired: boolean;
				paused: boolean;
				running: boolean;
				_i: number;
				_len: number;
				_marked: number;
				_newTick: number;
				_now: number;
				_pauseStarted: number;
				_pauseTotal: number;
				_started: number;
				duration: number;
				elapsed: number;
				length: number;
				ms: number;
				next: number;
				nextTick: number;
				seconds: number;
				timeCap: number;
				addTimer(t: unknown, i: unknown, n: unknown): unknown;
				adjustEvents(t: unknown): void;
				clearPendingEvents(): void;
				createTimer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				destroy(): void;
				loop(t: unknown, i: unknown, n: unknown): unknown;
				order(): void;
				pause(): void;
				remove(t: unknown): unknown;
				removeAll(): void;
				repeat(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				resume(): void;
				sortHandler(t: unknown, i: unknown): unknown;
				start(t: unknown): void;
				stop(t: unknown): void;
				update(t: unknown): unknown;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				onComplete: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		_tweens: {
			add(t: unknown, i: unknown, n: unknown): unknown;
			create(t: unknown, i: unknown, n: unknown): unknown;
			destroy(): void;
			findOwnerForTween(t: unknown): unknown;
			getAll(): unknown;
			pauseAll(): void;
			remove(t: unknown): void;
			removeAll(): void;
			removeAllFromOwner(t: unknown): void;
			removeFrom(t: unknown, i: unknown): void;
			removeTweenFromOwner(t: unknown): unknown;
			resumeAll(): void;
			update(): unknown;
			_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
			_tweens: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		add: {
			audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			existing(t: unknown): unknown;
			graphics(t: unknown, i: unknown, n: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
			sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
			tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			tween(t: unknown, i: unknown, n: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		app: {
			_resizeId: null;
			_resizeTo: null;
			cancelResize(): void;
			destroy(e: unknown, r: unknown): void;
			queueResize(): unknown;
			render(): void;
			resize(): void;
			start(): void;
			stop(): void;
			view: HTMLCanvasElement;
			_ticker: {
				_protected: boolean;
				autoStart: boolean;
				started: boolean;
				_lastFrame: number;
				_maxElapsedMS: number;
				_minElapsedMS: number;
				_requestId: number;
				count: number;
				deltaMS: number;
				deltaTime: number;
				elapsedMS: number;
				FPS: number;
				lastTime: number;
				maxFPS: number;
				minFPS: number;
				speed: number;
				_addListener(t: unknown): unknown;
				_cancelIfNeeded(): void;
				_requestIfNeeded(): void;
				_startIfPossible(): void;
				_tick(e: unknown): void;
				add(e: unknown, r: unknown, i: unknown): unknown;
				addOnce(e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				remove(t: unknown, e: unknown): unknown;
				start(): void;
				stop(): void;
				update(t: unknown): unknown;
				_head: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		broadcaster: {
			broadcastIdCount: number;
			addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			broadcast(t: unknown, i: unknown, n: unknown): unknown;
			clear(): void;
			hashContext(t: unknown): unknown;
			removeAppListener(t: unknown, i: unknown, n: unknown): void;
			callbacks: {
				bId0: unknown /* too deep */;
				bId10: unknown /* too deep */;
				bId11: unknown /* too deep */;
				bId12: unknown /* too deep */;
				bId13: unknown /* too deep */;
				bId15: unknown /* too deep */;
				bId16: unknown /* too deep */;
				bId19: unknown /* too deep */;
				bId2: unknown /* too deep */;
				bId20: unknown /* too deep */;
				Card: unknown /* too deep */;
				FriendsList: unknown /* too deep */;
				FriendsListOfActualFriends: unknown /* too deep */;
				HUD: unknown /* too deep */;
				mount: unknown /* too deep */;
				NetworkHandlers: unknown /* too deep */;
				ProdigyMailer: unknown /* too deep */;
				ProdigyMailerButton: unknown /* too deep */;
				ProdigyMailView: unknown /* too deep */;
				Titan: unknown /* too deep */;
				UI: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			listeners: {
				bId0: unknown /* too deep */;
				bId10: unknown /* too deep */;
				bId11: unknown /* too deep */;
				bId12: unknown /* too deep */;
				bId13: unknown /* too deep */;
				bId15: unknown /* too deep */;
				bId16: unknown /* too deep */;
				bId19: unknown /* too deep */;
				bId2: unknown /* too deep */;
				bId20: unknown /* too deep */;
				Card: unknown /* too deep */;
				FriendsList: unknown /* too deep */;
				FriendsListOfActualFriends: unknown /* too deep */;
				HUD: unknown /* too deep */;
				mount: unknown /* too deep */;
				NetworkHandlers: unknown /* too deep */;
				ProdigyMailer: unknown /* too deep */;
				ProdigyMailerButton: unknown /* too deep */;
				ProdigyMailView: unknown /* too deep */;
				Titan: unknown /* too deep */;
				UI: unknown /* too deep */;
			};
		};
		cache: {
			addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
			addImage(t: unknown, i: unknown, n: unknown): void;
			addItem(t: unknown, i: unknown, n: unknown): void;
			addJSON(t: unknown, i: unknown): void;
			addRenderTexture(t: unknown, i: unknown): void;
			addSound(t: unknown, i: unknown): void;
			addSpine(t: unknown, i: unknown): void;
			addText(t: unknown, i: unknown): void;
			addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			checkBitmapDataKey(t: unknown): unknown;
			checkFrameData(t: unknown): unknown;
			checkImageKey(t: unknown): unknown;
			checkJSONKey(t: unknown): unknown;
			checkRenderTextureKey(t: unknown): unknown;
			checkSoundKey(t: unknown): unknown;
			checkSpineKey(t: unknown): unknown;
			checkTextKey(t: unknown): unknown;
			deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			getBitmapData(t: unknown): unknown;
			getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
			getFrameData(t: unknown, i: unknown): unknown;
			getImage(t: unknown): unknown;
			getJSON(t: unknown): unknown;
			getKeys(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getRenderTexture(t: unknown): unknown;
			getSound(t: unknown): unknown;
			getSpine(t: unknown): unknown;
			getText(t: unknown): unknown;
			getTexture(t: unknown, i: unknown): unknown;
			hasMap(t: unknown): unknown;
			isSoundDecoded(t: unknown): unknown;
			removeAllItems(): void;
			removeAllItemsOfType(t: unknown): void;
			removeBitmapData(t: unknown): void;
			removeImage(t: unknown): void;
			removeItem(t: unknown, i: unknown): void;
			removeJSON(t: unknown): void;
			removeRenderTexture(t: unknown): void;
			removeSound(t: unknown): void;
			removeSpine(t: unknown): void;
			removeText(t: unknown): void;
			removeTextureAtlas(t: unknown): void;
			_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		config: {
			failIfMajorPerformanceCaveat: boolean;
			roundPixels: boolean;
			height: number;
			width: number;
			parent: string;
		};
		device: {
			android: boolean;
			fullscreenKeyboard: boolean;
			iOS: boolean;
			isFullScreenSupported: boolean;
			isInitialized: boolean;
			pointerLock: boolean;
			touch: boolean;
			webAudio: boolean;
			browser: number;
			deviceReadyAt: number;
			os: number;
			cancelFullscreen: string;
			requestFullscreen: string;
			wheelEvent: string;
			mspointer: undefined;
			checkFullScreen(): void;
			dispatchSignals(): void;
			isAndroidStockBrowser(): unknown;
			needsTouchUnlock(): unknown;
			readyCheck(): void;
			whenReady(t: unknown, i: unknown): void;
			callbacks: never[];
			onInitialized: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		fps: {
			_isPendingResumeRecordFPS: boolean;
			_record: boolean;
			record: boolean;
			_framerate: number;
			_frames: number;
			_prevTime: number;
			_rollingCount: number;
			_rollingSum: number;
			endFrame(): void;
			getAverageFramerate(): unknown;
			getFramerate(): unknown;
			timeNow(): unknown;
		};
		frameWorkManager: {
			_frameWorkDone: boolean;
			_frameStartTime: number;
			frameBudget: number;
			frameBudgetRemaining: number;
			frameTimeElapsed: number;
			_now(): void;
			awaitFreeTime(t: unknown, i: unknown): void;
			cancelWork(): unknown;
			flushWorkQueue(): void;
			markFrameEnd(): void;
			markFrameStart(): void;
			_workPromises: never[];
		};
		input: {
			enabled: boolean;
			pollLocked: boolean;
			recordPointerHistory: boolean;
			resetLocked: boolean;
			_pollCounter: number;
			_x: number;
			_y: number;
			doubleTapRate: number;
			holdRate: number;
			justPressedRate: number;
			justReleasedRate: number;
			maxPointers: number;
			minPriorityID: number;
			multiInputOverride: number;
			pollRate: number;
			recordLimit: number;
			recordRate: number;
			tapRate: number;
			totalActivePointers: number;
			totalInactivePointers: number;
			worldX: number;
			worldY: number;
			x: number;
			y: number;
			customCandidateHandler: null;
			customCandidateHandlerContext: null;
			addMoveCallback(t: unknown, i: unknown): void;
			addPointer(): unknown;
			addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
			boot(t: unknown): void;
			clearEnterCallback(): void;
			countActivePointers(t: unknown): unknown;
			deleteMoveCallback(t: unknown, i: unknown): void;
			destroy(): void;
			executeTouchLockCallbacks(t: unknown, i: unknown): void;
			getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
			getPointer(t: unknown): unknown;
			getPointerFromId(t: unknown): unknown;
			getPointerFromIdentifier(t: unknown): unknown;
			hitTest(t: unknown, i: unknown): unknown;
			preUpdate(): void;
			removeTouchLockCallback(t: unknown, i: unknown): unknown;
			reset(t: unknown): void;
			resetSpeed(t: unknown, i: unknown): void;
			setEnterCallback(t: unknown): void;
			setInteractiveCandidateHandler(t: unknown, i: unknown): void;
			startPointer(t: unknown): unknown;
			stopPointer(t: unknown, i: unknown): unknown;
			update(): void;
			updateChildren(t: unknown): void;
			updateInteractiveItems(): void;
			updatePointer(t: unknown): unknown;
			hitCanvas: HTMLCanvasElement;
			hitContext: CanvasRenderingContext2D;
			_oldPosition: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			activePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			circle: {
				_diameter: number;
				_radius: number;
				circumference: number;
				diameter: number;
				radius: number;
				x: number;
				y: number;
				circumferencePoint(t: unknown, i: unknown, n: unknown): unknown;
				getBounds(): unknown;
				setTo(t: unknown, i: unknown, n: unknown): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			interactiveItems: {
				_cursor: number;
				total: number;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				first: unknown /* too deep */;
				list: unknown /* too deep */;
				next: unknown /* too deep */;
			};
			keyboard: {
				active: boolean;
				enabled: boolean;
				_i: number;
				_k: number;
				lastChar: string;
				_onKeyDown(i: unknown): void;
				_onKeyPress(i: unknown): void;
				_onKeyUp(i: unknown): void;
				addCallbacks(t: unknown, i: unknown, n: unknown, e: unknown): void;
				addKey(t: unknown): unknown;
				addKeyCapture(t: unknown): void;
				addKeys(t: unknown): unknown;
				clearCaptures(): void;
				createCursorKeys(): unknown;
				destroy(): void;
				downDuration(t: unknown, i: unknown): unknown;
				isDown(t: unknown): unknown;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				onDownCallback(arg0: unknown): void;
				onPressCallback(arg0: unknown): void;
				onUpCallback(arg0: unknown): void;
				processKeyDown(t: unknown): void;
				processKeyPress(t: unknown): void;
				processKeyUp(t: unknown): void;
				removeCallbacks(): void;
				removeKey(t: unknown): void;
				removeKeyCapture(t: unknown): void;
				reset(t: unknown): void;
				start(): unknown;
				stop(): void;
				update(): void;
				upDuration(t: unknown, i: unknown): unknown;
				event: KeyboardEvent;
				pressEvent: KeyboardEvent;
				_capture: unknown /* too deep */;
				_keys: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				lastKey: unknown /* too deep */;
			};
			mouse: {
				active: boolean;
				capture: boolean;
				enabled: boolean;
				stopOnGameOut: boolean;
				wheelDelta: number;
				_onMouseDown(i: unknown): void;
				_onMouseMove(i: unknown): void;
				_onMouseOut(i: unknown): void;
				_onMouseOutGlobal(i: unknown): void;
				_onMouseOver(i: unknown): void;
				_onMouseUp(i: unknown): void;
				_onMouseUpGlobal(i: unknown): void;
				addMouseWheelCallback(t: unknown): unknown;
				onMouseDown(t: unknown): void;
				onMouseMove(t: unknown): void;
				onMouseOut(t: unknown): void;
				onMouseOutGlobal(t: unknown): void;
				onMouseOver(t: unknown): void;
				onMouseUp(t: unknown): void;
				onMouseUpGlobal(t: unknown): void;
				removeMouseWheelCallback(t: unknown): void;
				start(): unknown;
				stop(): void;
				event: MouseEvent;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			mousePointer: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				button: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				target: HTMLCanvasElement;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			mouseWheel: {
				active: boolean;
				preventDefault: boolean;
				delta: number;
				wheelEventName: string;
				boundOnWheelHandler(arg0: unknown): void;
				onWheelHandler(t: unknown): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				callbackContext: unknown /* too deep */;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			mspointer: {
				active: boolean;
				pointerDownCallback: null;
				pointerMoveCallback: null;
				pointerUpCallback: null;
				onPointerDown(i: unknown): void;
				onPointerMove(i: unknown): void;
				onPointerOut(i: unknown): void;
				onPointerOver(i: unknown): void;
				onPointerUp(i: unknown): void;
				onPointerUpGlobal(i: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
			};
			onDown: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onHold: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onPointerMove: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTap: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchEndEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchStartEvent: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_prevParams: null;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUp: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			pointer1: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointer2: {
				_holdSent: boolean;
				_stateReset: boolean;
				active: boolean;
				dirty: boolean;
				exists: boolean;
				isDown: boolean;
				isMouse: boolean;
				isUp: boolean;
				withinGame: boolean;
				_nextDrop: number;
				clientX: number;
				clientY: number;
				duration: number;
				id: number;
				movementX: number;
				movementY: number;
				msSinceLastClick: number;
				pageX: number;
				pageY: number;
				pointerMode: number;
				previousTapTime: number;
				rawMovementX: number;
				rawMovementY: number;
				screenX: number;
				screenY: number;
				timeDown: number;
				timeUp: number;
				totalTouches: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				_trampolineTargetObject: null;
				identifier: null;
				pointerId: null;
				targetObject: null;
				justPressed(t: unknown): unknown;
				justReleased(t: unknown): unknown;
				leave(t: unknown): void;
				move(t: unknown, i: unknown): unknown;
				processButtonsDown(t: unknown, i: unknown): void;
				processButtonsUp(t: unknown, i: unknown): void;
				processButtonsUpDown(t: unknown, i: unknown): void;
				processInteractiveObjects(t: unknown): unknown;
				reset(): void;
				resetButtons(): void;
				resetMovement(): void;
				start(t: unknown): unknown;
				stop(t: unknown, i: unknown): unknown;
				swapTarget(t: unknown, i: unknown): void;
				update(): void;
				updateButtons(t: unknown): void;
				_history: unknown /* too deep */;
				backButton: unknown /* too deep */;
				circle: unknown /* too deep */;
				eraserButton: unknown /* too deep */;
				forwardButton: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveCandidates: unknown /* too deep */;
				leftButton: unknown /* too deep */;
				middleButton: unknown /* too deep */;
				position: unknown /* too deep */;
				positionDown: unknown /* too deep */;
				positionUp: unknown /* too deep */;
				rightButton: unknown /* too deep */;
			};
			pointerLock: {
				active: boolean;
				locked: boolean;
				pointerlockchange: undefined;
				pointerLockElement: undefined;
				pointerlockerror: undefined;
				boundOnChangeHandler(arg0: unknown): void;
				boundOnErrorHandler(arg0: unknown): void;
				exit(): void;
				onChangeHandler(t: unknown): void;
				onErrorHandler(t: unknown): void;
				request(): void;
				start(): unknown;
				stop(): void;
				element: HTMLCanvasElement;
				game: unknown /* too deep */;
				onChange: unknown /* too deep */;
				onError: unknown /* too deep */;
			};
			pointers: unknown /* too deep */[];
			position: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scale: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			speed: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			touch: {
				active: boolean;
				enabled: boolean;
				consumeDocumentTouches(): void;
				onTouchCancel(t: unknown): void;
				onTouchEnd(t: unknown): void;
				onTouchEnter(t: unknown): void;
				onTouchLeave(t: unknown): void;
				onTouchMove(t: unknown): void;
				onTouchStart(t: unknown): void;
				start(): unknown;
				stop(): void;
				callbackContext: unknown /* too deep */;
				game: unknown /* too deep */;
			};
		};
		inputDispatcher: {
			dispatchKeyboardEvent(t: unknown, i: unknown): void;
			dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void;
			dispatchMouseEvent(t: unknown, i: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		load: {
			isLoading: boolean;
			_crossOrigin: string;
			baseURL: string;
			crossOrigin: string;
			addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
			atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
			audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
			destroy(): void;
			fileCompleteCallback(t: unknown, i: unknown): void;
			fileStartCallback(t: unknown): void;
			getMaxParallelDownloads(): unknown;
			getNumLoadedFiles(): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown): void;
			json(t: unknown, i: unknown, n: unknown, e: unknown): void;
			processImage(t: unknown, i: unknown, n: unknown): void;
			processJSON(t: unknown, i: unknown, n: unknown): void;
			processScript(t: unknown, i: unknown): void;
			processSound(t: unknown, i: unknown, n: unknown): void;
			processSpine(t: unknown, i: unknown, n: unknown): void;
			processSpritesheet(t: unknown, i: unknown, n: unknown): void;
			processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
			reset(t: unknown): void;
			script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			setupFileCallbacks(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
			spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			start(): void;
			totalQueuedFiles(): unknown;
			_loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			_onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			loader: {
				_protected: boolean;
				loading: boolean;
				concurrency: number;
				progress: number;
				baseUrl: string;
				defaultQueryString: string;
				_boundLoadResource(t: unknown, e: unknown): unknown;
				_loadResource(t: unknown, e: unknown): void;
				_onComplete(): void;
				_onLoad(t: unknown): void;
				_onStart(): void;
				_prepareUrl(t: unknown): unknown;
				add(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				destroy(): void;
				load(t: unknown): unknown;
				off(t: unknown): void;
				on(t: unknown): void;
				once(t: unknown): void;
				pre(t: unknown): unknown;
				reset(): unknown;
				use(t: unknown): unknown;
				_afterMiddleware: unknown /* too deep */;
				_beforeMiddleware: unknown /* too deep */;
				_queue: unknown /* too deep */;
				_resourcesParsing: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onError: unknown /* too deep */;
				onLoad: unknown /* too deep */;
				onProgress: unknown /* too deep */;
				onStart: unknown /* too deep */;
				resources: unknown /* too deep */;
			};
			onFileComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFileStart: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onLoadComplete: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onReset: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		onPause: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		onResume: {
			_shouldPropagate: boolean;
			active: boolean;
			memorize: boolean;
			_addBinding(t: unknown): void;
			_boundDispatch(): unknown;
			_indexOfListener(t: unknown, i: unknown): unknown;
			add(t: unknown, i: unknown, n: unknown): unknown;
			addOnce(t: unknown, i: unknown, n: unknown): unknown;
			boundDispatch(): unknown;
			dispatch(): void;
			dispose(): void;
			forget(): void;
			getNumListeners(): unknown;
			halt(): void;
			has(t: unknown, i: unknown): unknown;
			registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			toString(): unknown;
			validateListener(t: unknown, i: unknown): void;
			_bindings: unknown /* too deep */[];
			bindings: unknown /* too deep */[];
		};
		renderer: {
			autoDensity: boolean;
			autoResize: boolean;
			clearBeforeRender: boolean;
			preserveDrawingBuffer: boolean;
			renderingToScreen: boolean;
			transparent: boolean;
			_backgroundColor: number;
			_eventsCount: number;
			backgroundColor: number;
			CONTEXT_UID: number;
			height: number;
			resolution: number;
			type: number;
			width: number;
			_backgroundColorString: string;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			addSystem(t: unknown, e: unknown): unknown;
			clear(): void;
			destroy(t: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			initPlugins(t: unknown): void;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
			reset(): unknown;
			resize(t: unknown, r: unknown): void;
			gl: WebGL2RenderingContext;
			view: HTMLCanvasElement;
			_backgroundColorRgba: number[];
			_events: {
				prerender: unknown /* too deep */;
			};
			_lastObjectRendered: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			batch: {
				boundArray(t: unknown, e: unknown, r: unknown, i: unknown): void;
				copyBoundTextures(t: unknown, e: unknown): void;
				destroy(): void;
				flush(): void;
				reset(): void;
				setObjectRenderer(t: unknown): void;
				currentRenderer: unknown /* too deep */;
				emptyRenderer: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			context: {
				isLost: boolean;
				webGLVersion: number;
				contextChange(t: unknown): void;
				createContext(e: unknown, r: unknown): unknown;
				destroy(): void;
				getExtensions(): void;
				handleContextLost(arg0: unknown): void;
				handleContextRestored(): void;
				initFromContext(t: unknown): void;
				initFromOptions(t: unknown): void;
				postrender(): void;
				validateContext(t: unknown): void;
				gl: WebGL2RenderingContext;
				extensions: unknown /* too deep */;
				renderer: unknown /* too deep */;
				supports: unknown /* too deep */;
			};
			extract: {
				base64(t: unknown, e: unknown, r: unknown): unknown;
				canvas(e: unknown): unknown;
				destroy(): void;
				image(t: unknown, e: unknown, r: unknown): unknown;
				pixels(e: unknown): unknown;
				renderer: unknown /* too deep */;
			};
			filter: {
				forceClear: boolean;
				useMaxPadding: boolean;
				applyFilter(e: unknown, r: unknown, i: unknown, n: unknown): void;
				bindAndClear(e: unknown, r: unknown): void;
				calculateNormalizedScreenSpaceMatrix(t: unknown): unknown;
				calculateScreenSpaceMatrix(t: unknown): unknown;
				calculateSpriteMatrix(t: unknown, e: unknown): unknown;
				destroy(): void;
				emptyPool(): void;
				getFilterTexture(t: unknown, e: unknown): unknown;
				getOptimalFilterTexture(t: unknown, e: unknown, r: unknown): unknown;
				getRenderTarget(t: unknown, e: unknown): unknown;
				pop(): unknown;
				push(t: unknown, e: unknown): void;
				resize(): void;
				returnFilterTexture(t: unknown): unknown;
				returnRenderTarget(t: unknown): unknown;
				activeState: unknown /* too deep */;
				defaultFilterStack: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				quad: unknown /* too deep */;
				quadUv: unknown /* too deep */;
				renderer: unknown /* too deep */;
				statePool: unknown /* too deep */;
				tempRect: unknown /* too deep */;
				texturePool: unknown /* too deep */;
			};
			framebuffer: {
				hasMRT: boolean;
				writeDepthTexture: boolean;
				CONTEXT_UID: number;
				current: null;
				bind(t: unknown, e: unknown): void;
				blit(t: unknown, e: unknown, r: unknown): unknown;
				clear(e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				contextChange(): unknown;
				destroy(): void;
				detectSamples(e: unknown): unknown;
				disposeAll(t: unknown): void;
				disposeFramebuffer(t: unknown, e: unknown): void;
				forceStencil(): void;
				initFramebuffer(t: unknown): unknown;
				reset(): void;
				resizeFramebuffer(t: unknown): void;
				setViewport(t: unknown, e: unknown, r: unknown, i: unknown): void;
				updateFramebuffer(t: unknown): void;
				gl: WebGL2RenderingContext;
				msaaSamples: Int32Array;
				managedFramebuffers: unknown /* too deep */;
				renderer: unknown /* too deep */;
				size: unknown /* too deep */;
				unknownFramebuffer: unknown /* too deep */;
				viewport: unknown /* too deep */;
			};
			geometry: {
				canUseUInt32ElementIndex: boolean;
				hasInstance: boolean;
				hasVao: boolean;
				CONTEXT_UID: number;
				activateVao(t: unknown, e: unknown): void;
				bind(t: unknown, e: unknown): void;
				checkCompatibility(t: unknown, e: unknown): void;
				contextChange(): unknown;
				destroy(): void;
				disposeAll(t: unknown): void;
				disposeBuffer(t: unknown, e: unknown): void;
				disposeGeometry(t: unknown, e: unknown): void;
				draw(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				getSignature(t: unknown, e: unknown): unknown;
				initGeometryVao(t: unknown, e: unknown): unknown;
				reset(): void;
				unbind(): void;
				updateBuffers(): void;
				_activeVao: WebGLVertexArrayObject;
				gl: WebGL2RenderingContext;
				_activeGeometry: unknown /* too deep */;
				_boundBuffer: unknown /* too deep */;
				managedBuffers: unknown /* too deep */;
				managedGeometries: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			globalUniforms: {
				group: boolean;
				static: boolean;
				dirtyId: number;
				id: number;
				add(e: unknown, r: unknown, i: unknown): void;
				update(): void;
				syncUniforms: unknown /* too deep */;
				uniforms: unknown /* too deep */;
			};
			mask: {
				enableScissor: boolean;
				alphaMaskIndex: number;
				destroy(): void;
				detect(e: unknown): void;
				pop(e: unknown): void;
				popSpriteMask(): void;
				push(e: unknown, r: unknown): void;
				pushSpriteMask(t: unknown): void;
				setMaskStack(t: unknown): void;
				alphaMaskPool: unknown /* too deep */;
				maskDataPool: unknown /* too deep */;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			options: {
				antialias: boolean;
				autoDensity: boolean;
				autoStart: boolean;
				clearBeforeRender: boolean;
				forceCanvas: boolean;
				legacy: boolean;
				preserveDrawingBuffer: boolean;
				sharedTicker: boolean;
				transparent: boolean;
				height: number;
				resolution: number;
				width: number;
				backgroundColor: undefined;
				powerPreference: undefined;
				resizeTo: undefined;
				sharedLoader: undefined;
				view: HTMLCanvasElement;
			};
			plugins: {
				accessibility: unknown /* too deep */;
				batch: unknown /* too deep */;
				extract: unknown /* too deep */;
				interaction: unknown /* too deep */;
				particle: unknown /* too deep */;
				prepare: unknown /* too deep */;
				tilingSprite: unknown /* too deep */;
			};
			projection: {
				defaultFrame: null;
				transform: null;
				calculateProjection(t: unknown, e: unknown, r: unknown, i: unknown): void;
				destroy(): void;
				setTransform(t: unknown): void;
				update(t: unknown, e: unknown, r: unknown, i: unknown): void;
				destinationFrame: unknown /* too deep */;
				projectionMatrix: unknown /* too deep */;
				renderer: unknown /* too deep */;
				sourceFrame: unknown /* too deep */;
			};
			renderTexture: {
				current: null;
				bind(t: unknown, e: unknown, r: unknown): void;
				clear(t: unknown, e: unknown): void;
				destroy(): void;
				reset(): void;
				resize(): void;
				clearColor: unknown /* too deep */;
				defaultMaskStack: unknown /* too deep */;
				destinationFrame: unknown /* too deep */;
				renderer: unknown /* too deep */;
				sourceFrame: unknown /* too deep */;
			};
			runners: {
				contextChange: unknown /* too deep */;
				destroy: unknown /* too deep */;
				postrender: unknown /* too deep */;
				prerender: unknown /* too deep */;
				reset: unknown /* too deep */;
				resize: unknown /* too deep */;
				update: unknown /* too deep */;
			};
			scissor: {
				glConst: number;
				_useCurrent(): void;
				destroy(): void;
				getStackLength(): unknown;
				pop(): void;
				push(t: unknown): void;
				setMaskStack(t: unknown): void;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			screen: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			shader: {
				destroyed: boolean;
				id: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(t: unknown): void;
				createSyncGroups(t: unknown): unknown;
				destroy(): void;
				generateShader(t: unknown): unknown;
				getglProgram(): unknown;
				getSignature(t: unknown, e: unknown): unknown;
				reset(): void;
				setUniforms(t: unknown): void;
				syncUniformGroup(t: unknown, e: unknown): void;
				syncUniforms(t: unknown, e: unknown, r: unknown): void;
				systemCheck(): unknown;
				gl: WebGL2RenderingContext;
				cache: unknown /* too deep */;
				program: unknown /* too deep */;
				renderer: unknown /* too deep */;
				shader: unknown /* too deep */;
			};
			state: {
				_blendEq: boolean;
				blendMode: number;
				polygonOffset: number;
				stateId: number;
				contextChange(e: unknown): unknown;
				destroy(): void;
				forceState(t: unknown): void;
				reset(): void;
				set(t: unknown): void;
				setBlend(t: unknown): void;
				setBlendMode(t: unknown): void;
				setCullFace(t: unknown): void;
				setDepthTest(t: unknown): void;
				setFrontFace(t: unknown): void;
				setOffset(t: unknown): void;
				setPolygonOffset(t: unknown, e: unknown): void;
				setState(t: unknown): unknown;
				updateCheck(t: unknown, e: unknown): void;
				gl: WebGL2RenderingContext;
				blendModes: unknown /* too deep */;
				checks: unknown /* too deep */;
				defaultState: unknown /* too deep */;
				map: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			stencil: {
				glConst: number;
				_getBitwiseMask(): unknown;
				_useCurrent(): void;
				destroy(): void;
				getStackLength(): unknown;
				pop(t: unknown): void;
				push(t: unknown): void;
				setMaskStack(t: unknown): void;
				maskStack: unknown /* too deep */;
				renderer: unknown /* too deep */;
			};
			texture: {
				_unknownBoundTextures: boolean;
				CONTEXT_UID: number;
				currentLocation: number;
				webGLVersion: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(): void;
				destroy(): void;
				destroyTexture(t: unknown, e: unknown): void;
				initTexture(t: unknown): unknown;
				initTextureType(e: unknown, r: unknown): void;
				reset(): void;
				setStyle(e: unknown, r: unknown): void;
				unbind(t: unknown): void;
				updateTexture(t: unknown): void;
				updateTextureStyle(e: unknown): void;
				gl: WebGL2RenderingContext;
				boundTextures: unknown /* too deep */;
				emptyTextures: unknown /* too deep */;
				managedTextures: unknown /* too deep */;
				renderer: unknown /* too deep */;
				unknownTexture: unknown /* too deep */;
			};
			textureGC: {
				checkCount: number;
				checkCountMax: number;
				count: number;
				maxIdle: number;
				mode: number;
				destroy(): void;
				postrender(): void;
				run(): void;
				unload(t: unknown): void;
				renderer: unknown /* too deep */;
			};
			textureManager: {
				_unknownBoundTextures: boolean;
				CONTEXT_UID: number;
				currentLocation: number;
				webGLVersion: number;
				bind(t: unknown, e: unknown): unknown;
				contextChange(): void;
				destroy(): void;
				destroyTexture(t: unknown, e: unknown): void;
				initTexture(t: unknown): unknown;
				initTextureType(e: unknown, r: unknown): void;
				reset(): void;
				setStyle(e: unknown, r: unknown): void;
				unbind(t: unknown): void;
				updateTexture(t: unknown): void;
				updateTextureStyle(e: unknown): void;
				gl: WebGL2RenderingContext;
				boundTextures: unknown /* too deep */;
				emptyTextures: unknown /* too deep */;
				managedTextures: unknown /* too deep */;
				renderer: unknown /* too deep */;
				unknownTexture: unknown /* too deep */;
			};
		};
		rnd: {
			c: number;
			s0: number;
			s1: number;
			s2: number;
			angle(): unknown;
			frac(): unknown;
			hash(t: unknown): unknown;
			integer(): unknown;
			integerInRange(t: unknown, i: unknown): unknown;
			normal(): unknown;
			pick(t: unknown): unknown;
			real(): unknown;
			realInRange(t: unknown, i: unknown): unknown;
			rnd(): unknown;
			shuffle(t: unknown): unknown;
			sign(): unknown;
			sow(t: unknown): void;
			state(t: unknown): unknown;
			uuid(): unknown;
			weightedPick(t: unknown): unknown;
		};
		scale: {
			_booted: boolean;
			_pageAlignHorizontally: boolean;
			_pageAlignVertically: boolean;
			forceLandscape: boolean;
			forcePortrait: boolean;
			incorrectOrientation: boolean;
			isFullScreen: boolean;
			isLandscape: boolean;
			isPortrait: boolean;
			pageAlignHorizontally: boolean;
			pageAlignVertically: boolean;
			parentIsWindow: boolean;
			_fullScreenScaleMode: number;
			_lastUpdate: number;
			_scaleMode: number;
			_updateThrottle: number;
			_updateThrottleReset: number;
			aspectRatio: number;
			currentScaleMode: number;
			fullScreenScaleMode: number;
			height: number;
			scaleMode: number;
			sourceAspectRatio: number;
			trackParentInterval: number;
			width: number;
			screenOrientation: string;
			_pendingScaleMode: null;
			onResizeContext: null;
			_fullScreenChange(i: unknown): void;
			_fullScreenError(i: unknown): void;
			_gameResumed(): void;
			_orientationChange(i: unknown): void;
			_windowResize(i: unknown): void;
			align(t: unknown, i: unknown): void;
			alignCanvas(t: unknown, i: unknown): void;
			boot(): void;
			cleanupCreatedTarget(): void;
			createFullScreenTarget(): unknown;
			destroy(): void;
			forceOrientation(t: unknown, i: unknown): void;
			fullScreenChange(t: unknown): void;
			fullScreenError(t: unknown): void;
			getParentBounds(t: unknown, i: unknown): unknown;
			orientationChange(t: unknown): void;
			parseConfig(t: unknown): void;
			pauseUpdate(): void;
			prepScreenMode(i: unknown): void;
			preUpdate(): void;
			queueUpdate(t: unknown): void;
			recalculateCanvasOffset(): void;
			reflowCanvas(): void;
			reflowGame(): void;
			refresh(): void;
			resetCanvas(t: unknown, i: unknown): void;
			setExactFit(): void;
			setGameSize(i: unknown, n: unknown): void;
			setMaximum(): void;
			setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setResizeCallback(t: unknown, i: unknown): void;
			setShowAll(t: unknown): void;
			setupScale(t: unknown, i: unknown): void;
			signalSizeChange(): void;
			startFullScreen(t: unknown, i: unknown): unknown;
			stopFullScreen(): unknown;
			updateDimensions(i: unknown, n: unknown, e: unknown): void;
			updateLayout(): void;
			updateOrientationState(): unknown;
			updateScalingAndBounds(): void;
			windowResize(t: unknown): void;
			boundingParent: HTMLDivElement;
			parentNode: HTMLCanvasElement;
			_gameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedCanvasSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_lastReportedGameSize: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_parentBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			_tempBounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			bounds: {
				empty: boolean;
				bottom: number;
				centerX: number;
				centerY: number;
				halfHeight: number;
				halfWidth: number;
				height: number;
				left: number;
				offsetX: number;
				offsetY: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				intersectsRectValues(t: unknown, n: unknown, e: unknown, s: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
				resize(t: unknown, i: unknown): unknown;
				setPosition(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				anchor: unknown /* too deep */;
				bottomLeft: unknown /* too deep */;
				bottomRight: unknown /* too deep */;
				topLeft: unknown /* too deep */;
				topRight: unknown /* too deep */;
			};
			canvasOffset: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			dom: {
				scrollX: number;
				scrollY: number;
				getOffset(t: unknown, i: unknown): unknown;
				getScreenOrientation(): unknown;
				onDeviceReady(t: unknown): void;
				layoutBounds: unknown /* too deep */;
				visualBounds: unknown /* too deep */;
			};
			enterIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			leaveIncorrectOrientation: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			margin: {
				bottom: number;
				left: number;
				right: number;
				top: number;
				x: number;
				y: number;
			};
			onFullScreenChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenError: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onFullScreenInit: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onOrientationChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSizeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parentScaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactor: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			scaleFactorInverted: {
				_recalculateMagnitude: boolean;
				_recalculateMagnitudeSq: boolean;
				_magnitude: number;
				_magnitudeSq: number;
				_x: number;
				_y: number;
				x: number;
				y: number;
				add(t: unknown): void;
				angle(t: unknown): unknown;
				ceil(): void;
				clamp(t: unknown, i: unknown, n: unknown): void;
				clip(t: unknown): void;
				copyFrom(t: unknown): unknown;
				copyTo(i: unknown): unknown;
				cross(t: unknown): unknown;
				divide(t: unknown): void;
				dot(t: unknown): unknown;
				equals(t: unknown): unknown;
				floor(): void;
				getDistance(t: unknown): unknown;
				getDistanceSq(t: unknown): unknown;
				getMagnitude(): unknown;
				getMagnitudeSq(): unknown;
				interpolate(t: unknown, i: unknown): void;
				invert(): void;
				isNearlyEqual(t: unknown, i: unknown): unknown;
				isNearlyEqualToValues(t: unknown, i: unknown, n: unknown): unknown;
				isZero(): unknown;
				multiply(t: unknown): void;
				negate(): void;
				normalize(): void;
				normalRightHand(): void;
				perpendicular(t: unknown): void;
				print(t: unknown): void;
				project(t: unknown, i: unknown): void;
				recalculateMagnitude(): void;
				recalculateMagnitudeSq(): void;
				rotate(t: unknown, i: unknown, n: unknown): void;
				round(): void;
				set(t: unknown, i: unknown): void;
				setTo(t: unknown, i: unknown): void;
				setToPolar(t: unknown, i: unknown): void;
				subtract(t: unknown): void;
				toString(): unknown;
				trunc(): void;
			};
			windowConstraints: {
				bottom: string;
				right: string;
			};
		};
		seededRandom: {
			frac(t: unknown): unknown;
			pick(t: unknown, i: unknown): unknown;
			shuffleArray(t: unknown, i: unknown): unknown;
			randomDataGenerator: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
		};
		sound: {
			_codeMuted: boolean;
			_muted: boolean;
			_watching: boolean;
			connectToMaster: boolean;
			mute: boolean;
			muteOnPause: boolean;
			noAudio: boolean;
			touchLocked: boolean;
			baseLatency: number;
			channels: number;
			volume: number;
			_unlockSource: null;
			_watchCallback: null;
			_watchContext: null;
			_onResumeWebAudioOnClick(): void;
			_resumeWebAudioOnClick(): void;
			add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boot(): void;
			destroy(): void;
			pauseAll(): void;
			play(t: unknown, i: unknown, n: unknown): unknown;
			remove(t: unknown): unknown;
			removeAll(): void;
			removeByKey(t: unknown): unknown;
			resumeAll(): void;
			resumeWebAudio(): unknown;
			setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
			setMute(): void;
			setTouchLock(): void;
			setTouchUnlock(): void;
			stopAll(): void;
			unlock(): unknown;
			unsetMute(): void;
			update(): void;
			context: AudioContext;
			emptyBuffer: AudioBuffer;
			_sounds: never[];
			_watchList: {
				_cursor: number;
				total: number;
				first: null;
				next: null;
				add(t: unknown): unknown;
				callAll(t: unknown): void;
				exists(t: unknown): unknown;
				getByKey(t: unknown, i: unknown): unknown;
				getIndex(t: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(t: unknown): void;
				reset(): void;
				setAll(t: unknown, i: unknown): void;
				_list: unknown /* too deep */;
				list: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onSoundDecode: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onTouchUnlock: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onUnMute: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onVolumeChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			sounds: never[];
		};
		stage: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
		state: {
			_clearWorld: boolean;
			current: string;
			_pendingState: null;
			add(t: unknown, i: unknown, n: unknown): unknown;
			boot(): void;
			clearCurrentState(): void;
			destroy(): void;
			get(t: unknown): unknown;
			getCurrentState(): unknown;
			loadComplete(): void;
			pause(): void;
			preUpdate(): unknown;
			remove(t: unknown): void;
			resume(): void;
			setCurrentState(t: unknown): void;
			start(t: unknown, i: unknown): void;
			update(): void;
			_states: Map<string, unknown /* too deep */>;
			states: Map<string, unknown /* too deep */>;
			_current: {
				_loadCompleteSent: boolean;
				complete: boolean;
				fadeInSet: boolean;
				hasBroadcastedInfo: boolean;
				hideHex: boolean;
				isMapScreen: boolean;
				showMenu: boolean;
				walkEnabled: boolean;
				frameUntilAddNextPlayer: number;
				startX: number;
				startY: number;
				tileSize: number;
				_key: string;
				key: string;
				saveTag: string;
				screenName: string;
				zoneName: string;
				_friendListLoadTimeoutID: null;
				screenData: null;
				previousMapData: undefined;
				previousZone: undefined;
				addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addBlock(t: unknown, i: unknown, n: unknown): unknown;
				addBounty(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown): unknown;
				addChest(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addClickableArea(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				addClickableEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
				addClickableMoveEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
				addCollect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
				addConstructedQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addDoor(t: unknown, i: unknown): void;
				addEvent(t: unknown, i: unknown): void;
				addEventWithCallback(t: unknown, i: unknown): void;
				addFireflyEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				addFollow(t: unknown, i: unknown): unknown;
				addGnome(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMimic(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMonster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
				addNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addPathingIcon(t: unknown, i: unknown): void;
				addPippet(t: unknown, i: unknown, n: unknown): unknown;
				addPlayer(t: unknown): void;
				addQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addWizard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				arePopupsEnabled(): unknown;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				canAddUsersToScreen(): unknown;
				chatPlayer(t: unknown): void;
				create(): void;
				createBackground(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				endFX(): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getInjectedValue(t: unknown): unknown;
				hideChat(t: unknown): void;
				hideOtherPlayer(t: unknown): unknown;
				init(): void;
				initListeners(): void;
				initMap(t: unknown, i: unknown, n: unknown, e: unknown): void;
				initScene(t: unknown, i: unknown): void;
				listener(t: unknown, i: unknown): unknown;
				movePlayer(t: unknown): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClick(t: unknown): void;
				onDebugAutoClickElement(i: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onDoorClick(t: unknown, i: unknown): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				onMessage(t: unknown): void;
				onPlayerFullInfo(t: unknown): void;
				onPlayerJoined(t: unknown): void;
				onPlayerLeft(t: unknown): void;
				onPlayerList(t: unknown): unknown;
				openFeed(t: unknown): void;
				paused(): void;
				playerEffect(t: unknown): void;
				preload(): void;
				preprocess(): unknown;
				process(t: unknown): void;
				processAddCollect(t: unknown): void;
				processPopups(t: unknown): unknown;
				removeFollow(t: unknown): void;
				removePlayer(t: unknown): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setFakePlayer(t: unknown): void;
				showCollisions(t: unknown): void;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(i: unknown, n: unknown): unknown;
				startFX(): void;
				stopListeners(): void;
				transformPlayer(t: unknown): void;
				triggerElementClick(t: unknown): void;
				update(): void;
				updatePlayer(t: unknown): void;
				pendingCoordinates: Map<never, never>;
				_background: unknown /* too deep */;
				_bgSprite: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				_world: unknown /* too deep */;
				above: unknown /* too deep */;
				aboveGameObject: unknown /* too deep */;
				add: unknown /* too deep */;
				area: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				below: unknown /* too deep */;
				belowGameObject: unknown /* too deep */;
				clickAreas: unknown /* too deep */;
				content: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				data: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				events: unknown /* too deep */;
				floor: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menuBar: unknown /* too deep */;
				menus: unknown /* too deep */;
				metricsManager: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				path: unknown /* too deep */;
				pendingPlayers: unknown /* too deep */;
				playerList: unknown /* too deep */;
				playersInfo: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				questProgress: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
				user: unknown /* too deep */;
				zone: unknown /* too deep */;
			};
			_initArgs: never[];
			_onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			onStateChange: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		time: {
			_deltaMS: number;
			_pauseStarted: number;
			_prevTimeMS: number;
			_started: number;
			_timeMS: number;
			deltaMS: number;
			desiredFps: number;
			pauseDuration: number;
			prevTimeMS: number;
			timeMS: number;
			timeToCall: number;
			add(t: unknown): unknown;
			boot(): void;
			create(t: unknown): unknown;
			elapsedSecondsSince(t: unknown): unknown;
			elapsedSince(t: unknown): unknown;
			gamePaused(): void;
			gameResumed(): void;
			removeAll(): void;
			reset(): void;
			setTime(t: unknown): void;
			totalElapsedSeconds(): unknown;
			update(t: unknown): void;
			updateTimers(): void;
			_timers: never[];
			events: {
				autoDestroy: boolean;
				expired: boolean;
				paused: boolean;
				running: boolean;
				_i: number;
				_len: number;
				_marked: number;
				_newTick: number;
				_now: number;
				_pauseStarted: number;
				_pauseTotal: number;
				_started: number;
				duration: number;
				elapsed: number;
				length: number;
				ms: number;
				next: number;
				nextTick: number;
				seconds: number;
				timeCap: number;
				addTimer(t: unknown, i: unknown, n: unknown): unknown;
				adjustEvents(t: unknown): void;
				clearPendingEvents(): void;
				createTimer(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				destroy(): void;
				loop(t: unknown, i: unknown, n: unknown): unknown;
				order(): void;
				pause(): void;
				remove(t: unknown): unknown;
				removeAll(): void;
				repeat(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				resume(): void;
				sortHandler(t: unknown, i: unknown): unknown;
				start(t: unknown): void;
				stop(t: unknown): void;
				update(t: unknown): unknown;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				onComplete: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		tweens: {
			add(t: unknown, i: unknown, n: unknown): unknown;
			create(t: unknown, i: unknown, n: unknown): unknown;
			destroy(): void;
			findOwnerForTween(t: unknown): unknown;
			getAll(): unknown;
			pauseAll(): void;
			remove(t: unknown): void;
			removeAll(): void;
			removeAllFromOwner(t: unknown): void;
			removeFrom(t: unknown, i: unknown): void;
			removeTweenFromOwner(t: unknown): unknown;
			resumeAll(): void;
			update(): unknown;
			_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
			_tweens: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		world: {
			_accessibleActive: boolean;
			_cacheAsBitmap: boolean;
			_destroyed: boolean;
			accessible: boolean;
			accessibleChildren: boolean;
			buttonMode: boolean;
			cacheAsBitmap: boolean;
			disableVisibilityChange: boolean;
			exists: boolean;
			fixedToCamera: boolean;
			interactive: boolean;
			interactiveChildren: boolean;
			isMask: boolean;
			isSprite: boolean;
			pendingDestroy: boolean;
			renderable: boolean;
			sortableChildren: boolean;
			sortDirty: boolean;
			visible: boolean;
			worldVisible: boolean;
			_boundsID: number;
			_eventsCount: number;
			_lastSortedIndex: number;
			_zIndex: number;
			alpha: number;
			angle: number;
			bottom: number;
			centerX: number;
			centerY: number;
			height: number;
			left: number;
			length: number;
			offsetX: number;
			offsetY: number;
			renderId: number;
			right: number;
			rotation: number;
			tabIndex: number;
			top: number;
			width: number;
			worldAlpha: number;
			worldRotation: number;
			x: number;
			y: number;
			z: number;
			zIndex: number;
			_hiddenVar: string;
			_sortProperty: string;
			accessiblePointerEvents: string;
			accessibleType: string;
			name: string;
			_accessibleDiv: null;
			_boundsRect: null;
			_cacheData: null;
			_enabledFilters: null;
			_mask: null;
			accessibleHint: null;
			accessibleTitle: null;
			camera: null;
			cursor: null;
			filterArea: null;
			filters: null;
			hitArea: null;
			mask: null;
			_cacheAsBitmapDestroy(t: unknown): void;
			_calculateBounds(): void;
			_calculateCachedBounds(): void;
			_destroyCachedDisplayObject(): void;
			_getCachedLocalBounds(): unknown;
			_initCachedDisplayObject(t: unknown): void;
			_initCachedDisplayObjectCanvas(t: unknown): void;
			_recursivePostUpdateTransform(): void;
			_render(t: unknown): void;
			_renderCached(t: unknown): void;
			_renderCachedCanvas(t: unknown): void;
			_renderCanvas(t: unknown): void;
			_renderWebGL(t: unknown): void;
			add(t: unknown, i: unknown): unknown;
			addAt(t: unknown, i: unknown): unknown;
			addChild(): unknown;
			addChildAt(t: unknown, e: unknown): unknown;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			ascendingSortHandler(t: unknown, i: unknown): unknown;
			boot(): void;
			bringChildToTop(t: unknown): void;
			calculateBounds(): void;
			callAll(t: unknown, i: unknown): void;
			callbackFromArray(t: unknown, i: unknown): unknown;
			checkVisibility(): void;
			containerUpdateTransform(): void;
			descendingSortHandler(t: unknown, i: unknown): unknown;
			destroy(): void;
			disableTempParent(t: unknown): void;
			displayObjectUpdateTransform(): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			enableTempParent(): unknown;
			eventNames(): unknown;
			getAt(t: unknown): unknown;
			getBounds(t: unknown, e: unknown): unknown;
			getByName(t: unknown): unknown;
			getChildAt(t: unknown): unknown;
			getChildByName(t: unknown, e: unknown): unknown;
			getChildIndex(t: unknown): unknown;
			getGlobalPosition(t: unknown, e: unknown): unknown;
			getIndex(t: unknown): unknown;
			getLocalBounds(e: unknown, r: unknown): unknown;
			iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			moveDown(t: unknown): unknown;
			moveUp(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			onChildrenChange(t: unknown): void;
			parseConfig(t: unknown): void;
			remove(t: unknown, i: unknown): unknown;
			removeAll(t: unknown): void;
			removeAllListeners(t: unknown): unknown;
			removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
			removeChild(): unknown;
			removeChildAt(t: unknown): unknown;
			removeChildren(t: unknown, e: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown): void;
			renderAdvanced(t: unknown): void;
			renderAdvancedWebGL(t: unknown): void;
			renderCanvas(t: unknown): void;
			renderWebGL(t: unknown): void;
			sendChildToBack(t: unknown): void;
			setBackgroundColor(t: unknown): void;
			setChildIndex(t: unknown, e: unknown): void;
			setParent(t: unknown): unknown;
			setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
			sort(t: unknown, i: unknown): void;
			sortChildren(): void;
			swap(t: unknown, i: unknown): void;
			swapChildren(t: unknown, e: unknown): void;
			toGlobal(t: unknown, e: unknown, r: unknown): unknown;
			toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
			update(): void;
			updateTransform(): void;
			updateZ(): void;
			visibilityChange(t: unknown): unknown;
			_bounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_events: {};
			_game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			_localBounds: {
				maxX: number;
				maxY: number;
				minX: number;
				minY: number;
				updateID: number;
				rect: null;
				addBounds(t: unknown): void;
				addBoundsArea(t: unknown, e: unknown): void;
				addBoundsMask(t: unknown, e: unknown): void;
				addBoundsMatrix(t: unknown, e: unknown): void;
				addFrame(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFrameMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				addFramePad(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				addPoint(t: unknown): void;
				addQuad(t: unknown): void;
				addVertexData(t: unknown, e: unknown, r: unknown): void;
				addVertices(t: unknown, e: unknown, r: unknown, i: unknown): void;
				addVerticesMatrix(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): void;
				clear(): void;
				getRectangle(t: unknown): unknown;
				isEmpty(): unknown;
				pad(t: unknown, e: unknown): void;
			};
			_localBoundsRect: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_trackedPointers: {};
			anchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			bounds: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			children: unknown /* too deep */[];
			events: {
				destroy(): void;
				onAddedToGroup: unknown /* too deep */;
				onAnimationComplete: unknown /* too deep */;
				onAnimationLoop: unknown /* too deep */;
				onAnimationStart: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onDragStart: unknown /* too deep */;
				onDragStop: unknown /* too deep */;
				onDragUpdate: unknown /* too deep */;
				onEnterBounds: unknown /* too deep */;
				onInputDown: unknown /* too deep */;
				onInputOut: unknown /* too deep */;
				onInputOver: unknown /* too deep */;
				onInputUp: unknown /* too deep */;
				onOutOfBounds: unknown /* too deep */;
				onRemovedFromGroup: unknown /* too deep */;
				onRemovedFromWorld: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			localTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
			onDestroy: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			parent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				height: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				width: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				calculateBounds(): void;
				containerUpdateTransform(): void;
				destroy(e: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sortChildren(): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				children: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			pivot: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			position: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			scale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			skew: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			tempDisplayObjectParent: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				renderable: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				renderId: number;
				rotation: number;
				tabIndex: number;
				worldAlpha: number;
				x: number;
				y: number;
				zIndex: number;
				accessiblePointerEvents: string;
				accessibleType: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_localBounds: null;
				_localBoundsRect: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				name: null;
				parent: null;
				sortDirty: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				destroy(t: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getLocalBounds(t: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				updateTransform(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			trackedPointers: {};
			transform: {
				_currentLocalID: number;
				_cx: number;
				_cy: number;
				_localID: number;
				_parentID: number;
				_rotation: number;
				_sx: number;
				_sy: number;
				_worldID: number;
				rotation: number;
				onChange(): void;
				setFromMatrix(t: unknown): void;
				updateLocalTransform(): void;
				updateSkew(): void;
				updateTransform(t: unknown): void;
				localTransform: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			world: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldGamePosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldPosition: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			worldScale: {
				_x: number;
				_y: number;
				x: number;
				y: number;
				cb(): void;
				clone(e: unknown, r: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
				scope: unknown /* too deep */;
			};
			worldTransform: {
				a: number;
				b: number;
				c: number;
				d: number;
				tx: number;
				ty: number;
				array: null;
				append(t: unknown): unknown;
				apply(t: unknown, e: unknown): unknown;
				applyInverse(t: unknown, e: unknown): unknown;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				decompose(t: unknown): unknown;
				fromArray(t: unknown): void;
				identity(): unknown;
				invert(): unknown;
				prepend(t: unknown): unknown;
				rotate(t: unknown): unknown;
				scale(t: unknown, e: unknown): unknown;
				set(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				toArray(t: unknown, e: unknown): unknown;
				translate(t: unknown, e: unknown): unknown;
			};
		};
	};
	prodigy: {
		previousNow: number;
		updateCount: number;
		version: string;
		_inputBlocker: null;
		automation: null;
		spinner: null;
		cleanup(): void;
		init(): void;
		initializeBreadcrumbs(): void;
		initializeInjectionContainer(): void;
		loading(t: unknown, i: unknown): void;
		postCacheInit(): void;
		postPIXIGameInit(): void;
		start(t: unknown, i: unknown, n: unknown): void;
		startCoOp(t: unknown): void;
		startPrefabScene(t: unknown, i: unknown): void;
		update(): void;
		achievements: {
			getCompletionText(t: unknown): unknown;
			getCurrent(t: unknown): unknown;
			getData(t: unknown): unknown;
			getDesc(t: unknown): unknown;
			getName(t: unknown): unknown;
			getProgress(t: unknown): unknown;
			getTarget(t: unknown): unknown;
			getZero(): unknown;
			process(): unknown;
			processValue(t: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		animation: {
			fade(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			float(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			hop(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			rotate(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			shake(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			translate(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		assets: {
			appendAssets(t: unknown): void;
			getAsset(t: unknown): unknown;
			getImageBounds(t: unknown): unknown;
			getImagePivots(t: unknown): unknown;
			assets: {
				"atlas-10": unknown /* too deep */;
				"atlas-110": unknown /* too deep */;
				"atlas-121": unknown /* too deep */;
				"atlas-144": unknown /* too deep */;
				"atlas-145": unknown /* too deep */;
				"atlas-148": unknown /* too deep */;
				"atlas-149": unknown /* too deep */;
				"atlas-157": unknown /* too deep */;
				"atlas-158": unknown /* too deep */;
				"atlas-160": unknown /* too deep */;
				"atlas-161": unknown /* too deep */;
				"atlas-166": unknown /* too deep */;
				"atlas-169": unknown /* too deep */;
				"atlas-179": unknown /* too deep */;
				"atlas-18": unknown /* too deep */;
				"atlas-180": unknown /* too deep */;
				"atlas-181": unknown /* too deep */;
				"atlas-189": unknown /* too deep */;
				"atlas-19": unknown /* too deep */;
				"atlas-21": unknown /* too deep */;
				"atlas-22": unknown /* too deep */;
				"atlas-29": unknown /* too deep */;
				"atlas-50": unknown /* too deep */;
				"atlas-8": unknown /* too deep */;
				"atlas-9": unknown /* too deep */;
				"battle-academy-classroom": unknown /* too deep */;
				"battle-academy-gh-stairs": unknown /* too deep */;
				"battle-ancient-ruins": unknown /* too deep */;
				"battle-ancient-ruins-guardian": unknown /* too deep */;
				"battle-archives": unknown /* too deep */;
				"battle-bonfire-inside": unknown /* too deep */;
				"battle-bonfire-lava": unknown /* too deep */;
				"battle-bonfire-outside": unknown /* too deep */;
				"battle-coliseum-outside": unknown /* too deep */;
				"battle-forest-generic": unknown /* too deep */;
				"battle-forest-outside": unknown /* too deep */;
				"battle-lamplight-outside": unknown /* too deep */;
				"battle-lamplight-outside-pumpkinfest": unknown /* too deep */;
				"battle-lamplight-outside-starlight": unknown /* too deep */;
				"battle-lamplight-outside-winterfest": unknown /* too deep */;
				"battle-shipwreck-outside": unknown /* too deep */;
				"battle-shipwreck-underwater": unknown /* too deep */;
				"battle-shiverchill-inside": unknown /* too deep */;
				"battle-shiverchill-outside": unknown /* too deep */;
				"battle-skywatch-inside": unknown /* too deep */;
				"battle-skywatch-outside": unknown /* too deep */;
				"battle-tower-inside": unknown /* too deep */;
				"bgm-17": unknown /* too deep */;
				"bgm-3": unknown /* too deep */;
				"bounty-run-endmap-1-background": unknown /* too deep */;
				"bounty-run-endmap-1-foreground": unknown /* too deep */;
				"bounty-run-endmap-2-background": unknown /* too deep */;
				"bounty-run-endmap-2-foreground": unknown /* too deep */;
				"bounty-run-endmap-3-background": unknown /* too deep */;
				"bounty-run-endmap-3-foreground": unknown /* too deep */;
				"bounty-run-guardianmap-background": unknown /* too deep */;
				"bounty-run-guardianmap-foreground": unknown /* too deep */;
				"bounty-run-hubmap-background": unknown /* too deep */;
				"bounty-run-hubmap-foreground": unknown /* too deep */;
				"bounty-run-middlemap-1-background": unknown /* too deep */;
				"bounty-run-middlemap-1-foreground": unknown /* too deep */;
				"bounty-run-middlemap-2-background": unknown /* too deep */;
				"bounty-run-middlemap-2-foreground": unknown /* too deep */;
				"bounty-run-middlemap-3-background": unknown /* too deep */;
				"bounty-run-middlemap-3-foreground": unknown /* too deep */;
				"bounty-run-middlemap-4-background": unknown /* too deep */;
				"bounty-run-middlemap-4-foreground": unknown /* too deep */;
				"bounty-run-middlemap-5-background": unknown /* too deep */;
				"bounty-run-middlemap-5-foreground": unknown /* too deep */;
				"bounty-run-middlemap-6-background": unknown /* too deep */;
				"bounty-run-middlemap-6-foreground": unknown /* too deep */;
				"bounty-run-middlemap-7-background": unknown /* too deep */;
				"bounty-run-middlemap-7-foreground": unknown /* too deep */;
				"bounty-run-startmap-1-background": unknown /* too deep */;
				"bounty-run-startmap-1-foreground": unknown /* too deep */;
				"bounty-run-startmap-2-background": unknown /* too deep */;
				"bounty-run-startmap-2-foreground": unknown /* too deep */;
				"bounty-run-startmap-3-background": unknown /* too deep */;
				"bounty-run-startmap-3-foreground": unknown /* too deep */;
				"crystal-caverns-phase-1-background": unknown /* too deep */;
				"crystal-caverns-phase-1-farback": unknown /* too deep */;
				"crystal-caverns-phase-1-foreground": unknown /* too deep */;
				"crystal-caverns-phase-2-background": unknown /* too deep */;
				"crystal-caverns-phase-2-foreground": unknown /* too deep */;
				"crystal-caverns-phase-3-background": unknown /* too deep */;
				"crystal-caverns-phase-3-foreground": unknown /* too deep */;
				"feature-flag-data": unknown /* too deep */;
				"female-outfit-46": unknown /* too deep */;
				"female-outfit-63": unknown /* too deep */;
				"icon-fossil-5": unknown /* too deep */;
				"icon-item-34": unknown /* too deep */;
				"icon-pet-4": unknown /* too deep */;
				"icon-pet-94": unknown /* too deep */;
				"icon-weapon-63": unknown /* too deep */;
				"map-academy-cr1": unknown /* too deep */;
				"map-academy-cr2": unknown /* too deep */;
				"map-academy-gh1": unknown /* too deep */;
				"map-academy-gh2": unknown /* too deep */;
				"map-academy-gh3": unknown /* too deep */;
				"map-activity_zone-a1": unknown /* too deep */;
				"map-activity_zone-a2": unknown /* too deep */;
				"map-activity_zone-b1": unknown /* too deep */;
				"map-activity_zone-b2": unknown /* too deep */;
				"map-activity_zone-b3": unknown /* too deep */;
				"map-activity_zone-c1": unknown /* too deep */;
				"map-activity_zone-c2": unknown /* too deep */;
				"map-archives-1": unknown /* too deep */;
				"map-archives-2": unknown /* too deep */;
				"map-archives-3": unknown /* too deep */;
				"map-archives-4": unknown /* too deep */;
				"map-archives-5": unknown /* too deep */;
				"map-archives-6": unknown /* too deep */;
				"map-archives-end": unknown /* too deep */;
				"map-archives-m1": unknown /* too deep */;
				"map-archives-m2": unknown /* too deep */;
				"map-archives-m3": unknown /* too deep */;
				"map-archives-m4": unknown /* too deep */;
				"map-archives-m5": unknown /* too deep */;
				"map-archives-m6": unknown /* too deep */;
				"map-archives-m7": unknown /* too deep */;
				"map-archives-m8": unknown /* too deep */;
				"map-archives-m9": unknown /* too deep */;
				"map-bonfire_spire-a1": unknown /* too deep */;
				"map-bonfire_spire-a4": unknown /* too deep */;
				"map-bonfire_spire-b1": unknown /* too deep */;
				"map-bonfire_spire-b2": unknown /* too deep */;
				"map-bonfire_spire-b4": unknown /* too deep */;
				"map-bonfire_spire-b5": unknown /* too deep */;
				"map-bonfire_spire-c1": unknown /* too deep */;
				"map-bonfire_spire-c2": unknown /* too deep */;
				"map-bonfire_spire-c3": unknown /* too deep */;
				"map-bonfire_spire-c4": unknown /* too deep */;
				"map-bonfire_spire-c6": unknown /* too deep */;
				"map-bonfire_spire-d1": unknown /* too deep */;
				"map-bonfire_spire-d2": unknown /* too deep */;
				"map-bonfire_spire-d3": unknown /* too deep */;
				"map-bonfire_spire-d4": unknown /* too deep */;
				"map-bonfire_spire-d5": unknown /* too deep */;
				"map-bonfire_spire-d6": unknown /* too deep */;
				"map-bonfire_spire-e5": unknown /* too deep */;
				"map-bonfire_spire-e6": unknown /* too deep */;
				"map-bonfire_spire-titan": unknown /* too deep */;
				"map-crystal_caverns-dungeonhub": unknown /* too deep */;
				"map-darktower-a1": unknown /* too deep */;
				"map-darktower-a2": unknown /* too deep */;
				"map-darktower-a3": unknown /* too deep */;
				"map-dyno-a0": unknown /* too deep */;
				"map-earth-tower-1": unknown /* too deep */;
				"map-earth-tower-10": unknown /* too deep */;
				"map-earth-tower-11": unknown /* too deep */;
				"map-earth-tower-12": unknown /* too deep */;
				"map-earth-tower-13": unknown /* too deep */;
				"map-earth-tower-14": unknown /* too deep */;
				"map-earth-tower-15": unknown /* too deep */;
				"map-earth-tower-2": unknown /* too deep */;
				"map-earth-tower-3": unknown /* too deep */;
				"map-earth-tower-4": unknown /* too deep */;
				"map-earth-tower-5": unknown /* too deep */;
				"map-earth-tower-6": unknown /* too deep */;
				"map-earth-tower-7": unknown /* too deep */;
				"map-earth-tower-8": unknown /* too deep */;
				"map-earth-tower-9": unknown /* too deep */;
				"map-earth-tower-end": unknown /* too deep */;
				"map-earthtower-cr": unknown /* too deep */;
				"map-earthtower-wr": unknown /* too deep */;
				"map-forest-a3": unknown /* too deep */;
				"map-forest-a4": unknown /* too deep */;
				"map-forest-a5": unknown /* too deep */;
				"map-forest-b5": unknown /* too deep */;
				"map-forest-b6": unknown /* too deep */;
				"map-forest-b7": unknown /* too deep */;
				"map-forest-b8": unknown /* too deep */;
				"map-forest-c4": unknown /* too deep */;
				"map-forest-c7": unknown /* too deep */;
				"map-forest-c8": unknown /* too deep */;
				"map-forest-d3": unknown /* too deep */;
				"map-forest-titan": unknown /* too deep */;
				"map-house-cool-cave": unknown /* too deep */;
				"map-house-cool-cave-unique-1": unknown /* too deep */;
				"map-house-cool-cave-unique-2": unknown /* too deep */;
				"map-house-exit": unknown /* too deep */;
				"map-house-exterior": unknown /* too deep */;
				"map-house-fire-pit": unknown /* too deep */;
				"map-house-fire-pit-2": unknown /* too deep */;
				"map-house-fire-pit-3": unknown /* too deep */;
				"map-house-forest": unknown /* too deep */;
				"map-house-house-large-3": unknown /* too deep */;
				"map-house-house-large-4": unknown /* too deep */;
				"map-house-icecaves": unknown /* too deep */;
				"map-house-large-0": unknown /* too deep */;
				"map-house-large-1": unknown /* too deep */;
				"map-house-medium-0": unknown /* too deep */;
				"map-house-medium-1": unknown /* too deep */;
				"map-house-small-0": unknown /* too deep */;
				"map-house-small-1": unknown /* too deep */;
				"map-house-suburbs": unknown /* too deep */;
				"map-house-treehouse": unknown /* too deep */;
				"map-house-treehouse-unique-1": unknown /* too deep */;
				"map-house-treehouse-unique-2": unknown /* too deep */;
				"map-lamplight-a1-springfest": unknown /* too deep */;
				"map-lamplight-a2": unknown /* too deep */;
				"map-lamplight-a2-pumpkinfest": unknown /* too deep */;
				"map-lamplight-a2-springfest": unknown /* too deep */;
				"map-lamplight-a2-starlight_festival": unknown /* too deep */;
				"map-lamplight-a2-summerfest": unknown /* too deep */;
				"map-lamplight-a2-winterfest": unknown /* too deep */;
				"map-lamplight-a3": unknown /* too deep */;
				"map-lamplight-a3-pumpkinfest": unknown /* too deep */;
				"map-lamplight-a3-springfest": unknown /* too deep */;
				"map-lamplight-a3-starlight_festival": unknown /* too deep */;
				"map-lamplight-a3-summerfest": unknown /* too deep */;
				"map-lamplight-a3-winterfest": unknown /* too deep */;
				"map-lamplight-a4": unknown /* too deep */;
				"map-lamplight-a4-pumpkinfest": unknown /* too deep */;
				"map-lamplight-a4-starlight_festival": unknown /* too deep */;
				"map-lamplight-a4-summerfest": unknown /* too deep */;
				"map-lamplight-a4-winterfest": unknown /* too deep */;
				"map-lamplight-b0": unknown /* too deep */;
				"map-lamplight-b0-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b0-starlight_festival": unknown /* too deep */;
				"map-lamplight-b0-summerfest": unknown /* too deep */;
				"map-lamplight-b0-winterfest": unknown /* too deep */;
				"map-lamplight-b1": unknown /* too deep */;
				"map-lamplight-b1-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b1-starlight_festival": unknown /* too deep */;
				"map-lamplight-b1-summerfest": unknown /* too deep */;
				"map-lamplight-b1-winterfest": unknown /* too deep */;
				"map-lamplight-b2": unknown /* too deep */;
				"map-lamplight-b2-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b2-springfest": unknown /* too deep */;
				"map-lamplight-b2-starlight_festival": unknown /* too deep */;
				"map-lamplight-b2-summerfest": unknown /* too deep */;
				"map-lamplight-b2-winterfest": unknown /* too deep */;
				"map-lamplight-b3": unknown /* too deep */;
				"map-lamplight-b3-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b3-springfest": unknown /* too deep */;
				"map-lamplight-b3-starlight_festival": unknown /* too deep */;
				"map-lamplight-b3-summerfest": unknown /* too deep */;
				"map-lamplight-b3-winterfest": unknown /* too deep */;
				"map-lamplight-b4": unknown /* too deep */;
				"map-lamplight-b4-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b4-springfest": unknown /* too deep */;
				"map-lamplight-b4-starlight_festival": unknown /* too deep */;
				"map-lamplight-b4-summerfest": unknown /* too deep */;
				"map-lamplight-b4-winterfest": unknown /* too deep */;
				"map-lamplight-b5": unknown /* too deep */;
				"map-lamplight-b5-pumpkinfest": unknown /* too deep */;
				"map-lamplight-b5-starlight_festival": unknown /* too deep */;
				"map-lamplight-b5-summerfest": unknown /* too deep */;
				"map-lamplight-b5-winterfest": unknown /* too deep */;
				"map-lamplight-c1": unknown /* too deep */;
				"map-lamplight-c2": unknown /* too deep */;
				"map-lamplight-c2-pumpkinfest": unknown /* too deep */;
				"map-lamplight-c2-springfest": unknown /* too deep */;
				"map-lamplight-c2-starlight_festival": unknown /* too deep */;
				"map-lamplight-c2-summerfest": unknown /* too deep */;
				"map-lamplight-c2-winterfest": unknown /* too deep */;
				"map-lamplight-c3": unknown /* too deep */;
				"map-lamplight-c3-pumpkinfest": unknown /* too deep */;
				"map-lamplight-c3-springfest": unknown /* too deep */;
				"map-lamplight-c3-starlight_festival": unknown /* too deep */;
				"map-lamplight-c3-summerfest": unknown /* too deep */;
				"map-lamplight-c3-winterfest": unknown /* too deep */;
				"map-lamplight-c4": unknown /* too deep */;
				"map-lamplight-c4-pumpkinfest": unknown /* too deep */;
				"map-lamplight-c4-springfest": unknown /* too deep */;
				"map-lamplight-c4-starlight_festival": unknown /* too deep */;
				"map-lamplight-c4-summerfest": unknown /* too deep */;
				"map-lamplight-c4-winterfest": unknown /* too deep */;
				"map-lamplight-coliseum": unknown /* too deep */;
				"map-lamplight-d3-springfest": unknown /* too deep */;
				"map-pathing": unknown /* too deep */;
				"map-shipwreck_shore-a1": unknown /* too deep */;
				"map-shipwreck_shore-a2": unknown /* too deep */;
				"map-shipwreck_shore-a3": unknown /* too deep */;
				"map-shipwreck_shore-a4": unknown /* too deep */;
				"map-shipwreck_shore-a5": unknown /* too deep */;
				"map-shipwreck_shore-a7": unknown /* too deep */;
				"map-shipwreck_shore-b10": unknown /* too deep */;
				"map-shipwreck_shore-b11": unknown /* too deep */;
				"map-shipwreck_shore-b12": unknown /* too deep */;
				"map-shipwreck_shore-b13": unknown /* too deep */;
				"map-shipwreck_shore-b2": unknown /* too deep */;
				"map-shipwreck_shore-b4": unknown /* too deep */;
				"map-shipwreck_shore-b5": unknown /* too deep */;
				"map-shipwreck_shore-b6": unknown /* too deep */;
				"map-shipwreck_shore-b7": unknown /* too deep */;
				"map-shipwreck_shore-b8": unknown /* too deep */;
				"map-shipwreck_shore-c10": unknown /* too deep */;
				"map-shipwreck_shore-c11": unknown /* too deep */;
				"map-shipwreck_shore-c12": unknown /* too deep */;
				"map-shipwreck_shore-c6": unknown /* too deep */;
				"map-shipwreck_shore-c7": unknown /* too deep */;
				"map-shipwreck_shore-c8": unknown /* too deep */;
				"map-shipwreck_shore-c9": unknown /* too deep */;
				"map-shipwreck_shore-titan": unknown /* too deep */;
				"map-shiverchill-a10": unknown /* too deep */;
				"map-shiverchill-a11": unknown /* too deep */;
				"map-shiverchill-a2": unknown /* too deep */;
				"map-shiverchill-a3": unknown /* too deep */;
				"map-shiverchill-a4": unknown /* too deep */;
				"map-shiverchill-a5": unknown /* too deep */;
				"map-shiverchill-a6": unknown /* too deep */;
				"map-shiverchill-a7": unknown /* too deep */;
				"map-shiverchill-a9": unknown /* too deep */;
				"map-shiverchill-b1": unknown /* too deep */;
				"map-shiverchill-b10": unknown /* too deep */;
				"map-shiverchill-b2": unknown /* too deep */;
				"map-shiverchill-b3": unknown /* too deep */;
				"map-shiverchill-b6": unknown /* too deep */;
				"map-shiverchill-b7": unknown /* too deep */;
				"map-shiverchill-b8": unknown /* too deep */;
				"map-shiverchill-b9": unknown /* too deep */;
				"map-skywatch-a0": unknown /* too deep */;
				"map-skywatch-a1": unknown /* too deep */;
				"map-skywatch-b1": unknown /* too deep */;
				"map-skywatch-b2": unknown /* too deep */;
				"map-skywatch-b3": unknown /* too deep */;
				"map-skywatch-c1": unknown /* too deep */;
				"map-skywatch-c2": unknown /* too deep */;
				"map-skywatch-c3": unknown /* too deep */;
				"map-skywatch-c4": unknown /* too deep */;
				"map-skywatch-c5": unknown /* too deep */;
				"map-skywatch-d1": unknown /* too deep */;
				"map-skywatch-d2": unknown /* too deep */;
				"map-skywatch-d3": unknown /* too deep */;
				"map-skywatch-e1": unknown /* too deep */;
				"map-skywatch-e2": unknown /* too deep */;
				"map-skywatch-e3": unknown /* too deep */;
				"map-skywatch-e4": unknown /* too deep */;
				"map-skywatch-e5": unknown /* too deep */;
				"map-toyzone-a1": unknown /* too deep */;
				"map-toyzone-b1": unknown /* too deep */;
				"map-toyzone-b2": unknown /* too deep */;
				"monster-small-125": unknown /* too deep */;
				"monster-small-126": unknown /* too deep */;
				"monster-small-127": unknown /* too deep */;
				"monster-small-128": unknown /* too deep */;
				"monster-small-129": unknown /* too deep */;
				"player-boot-24": unknown /* too deep */;
				"player-boot-68": unknown /* too deep */;
				"player-face-13": unknown /* too deep */;
				"player-face-2": unknown /* too deep */;
				"player-hair-1": unknown /* too deep */;
				"player-hat-24": unknown /* too deep */;
				"player-hat-33": unknown /* too deep */;
				"player-head-1": unknown /* too deep */;
				"player-neck-1": unknown /* too deep */;
				"player-weapon-20": unknown /* too deep */;
				"player-weapon-5": unknown /* too deep */;
				"sfx-18": unknown /* too deep */;
				"sfx-19": unknown /* too deep */;
				"sfx-31": unknown /* too deep */;
				"sfx-46": unknown /* too deep */;
				"singleImage-5": unknown /* too deep */;
				"spine-147": unknown /* too deep */;
				"spine-184": unknown /* too deep */;
				"spine-25": unknown /* too deep */;
				"tileset-academy": unknown /* too deep */;
				"tileset-academy-sup": unknown /* too deep */;
				"tileset-ancient-ruins": unknown /* too deep */;
				"tileset-ancient-ruins-statue": unknown /* too deep */;
				"tileset-archives": unknown /* too deep */;
				"tileset-bonfire": unknown /* too deep */;
				"tileset-classroom": unknown /* too deep */;
				"tileset-classroom-firefly": unknown /* too deep */;
				"tileset-cloud": unknown /* too deep */;
				"tileset-cloud-new": unknown /* too deep */;
				"tileset-cloud-no-collisions": unknown /* too deep */;
				"tileset-collisions": unknown /* too deep */;
				"tileset-darktower": unknown /* too deep */;
				"tileset-exterior-general": unknown /* too deep */;
				"tileset-firefly-new": unknown /* too deep */;
				"tileset-firepit": unknown /* too deep */;
				"tileset-forest": unknown /* too deep */;
				"tileset-forest-new": unknown /* too deep */;
				"tileset-generic": unknown /* too deep */;
				"tileset-generic-new": unknown /* too deep */;
				"tileset-generic-snow": unknown /* too deep */;
				"tileset-icecave": unknown /* too deep */;
				"tileset-icecave-new": unknown /* too deep */;
				"tileset-iceruins": unknown /* too deep */;
				"tileset-infinity-tower-construction": unknown /* too deep */;
				"tileset-interior": unknown /* too deep */;
				"tileset-interior-general": unknown /* too deep */;
				"tileset-interior-icecave": unknown /* too deep */;
				"tileset-interior-treehouse": unknown /* too deep */;
				"tileset-math-tower-basic": unknown /* too deep */;
				"tileset-minecarts": unknown /* too deep */;
				"tileset-outside": unknown /* too deep */;
				"tileset-outsidesnow": unknown /* too deep */;
				"tileset-railruins": unknown /* too deep */;
				"tileset-ship-exterior": unknown /* too deep */;
				"tileset-ship-interior": unknown /* too deep */;
				"tileset-shiverchill": unknown /* too deep */;
				"tileset-shiverchill-footsteppath": unknown /* too deep */;
				"tileset-shiverchill-new": unknown /* too deep */;
				"tileset-skywatch": unknown /* too deep */;
				"tileset-skywatch-buildings": unknown /* too deep */;
				"tileset-skywatch-factory": unknown /* too deep */;
				"tileset-springfest": unknown /* too deep */;
				"tileset-towertown-basic": unknown /* too deep */;
				"tileset-town": unknown /* too deep */;
				"tileset-town-december": unknown /* too deep */;
				"tileset-town-new": unknown /* too deep */;
				"tileset-town-november": unknown /* too deep */;
				"tileset-town-october": unknown /* too deep */;
				"tileset-town-summerfest": unknown /* too deep */;
				"tileset-toy-ruins-test": unknown /* too deep */;
				"tileset-toyzone": unknown /* too deep */;
				"tileset-toyzone-dragons": unknown /* too deep */;
				"tileset-tutorial-subspace": unknown /* too deep */;
				"tileset-twilight-arcade": unknown /* too deep */;
				"tileset-UI": unknown /* too deep */;
				"tileset-volcano": unknown /* too deep */;
				"tileset-volcano-new": unknown /* too deep */;
				"tileset-wall-collisions": unknown /* too deep */;
				"tileset-water-new": unknown /* too deep */;
				"towertown-default-1": unknown /* too deep */;
				"towertown-default-2": unknown /* too deep */;
				"towertown-tutorial": unknown /* too deep */;
				"voice-0": unknown /* too deep */;
				"voice-1-1": unknown /* too deep */;
				"voice-1-10": unknown /* too deep */;
				"voice-1-11": unknown /* too deep */;
				"voice-1-12": unknown /* too deep */;
				"voice-1-13": unknown /* too deep */;
				"voice-1-14": unknown /* too deep */;
				"voice-1-15": unknown /* too deep */;
				"voice-1-2": unknown /* too deep */;
				"voice-1-3": unknown /* too deep */;
				"voice-1-4": unknown /* too deep */;
				"voice-1-5": unknown /* too deep */;
				"voice-1-6": unknown /* too deep */;
				"voice-1-7": unknown /* too deep */;
				"voice-1-8": unknown /* too deep */;
				"voice-1-9": unknown /* too deep */;
				"voice-10-1": unknown /* too deep */;
				"voice-10-10": unknown /* too deep */;
				"voice-10-11": unknown /* too deep */;
				"voice-10-12": unknown /* too deep */;
				"voice-10-13": unknown /* too deep */;
				"voice-10-14": unknown /* too deep */;
				"voice-10-15": unknown /* too deep */;
				"voice-10-16": unknown /* too deep */;
				"voice-10-17": unknown /* too deep */;
				"voice-10-18": unknown /* too deep */;
				"voice-10-19": unknown /* too deep */;
				"voice-10-2": unknown /* too deep */;
				"voice-10-20": unknown /* too deep */;
				"voice-10-21": unknown /* too deep */;
				"voice-10-22": unknown /* too deep */;
				"voice-10-23": unknown /* too deep */;
				"voice-10-24": unknown /* too deep */;
				"voice-10-25": unknown /* too deep */;
				"voice-10-26": unknown /* too deep */;
				"voice-10-27": unknown /* too deep */;
				"voice-10-28": unknown /* too deep */;
				"voice-10-29": unknown /* too deep */;
				"voice-10-3": unknown /* too deep */;
				"voice-10-30": unknown /* too deep */;
				"voice-10-31": unknown /* too deep */;
				"voice-10-32": unknown /* too deep */;
				"voice-10-33": unknown /* too deep */;
				"voice-10-34": unknown /* too deep */;
				"voice-10-35": unknown /* too deep */;
				"voice-10-36": unknown /* too deep */;
				"voice-10-37": unknown /* too deep */;
				"voice-10-38": unknown /* too deep */;
				"voice-10-39": unknown /* too deep */;
				"voice-10-4": unknown /* too deep */;
				"voice-10-40": unknown /* too deep */;
				"voice-10-41": unknown /* too deep */;
				"voice-10-42": unknown /* too deep */;
				"voice-10-43": unknown /* too deep */;
				"voice-10-44": unknown /* too deep */;
				"voice-10-45": unknown /* too deep */;
				"voice-10-46": unknown /* too deep */;
				"voice-10-47": unknown /* too deep */;
				"voice-10-48": unknown /* too deep */;
				"voice-10-49": unknown /* too deep */;
				"voice-10-5": unknown /* too deep */;
				"voice-10-50": unknown /* too deep */;
				"voice-10-51": unknown /* too deep */;
				"voice-10-52": unknown /* too deep */;
				"voice-10-53": unknown /* too deep */;
				"voice-10-54": unknown /* too deep */;
				"voice-10-55": unknown /* too deep */;
				"voice-10-56": unknown /* too deep */;
				"voice-10-57": unknown /* too deep */;
				"voice-10-58": unknown /* too deep */;
				"voice-10-59": unknown /* too deep */;
				"voice-10-6": unknown /* too deep */;
				"voice-10-60": unknown /* too deep */;
				"voice-10-61": unknown /* too deep */;
				"voice-10-62": unknown /* too deep */;
				"voice-10-63": unknown /* too deep */;
				"voice-10-64": unknown /* too deep */;
				"voice-10-65": unknown /* too deep */;
				"voice-10-66": unknown /* too deep */;
				"voice-10-67": unknown /* too deep */;
				"voice-10-68": unknown /* too deep */;
				"voice-10-69": unknown /* too deep */;
				"voice-10-7": unknown /* too deep */;
				"voice-10-70": unknown /* too deep */;
				"voice-10-71": unknown /* too deep */;
				"voice-10-72": unknown /* too deep */;
				"voice-10-73": unknown /* too deep */;
				"voice-10-74": unknown /* too deep */;
				"voice-10-75": unknown /* too deep */;
				"voice-10-76": unknown /* too deep */;
				"voice-10-77": unknown /* too deep */;
				"voice-10-78": unknown /* too deep */;
				"voice-10-79": unknown /* too deep */;
				"voice-10-8": unknown /* too deep */;
				"voice-10-80": unknown /* too deep */;
				"voice-10-81": unknown /* too deep */;
				"voice-10-82": unknown /* too deep */;
				"voice-10-83": unknown /* too deep */;
				"voice-10-84": unknown /* too deep */;
				"voice-10-85": unknown /* too deep */;
				"voice-10-86": unknown /* too deep */;
				"voice-10-87": unknown /* too deep */;
				"voice-10-88": unknown /* too deep */;
				"voice-10-89": unknown /* too deep */;
				"voice-10-9": unknown /* too deep */;
				"voice-10-90": unknown /* too deep */;
				"voice-10-91": unknown /* too deep */;
				"voice-10-92": unknown /* too deep */;
				"voice-10-93": unknown /* too deep */;
				"voice-10-94": unknown /* too deep */;
				"voice-10-95": unknown /* too deep */;
				"voice-10-96": unknown /* too deep */;
				"voice-10-97": unknown /* too deep */;
				"voice-10-98": unknown /* too deep */;
				"voice-10-99": unknown /* too deep */;
				"voice-11": unknown /* too deep */;
				"voice-11-1": unknown /* too deep */;
				"voice-11-2": unknown /* too deep */;
				"voice-11-3": unknown /* too deep */;
				"voice-12-1": unknown /* too deep */;
				"voice-12-10": unknown /* too deep */;
				"voice-12-11": unknown /* too deep */;
				"voice-12-12": unknown /* too deep */;
				"voice-12-13": unknown /* too deep */;
				"voice-12-14": unknown /* too deep */;
				"voice-12-15": unknown /* too deep */;
				"voice-12-16": unknown /* too deep */;
				"voice-12-17": unknown /* too deep */;
				"voice-12-18": unknown /* too deep */;
				"voice-12-2": unknown /* too deep */;
				"voice-12-3": unknown /* too deep */;
				"voice-12-4": unknown /* too deep */;
				"voice-12-5": unknown /* too deep */;
				"voice-12-6": unknown /* too deep */;
				"voice-12-7": unknown /* too deep */;
				"voice-12-8": unknown /* too deep */;
				"voice-12-9": unknown /* too deep */;
				"voice-13-1": unknown /* too deep */;
				"voice-14-1": unknown /* too deep */;
				"voice-14-2": unknown /* too deep */;
				"voice-15-1": unknown /* too deep */;
				"voice-15-10": unknown /* too deep */;
				"voice-15-11": unknown /* too deep */;
				"voice-15-12": unknown /* too deep */;
				"voice-15-13": unknown /* too deep */;
				"voice-15-14": unknown /* too deep */;
				"voice-15-15": unknown /* too deep */;
				"voice-15-16": unknown /* too deep */;
				"voice-15-17": unknown /* too deep */;
				"voice-15-18": unknown /* too deep */;
				"voice-15-2": unknown /* too deep */;
				"voice-15-3": unknown /* too deep */;
				"voice-15-4": unknown /* too deep */;
				"voice-15-5": unknown /* too deep */;
				"voice-15-6": unknown /* too deep */;
				"voice-15-7": unknown /* too deep */;
				"voice-15-8": unknown /* too deep */;
				"voice-15-9": unknown /* too deep */;
				"voice-16-1": unknown /* too deep */;
				"voice-16-2": unknown /* too deep */;
				"voice-16-3": unknown /* too deep */;
				"voice-17-1": unknown /* too deep */;
				"voice-17-2": unknown /* too deep */;
				"voice-17-3": unknown /* too deep */;
				"voice-17-4": unknown /* too deep */;
				"voice-18-1": unknown /* too deep */;
				"voice-18-2": unknown /* too deep */;
				"voice-18-3": unknown /* too deep */;
				"voice-18-4": unknown /* too deep */;
				"voice-18-5": unknown /* too deep */;
				"voice-19-1": unknown /* too deep */;
				"voice-2": unknown /* too deep */;
				"voice-20-1": unknown /* too deep */;
				"voice-20-2": unknown /* too deep */;
				"voice-21-1": unknown /* too deep */;
				"voice-21-2": unknown /* too deep */;
				"voice-22-1": unknown /* too deep */;
				"voice-22-2": unknown /* too deep */;
				"voice-23-1": unknown /* too deep */;
				"voice-23-2": unknown /* too deep */;
				"voice-23-3": unknown /* too deep */;
				"voice-24-1": unknown /* too deep */;
				"voice-25-1": unknown /* too deep */;
				"voice-26-1": unknown /* too deep */;
				"voice-27-1": unknown /* too deep */;
				"voice-28-1": unknown /* too deep */;
				"voice-29-1": unknown /* too deep */;
				"voice-3": unknown /* too deep */;
				"voice-30-1": unknown /* too deep */;
				"voice-31-1": unknown /* too deep */;
				"voice-31-10": unknown /* too deep */;
				"voice-31-11": unknown /* too deep */;
				"voice-31-2": unknown /* too deep */;
				"voice-31-3": unknown /* too deep */;
				"voice-31-4": unknown /* too deep */;
				"voice-31-5": unknown /* too deep */;
				"voice-31-6": unknown /* too deep */;
				"voice-31-7": unknown /* too deep */;
				"voice-31-8": unknown /* too deep */;
				"voice-31-9": unknown /* too deep */;
				"voice-32-1": unknown /* too deep */;
				"voice-33-1": unknown /* too deep */;
				"voice-34-1": unknown /* too deep */;
				"voice-35-1": unknown /* too deep */;
				"voice-36-1": unknown /* too deep */;
				"voice-37-1": unknown /* too deep */;
				"voice-38-1": unknown /* too deep */;
				"voice-39-1": unknown /* too deep */;
				"voice-39-2": unknown /* too deep */;
				"voice-39-3": unknown /* too deep */;
				"voice-39-4": unknown /* too deep */;
				"voice-4": unknown /* too deep */;
				"voice-5": unknown /* too deep */;
				"voice-6": unknown /* too deep */;
				"voice-7": unknown /* too deep */;
				"voice-8-1": unknown /* too deep */;
				"voice-8-10": unknown /* too deep */;
				"voice-8-11": unknown /* too deep */;
				"voice-8-12": unknown /* too deep */;
				"voice-8-13": unknown /* too deep */;
				"voice-8-14": unknown /* too deep */;
				"voice-8-2": unknown /* too deep */;
				"voice-8-3": unknown /* too deep */;
				"voice-8-4": unknown /* too deep */;
				"voice-8-5": unknown /* too deep */;
				"voice-8-6": unknown /* too deep */;
				"voice-8-7": unknown /* too deep */;
				"voice-8-8": unknown /* too deep */;
				"voice-8-9": unknown /* too deep */;
				"voice-9": unknown /* too deep */;
			};
		};
		attacks: {
			calculateDamage(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			getAttack(t: unknown): unknown;
			getAttackPriority(t: unknown): unknown;
			getBestAttack(t: unknown, i: unknown, n: unknown): unknown;
			getHealingAttack(t: unknown): unknown;
			isStrong(t: unknown, i: unknown): unknown;
			isWeak(t: unknown, i: unknown): unknown;
		};
		audio: {
			_doNotResume: boolean;
			_dialogueBGM: number;
			_targetBGMVolume: number;
			_bgmFadeTween: null;
			currentVoice: null;
			clearOldSounds(): void;
			getBGMVolume(): unknown;
			getSFXVolume(): unknown;
			getVoiceVolume(): unknown;
			isBGMPlaying(t: unknown): unknown;
			isVoicePlaying(t: unknown): unknown;
			onVisibilityChanged(t: unknown): void;
			pauseBGM(): void;
			playBGM(t: unknown, i: unknown): void;
			playSFX(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			playSound(t: unknown, i: unknown): unknown;
			playVoice(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			resumeBGM(): void;
			setBGMVolume(t: unknown, i: unknown): void;
			setMute(t: unknown): void;
			setSFXVolume(t: unknown): void;
			setVoiceVolume(t: unknown): void;
			stopVoice(): void;
			currentBgm: {
				_destroyed: boolean;
				autoPlay: boolean;
				isDecoding: boolean;
				isDestroyed: boolean;
				isLoaded: boolean;
				isPlayable: boolean;
				isPlaying: boolean;
				loop: boolean;
				preload: boolean;
				singleInstance: boolean;
				usingAudioTag: boolean;
				duration: number;
				speed: number;
				volume: number;
				key: string;
				url: string;
				filters: undefined;
				mute: undefined;
				muted: undefined;
				paused: undefined;
				addMarker(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addSprites(t: unknown, i: unknown): unknown;
				autoPlayStart(): unknown;
				destroy(): void;
				pause(): unknown;
				play(t: unknown, i: unknown): unknown;
				playMarker(t: unknown, i: unknown, n: unknown, s: unknown, h: unknown, o: unknown): unknown;
				playWithOptions(t: unknown): unknown;
				refresh(): void;
				refreshPaused(): void;
				removeMarker(t: unknown): unknown;
				removeSprites(t: unknown): unknown;
				resume(): unknown;
				stop(): unknown;
				_onComplete: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onPlay: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_onStop: unknown /* too deep */;
				context: unknown /* too deep */;
				game: unknown /* too deep */;
				instances: unknown /* too deep */;
				media: unknown /* too deep */;
				onComplete: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onPlay: unknown /* too deep */;
				onResume: unknown /* too deep */;
				onStop: unknown /* too deep */;
				options: unknown /* too deep */;
				sound: unknown /* too deep */;
				sprites: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		battle: {
			battleScore(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			chooseAction(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			chooseRandomMonster(i: unknown): unknown;
			endEpicArena(t: unknown, i: unknown): void;
			getBattleLevel(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			initBackupEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initBattle(t: unknown, i: unknown): unknown;
			initEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initMainEnemy(t: unknown, i: unknown): unknown;
			initMetrics(): void;
			initWizardOpponent(t: unknown): unknown;
			onEndBattle(): void;
			replaceOpponentTeam(i: unknown, n: unknown): unknown;
			start(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			startEpicArena(t: unknown, i: unknown, n: unknown): unknown;
			battleStats: {
				endHealth: number;
				endTime: number;
				enemySpellsCast: number;
				enemySpellsCastFail: number;
				energy: number;
				energyCost: number;
				spellsCast: number;
				spellsFailed: number;
				startHealth: number;
				startTime: number;
				type: string;
				epicAttack: null;
				spellEnergyCost: null;
				battleCustomMeta: unknown /* too deep */;
				consumablesUsed: unknown /* too deep */;
				pets: unknown /* too deep */;
				petsRescued: unknown /* too deep */;
				rescuesSuccessful: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			metricsManager: {
				_supportsWasm: boolean;
				crashedLastLogin: boolean;
				_averageDownloadSpeed: number;
				_networkRequestCount: number;
				_totalAssetDownloadSize: number;
				_totalAssetDownloadTime: number;
				_totalAssetsDownloaded: number;
				lastGameSessionStartTime: number;
				timeInLoadingMS: number;
				_renderType: string;
				crashedLastTime: string;
				renderType: string;
				timeToPlayMS: null;
				assetDownloaded(t: unknown, i: unknown): void;
				checkForCrash(): void;
				createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
				getCustomMetrics(): unknown;
				getLastGameSessionStartTime(): unknown;
				increaseNetworkRequestCount(): void;
				objectCreated(t: unknown): void;
				objectDestroyed(t: unknown): void;
				sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
				setInBattle(t: unknown): void;
				setLastGameSessionStartTime(t: unknown): void;
				setLastMapLoadStarted(t: unknown): void;
				deviceInfoProvider: unknown /* too deep */;
				game: unknown /* too deep */;
				gameCompleteDataFactory: unknown /* too deep */;
				loadingMetricProperties: unknown /* too deep */;
				objectCountProperties: unknown /* too deep */;
			};
		};
		bounty: {
			MAX_BOUNTIES: number;
			checkValidBounty(t: unknown, i: unknown): unknown;
			compareBounties(t: unknown, i: unknown): unknown;
			completeBounty(t: unknown): void;
			generateBounties(t: unknown): void;
			getAveragePetTeamLevel(): unknown;
			getBounties(): unknown;
			getBounty(t: unknown): unknown;
			getCoord(t: unknown): unknown;
			getLevel(t: unknown): unknown;
			getMap(t: unknown): unknown;
			getMode(t: unknown): unknown;
			getMonster(t: unknown): unknown;
			getName(t: unknown): unknown;
			getReward(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			getText(t: unknown): unknown;
			getZoneName(t: unknown): unknown;
			hasBounty(t: unknown, i: unknown): unknown;
			placeBounty(t: unknown, i: unknown, n: unknown): void;
			placeBountyHere(t: unknown, i: unknown, n: unknown, e: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			mode: string[];
			postName: string[];
			preName: string[];
			reward: number[];
			titleName: string[];
			zones: string[];
		};
		breadcrumbManager: {
			completeBreadcrumb(t: unknown, i: unknown): unknown;
			init(t: unknown, i: unknown): void;
			isBreadcrumbComplete(t: unknown, i: unknown): unknown;
			resetBreadcrumb(t: unknown, i: unknown, n: unknown): unknown;
			resetBreadcrumbs(t: unknown): void;
			_onBreadcrumbCompleted: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			breadcrumbConfig: {
				addFeature(t: unknown): unknown;
				setup(): void;
				features: unknown /* too deep */;
			};
			dataSource: {
				_updated: boolean;
				updated: boolean;
				get(t: unknown): unknown;
				getCompletedQuests(t: unknown): unknown;
				getDataAndClear(): unknown;
				getDungeonSchema(t: unknown): unknown;
				getDungeonState(t: unknown, i: unknown): unknown;
				getZoneVars(t: unknown, i: unknown, n: unknown): unknown;
				set(t: unknown, i: unknown): void;
				setData(t: unknown): void;
				_dungeonStates: unknown /* too deep */;
				data: unknown /* too deep */;
			};
			onBreadcrumbCompleted: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
		};
		classModeController: {
			getInClassDisabledZones(): unknown;
			isClassMode(): unknown;
			isLockedZone(t: unknown): unknown;
			onClassMode(t: unknown, i: unknown): void;
			setClassMode(): void;
			lockedMaps: never[];
			lockedZones: string[];
		};
		colorReplaceController: {
			checkColorAsset(t: unknown, i: unknown, n: unknown, e: unknown): void;
			clearCache(t: unknown): void;
			clearEntries(t: unknown): unknown;
			generateAssetName(t: unknown, i: unknown): unknown;
			generateNewColor(t: unknown, i: unknown, n: unknown, e: unknown): void;
			getColorReplacedSprite(i: unknown, n: unknown, e: unknown, s: unknown): void;
			getColorReplacedSpriteGL(t: unknown, i: unknown, n: unknown): void;
			onBaseColorReady(t: unknown, i: unknown, n: unknown): void;
			pixelColorReplace(t: unknown): unknown;
			safeCallback(t: unknown, i: unknown): void;
			textureGenerated(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			baseColor: never[];
			baseDictionary: {};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			isBaseReady: {};
			isColorReady: {};
			newColor: never[];
		};
		create: {
			achievement(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			advButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			animatedSpineNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			animatedSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			aspenFrostBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			bonfireBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			boss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			button(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown): unknown;
			character(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown): unknown;
			cloudBoss(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			conjureCubeButton(t: unknown, i: unknown, n: unknown): unknown;
			dungeonIndicator(t: unknown, i: unknown): unknown;
			element(t: unknown, i: unknown, n: unknown): unknown;
			fillBar(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown, l: unknown): unknown;
			follow(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			font(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			forestBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			group(t: unknown, i: unknown, n: unknown): unknown;
			houseItem(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			hudButton(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			indicator(t: unknown, i: unknown): unknown;
			item(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			monster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			monsterEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, c: unknown, a: unknown, f: unknown, b: unknown): unknown;
			nameFont(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			nicknamerPedestal(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
			panel(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): unknown;
			panelButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			player(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown, a: unknown): unknown;
			progressBar(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			scrollBar(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			shadowWyrmBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			shiverchillBoss(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			slider(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			snow(t: unknown): void;
			spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			spineNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown): unknown;
			sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			spriteLite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			stackButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			textButton(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			timer(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			timerControl(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			titanIndicator(t: unknown, i: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		dialogue: {
			create(): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		dialogues: {
			get(t: unknown, i: unknown): unknown;
			data: {
				"bargo-bunny": unknown /* too deep */;
				benni: unknown /* too deep */;
				bok: unknown /* too deep */;
				broccolina: unknown /* too deep */;
				cebollini: unknown /* too deep */;
				"don-zorro": unknown /* too deep */;
				eugene: unknown /* too deep */;
				eve: unknown /* too deep */;
				flora: unknown /* too deep */;
				florian: unknown /* too deep */;
				gale: unknown /* too deep */;
				harriet: unknown /* too deep */;
				harvey: unknown /* too deep */;
				howard_cornelius: unknown /* too deep */;
				jim: unknown /* too deep */;
				julia_ghoulia: unknown /* too deep */;
				mama_star: unknown /* too deep */;
				merchant: unknown /* too deep */;
				"mozza-ella": unknown /* too deep */;
				noot: unknown /* too deep */;
				pippet: unknown /* too deep */;
				potion: unknown /* too deep */;
				professor_scoog: unknown /* too deep */;
				puppetmaster: unknown /* too deep */;
				"sir-vey": unknown /* too deep */;
				slime_guard: unknown /* too deep */;
				slime_queen: unknown /* too deep */;
				slime_worker: unknown /* too deep */;
				slurpy: unknown /* too deep */;
				swoopy: unknown /* too deep */;
				toy: unknown /* too deep */;
				verna: unknown /* too deep */;
				winterfest: unknown /* too deep */;
			};
		};
		education: {
			isNew: boolean;
			originalBGMVolume: null;
			rankUpArray: null;
			answerQuestion(t: unknown, i: unknown, n: unknown): void;
			closeFull(): void;
			closeQuestion(): void;
			createVideoLesson(t: unknown, i: unknown): unknown;
			disableLogging(): void;
			doesSkillIDHaveLesson(t: unknown): unknown;
			enableLogging(): void;
			finishAssignment(t: unknown): void;
			finishGrade(t: unknown): void;
			finishPlacement(t: unknown): void;
			getAllTopicBadges(): unknown;
			getAvailableLessonReport(): unknown;
			getCurrentAlgorithm(): unknown;
			getEducationSystemAPI(): unknown;
			getMasteredSkills(): unknown;
			getRankUpBadges(): unknown;
			getStudentData(t: unknown): unknown;
			getVideoLessonSignedUrls(t: unknown): void;
			initialize(t: unknown): void;
			instantWinDialogueCallback(t: unknown): void;
			isVideoLessonActive(): unknown;
			openFull(): void;
			processAnswerResponses(): void;
			question(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			reduceBGMVolumeBeforeQuestion(): void;
			restoreBGMVolumeAfterQuestion(): void;
			sendEducationEvent(t: unknown): void;
			showBannerComplete(): void;
			showGameChallenge(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): void;
			showProgressBar(t: unknown, i: unknown): void;
			updateBreadcrumbs(t: unknown): unknown;
			updatePlanStudent(t: unknown): void;
			updateStrandBasedPlacementTest(t: unknown): void;
			updateUser(t: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		effects: {
			batworks(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			bountyComplete(t: unknown, i: unknown): void;
			characterImage(t: unknown, i: unknown, n: unknown): void;
			characterText(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
			chatBubble(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			cleanup(t: unknown): void;
			confetti(t: unknown, i: unknown, n: unknown): void;
			do2DParabolicTween(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown): void;
			do3DParabolicTween(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, o: unknown, u: unknown): void;
			explode(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): void;
			fadeFlyingImage(t: unknown, i: unknown, n: unknown, e: unknown): void;
			fire(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): void;
			firework(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			flashText(t: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown): unknown;
			goldWork(t: unknown, i: unknown, n: unknown): void;
			icyworks(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			playFX(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): void;
			portalEffect(t: unknown, i: unknown, n: unknown): void;
			pumpkipuff(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			resizeContainer(t: unknown, i: unknown, n: unknown): void;
			setSource(t: unknown): void;
			shake(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			snowball(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			spellLearned(t: unknown, i: unknown, n: unknown): void;
			waterBalloon(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			screen: {
				_loadCompleteSent: boolean;
				complete: boolean;
				fadeInSet: boolean;
				hasBroadcastedInfo: boolean;
				hideHex: boolean;
				isMapScreen: boolean;
				showMenu: boolean;
				walkEnabled: boolean;
				frameUntilAddNextPlayer: number;
				startX: number;
				startY: number;
				tileSize: number;
				_key: string;
				key: string;
				saveTag: string;
				screenName: string;
				zoneName: string;
				_friendListLoadTimeoutID: null;
				screenData: null;
				previousMapData: undefined;
				previousZone: undefined;
				addAreaEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addBlock(t: unknown, i: unknown, n: unknown): unknown;
				addBounty(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown): unknown;
				addChest(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addClickableArea(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				addClickableEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
				addClickableMoveEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown, u: unknown, c: unknown): unknown;
				addCollect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				addConstructedNPC(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown): unknown;
				addConstructedQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
				addDoor(t: unknown, i: unknown): void;
				addEvent(t: unknown, i: unknown): void;
				addEventWithCallback(t: unknown, i: unknown): void;
				addFireflyEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				addFollow(t: unknown, i: unknown): unknown;
				addGnome(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMimic(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addMonster(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
				addNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addPathingIcon(t: unknown, i: unknown): void;
				addPippet(t: unknown, i: unknown, n: unknown): unknown;
				addPlayer(t: unknown): void;
				addQuestNPC(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				addWizard(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				arePopupsEnabled(): unknown;
				callFunctionOrSignal(t: unknown, i: unknown): void;
				canAddUsersToScreen(): unknown;
				chatPlayer(t: unknown): void;
				create(): void;
				createBackground(): void;
				disableOverlay(t: unknown): void;
				enableOverlay(t: unknown): void;
				endFX(): void;
				fadeIn(): void;
				fadeOut(t: unknown, i: unknown): void;
				findDebugAutoClickChildren(t: unknown, i: unknown, n: unknown): unknown;
				findDebugAutoClickListChildren(t: unknown, i: unknown, n: unknown): unknown;
				getInjectedValue(t: unknown): unknown;
				hideChat(t: unknown): void;
				hideOtherPlayer(t: unknown): unknown;
				init(): void;
				initListeners(): void;
				initMap(t: unknown, i: unknown, n: unknown, e: unknown): void;
				initScene(t: unknown, i: unknown): void;
				listener(t: unknown, i: unknown): unknown;
				movePlayer(t: unknown): void;
				onAddChild(t: unknown, i: unknown, n: unknown): void;
				onDebugAutoClick(t: unknown): void;
				onDebugAutoClickElement(i: unknown): unknown;
				onDebugAutoClickItem(t: unknown, i: unknown): void;
				onDebugAutoClickList(): void;
				onDoorClick(t: unknown, i: unknown): void;
				onEnableBackground(t: unknown): void;
				onEnableContent(t: unknown): void;
				onGetLayer(t: unknown): unknown;
				onMessage(t: unknown): void;
				onPlayerFullInfo(t: unknown): void;
				onPlayerJoined(t: unknown): void;
				onPlayerLeft(t: unknown): void;
				onPlayerList(t: unknown): unknown;
				openFeed(t: unknown): void;
				paused(): void;
				playerEffect(t: unknown): void;
				preload(): void;
				preprocess(): unknown;
				process(t: unknown): void;
				processAddCollect(t: unknown): void;
				processPopups(t: unknown): unknown;
				removeFollow(t: unknown): void;
				removePlayer(t: unknown): void;
				resumed(): void;
				screenSetup(): void;
				screenUpdate(): void;
				setFakePlayer(t: unknown): void;
				showCollisions(t: unknown): void;
				showMessage(t: unknown, i: unknown): void;
				shutdown(): void;
				start(i: unknown, n: unknown): unknown;
				startFX(): void;
				stopListeners(): void;
				transformPlayer(t: unknown): void;
				triggerElementClick(t: unknown): void;
				update(): void;
				updatePlayer(t: unknown): void;
				pendingCoordinates: Map<never, never>;
				_background: unknown /* too deep */;
				_bgSprite: unknown /* too deep */;
				_content: unknown /* too deep */;
				_dialogue: unknown /* too deep */;
				_foreground: unknown /* too deep */;
				_menus: unknown /* too deep */;
				_opaque: unknown /* too deep */;
				_overlay: unknown /* too deep */;
				_root: unknown /* too deep */;
				_uiLayer: unknown /* too deep */;
				_world: unknown /* too deep */;
				above: unknown /* too deep */;
				aboveGameObject: unknown /* too deep */;
				add: unknown /* too deep */;
				area: unknown /* too deep */;
				assets: unknown /* too deep */;
				background: unknown /* too deep */;
				backgroundGameObject: unknown /* too deep */;
				below: unknown /* too deep */;
				belowGameObject: unknown /* too deep */;
				clickAreas: unknown /* too deep */;
				content: unknown /* too deep */;
				contentGameObject: unknown /* too deep */;
				data: unknown /* too deep */;
				dialogue: unknown /* too deep */;
				events: unknown /* too deep */;
				floor: unknown /* too deep */;
				foreground: unknown /* too deep */;
				foregroundGameObject: unknown /* too deep */;
				game: unknown /* too deep */;
				input: unknown /* too deep */;
				menuBar: unknown /* too deep */;
				menus: unknown /* too deep */;
				metricsManager: unknown /* too deep */;
				opaque: unknown /* too deep */;
				overlay: unknown /* too deep */;
				path: unknown /* too deep */;
				pendingPlayers: unknown /* too deep */;
				playerList: unknown /* too deep */;
				playersInfo: unknown /* too deep */;
				prodigyGame: unknown /* too deep */;
				questProgress: unknown /* too deep */;
				stage: unknown /* too deep */;
				uiLayer: unknown /* too deep */;
				user: unknown /* too deep */;
				zone: unknown /* too deep */;
			};
		};
		event: {
			eventID: number;
			create(): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		eventBroadcaster: {
			broadcast(t: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			listeners: unknown /* too deep */[];
		};
		friendsListNetworkHandler: {
			hasReceivedClass: boolean;
			hasReceivedFriends: boolean;
			hasReceivedFriendsAppearance: boolean;
			hasReceivedFriendsAppearanceOfActualFriends: boolean;
			friendsCap: number;
			pendingRequests: number;
			acceptFriendRequest(t: unknown, i: unknown): void;
			acceptFriendRequestSuccess(t: unknown, n: unknown, e: unknown): void;
			broadcastSocialEvent(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			cancelFriendRequest(t: unknown): void;
			cancelFriendRequestSuccess(t: unknown, n: unknown): void;
			clearFriendRequestsCache(): void;
			fetchClassmates(): void;
			getFriend(t: unknown): unknown;
			getFriendQuestProgress(t: unknown): unknown;
			getFriendRequestList(t: unknown, i: unknown): void;
			getFriendRequestListSuccess(t: unknown): void;
			getFriendsCap(): unknown;
			getFriendsList(): void;
			getFriendsListSuccess(t: unknown): void;
			getTotalFriendRequests(t: unknown): void;
			getTotalFriendRequestsFailure(): void;
			getTotalFriendRequestsSuccess(t: unknown, i: unknown): void;
			getUserAppearance(t: unknown, i: unknown): void;
			getUserData(t: unknown): void;
			hasPendingRequests(): unknown;
			isClassmatesListDownloaded(): unknown;
			isFriendsListDownloaded(): unknown;
			networkCallFailure(t: unknown, i: unknown): void;
			onCancelFriendRequestClose(t: unknown): void;
			onGetUserAppearance(t: unknown, i: unknown): void;
			processClassmates(t: unknown): void;
			rejectFriendRequest(t: unknown, i: unknown): void;
			rejectFriendRequestSuccess(t: unknown, n: unknown, e: unknown): void;
			removeFriend(t: unknown): void;
			removeFriendSuccess(t: unknown, n: unknown): void;
			sendFriendRequest(t: unknown): void;
			sendFriendRequestSuccess(t: unknown, i: unknown): void;
			setup(): void;
			shouldFetchClassmates(): unknown;
			showGenericNetworkError(): void;
			classList: unknown /* too deep */[];
			friendRequestList: never[];
			friendsList: never[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		game: {
			_paused: boolean;
			_pausedByCode: boolean;
			isBooted: boolean;
			paused: boolean;
			pausedByCode: boolean;
			transparent: boolean;
			versioned: boolean;
			_height: number;
			_width: number;
			broadcastId: number;
			height: number;
			resolution: number;
			width: number;
			clientVersion: string;
			windowHeight: undefined;
			windowWidth: undefined;
			boot(): void;
			bootSystems(): void;
			createApp(i: unknown, n: unknown): unknown;
			createSystems(): void;
			destroy(): void;
			focusGain(t: unknown): void;
			focusLoss(t: unknown): void;
			gamePaused(t: unknown): void;
			gameResumed(t: unknown): void;
			init(): void;
			pauseGame(t: unknown): void;
			postUpdate(t: unknown): void;
			showDebugHeader(): void;
			toggleFpsGraph(): void;
			update(i: unknown): void;
			canvas: HTMLCanvasElement;
			parent: HTMLCanvasElement;
			_add: {
				audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				existing(t: unknown): unknown;
				graphics(t: unknown, i: unknown, n: unknown): unknown;
				group(t: unknown, i: unknown, n: unknown): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
				sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
				tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				tween(t: unknown, i: unknown, n: unknown): unknown;
				game: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			_app: {
				_resizeId: null;
				_resizeTo: null;
				cancelResize(): void;
				destroy(e: unknown, r: unknown): void;
				queueResize(): unknown;
				render(): void;
				resize(): void;
				start(): void;
				stop(): void;
				view: HTMLCanvasElement;
				_ticker: unknown /* too deep */;
				loader: unknown /* too deep */;
				renderer: unknown /* too deep */;
				screen: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			_cache: {
				addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
				addImage(t: unknown, i: unknown, n: unknown): void;
				addItem(t: unknown, i: unknown, n: unknown): void;
				addJSON(t: unknown, i: unknown): void;
				addRenderTexture(t: unknown, i: unknown): void;
				addSound(t: unknown, i: unknown): void;
				addSpine(t: unknown, i: unknown): void;
				addText(t: unknown, i: unknown): void;
				addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				checkBitmapDataKey(t: unknown): unknown;
				checkFrameData(t: unknown): unknown;
				checkImageKey(t: unknown): unknown;
				checkJSONKey(t: unknown): unknown;
				checkRenderTextureKey(t: unknown): unknown;
				checkSoundKey(t: unknown): unknown;
				checkSpineKey(t: unknown): unknown;
				checkTextKey(t: unknown): unknown;
				deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				getBitmapData(t: unknown): unknown;
				getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
				getFrameData(t: unknown, i: unknown): unknown;
				getImage(t: unknown): unknown;
				getJSON(t: unknown): unknown;
				getKeys(t: unknown): unknown;
				getMap(t: unknown): unknown;
				getRenderTexture(t: unknown): unknown;
				getSound(t: unknown): unknown;
				getSpine(t: unknown): unknown;
				getText(t: unknown): unknown;
				getTexture(t: unknown, i: unknown): unknown;
				hasMap(t: unknown): unknown;
				isSoundDecoded(t: unknown): unknown;
				removeAllItems(): void;
				removeAllItemsOfType(t: unknown): void;
				removeBitmapData(t: unknown): void;
				removeImage(t: unknown): void;
				removeItem(t: unknown, i: unknown): void;
				removeJSON(t: unknown): void;
				removeRenderTexture(t: unknown): void;
				removeSound(t: unknown): void;
				removeSpine(t: unknown): void;
				removeText(t: unknown): void;
				removeTextureAtlas(t: unknown): void;
				_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				_game: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			_config: {
				failIfMajorPerformanceCaveat: boolean;
				roundPixels: boolean;
				height: number;
				width: number;
				parent: string;
			};
			_consoleLogger: {
				_shouldColorCodeLogs: boolean;
				_minimumLogLevel: number;
				_minimumStackTraceLogLevel: number;
				getLogStyle(t: unknown): unknown;
				getTextSytle(): unknown;
				log(t: unknown, i: unknown): void;
				setColoredLogsEnabled(t: unknown): void;
				setLogLevel(t: unknown): void;
			};
			_device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			_input: {
				enabled: boolean;
				pollLocked: boolean;
				recordPointerHistory: boolean;
				resetLocked: boolean;
				_pollCounter: number;
				_x: number;
				_y: number;
				doubleTapRate: number;
				holdRate: number;
				justPressedRate: number;
				justReleasedRate: number;
				maxPointers: number;
				minPriorityID: number;
				multiInputOverride: number;
				pollRate: number;
				recordLimit: number;
				recordRate: number;
				tapRate: number;
				totalActivePointers: number;
				totalInactivePointers: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				customCandidateHandler: null;
				customCandidateHandlerContext: null;
				addMoveCallback(t: unknown, i: unknown): void;
				addPointer(): unknown;
				addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
				boot(t: unknown): void;
				clearEnterCallback(): void;
				countActivePointers(t: unknown): unknown;
				deleteMoveCallback(t: unknown, i: unknown): void;
				destroy(): void;
				executeTouchLockCallbacks(t: unknown, i: unknown): void;
				getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
				getPointer(t: unknown): unknown;
				getPointerFromId(t: unknown): unknown;
				getPointerFromIdentifier(t: unknown): unknown;
				hitTest(t: unknown, i: unknown): unknown;
				preUpdate(): void;
				removeTouchLockCallback(t: unknown, i: unknown): unknown;
				reset(t: unknown): void;
				resetSpeed(t: unknown, i: unknown): void;
				setEnterCallback(t: unknown): void;
				setInteractiveCandidateHandler(t: unknown, i: unknown): void;
				startPointer(t: unknown): unknown;
				stopPointer(t: unknown, i: unknown): unknown;
				update(): void;
				updateChildren(t: unknown): void;
				updateInteractiveItems(): void;
				updatePointer(t: unknown): unknown;
				hitCanvas: HTMLCanvasElement;
				hitContext: CanvasRenderingContext2D;
				_oldPosition: unknown /* too deep */;
				activePointer: unknown /* too deep */;
				circle: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveItems: unknown /* too deep */;
				keyboard: unknown /* too deep */;
				mouse: unknown /* too deep */;
				mousePointer: unknown /* too deep */;
				mouseWheel: unknown /* too deep */;
				mspointer: unknown /* too deep */;
				onDown: unknown /* too deep */;
				onHold: unknown /* too deep */;
				onPointerMove: unknown /* too deep */;
				onTap: unknown /* too deep */;
				onTouchEndEvent: unknown /* too deep */;
				onTouchStartEvent: unknown /* too deep */;
				onUp: unknown /* too deep */;
				pointer1: unknown /* too deep */;
				pointer2: unknown /* too deep */;
				pointerLock: unknown /* too deep */;
				pointers: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				speed: unknown /* too deep */;
				touch: unknown /* too deep */;
			};
			_load: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
			_onPause: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_onResume: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			_rnd: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
			_scale: {
				_booted: boolean;
				_pageAlignHorizontally: boolean;
				_pageAlignVertically: boolean;
				forceLandscape: boolean;
				forcePortrait: boolean;
				incorrectOrientation: boolean;
				isFullScreen: boolean;
				isLandscape: boolean;
				isPortrait: boolean;
				pageAlignHorizontally: boolean;
				pageAlignVertically: boolean;
				parentIsWindow: boolean;
				_fullScreenScaleMode: number;
				_lastUpdate: number;
				_scaleMode: number;
				_updateThrottle: number;
				_updateThrottleReset: number;
				aspectRatio: number;
				currentScaleMode: number;
				fullScreenScaleMode: number;
				height: number;
				scaleMode: number;
				sourceAspectRatio: number;
				trackParentInterval: number;
				width: number;
				screenOrientation: string;
				_pendingScaleMode: null;
				onResizeContext: null;
				_fullScreenChange(i: unknown): void;
				_fullScreenError(i: unknown): void;
				_gameResumed(): void;
				_orientationChange(i: unknown): void;
				_windowResize(i: unknown): void;
				align(t: unknown, i: unknown): void;
				alignCanvas(t: unknown, i: unknown): void;
				boot(): void;
				cleanupCreatedTarget(): void;
				createFullScreenTarget(): unknown;
				destroy(): void;
				forceOrientation(t: unknown, i: unknown): void;
				fullScreenChange(t: unknown): void;
				fullScreenError(t: unknown): void;
				getParentBounds(t: unknown, i: unknown): unknown;
				orientationChange(t: unknown): void;
				parseConfig(t: unknown): void;
				pauseUpdate(): void;
				prepScreenMode(i: unknown): void;
				preUpdate(): void;
				queueUpdate(t: unknown): void;
				recalculateCanvasOffset(): void;
				reflowCanvas(): void;
				reflowGame(): void;
				refresh(): void;
				resetCanvas(t: unknown, i: unknown): void;
				setExactFit(): void;
				setGameSize(i: unknown, n: unknown): void;
				setMaximum(): void;
				setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
				setResizeCallback(t: unknown, i: unknown): void;
				setShowAll(t: unknown): void;
				setupScale(t: unknown, i: unknown): void;
				signalSizeChange(): void;
				startFullScreen(t: unknown, i: unknown): unknown;
				stopFullScreen(): unknown;
				updateDimensions(i: unknown, n: unknown, e: unknown): void;
				updateLayout(): void;
				updateOrientationState(): unknown;
				updateScalingAndBounds(): void;
				windowResize(t: unknown): void;
				boundingParent: HTMLDivElement;
				parentNode: HTMLCanvasElement;
				_gameSize: unknown /* too deep */;
				_lastReportedCanvasSize: unknown /* too deep */;
				_lastReportedGameSize: unknown /* too deep */;
				_parentBounds: unknown /* too deep */;
				_tempBounds: unknown /* too deep */;
				bounds: unknown /* too deep */;
				canvasOffset: unknown /* too deep */;
				device: unknown /* too deep */;
				dom: unknown /* too deep */;
				enterIncorrectOrientation: unknown /* too deep */;
				game: unknown /* too deep */;
				leaveIncorrectOrientation: unknown /* too deep */;
				margin: unknown /* too deep */;
				onFullScreenChange: unknown /* too deep */;
				onFullScreenError: unknown /* too deep */;
				onFullScreenInit: unknown /* too deep */;
				onOrientationChange: unknown /* too deep */;
				onSizeChange: unknown /* too deep */;
				parentScaleFactor: unknown /* too deep */;
				scaleFactor: unknown /* too deep */;
				scaleFactorInverted: unknown /* too deep */;
				windowConstraints: unknown /* too deep */;
			};
			_sound: {
				_codeMuted: boolean;
				_muted: boolean;
				_watching: boolean;
				connectToMaster: boolean;
				mute: boolean;
				muteOnPause: boolean;
				noAudio: boolean;
				touchLocked: boolean;
				baseLatency: number;
				channels: number;
				volume: number;
				_unlockSource: null;
				_watchCallback: null;
				_watchContext: null;
				_onResumeWebAudioOnClick(): void;
				_resumeWebAudioOnClick(): void;
				add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				boot(): void;
				destroy(): void;
				pauseAll(): void;
				play(t: unknown, i: unknown, n: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(): void;
				removeByKey(t: unknown): unknown;
				resumeAll(): void;
				resumeWebAudio(): unknown;
				setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
				setMute(): void;
				setTouchLock(): void;
				setTouchUnlock(): void;
				stopAll(): void;
				unlock(): unknown;
				unsetMute(): void;
				update(): void;
				context: AudioContext;
				emptyBuffer: AudioBuffer;
				_sounds: unknown /* too deep */;
				_watchList: unknown /* too deep */;
				game: unknown /* too deep */;
				onMute: unknown /* too deep */;
				onSoundDecode: unknown /* too deep */;
				onTouchUnlock: unknown /* too deep */;
				onUnMute: unknown /* too deep */;
				onVolumeChange: unknown /* too deep */;
				sounds: unknown /* too deep */;
			};
			_stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			_state: {
				_clearWorld: boolean;
				current: string;
				_pendingState: null;
				add(t: unknown, i: unknown, n: unknown): unknown;
				boot(): void;
				clearCurrentState(): void;
				destroy(): void;
				get(t: unknown): unknown;
				getCurrentState(): unknown;
				loadComplete(): void;
				pause(): void;
				preUpdate(): unknown;
				remove(t: unknown): void;
				resume(): void;
				setCurrentState(t: unknown): void;
				start(t: unknown, i: unknown): void;
				update(): void;
				_states: Map<string, unknown /* too deep */>;
				states: Map<string, unknown /* too deep */>;
				_current: unknown /* too deep */;
				_initArgs: unknown /* too deep */;
				_onStateChange: unknown /* too deep */;
				game: unknown /* too deep */;
				onStateChange: unknown /* too deep */;
			};
			_time: {
				_deltaMS: number;
				_pauseStarted: number;
				_prevTimeMS: number;
				_started: number;
				_timeMS: number;
				deltaMS: number;
				desiredFps: number;
				pauseDuration: number;
				prevTimeMS: number;
				timeMS: number;
				timeToCall: number;
				add(t: unknown): unknown;
				boot(): void;
				create(t: unknown): unknown;
				elapsedSecondsSince(t: unknown): unknown;
				elapsedSince(t: unknown): unknown;
				gamePaused(): void;
				gameResumed(): void;
				removeAll(): void;
				reset(): void;
				setTime(t: unknown): void;
				totalElapsedSeconds(): unknown;
				update(t: unknown): void;
				updateTimers(): void;
				_timers: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			_tweens: {
				add(t: unknown, i: unknown, n: unknown): unknown;
				create(t: unknown, i: unknown, n: unknown): unknown;
				destroy(): void;
				findOwnerForTween(t: unknown): unknown;
				getAll(): unknown;
				pauseAll(): void;
				remove(t: unknown): void;
				removeAll(): void;
				removeAllFromOwner(t: unknown): void;
				removeFrom(t: unknown, i: unknown): void;
				removeTweenFromOwner(t: unknown): unknown;
				resumeAll(): void;
				update(): unknown;
				_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
				_tweens: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			add: {
				audio(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				bitmapData(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				existing(t: unknown): unknown;
				graphics(t: unknown, i: unknown, n: unknown): unknown;
				group(t: unknown, i: unknown, n: unknown): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				renderTexture(t: unknown, i: unknown, n: unknown, s: unknown): unknown;
				sound(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				sprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
				text(t: unknown, i: unknown, n: unknown, s: unknown, r: unknown): unknown;
				tileSprite(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
				tween(t: unknown, i: unknown, n: unknown): unknown;
				game: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			app: {
				_resizeId: null;
				_resizeTo: null;
				cancelResize(): void;
				destroy(e: unknown, r: unknown): void;
				queueResize(): unknown;
				render(): void;
				resize(): void;
				start(): void;
				stop(): void;
				view: HTMLCanvasElement;
				_ticker: unknown /* too deep */;
				loader: unknown /* too deep */;
				renderer: unknown /* too deep */;
				screen: unknown /* too deep */;
				stage: unknown /* too deep */;
			};
			broadcaster: {
				broadcastIdCount: number;
				addAppListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): void;
				broadcast(t: unknown, i: unknown, n: unknown): unknown;
				clear(): void;
				hashContext(t: unknown): unknown;
				removeAppListener(t: unknown, i: unknown, n: unknown): void;
				callbacks: unknown /* too deep */;
				game: unknown /* too deep */;
				listeners: unknown /* too deep */;
			};
			cache: {
				addBitmapData(t: unknown, i: unknown, n: unknown): unknown;
				addImage(t: unknown, i: unknown, n: unknown): void;
				addItem(t: unknown, i: unknown, n: unknown): void;
				addJSON(t: unknown, i: unknown): void;
				addRenderTexture(t: unknown, i: unknown): void;
				addSound(t: unknown, i: unknown): void;
				addSpine(t: unknown, i: unknown): void;
				addText(t: unknown, i: unknown): void;
				addTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				checkBitmapDataKey(t: unknown): unknown;
				checkFrameData(t: unknown): unknown;
				checkImageKey(t: unknown): unknown;
				checkJSONKey(t: unknown): unknown;
				checkRenderTextureKey(t: unknown): unknown;
				checkSoundKey(t: unknown): unknown;
				checkSpineKey(t: unknown): unknown;
				checkTextKey(t: unknown): unknown;
				deleteStaleCache(i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				getBitmapData(t: unknown): unknown;
				getFrameByName(t: unknown, i: unknown, n: unknown): unknown;
				getFrameData(t: unknown, i: unknown): unknown;
				getImage(t: unknown): unknown;
				getJSON(t: unknown): unknown;
				getKeys(t: unknown): unknown;
				getMap(t: unknown): unknown;
				getRenderTexture(t: unknown): unknown;
				getSound(t: unknown): unknown;
				getSpine(t: unknown): unknown;
				getText(t: unknown): unknown;
				getTexture(t: unknown, i: unknown): unknown;
				hasMap(t: unknown): unknown;
				isSoundDecoded(t: unknown): unknown;
				removeAllItems(): void;
				removeAllItemsOfType(t: unknown): void;
				removeBitmapData(t: unknown): void;
				removeImage(t: unknown): void;
				removeItem(t: unknown, i: unknown): void;
				removeJSON(t: unknown): void;
				removeRenderTexture(t: unknown): void;
				removeSound(t: unknown): void;
				removeSpine(t: unknown): void;
				removeText(t: unknown): void;
				removeTextureAtlas(t: unknown): void;
				_cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				cacheMap: Map<number, (Map<string, unknown /* too deep */> | Map<never, never>)>;
				_game: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			config: {
				failIfMajorPerformanceCaveat: boolean;
				roundPixels: boolean;
				height: number;
				width: number;
				parent: string;
			};
			device: {
				android: boolean;
				fullscreenKeyboard: boolean;
				iOS: boolean;
				isFullScreenSupported: boolean;
				isInitialized: boolean;
				pointerLock: boolean;
				touch: boolean;
				webAudio: boolean;
				browser: number;
				deviceReadyAt: number;
				os: number;
				cancelFullscreen: string;
				requestFullscreen: string;
				wheelEvent: string;
				mspointer: undefined;
				checkFullScreen(): void;
				dispatchSignals(): void;
				isAndroidStockBrowser(): unknown;
				needsTouchUnlock(): unknown;
				readyCheck(): void;
				whenReady(t: unknown, i: unknown): void;
				callbacks: unknown /* too deep */;
				onInitialized: unknown /* too deep */;
			};
			fps: {
				_isPendingResumeRecordFPS: boolean;
				_record: boolean;
				record: boolean;
				_framerate: number;
				_frames: number;
				_prevTime: number;
				_rollingCount: number;
				_rollingSum: number;
				endFrame(): void;
				getAverageFramerate(): unknown;
				getFramerate(): unknown;
				timeNow(): unknown;
			};
			frameWorkManager: {
				_frameWorkDone: boolean;
				_frameStartTime: number;
				frameBudget: number;
				frameBudgetRemaining: number;
				frameTimeElapsed: number;
				_now(): void;
				awaitFreeTime(t: unknown, i: unknown): void;
				cancelWork(): unknown;
				flushWorkQueue(): void;
				markFrameEnd(): void;
				markFrameStart(): void;
				_workPromises: unknown /* too deep */;
			};
			input: {
				enabled: boolean;
				pollLocked: boolean;
				recordPointerHistory: boolean;
				resetLocked: boolean;
				_pollCounter: number;
				_x: number;
				_y: number;
				doubleTapRate: number;
				holdRate: number;
				justPressedRate: number;
				justReleasedRate: number;
				maxPointers: number;
				minPriorityID: number;
				multiInputOverride: number;
				pollRate: number;
				recordLimit: number;
				recordRate: number;
				tapRate: number;
				totalActivePointers: number;
				totalInactivePointers: number;
				worldX: number;
				worldY: number;
				x: number;
				y: number;
				customCandidateHandler: null;
				customCandidateHandlerContext: null;
				addMoveCallback(t: unknown, i: unknown): void;
				addPointer(): unknown;
				addTouchLockCallback(t: unknown, i: unknown, n: unknown): void;
				boot(t: unknown): void;
				clearEnterCallback(): void;
				countActivePointers(t: unknown): unknown;
				deleteMoveCallback(t: unknown, i: unknown): void;
				destroy(): void;
				executeTouchLockCallbacks(t: unknown, i: unknown): void;
				getLocalPosition(t: unknown, i: unknown, n: unknown): unknown;
				getPointer(t: unknown): unknown;
				getPointerFromId(t: unknown): unknown;
				getPointerFromIdentifier(t: unknown): unknown;
				hitTest(t: unknown, i: unknown): unknown;
				preUpdate(): void;
				removeTouchLockCallback(t: unknown, i: unknown): unknown;
				reset(t: unknown): void;
				resetSpeed(t: unknown, i: unknown): void;
				setEnterCallback(t: unknown): void;
				setInteractiveCandidateHandler(t: unknown, i: unknown): void;
				startPointer(t: unknown): unknown;
				stopPointer(t: unknown, i: unknown): unknown;
				update(): void;
				updateChildren(t: unknown): void;
				updateInteractiveItems(): void;
				updatePointer(t: unknown): unknown;
				hitCanvas: HTMLCanvasElement;
				hitContext: CanvasRenderingContext2D;
				_oldPosition: unknown /* too deep */;
				activePointer: unknown /* too deep */;
				circle: unknown /* too deep */;
				game: unknown /* too deep */;
				interactiveItems: unknown /* too deep */;
				keyboard: unknown /* too deep */;
				mouse: unknown /* too deep */;
				mousePointer: unknown /* too deep */;
				mouseWheel: unknown /* too deep */;
				mspointer: unknown /* too deep */;
				onDown: unknown /* too deep */;
				onHold: unknown /* too deep */;
				onPointerMove: unknown /* too deep */;
				onTap: unknown /* too deep */;
				onTouchEndEvent: unknown /* too deep */;
				onTouchStartEvent: unknown /* too deep */;
				onUp: unknown /* too deep */;
				pointer1: unknown /* too deep */;
				pointer2: unknown /* too deep */;
				pointerLock: unknown /* too deep */;
				pointers: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				speed: unknown /* too deep */;
				touch: unknown /* too deep */;
			};
			inputDispatcher: {
				dispatchKeyboardEvent(t: unknown, i: unknown): void;
				dispatchKeyPressEvent(t: unknown, i: unknown, n: unknown): void;
				dispatchMouseEvent(t: unknown, i: unknown): void;
				game: unknown /* too deep */;
			};
			load: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
			onPause: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			onResume: {
				_shouldPropagate: boolean;
				active: boolean;
				memorize: boolean;
				_addBinding(t: unknown): void;
				_boundDispatch(): unknown;
				_indexOfListener(t: unknown, i: unknown): unknown;
				add(t: unknown, i: unknown, n: unknown): unknown;
				addOnce(t: unknown, i: unknown, n: unknown): unknown;
				boundDispatch(): unknown;
				dispatch(): void;
				dispose(): void;
				forget(): void;
				getNumListeners(): unknown;
				halt(): void;
				has(t: unknown, i: unknown): unknown;
				registerListener(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				toString(): unknown;
				validateListener(t: unknown, i: unknown): void;
				_bindings: unknown /* too deep */;
				bindings: unknown /* too deep */;
			};
			renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			rnd: {
				c: number;
				s0: number;
				s1: number;
				s2: number;
				angle(): unknown;
				frac(): unknown;
				hash(t: unknown): unknown;
				integer(): unknown;
				integerInRange(t: unknown, i: unknown): unknown;
				normal(): unknown;
				pick(t: unknown): unknown;
				real(): unknown;
				realInRange(t: unknown, i: unknown): unknown;
				rnd(): unknown;
				shuffle(t: unknown): unknown;
				sign(): unknown;
				sow(t: unknown): void;
				state(t: unknown): unknown;
				uuid(): unknown;
				weightedPick(t: unknown): unknown;
			};
			scale: {
				_booted: boolean;
				_pageAlignHorizontally: boolean;
				_pageAlignVertically: boolean;
				forceLandscape: boolean;
				forcePortrait: boolean;
				incorrectOrientation: boolean;
				isFullScreen: boolean;
				isLandscape: boolean;
				isPortrait: boolean;
				pageAlignHorizontally: boolean;
				pageAlignVertically: boolean;
				parentIsWindow: boolean;
				_fullScreenScaleMode: number;
				_lastUpdate: number;
				_scaleMode: number;
				_updateThrottle: number;
				_updateThrottleReset: number;
				aspectRatio: number;
				currentScaleMode: number;
				fullScreenScaleMode: number;
				height: number;
				scaleMode: number;
				sourceAspectRatio: number;
				trackParentInterval: number;
				width: number;
				screenOrientation: string;
				_pendingScaleMode: null;
				onResizeContext: null;
				_fullScreenChange(i: unknown): void;
				_fullScreenError(i: unknown): void;
				_gameResumed(): void;
				_orientationChange(i: unknown): void;
				_windowResize(i: unknown): void;
				align(t: unknown, i: unknown): void;
				alignCanvas(t: unknown, i: unknown): void;
				boot(): void;
				cleanupCreatedTarget(): void;
				createFullScreenTarget(): unknown;
				destroy(): void;
				forceOrientation(t: unknown, i: unknown): void;
				fullScreenChange(t: unknown): void;
				fullScreenError(t: unknown): void;
				getParentBounds(t: unknown, i: unknown): unknown;
				orientationChange(t: unknown): void;
				parseConfig(t: unknown): void;
				pauseUpdate(): void;
				prepScreenMode(i: unknown): void;
				preUpdate(): void;
				queueUpdate(t: unknown): void;
				recalculateCanvasOffset(): void;
				reflowCanvas(): void;
				reflowGame(): void;
				refresh(): void;
				resetCanvas(t: unknown, i: unknown): void;
				setExactFit(): void;
				setGameSize(i: unknown, n: unknown): void;
				setMaximum(): void;
				setMinMax(t: unknown, i: unknown, n: unknown, e: unknown): void;
				setResizeCallback(t: unknown, i: unknown): void;
				setShowAll(t: unknown): void;
				setupScale(t: unknown, i: unknown): void;
				signalSizeChange(): void;
				startFullScreen(t: unknown, i: unknown): unknown;
				stopFullScreen(): unknown;
				updateDimensions(i: unknown, n: unknown, e: unknown): void;
				updateLayout(): void;
				updateOrientationState(): unknown;
				updateScalingAndBounds(): void;
				windowResize(t: unknown): void;
				boundingParent: HTMLDivElement;
				parentNode: HTMLCanvasElement;
				_gameSize: unknown /* too deep */;
				_lastReportedCanvasSize: unknown /* too deep */;
				_lastReportedGameSize: unknown /* too deep */;
				_parentBounds: unknown /* too deep */;
				_tempBounds: unknown /* too deep */;
				bounds: unknown /* too deep */;
				canvasOffset: unknown /* too deep */;
				device: unknown /* too deep */;
				dom: unknown /* too deep */;
				enterIncorrectOrientation: unknown /* too deep */;
				game: unknown /* too deep */;
				leaveIncorrectOrientation: unknown /* too deep */;
				margin: unknown /* too deep */;
				onFullScreenChange: unknown /* too deep */;
				onFullScreenError: unknown /* too deep */;
				onFullScreenInit: unknown /* too deep */;
				onOrientationChange: unknown /* too deep */;
				onSizeChange: unknown /* too deep */;
				parentScaleFactor: unknown /* too deep */;
				scaleFactor: unknown /* too deep */;
				scaleFactorInverted: unknown /* too deep */;
				windowConstraints: unknown /* too deep */;
			};
			seededRandom: {
				frac(t: unknown): unknown;
				pick(t: unknown, i: unknown): unknown;
				shuffleArray(t: unknown, i: unknown): unknown;
				randomDataGenerator: unknown /* too deep */;
			};
			sound: {
				_codeMuted: boolean;
				_muted: boolean;
				_watching: boolean;
				connectToMaster: boolean;
				mute: boolean;
				muteOnPause: boolean;
				noAudio: boolean;
				touchLocked: boolean;
				baseLatency: number;
				channels: number;
				volume: number;
				_unlockSource: null;
				_watchCallback: null;
				_watchContext: null;
				_onResumeWebAudioOnClick(): void;
				_resumeWebAudioOnClick(): void;
				add(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				boot(): void;
				destroy(): void;
				pauseAll(): void;
				play(t: unknown, i: unknown, n: unknown): unknown;
				remove(t: unknown): unknown;
				removeAll(): void;
				removeByKey(t: unknown): unknown;
				resumeAll(): void;
				resumeWebAudio(): unknown;
				setDecodedCallback(t: unknown, i: unknown, n: unknown): void;
				setMute(): void;
				setTouchLock(): void;
				setTouchUnlock(): void;
				stopAll(): void;
				unlock(): unknown;
				unsetMute(): void;
				update(): void;
				context: AudioContext;
				emptyBuffer: AudioBuffer;
				_sounds: unknown /* too deep */;
				_watchList: unknown /* too deep */;
				game: unknown /* too deep */;
				onMute: unknown /* too deep */;
				onSoundDecode: unknown /* too deep */;
				onTouchUnlock: unknown /* too deep */;
				onUnMute: unknown /* too deep */;
				onVolumeChange: unknown /* too deep */;
				sounds: unknown /* too deep */;
			};
			stage: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			state: {
				_clearWorld: boolean;
				current: string;
				_pendingState: null;
				add(t: unknown, i: unknown, n: unknown): unknown;
				boot(): void;
				clearCurrentState(): void;
				destroy(): void;
				get(t: unknown): unknown;
				getCurrentState(): unknown;
				loadComplete(): void;
				pause(): void;
				preUpdate(): unknown;
				remove(t: unknown): void;
				resume(): void;
				setCurrentState(t: unknown): void;
				start(t: unknown, i: unknown): void;
				update(): void;
				_states: Map<string, unknown /* too deep */>;
				states: Map<string, unknown /* too deep */>;
				_current: unknown /* too deep */;
				_initArgs: unknown /* too deep */;
				_onStateChange: unknown /* too deep */;
				game: unknown /* too deep */;
				onStateChange: unknown /* too deep */;
			};
			time: {
				_deltaMS: number;
				_pauseStarted: number;
				_prevTimeMS: number;
				_started: number;
				_timeMS: number;
				deltaMS: number;
				desiredFps: number;
				pauseDuration: number;
				prevTimeMS: number;
				timeMS: number;
				timeToCall: number;
				add(t: unknown): unknown;
				boot(): void;
				create(t: unknown): unknown;
				elapsedSecondsSince(t: unknown): unknown;
				elapsedSince(t: unknown): unknown;
				gamePaused(): void;
				gameResumed(): void;
				removeAll(): void;
				reset(): void;
				setTime(t: unknown): void;
				totalElapsedSeconds(): unknown;
				update(t: unknown): void;
				updateTimers(): void;
				_timers: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			tweens: {
				add(t: unknown, i: unknown, n: unknown): unknown;
				create(t: unknown, i: unknown, n: unknown): unknown;
				destroy(): void;
				findOwnerForTween(t: unknown): unknown;
				getAll(): unknown;
				pauseAll(): void;
				remove(t: unknown): void;
				removeAll(): void;
				removeAllFromOwner(t: unknown): void;
				removeFrom(t: unknown, i: unknown): void;
				removeTweenFromOwner(t: unknown): unknown;
				resumeAll(): void;
				update(): unknown;
				_owners: Map<unknown /* too deep */, Set<unknown /* too deep */>>;
				_tweens: unknown /* too deep */;
				game: unknown /* too deep */;
			};
			world: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				disableVisibilityChange: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_hiddenVar: string;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				camera: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				boot(): void;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				checkVisibility(): void;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				parseConfig(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setBackgroundColor(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				visibilityChange(t: unknown): unknown;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				game: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
		};
		gameContainer: {
			bind(t: unknown): unknown;
			get(t: unknown): unknown;
			hasBinding(t: unknown): unknown;
			rebind(t: unknown): unknown;
			resolve(t: unknown): unknown;
			unbind(t: unknown): void;
			unbindAll(): void;
			inversifyContainer: {
				guid: string;
				_middleware: null;
				parent: null;
				_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
				_planAndResolve(): unknown;
				applyCustomMetadataReader(t: unknown): void;
				applyMiddleware(): unknown;
				bind(t: unknown): unknown;
				createChild(): unknown;
				get(t: unknown): unknown;
				getAll(t: unknown): unknown;
				getAllNamed(t: unknown, n: unknown): unknown;
				getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
				getNamed(t: unknown, n: unknown): unknown;
				getTagged(t: unknown, n: unknown, e: unknown): unknown;
				isBound(t: unknown): unknown;
				isBoundNamed(t: unknown, n: unknown): unknown;
				isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
				load(): unknown;
				rebind(t: unknown): unknown;
				resolve(n: unknown): unknown;
				restore(): void;
				snapshot(): void;
				unbind(t: unknown): void;
				unbindAll(): void;
				unload(): unknown;
				_bindingDictionary: unknown /* too deep */;
				_metadataReader: unknown /* too deep */;
				_snapshots: unknown /* too deep */;
				options: unknown /* too deep */;
			};
			SourceContainer: {
				guid: string;
				_middleware: null;
				parent: null;
				_get(t: unknown, n: unknown, e: unknown, i: unknown, o: unknown, a: unknown): unknown;
				_planAndResolve(): unknown;
				applyCustomMetadataReader(t: unknown): void;
				applyMiddleware(): unknown;
				bind(t: unknown): unknown;
				createChild(): unknown;
				get(t: unknown): unknown;
				getAll(t: unknown): unknown;
				getAllNamed(t: unknown, n: unknown): unknown;
				getAllTagged(t: unknown, n: unknown, e: unknown): unknown;
				getNamed(t: unknown, n: unknown): unknown;
				getTagged(t: unknown, n: unknown, e: unknown): unknown;
				isBound(t: unknown): unknown;
				isBoundNamed(t: unknown, n: unknown): unknown;
				isBoundTagged(t: unknown, n: unknown, e: unknown): unknown;
				load(): unknown;
				rebind(t: unknown): unknown;
				resolve(n: unknown): unknown;
				restore(): void;
				snapshot(): void;
				unbind(t: unknown): void;
				unbindAll(): void;
				unload(): unknown;
				_bindingDictionary: unknown /* too deep */;
				_metadataReader: unknown /* too deep */;
				_snapshots: unknown /* too deep */;
				options: unknown /* too deep */;
			};
		};
		giftBoxController: {
			completeOpenConjureCube(t: unknown, i: unknown): void;
			failedOpenConjureCube(t: unknown): void;
			getGiftBoxesCount(t: unknown): unknown;
			getUnopenedConjureCubesCount(): unknown;
			hasConjureCubes(): unknown;
			isConjureCubeGiftBox(t: unknown): unknown;
			openConjureCube(t: unknown): void;
			receiveGiftBox(t: unknown, i: unknown): void;
			setupGiftBoxes(t: unknown): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			giftBoxes: {};
			giftBoxesToOpen: never[];
		};
		giftBoxNetworkHandler: {
			getGiftBoxes(): void;
			getGiftBoxesFailure(): void;
			getGiftBoxesSuccess(t: unknown): void;
			setup(): void;
			startListeners(): void;
			stopListeners(): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		hints: {};
		icon: {
			createFromData(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown): unknown;
			createFromDataAdvanced(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			createIcon(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			createWithQuantity(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			gold(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			iconKey(t: unknown): unknown;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		load: {
			flagProvider: undefined;
			assets(t: unknown, n: unknown): unknown;
			fileWasCompleted(t: unknown, i: unknown, n: unknown, e: unknown): void;
			fileWasStarted(t: unknown, i: unknown, n: unknown): void;
			isFileLoaded(t: unknown): unknown;
			loadComplete(t: unknown): void;
			loadSpritesheet(t: unknown, i: unknown, n: unknown): void;
			postUpdate(t: unknown): void;
			process(): void;
			processCompletedCallbacks(): void;
			processFile(t: unknown): void;
			processPackCallbacks(t: unknown, i: unknown): void;
			removeAllAssets(t: unknown, i: unknown): void;
			removeAssets(t: unknown): void;
			removeSpine(t: unknown): unknown;
			reset(t: unknown): void;
			sendDownloadMetric(t: unknown): void;
			setLoader(): void;
			_assetsArray: never[];
			_fileDownloadTimes: {
				"atlas-10": unknown /* too deep */;
				"atlas-110": unknown /* too deep */;
				"atlas-121": unknown /* too deep */;
				"atlas-144": unknown /* too deep */;
				"atlas-145": unknown /* too deep */;
				"atlas-148": unknown /* too deep */;
				"atlas-149": unknown /* too deep */;
				"atlas-157": unknown /* too deep */;
				"atlas-158": unknown /* too deep */;
				"atlas-160": unknown /* too deep */;
				"atlas-161": unknown /* too deep */;
				"atlas-166": unknown /* too deep */;
				"atlas-169": unknown /* too deep */;
				"atlas-179": unknown /* too deep */;
				"atlas-18": unknown /* too deep */;
				"atlas-180": unknown /* too deep */;
				"atlas-181": unknown /* too deep */;
				"atlas-189": unknown /* too deep */;
				"atlas-19": unknown /* too deep */;
				"atlas-21": unknown /* too deep */;
				"atlas-22": unknown /* too deep */;
				"atlas-29": unknown /* too deep */;
				"atlas-50": unknown /* too deep */;
				"atlas-8": unknown /* too deep */;
				"atlas-9": unknown /* too deep */;
				"bgm-17": unknown /* too deep */;
				"bgm-3": unknown /* too deep */;
				"female-outfit-46": unknown /* too deep */;
				"female-outfit-63": unknown /* too deep */;
				"icon-fossil-5": unknown /* too deep */;
				"icon-item-34": unknown /* too deep */;
				"icon-pet-4": unknown /* too deep */;
				"icon-pet-94": unknown /* too deep */;
				"icon-weapon-63": unknown /* too deep */;
				"map-pathing": unknown /* too deep */;
				"map-shiverchill-a4": unknown /* too deep */;
				"player-face-13": unknown /* too deep */;
				"player-face-2": unknown /* too deep */;
				"player-hair-1": unknown /* too deep */;
				"player-hat-24": unknown /* too deep */;
				"player-hat-33": unknown /* too deep */;
				"player-head-1": unknown /* too deep */;
				"player-neck-1": unknown /* too deep */;
				"player-weapon-5": unknown /* too deep */;
				"sfx-18": unknown /* too deep */;
				"sfx-19": unknown /* too deep */;
				"sfx-31": unknown /* too deep */;
				"sfx-46": unknown /* too deep */;
				"singleImage-5": unknown /* too deep */;
				"spine-147": unknown /* too deep */;
				"spine-184": unknown /* too deep */;
				"spine-25": unknown /* too deep */;
				"tileset-collisions": unknown /* too deep */;
				"tileset-icecave-new": unknown /* too deep */;
				"tileset-ship-exterior": unknown /* too deep */;
				"tileset-water-new": unknown /* too deep */;
				"voice-10-65": unknown /* too deep */;
			};
			_flagProvider: {
				getClassCodePromptCurriculumBlacklist(): unknown;
				getDataURI(): unknown;
				getFeatureRevisionsURIs(): unknown;
				getMultiplayerClusterForWorld(t: unknown): unknown;
				getValue(t: unknown, i: unknown): unknown;
				getWorkerPath(t: unknown): unknown;
				initializeWithJson(t: unknown): void;
				isEventEnabled(t: unknown): unknown;
				isFeatureEnabled(t: unknown): unknown;
				environment: unknown /* too deep */;
				jsonData: unknown /* too deep */;
			};
			_loader: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			loader: {
				isLoading: boolean;
				_crossOrigin: string;
				baseURL: string;
				crossOrigin: string;
				addFile(t: unknown, i: unknown, n: unknown, e: unknown): void;
				atlasJSONHash(t: unknown, i: unknown, n: unknown): void;
				audio(t: unknown, i: unknown, n: unknown, e: unknown): void;
				destroy(): void;
				fileCompleteCallback(t: unknown, i: unknown): void;
				fileStartCallback(t: unknown): void;
				getMaxParallelDownloads(): unknown;
				getNumLoadedFiles(): unknown;
				image(t: unknown, i: unknown, n: unknown, e: unknown): void;
				json(t: unknown, i: unknown, n: unknown, e: unknown): void;
				processImage(t: unknown, i: unknown, n: unknown): void;
				processJSON(t: unknown, i: unknown, n: unknown): void;
				processScript(t: unknown, i: unknown): void;
				processSound(t: unknown, i: unknown, n: unknown): void;
				processSpine(t: unknown, i: unknown, n: unknown): void;
				processSpritesheet(t: unknown, i: unknown, n: unknown): void;
				processTextureAtlas(t: unknown, i: unknown, n: unknown): void;
				reset(t: unknown): void;
				script(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
				setupFileCallbacks(t: unknown): void;
				spine(t: unknown, i: unknown, n: unknown, e: unknown): void;
				spritesheet(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): void;
				start(): void;
				totalQueuedFiles(): unknown;
				_loader: unknown /* too deep */;
				_onFileComplete: unknown /* too deep */;
				_onFileStart: unknown /* too deep */;
				_onLoadComplete: unknown /* too deep */;
				loader: unknown /* too deep */;
				onFileComplete: unknown /* too deep */;
				onFileStart: unknown /* too deep */;
				onLoadComplete: unknown /* too deep */;
				onReset: unknown /* too deep */;
			};
		};
		mailNetworkHandler: {
			deleteMail(t: unknown, i: unknown): void;
			deleteMailFailure(): void;
			deleteMailSuccessful(t: unknown, i: unknown): void;
			getAllMail(t: unknown, i: unknown): void;
			getAllMailFailure(): void;
			getAllMailSuccess(t: unknown): void;
			getMailerData(): unknown;
			getTotalMail(t: unknown): void;
			getTotalMailFailure(): void;
			getTotalMailSuccess(t: unknown, i: unknown): void;
			markAsRead(t: unknown, i: unknown): void;
			markAsReadFailure(): void;
			setup(): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			totalMail: {
				total: number;
				totalRead: number;
				totalUnread: number;
				splitTestKeys: unknown /* too deep */;
			};
		};
		messageListener: {
			add(t: unknown, i: unknown, n: unknown): void;
			clear(t: unknown): void;
			onMessage(t: unknown): void;
			receivers: never[];
		};
		metricsManager: {
			_supportsWasm: boolean;
			crashedLastLogin: boolean;
			_averageDownloadSpeed: number;
			_networkRequestCount: number;
			_totalAssetDownloadSize: number;
			_totalAssetDownloadTime: number;
			_totalAssetsDownloaded: number;
			lastGameSessionStartTime: number;
			timeInLoadingMS: number;
			_renderType: string;
			crashedLastTime: string;
			renderType: string;
			timeToPlayMS: null;
			assetDownloaded(t: unknown, i: unknown): void;
			checkForCrash(): void;
			createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
			getCustomMetrics(): unknown;
			getLastGameSessionStartTime(): unknown;
			increaseNetworkRequestCount(): void;
			objectCreated(t: unknown): void;
			objectDestroyed(t: unknown): void;
			sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
			setInBattle(t: unknown): void;
			setLastGameSessionStartTime(t: unknown): void;
			setLastMapLoadStarted(t: unknown): void;
			deviceInfoProvider: {
				getConnection(): unknown;
				getConnectionDownlinkSpeed(): unknown;
				getConnectionEffectiveType(): unknown;
				getConnectionRTT(): unknown;
				getConnectionType(): unknown;
				getDeviceMemory(): unknown;
				getHardwareConcurrency(): unknown;
				getJSHeapSizeLimit(): unknown;
				getPlatformName(): unknown;
				getScreenHeight(): unknown;
				getScreenWidth(): unknown;
				getUsedJSHeapSize(): unknown;
				isVideoAvailable(): unknown;
				isWebGLAvailable(): unknown;
				isWebSocketAvailable(): unknown;
				isWebWorkerAvailable(): unknown;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			gameCompleteDataFactory: {
				buildBaseEvent(t: unknown, i: unknown, n: unknown): unknown;
				create(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown, h: unknown, u: unknown, c: unknown, l: unknown, b: unknown): unknown;
				getGame(): unknown;
				game: unknown /* too deep */;
				gameEventDataBuilder: unknown /* too deep */;
			};
			loadingMetricProperties: never[];
			objectCountProperties: never[];
		};
		notifications: {
			isPlaying: boolean;
			notificationSocialLogin: boolean;
			timerOverride: boolean;
			fetchTimeout: number;
			currentNotification: null;
			timerDispatch: null;
			broadcastSocialFeedEvent(t: unknown, i: unknown, n: unknown): void;
			canPlayNotification(): unknown;
			clearNotificationDispatch(t: unknown): void;
			clearNotifications(t: unknown): void;
			createUserFeed(t: unknown, i: unknown, n: unknown): void;
			createUserFeedFailure(): void;
			createUserFeedSuccess(t: unknown, i: unknown): void;
			deleteNotification(t: unknown, i: unknown): void;
			deleteUserFeed(t: unknown, i: unknown): void;
			deleteUserFeedSuccess(t: unknown, i: unknown): void;
			getConfig(t: unknown): unknown;
			getSocialNotifications(t: unknown): void;
			getUserFeedFailure(): void;
			getUserFeedSuccess(t: unknown): void;
			initGenericNotification(t: unknown): void;
			initMemberNotification(): void;
			initNotificationWithTimer(t: unknown, i: unknown, n: unknown): unknown;
			initSocialNotification(t: unknown, i: unknown, n: unknown): void;
			isPaused(): unknown;
			likeNotification(t: unknown, i: unknown): void;
			likeUserFeed(t: unknown, i: unknown): void;
			likeUserFeedSuccess(t: unknown, i: unknown): void;
			notificationPlayed(): void;
			onPause(): void;
			onResume(): void;
			pause(t: unknown): void;
			playNextNotification(): void;
			playNootDialogue(t: unknown): void;
			playNotification(t: unknown): void;
			pushNotification(t: unknown): void;
			resume(t: unknown): void;
			shareNotification(t: unknown, i: unknown): void;
			shareUserFeed(t: unknown, i: unknown): void;
			shareUserFeedSuccess(t: unknown, i: unknown): void;
			shouldShareMembership(t: unknown, i: unknown): void;
			startFriendTimer(): void;
			startTimer(i: unknown): void;
			stopFriendTimer(): void;
			stopTimer(): void;
			getFeedDate: Date;
			notificationBlockers: Set<never>;
			friendNotificationQueue: never[];
			friendNotificationTimer: {
				loop: boolean;
				pendingDelete: boolean;
				delay: number;
				repeatCount: number;
				tick: number;
				callback(t: unknown): void;
				args: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				timer: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			notificationQueue: never[];
			notificationTimer: {
				loop: boolean;
				pendingDelete: boolean;
				delay: number;
				repeatCount: number;
				tick: number;
				callback(): void;
				args: unknown /* too deep */;
				callbackContext: unknown /* too deep */;
				timer: unknown /* too deep */;
			};
		};
		open: {
			chatMenu: null;
			advancedNameChange(t: unknown, i: unknown, n: unknown): void;
			adventureComplete(): unknown;
			adventureContinueRestart(t: unknown): unknown;
			adventureMap(t: unknown, i: unknown): unknown;
			alert(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			archiveEntranceMenu(t: unknown, i: unknown): unknown;
			arena(): void;
			backpack(): void;
			bannerDialog(t: unknown): void;
			battlePotionSelect(t: unknown, i: unknown): unknown;
			boostSelect(t: unknown, i: unknown): void;
			bossRewards(t: unknown, i: unknown, n: unknown): unknown;
			bountyBoard(): void;
			bountyStore(): void;
			card(t: unknown, i: unknown, n: unknown): void;
			character(): void;
			characterDialogue(t: unknown, i: unknown, n: unknown): unknown;
			chat(t: unknown): void;
			choosePet(t: unknown, i: unknown): void;
			classModeMessage(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): void;
			cleanup(): void;
			close(t: unknown): void;
			closeChat(): void;
			confirmationDialog(t: unknown): unknown;
			confirmationDialogNoIconButtons(t: unknown): unknown;
			confirmationDialogWideButtons(t: unknown): unknown;
			confirmPotionUse(t: unknown): void;
			conjureCube(t: unknown): void;
			coOpModal(t: unknown): unknown;
			coOpTeamSelect(t: unknown, i: unknown): unknown;
			dailyQuestionsMenu(t: unknown, i: unknown, n: unknown): unknown;
			dungeonExitMenu(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			dungeonPrizesMenu(t: unknown, i: unknown, n: unknown): unknown;
			dungeonRoulette(t: unknown): unknown;
			epicBoostMachine(t: unknown, i: unknown): void;
			evolutionSummary(t: unknown, i: unknown): unknown;
			firstNameSelector(t: unknown, i: unknown): void;
			friendRequests(t: unknown): void;
			friendsList(): unknown;
			fromFactory(t: unknown): void;
			gotItem(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			heartSummary(t: unknown, i: unknown): unknown;
			hideActiveMenu(): void;
			houseEditorMenu(t: unknown, i: unknown): unknown;
			houseItemInfo(t: unknown, i: unknown, n: unknown): void;
			houseStore(t: unknown, i: unknown, n: unknown): void;
			informationDialog(t: unknown): unknown;
			isMenuOpen(t: unknown): unknown;
			itemInfo(t: unknown, i: unknown, n: unknown): void;
			keystonePedestals(t: unknown): unknown;
			lamplightLevelLock(t: unknown): void;
			learningEfficacySkipPopup(t: unknown, i: unknown, n: unknown): unknown;
			learnMore(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			legacyStore(t: unknown): void;
			mailer(t: unknown, i: unknown, n: unknown): unknown;
			map(t: unknown, i: unknown, n: unknown): void;
			memberAdSuppressionToolTip(t: unknown, i: unknown, n: unknown): unknown;
			membershipInfo(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, o: unknown): unknown;
			membershipParent(t: unknown, i: unknown, n: unknown, e: unknown, r: unknown): unknown;
			membershipSchoolAd(t: unknown): unknown;
			membershipSuccess(t: unknown, i: unknown): unknown;
			membershipYouTubeAd(t: unknown, i: unknown, n: unknown): void;
			menuCloseAll(): void;
			menuCloseAllUntil(t: unknown): void;
			menuOpen(t: unknown): void;
			message(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown): unknown;
			messageBox(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			messageBoxClose(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown): unknown;
			messageBoxGeneric(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, h: unknown, o: unknown): unknown;
			messageBoxOkay(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, h: unknown, o: unknown, u: unknown): unknown;
			nameChange(t: unknown, i: unknown): void;
			networkError(t: unknown): unknown;
			nicknamer(t: unknown, i: unknown, n: unknown): void;
			openMail(t: unknown): unknown;
			optionsMenu(t: unknown): void;
			orbSelectionMenu(t: unknown): unknown;
			overlayToolTip(t: unknown, i: unknown, n: unknown): unknown;
			parentalLinkAtSchoolPrompt(t: unknown, i: unknown): void;
			parentalLinkSuccessPrompt(t: unknown): unknown;
			parentalLoginPopup(): void;
			petBook(t: unknown): unknown;
			petInfo(t: unknown, i: unknown): unknown;
			pets(): void;
			petsCustomDialog(t: unknown): unknown;
			PopUpModal(t: unknown): unknown;
			pouch(t: unknown, i: unknown, n: unknown): void;
			prefabMenu(t: unknown, i: unknown): unknown;
			pvpPrizes(t: unknown): unknown;
			rating(t: unknown): void;
			registration(t: unknown, i: unknown, n: unknown): void;
			resultsMenu(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			reward(t: unknown, i: unknown): void;
			secureBattleItemInfo(t: unknown, i: unknown, n: unknown): void;
			secureBattlePotionSelect(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			sendShopLoadEventToGTM(t: unknown, i: unknown, n: unknown): void;
			server(t: unknown, i: unknown, n: unknown): void;
			serverSelectMode(t: unknown, i: unknown, n: unknown, e: unknown): void;
			setActiveMenu(t: unknown): void;
			setActiveRenderMenu(t: unknown): void;
			showVideoPopup(t: unknown, i: unknown): unknown;
			social(t: unknown): void;
			socialFeed(t: unknown, i: unknown): unknown;
			spellSummary(t: unknown, i: unknown): unknown;
			springfestClassModeMessage(t: unknown, i: unknown, n: unknown, e: unknown): void;
			startRegistration(t: unknown, i: unknown): void;
			store(t: unknown, i: unknown, n: unknown): void;
			stylistStore(t: unknown, i: unknown, n: unknown): unknown;
			supportPageDialog(t: unknown): void;
			survey(t: unknown, i: unknown): void;
			titanProgress(t: unknown): unknown;
			topHeavyInformationDialog(t: unknown): unknown;
			towerEntranceMenu(t: unknown, i: unknown): unknown;
			towerExitMenu(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			toyUnlock(t: unknown, i: unknown): void;
			twilightWheelPopup(): void;
			voucherRedemption(t: unknown, i: unknown, n: unknown): unknown;
			wizardNameSelector(t: unknown, i: unknown, n: unknown): void;
			yourPet(t: unknown, i: unknown): unknown;
			yourTeam(t: unknown): unknown;
			zoneProgress(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
			_localizer: {
				getText(t: unknown): unknown;
				setDataSource(t: unknown): void;
				dataSource: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			menuLayer: {
				_accessibleActive: boolean;
				_cacheAsBitmap: boolean;
				_destroyed: boolean;
				accessible: boolean;
				accessibleChildren: boolean;
				buttonMode: boolean;
				cacheAsBitmap: boolean;
				exists: boolean;
				fixedToCamera: boolean;
				interactive: boolean;
				interactiveChildren: boolean;
				isMask: boolean;
				isSprite: boolean;
				pendingDestroy: boolean;
				renderable: boolean;
				sortableChildren: boolean;
				sortDirty: boolean;
				visible: boolean;
				worldVisible: boolean;
				_boundsID: number;
				_eventsCount: number;
				_lastSortedIndex: number;
				_zIndex: number;
				alpha: number;
				angle: number;
				bottom: number;
				centerX: number;
				centerY: number;
				height: number;
				left: number;
				length: number;
				offsetX: number;
				offsetY: number;
				renderId: number;
				right: number;
				rotation: number;
				tabIndex: number;
				top: number;
				width: number;
				worldAlpha: number;
				worldRotation: number;
				x: number;
				y: number;
				z: number;
				zIndex: number;
				_sortProperty: string;
				accessiblePointerEvents: string;
				accessibleType: string;
				name: string;
				_accessibleDiv: null;
				_boundsRect: null;
				_cacheData: null;
				_enabledFilters: null;
				_mask: null;
				accessibleHint: null;
				accessibleTitle: null;
				cursor: null;
				filterArea: null;
				filters: null;
				hitArea: null;
				mask: null;
				_cacheAsBitmapDestroy(t: unknown): void;
				_calculateBounds(): void;
				_calculateCachedBounds(): void;
				_destroyCachedDisplayObject(): void;
				_getCachedLocalBounds(): unknown;
				_initCachedDisplayObject(t: unknown): void;
				_initCachedDisplayObjectCanvas(t: unknown): void;
				_recursivePostUpdateTransform(): void;
				_render(t: unknown): void;
				_renderCached(t: unknown): void;
				_renderCachedCanvas(t: unknown): void;
				_renderCanvas(t: unknown): void;
				_renderWebGL(t: unknown): void;
				add(t: unknown, i: unknown): unknown;
				addAt(t: unknown, i: unknown): unknown;
				addChild(): unknown;
				addChildAt(t: unknown, e: unknown): unknown;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				ascendingSortHandler(t: unknown, i: unknown): unknown;
				bringChildToTop(t: unknown): void;
				calculateBounds(): void;
				callAll(t: unknown, i: unknown): void;
				callbackFromArray(t: unknown, i: unknown): unknown;
				containerUpdateTransform(): void;
				descendingSortHandler(t: unknown, i: unknown): unknown;
				destroy(i: unknown): void;
				disableTempParent(t: unknown): void;
				displayObjectUpdateTransform(): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				enableTempParent(): unknown;
				eventNames(): unknown;
				getAt(t: unknown): unknown;
				getBounds(t: unknown, e: unknown): unknown;
				getByName(t: unknown): unknown;
				getChildAt(t: unknown): unknown;
				getChildByName(t: unknown, e: unknown): unknown;
				getChildIndex(t: unknown): unknown;
				getGlobalPosition(t: unknown, e: unknown): unknown;
				getIndex(t: unknown): unknown;
				getLocalBounds(e: unknown, r: unknown): unknown;
				iterate(t: unknown, i: unknown, n: unknown, e: unknown): unknown;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				moveDown(t: unknown): unknown;
				moveUp(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				onChildrenChange(t: unknown): void;
				remove(t: unknown, i: unknown): unknown;
				removeAll(t: unknown): void;
				removeAllListeners(t: unknown): unknown;
				removeBetween(t: unknown, i: unknown, n: unknown, e: unknown): void;
				removeChild(): unknown;
				removeChildAt(t: unknown): unknown;
				removeChildren(t: unknown, e: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown): void;
				renderAdvanced(t: unknown): void;
				renderAdvancedWebGL(t: unknown): void;
				renderCanvas(t: unknown): void;
				renderWebGL(t: unknown): void;
				sendChildToBack(t: unknown): void;
				setChildIndex(t: unknown, e: unknown): void;
				setParent(t: unknown): unknown;
				setTransform(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown, o: unknown, s: unknown, a: unknown, h: unknown): unknown;
				sort(t: unknown, i: unknown): void;
				sortChildren(): void;
				swap(t: unknown, i: unknown): void;
				swapChildren(t: unknown, e: unknown): void;
				toGlobal(t: unknown, e: unknown, r: unknown): unknown;
				toLocal(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				update(): void;
				updateTransform(): void;
				updateZ(): void;
				_bounds: unknown /* too deep */;
				_events: unknown /* too deep */;
				_game: unknown /* too deep */;
				_localBounds: unknown /* too deep */;
				_localBoundsRect: unknown /* too deep */;
				_tempDisplayObjectParent: unknown /* too deep */;
				_trackedPointers: unknown /* too deep */;
				anchor: unknown /* too deep */;
				bounds: unknown /* too deep */;
				children: unknown /* too deep */;
				events: unknown /* too deep */;
				gameObjectRef: unknown /* too deep */;
				localTransform: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				parent: unknown /* too deep */;
				pivot: unknown /* too deep */;
				position: unknown /* too deep */;
				scale: unknown /* too deep */;
				skew: unknown /* too deep */;
				stage: unknown /* too deep */;
				tempDisplayObjectParent: unknown /* too deep */;
				trackedPointers: unknown /* too deep */;
				transform: unknown /* too deep */;
				world: unknown /* too deep */;
				worldGamePosition: unknown /* too deep */;
				worldPosition: unknown /* too deep */;
				worldScale: unknown /* too deep */;
				worldTransform: unknown /* too deep */;
			};
			menus: never[];
			menusGameObject: {
				_isActive: boolean;
				_isActiveInHierarchy: boolean;
				active: boolean;
				activeInHierarchy: boolean;
				_layer: string;
				_name: string;
				layer: string;
				name: string;
				_transform: null;
				transform: null;
				activeInHierarchyChanged(): void;
				addChild(t: unknown): void;
				addChildAt(t: unknown, i: unknown): void;
				addComponent(t: unknown, i: unknown): unknown;
				bringToFront(): void;
				destroy(): void;
				dispatchComponentAddedInHierarchy(t: unknown, i: unknown): void;
				findChildByName(t: unknown): unknown;
				findComponent(t: unknown): unknown;
				findComponentInChildren(t: unknown, i: unknown): unknown;
				findComponentInParent(t: unknown, i: unknown): unknown;
				findComponents(t: unknown): unknown;
				findComponentsInChildren(t: unknown, i: unknown): unknown;
				getRenderOrder(): unknown;
				hasComponent(t: unknown): unknown;
				isActiveInHierarchy(): unknown;
				isInBack(): unknown;
				isInFront(): unknown;
				removeComponent(t: unknown): void;
				removeFromParent(): unknown;
				sendToBack(): void;
				setLayer(t: unknown, i: unknown): void;
				setParent(t: unknown, i: unknown): unknown;
				setRenderOrder(t: unknown): void;
				update(): void;
				_children: unknown /* too deep */;
				_components: unknown /* too deep */;
				_legacyTransform: unknown /* too deep */;
				_parent: unknown /* too deep */;
				children: unknown /* too deep */;
				components: unknown /* too deep */;
				legacyTransform: unknown /* too deep */;
				onActiveChanged: unknown /* too deep */;
				onActiveInHierarchyChanged: unknown /* too deep */;
				onChildAdded: unknown /* too deep */;
				onChildRemoved: unknown /* too deep */;
				onComponentAdded: unknown /* too deep */;
				onComponentAddedToHierarchy: unknown /* too deep */;
				onComponentRemoved: unknown /* too deep */;
				onDestroy: unknown /* too deep */;
				onHierarchyChanged: unknown /* too deep */;
				onLayerChanged: unknown /* too deep */;
				parent: unknown /* too deep */;
			};
			renderMenus: never[];
		};
		pvp: {
			battleScore(i: unknown, n: unknown, e: unknown, s: unknown): unknown;
			chooseAction(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown, u: unknown, c: unknown): unknown;
			chooseRandomMonster(i: unknown): unknown;
			endEpicArena(t: unknown, i: unknown): void;
			getBattleLevel(t: unknown): unknown;
			getTeam(t: unknown): unknown;
			initBackupEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initBattle(t: unknown, i: unknown): unknown;
			initEnemy(t: unknown, i: unknown, n: unknown): unknown;
			initMainEnemy(t: unknown, i: unknown): unknown;
			initMetrics(): void;
			initWizardOpponent(t: unknown): unknown;
			onEndBattle(): void;
			replaceOpponentTeam(i: unknown, n: unknown): unknown;
			start(i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			startEpicArena(t: unknown, i: unknown, n: unknown): unknown;
			startPVP(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown, r: unknown, o: unknown): void;
			battleStats: {
				endHealth: number;
				endTime: number;
				enemySpellsCast: number;
				enemySpellsCastFail: number;
				energy: number;
				energyCost: number;
				spellsCast: number;
				spellsFailed: number;
				startHealth: number;
				startTime: number;
				type: string;
				epicAttack: null;
				spellEnergyCost: null;
				battleCustomMeta: unknown /* too deep */;
				consumablesUsed: unknown /* too deep */;
				pets: unknown /* too deep */;
				petsRescued: unknown /* too deep */;
				rescuesSuccessful: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			metricsManager: {
				_supportsWasm: boolean;
				crashedLastLogin: boolean;
				_averageDownloadSpeed: number;
				_networkRequestCount: number;
				_totalAssetDownloadSize: number;
				_totalAssetDownloadTime: number;
				_totalAssetsDownloaded: number;
				lastGameSessionStartTime: number;
				timeInLoadingMS: number;
				_renderType: string;
				crashedLastTime: string;
				renderType: string;
				timeToPlayMS: null;
				assetDownloaded(t: unknown, i: unknown): void;
				checkForCrash(): void;
				createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
				getCustomMetrics(): unknown;
				getLastGameSessionStartTime(): unknown;
				increaseNetworkRequestCount(): void;
				objectCreated(t: unknown): void;
				objectDestroyed(t: unknown): void;
				sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
				setInBattle(t: unknown): void;
				setLastGameSessionStartTime(t: unknown): void;
				setLastMapLoadStarted(t: unknown): void;
				deviceInfoProvider: unknown /* too deep */;
				game: unknown /* too deep */;
				gameCompleteDataFactory: unknown /* too deep */;
				loadingMetricProperties: unknown /* too deep */;
				objectCountProperties: unknown /* too deep */;
			};
		};
		skin: {
			applyFestFlag(): void;
			applySkin(t: unknown, i: unknown): void;
			checkForExclusiveMap(t: unknown): unknown;
			cleanupSkins(): void;
			getActiveFestivals(): unknown;
			getAssets(t: unknown): unknown;
			getButtons(): unknown;
			getFestival(t: unknown): unknown;
			init(t: unknown, i: unknown): unknown;
			isFestivalActive(t: unknown): unknown;
			active: unknown /* too deep */[];
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			gameFestivalsData: unknown /* too deep */[];
		};
		textureAbove: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: unknown /* too deep */;
				colorTextures: unknown /* too deep */;
				disposeRunner: unknown /* too deep */;
				glFramebuffers: unknown /* too deep */;
			};
			orig: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			size: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			textureCacheIds: never[];
		};
		textureBelow: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: unknown /* too deep */;
				colorTextures: unknown /* too deep */;
				disposeRunner: unknown /* too deep */;
				glFramebuffers: unknown /* too deep */;
			};
			orig: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			size: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			textureCacheIds: never[];
		};
		textureMenu: {
			noFrame: boolean;
			rotated: boolean;
			valid: boolean;
			_eventsCount: number;
			_rotate: number;
			_updateID: number;
			height: number;
			resolution: number;
			rotate: number;
			width: number;
			filterFrame: null;
			filterPoolKey: null;
			legacyRenderer: null;
			patternCache: null;
			sourceFrame: null;
			tintCache: null;
			uvMatrix: null;
			trim: undefined;
			_updateUvs(): void;
			addListener(t: unknown, e: unknown, r: unknown): unknown;
			castToBaseTexture(): unknown;
			clear(): void;
			clone(): unknown;
			destroy(i: unknown): void;
			emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
			eventNames(): unknown;
			listenerCount(t: unknown): unknown;
			listeners(t: unknown): unknown;
			off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			on(t: unknown, e: unknown, r: unknown): unknown;
			onBaseTextureUpdated(t: unknown): unknown;
			once(t: unknown, e: unknown, r: unknown): unknown;
			removeAllListeners(t: unknown): unknown;
			removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
			render(t: unknown, i: unknown, n: unknown): void;
			renderRawXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			renderXY(t: unknown, i: unknown, n: unknown, e: unknown): void;
			resize(t: unknown, e: unknown, r: unknown): void;
			setFrame(t: unknown): void;
			setResolution(t: unknown): void;
			update(): void;
			updateUvs(): void;
			_events: {};
			_frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			_renderer: {
				autoDensity: boolean;
				autoResize: boolean;
				clearBeforeRender: boolean;
				preserveDrawingBuffer: boolean;
				renderingToScreen: boolean;
				transparent: boolean;
				_backgroundColor: number;
				_eventsCount: number;
				backgroundColor: number;
				CONTEXT_UID: number;
				height: number;
				resolution: number;
				type: number;
				width: number;
				_backgroundColorString: string;
				addListener(t: unknown, e: unknown, r: unknown): unknown;
				addSystem(t: unknown, e: unknown): unknown;
				clear(): void;
				destroy(t: unknown): void;
				emit(t: unknown, e: unknown, i: unknown, n: unknown, o: unknown, s: unknown): unknown;
				eventNames(): unknown;
				generateTexture(t: unknown, e: unknown, r: unknown, i: unknown): unknown;
				initPlugins(t: unknown): void;
				listenerCount(t: unknown): unknown;
				listeners(t: unknown): unknown;
				off(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				on(t: unknown, e: unknown, r: unknown): unknown;
				once(t: unknown, e: unknown, r: unknown): unknown;
				removeAllListeners(t: unknown): unknown;
				removeListener(t: unknown, e: unknown, i: unknown, n: unknown): unknown;
				render(t: unknown, e: unknown, r: unknown, i: unknown, n: unknown): void;
				reset(): unknown;
				resize(t: unknown, r: unknown): void;
				gl: WebGL2RenderingContext;
				view: HTMLCanvasElement;
				_backgroundColorRgba: unknown /* too deep */;
				_events: unknown /* too deep */;
				_lastObjectRendered: unknown /* too deep */;
				batch: unknown /* too deep */;
				context: unknown /* too deep */;
				extract: unknown /* too deep */;
				filter: unknown /* too deep */;
				framebuffer: unknown /* too deep */;
				geometry: unknown /* too deep */;
				globalUniforms: unknown /* too deep */;
				mask: unknown /* too deep */;
				options: unknown /* too deep */;
				plugins: unknown /* too deep */;
				projection: unknown /* too deep */;
				renderTexture: unknown /* too deep */;
				runners: unknown /* too deep */;
				scissor: unknown /* too deep */;
				screen: unknown /* too deep */;
				shader: unknown /* too deep */;
				state: unknown /* too deep */;
				stencil: unknown /* too deep */;
				texture: unknown /* too deep */;
				textureGC: unknown /* too deep */;
				textureManager: unknown /* too deep */;
			};
			_uvs: {
				x0: number;
				x1: number;
				x2: number;
				x3: number;
				y0: number;
				y1: number;
				y2: number;
				y3: number;
				set(t: unknown, e: unknown, r: unknown): void;
				uvsFloat32: Float32Array;
			};
			baseTexture: never;
			crop: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			defaultAnchor: {
				x: number;
				y: number;
				clone(): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				equals(t: unknown): unknown;
				set(t: unknown, e: unknown): unknown;
			};
			frame: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			framebuffer: {
				depth: boolean;
				stencil: boolean;
				dirtyFormat: number;
				dirtyId: number;
				dirtySize: number;
				height: number;
				multisample: number;
				width: number;
				depthTexture: null;
				addColorTexture(e: unknown, r: unknown): unknown;
				addDepthTexture(e: unknown): unknown;
				destroyDepthTexture(): void;
				dispose(): void;
				enableDepth(): unknown;
				enableStencil(): unknown;
				resize(t: unknown, e: unknown): void;
				colorTexture: unknown /* too deep */;
				colorTextures: unknown /* too deep */;
				disposeRunner: unknown /* too deep */;
				glFramebuffers: unknown /* too deep */;
			};
			orig: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			size: {
				bottom: number;
				height: number;
				left: number;
				right: number;
				top: number;
				type: number;
				width: number;
				x: number;
				y: number;
				ceil(t: unknown, e: unknown): unknown;
				clone(): unknown;
				contains(t: unknown, e: unknown): unknown;
				copy(t: unknown): unknown;
				copyFrom(t: unknown): unknown;
				copyTo(t: unknown): unknown;
				enlarge(t: unknown): unknown;
				fit(t: unknown): unknown;
				pad(t: unknown, e: unknown): unknown;
			};
			textureCacheIds: never[];
		};
		timeManager: {
			isServerDeltaSet: boolean;
			_timezoneOffset: number;
			serverTimeDeltaMs: number;
			getIsServerDeltaSet(): unknown;
			getLocalTimeMs(): unknown;
			getServerTimeDeltaMs(): unknown;
			getServerTimeMs(): unknown;
			getUTCOffset(): unknown;
			setServerTime(t: unknown): void;
		};
		titansNetworkHandler: {
			titan: null;
			getTitan(t: unknown, i: unknown): void;
			getTitanFailure(t: unknown): void;
			getTitans(): void;
			getTitansSuccess(t: unknown): void;
			getTitanSuccess(t: unknown, i: unknown): void;
			getTitanUserData(): void;
			hitTitan(t: unknown, i: unknown): void;
			hitTitanSuccess(t: unknown): void;
			isNewTitan(): unknown;
			isTitanAlive(): unknown;
			networkCallFailure(): void;
			setup(): void;
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
		};
		urlProvider: {
			getAPIRootUrl(): unknown;
			getCDNRootUrl(): unknown;
			getCortexRootURL(): unknown;
			getLoaderUrl(): unknown;
			getWorkerPath(t: unknown): unknown;
			environmentProvider: {
				getCurrentEnvironment(): unknown;
				getCurrentEnvironmentByHost(): unknown;
				getEnvironmentString(): unknown;
				getWindowHost(): unknown;
				getWindowQueryString(): unknown;
			};
		};
		world: {
			currentMap: string;
			_(t: unknown, i: unknown, n: unknown, e: unknown, s: unknown): void;
			canTeleportInto(t: unknown): unknown;
			enter(): void;
			getCurrentCurrency(): unknown;
			getCurrentMap(): unknown;
			getCurrentZone(): unknown;
			getState(t: unknown): unknown;
			getTownState(t: unknown): unknown;
			getWorldDate(): unknown;
			getZone(t: unknown): unknown;
			goToZoneHub(t: unknown): void;
			inDeprecatedZone(): unknown;
			inRestrictedSocialZone(i: unknown): unknown;
			isMathTowerEnabledForPlayer(t: unknown, i: unknown): unknown;
			isValidLocation(t: unknown): unknown;
			isZoneSinglePlayer(i: unknown): unknown;
			playScene(t: unknown): void;
			process(): void;
			setCurrentMap(t: unknown): void;
			setState(t: unknown, i: unknown): void;
			setTownState(t: unknown, i: unknown): void;
			showZoneLocked(t: unknown, i: unknown): void;
			_metricsManager: {
				_supportsWasm: boolean;
				crashedLastLogin: boolean;
				_averageDownloadSpeed: number;
				_networkRequestCount: number;
				_totalAssetDownloadSize: number;
				_totalAssetDownloadTime: number;
				_totalAssetsDownloaded: number;
				lastGameSessionStartTime: number;
				timeInLoadingMS: number;
				_renderType: string;
				crashedLastTime: string;
				renderType: string;
				timeToPlayMS: null;
				assetDownloaded(t: unknown, i: unknown): void;
				checkForCrash(): void;
				createLoadingMetricEvent(t: unknown, n: unknown, r: unknown, h: unknown): unknown;
				getCustomMetrics(): unknown;
				getLastGameSessionStartTime(): unknown;
				increaseNetworkRequestCount(): void;
				objectCreated(t: unknown): void;
				objectDestroyed(t: unknown): void;
				sendLoadFunnelEvent(t: unknown, n: unknown, s: unknown, r: unknown, h: unknown): void;
				setInBattle(t: unknown): void;
				setLastGameSessionStartTime(t: unknown): void;
				setLastMapLoadStarted(t: unknown): void;
				deviceInfoProvider: unknown /* too deep */;
				game: unknown /* too deep */;
				gameCompleteDataFactory: unknown /* too deep */;
				loadingMetricProperties: unknown /* too deep */;
				objectCountProperties: unknown /* too deep */;
			};
			game: {
				_paused: boolean;
				_pausedByCode: boolean;
				isBooted: boolean;
				paused: boolean;
				pausedByCode: boolean;
				transparent: boolean;
				versioned: boolean;
				_height: number;
				_width: number;
				broadcastId: number;
				height: number;
				resolution: number;
				width: number;
				clientVersion: string;
				windowHeight: undefined;
				windowWidth: undefined;
				boot(): void;
				bootSystems(): void;
				createApp(i: unknown, n: unknown): unknown;
				createSystems(): void;
				destroy(): void;
				focusGain(t: unknown): void;
				focusLoss(t: unknown): void;
				gamePaused(t: unknown): void;
				gameResumed(t: unknown): void;
				init(): void;
				pauseGame(t: unknown): void;
				postUpdate(t: unknown): void;
				showDebugHeader(): void;
				toggleFpsGraph(): void;
				update(i: unknown): void;
				canvas: HTMLCanvasElement;
				parent: HTMLCanvasElement;
				_add: unknown /* too deep */;
				_app: unknown /* too deep */;
				_cache: unknown /* too deep */;
				_config: unknown /* too deep */;
				_consoleLogger: unknown /* too deep */;
				_device: unknown /* too deep */;
				_input: unknown /* too deep */;
				_load: unknown /* too deep */;
				_onPause: unknown /* too deep */;
				_onResume: unknown /* too deep */;
				_rnd: unknown /* too deep */;
				_scale: unknown /* too deep */;
				_sound: unknown /* too deep */;
				_stage: unknown /* too deep */;
				_state: unknown /* too deep */;
				_time: unknown /* too deep */;
				_tweens: unknown /* too deep */;
				add: unknown /* too deep */;
				app: unknown /* too deep */;
				broadcaster: unknown /* too deep */;
				cache: unknown /* too deep */;
				config: unknown /* too deep */;
				device: unknown /* too deep */;
				fps: unknown /* too deep */;
				frameWorkManager: unknown /* too deep */;
				input: unknown /* too deep */;
				inputDispatcher: unknown /* too deep */;
				load: unknown /* too deep */;
				onPause: unknown /* too deep */;
				onResume: unknown /* too deep */;
				renderer: unknown /* too deep */;
				rnd: unknown /* too deep */;
				scale: unknown /* too deep */;
				seededRandom: unknown /* too deep */;
				sound: unknown /* too deep */;
				stage: unknown /* too deep */;
				state: unknown /* too deep */;
				time: unknown /* too deep */;
				tweens: unknown /* too deep */;
				world: unknown /* too deep */;
			};
			pippetEncounterDaily: {
				completeValue: number;
				defaultValue: number;
				questId: number;
				stateName: string;
				complete(): void;
				getSpawn(): unknown;
				hasDateIdChanged(): unknown;
				init(): void;
				isComplete(): unknown;
				isInitialized(): unknown;
				game: unknown /* too deep */;
				player: unknown /* too deep */;
			};
			pippetEncounterSpawn: {
				dialogue: number;
				location: string;
			};
			zones: {
				academy: unknown /* too deep */;
				archives: unknown /* too deep */;
				bonfire_spire: unknown /* too deep */;
				crystal_caverns: unknown /* too deep */;
				darktower: unknown /* too deep */;
				dyno: unknown /* too deep */;
				earthtower: unknown /* too deep */;
				elemental_guardian: unknown /* too deep */;
				forest: unknown /* too deep */;
				house: unknown /* too deep */;
				lamplight: unknown /* too deep */;
				shipwreck_shore: unknown /* too deep */;
				shiverchill: unknown /* too deep */;
				skywatch: unknown /* too deep */;
				tower_town: unknown /* too deep */;
				toyzone: unknown /* too deep */;
			};
		};
	};
}